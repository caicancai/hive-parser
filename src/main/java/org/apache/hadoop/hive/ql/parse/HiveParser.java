// $ANTLR 3.4 HiveParser.g 2024-07-25 22:38:44

package org.apache.hadoop.hive.ql.parse;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;

import org.apache.hadoop.conf.Configuration;


import org.antlr.runtime.*;
import java.util.Stack;

import org.antlr.runtime.tree.*;
import org.apache.hadoop.hive.conf.HiveConf;


/**
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
@SuppressWarnings({"all", "warnings", "unchecked"})
public class HiveParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AMPERSAND", "BITWISEOR", "BITWISEXOR", "ByteLengthLiteral", "COLON", "COMMA", "CONCATENATE", "CharSetLiteral", "CharSetName", "DIV", "DIVIDE", "DOLLAR", "DOT", "Digit", "EQUAL", "EQUAL_NS", "Exponent", "GREATERTHAN", "GREATERTHANOREQUALTO", "HexDigit", "Identifier", "IntegralLiteral", "KW_ABORT", "KW_ACTIVATE", "KW_ACTIVE", "KW_ADD", "KW_ADMIN", "KW_AFTER", "KW_ALL", "KW_ALLOC_FRACTION", "KW_ALTER", "KW_ANALYZE", "KW_AND", "KW_ANY", "KW_APPLICATION", "KW_ARCHIVE", "KW_ARRAY", "KW_AS", "KW_ASC", "KW_AST", "KW_AT", "KW_AUTHORIZATION", "KW_AUTOCOMMIT", "KW_BEFORE", "KW_BETWEEN", "KW_BIGINT", "KW_BINARY", "KW_BOOLEAN", "KW_BOTH", "KW_BRANCH", "KW_BUCKET", "KW_BUCKETS", "KW_BY", "KW_CACHE", "KW_CASCADE", "KW_CASE", "KW_CAST", "KW_CBO", "KW_CHANGE", "KW_CHAR", "KW_CHECK", "KW_CHERRY_PICK", "KW_CLUSTER", "KW_CLUSTERED", "KW_CLUSTERSTATUS", "KW_COLLECTION", "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMMIT", "KW_COMPACT", "KW_COMPACTIONS", "KW_COMPACT_ID", "KW_COMPUTE", "KW_CONCATENATE", "KW_CONF", "KW_CONSTRAINT", "KW_CONTINUE", "KW_CONVERT", "KW_COST", "KW_CREATE", "KW_CRON", "KW_CROSS", "KW_CUBE", "KW_CURRENT", "KW_CURRENT_DATE", "KW_CURRENT_TIMESTAMP", "KW_CURSOR", "KW_DATA", "KW_DATABASE", "KW_DATABASES", "KW_DATACONNECTOR", "KW_DATACONNECTORS", "KW_DATE", "KW_DATETIME", "KW_DAY", "KW_DBPROPERTIES", "KW_DCPROPERTIES", "KW_DDL", "KW_DEBUG", "KW_DECIMAL", "KW_DEFAULT", "KW_DEFERRED", "KW_DEFINED", "KW_DELETE", "KW_DELIMITED", "KW_DEPENDENCY", "KW_DESC", "KW_DESCRIBE", "KW_DETAIL", "KW_DIRECTORIES", "KW_DIRECTORY", "KW_DISABLE", "KW_DISTINCT", "KW_DISTRIBUTE", "KW_DISTRIBUTED", "KW_DO", "KW_DOUBLE", "KW_DOW", "KW_DROP", "KW_DUMP", "KW_ELEM_TYPE", "KW_ELSE", "KW_ENABLE", "KW_END", "KW_ENFORCED", "KW_ESCAPED", "KW_EVERY", "KW_EXCEPT", "KW_EXCHANGE", "KW_EXCLUSIVE", "KW_EXECUTE", "KW_EXECUTED", "KW_EXISTS", "KW_EXPIRE_SNAPSHOTS", "KW_EXPLAIN", "KW_EXPORT", "KW_EXPRESSION", "KW_EXTENDED", "KW_EXTERNAL", "KW_EXTRACT", "KW_FALSE", "KW_FAST_FORWARD", "KW_FETCH", "KW_FIELDS", "KW_FILE", "KW_FILEFORMAT", "KW_FIRST", "KW_FLOAT", "KW_FLOOR", "KW_FOLLOWING", "KW_FOR", "KW_FORCE", "KW_FOREIGN", "KW_FORMAT", "KW_FORMATTED", "KW_FROM", "KW_FULL", "KW_FUNCTION", "KW_FUNCTIONS", "KW_GRANT", "KW_GROUP", "KW_GROUPING", "KW_HAVING", "KW_HOUR", "KW_IDXPROPERTIES", "KW_IF", "KW_IGNORE", "KW_IMPORT", "KW_IN", "KW_INDEX", "KW_INDEXES", "KW_INNER", "KW_INPATH", "KW_INPUTDRIVER", "KW_INPUTFORMAT", "KW_INSERT", "KW_INT", "KW_INTERSECT", "KW_INTERVAL", "KW_INTO", "KW_IS", "KW_ISOLATION", "KW_ITEMS", "KW_JAR", "KW_JOIN", "KW_JOINCOST", "KW_KEY", "KW_KEYS", "KW_KEY_TYPE", "KW_KILL", "KW_LAST", "KW_LATERAL", "KW_LEADING", "KW_LEFT", "KW_LESS", "KW_LEVEL", "KW_LIKE", "KW_LIMIT", "KW_LINES", "KW_LOAD", "KW_LOCAL", "KW_LOCATION", "KW_LOCK", "KW_LOCKS", "KW_LOGICAL", "KW_LONG", "KW_MACRO", "KW_MANAGED", "KW_MANAGEDLOCATION", "KW_MANAGEMENT", "KW_MAP", "KW_MAPJOIN", "KW_MAPPING", "KW_MATCHED", "KW_MATERIALIZED", "KW_MERGE", "KW_METADATA", "KW_MINUS", "KW_MINUTE", "KW_MONTH", "KW_MORE", "KW_MOVE", "KW_MSCK", "KW_NONE", "KW_NORELY", "KW_NOSCAN", "KW_NOT", "KW_NOVALIDATE", "KW_NULL", "KW_NULLS", "KW_OF", "KW_OFFSET", "KW_OLDER", "KW_ON", "KW_ONLY", "KW_OPERATOR", "KW_OPTIMIZE", "KW_OPTION", "KW_OR", "KW_ORDER", "KW_ORPHAN_FILES", "KW_OUT", "KW_OUTER", "KW_OUTPUTDRIVER", "KW_OUTPUTFORMAT", "KW_OVER", "KW_OVERWRITE", "KW_OWNER", "KW_PARTITION", "KW_PARTITIONED", "KW_PARTITIONS", "KW_PATH", "KW_PERCENT", "KW_PKFK_JOIN", "KW_PLAN", "KW_PLANS", "KW_PLUS", "KW_POOL", "KW_PRECEDING", "KW_PRECISION", "KW_PREPARE", "KW_PRESERVE", "KW_PRIMARY", "KW_PRINCIPALS", "KW_PROCEDURE", "KW_PURGE", "KW_QUALIFY", "KW_QUARTER", "KW_QUERY", "KW_QUERY_PARALLELISM", "KW_RANGE", "KW_READ", "KW_READS", "KW_REAL", "KW_REBUILD", "KW_RECORDREADER", "KW_RECORDWRITER", "KW_REDUCE", "KW_REFERENCES", "KW_REGEXP", "KW_RELOAD", "KW_RELY", "KW_REMOTE", "KW_RENAME", "KW_REOPTIMIZATION", "KW_REPAIR", "KW_REPL", "KW_REPLACE", "KW_REPLICATION", "KW_RESOURCE", "KW_RESPECT", "KW_RESTRICT", "KW_RETAIN", "KW_RETENTION", "KW_REVOKE", "KW_REWRITE", "KW_RIGHT", "KW_RLIKE", "KW_ROLE", "KW_ROLES", "KW_ROLLBACK", "KW_ROLLUP", "KW_ROW", "KW_ROWS", "KW_SCHEDULED", "KW_SCHEDULING_POLICY", "KW_SCHEMA", "KW_SCHEMAS", "KW_SECOND", "KW_SELECT", "KW_SEMI", "KW_SERDE", "KW_SERDEPROPERTIES", "KW_SERVER", "KW_SET", "KW_SETS", "KW_SET_CURRENT_SNAPSHOT", "KW_SHARED", "KW_SHOW", "KW_SHOW_DATABASE", "KW_SKEWED", "KW_SMALLINT", "KW_SNAPSHOT", "KW_SNAPSHOTS", "KW_SOME", "KW_SORT", "KW_SORTED", "KW_SPEC", "KW_SSL", "KW_START", "KW_STATISTICS", "KW_STATUS", "KW_STORED", "KW_STREAMTABLE", "KW_STRING", "KW_STRUCT", "KW_SUMMARY", "KW_SYNC", "KW_SYSTEM_TIME", "KW_SYSTEM_VERSION", "KW_TABLE", "KW_TABLES", "KW_TABLESAMPLE", "KW_TAG", "KW_TBLPROPERTIES", "KW_TEMPORARY", "KW_TERMINATED", "KW_THAN", "KW_THEN", "KW_TIME", "KW_TIMESTAMP", "KW_TIMESTAMPLOCALTZ", "KW_TINYINT", "KW_TO", "KW_TOUCH", "KW_TRAILING", "KW_TRANSACTION", "KW_TRANSACTIONAL", "KW_TRANSACTIONS", "KW_TRANSFORM", "KW_TRIGGER", "KW_TRIM", "KW_TRUE", "KW_TRUNCATE", "KW_TYPE", "KW_UNARCHIVE", "KW_UNBOUNDED", "KW_UNDO", "KW_UNION", "KW_UNIONTYPE", "KW_UNIQUE", "KW_UNIQUEJOIN", "KW_UNKNOWN", "KW_UNLOCK", "KW_UNMANAGED", "KW_UNSET", "KW_UNSIGNED", "KW_UPDATE", "KW_URI", "KW_URL", "KW_USE", "KW_USER", "KW_USING", "KW_UTC", "KW_UTCTIMESTAMP", "KW_VALIDATE", "KW_VALUES", "KW_VALUE_TYPE", "KW_VARCHAR", "KW_VECTORIZATION", "KW_VIEW", "KW_VIEWS", "KW_WAIT", "KW_WEEK", "KW_WHEN", "KW_WHERE", "KW_WHILE", "KW_WINDOW", "KW_WITH", "KW_WITHIN", "KW_WORK", "KW_WORKLOAD", "KW_WRITE", "KW_YEAR", "KW_ZONE", "LCURLY", "LESSTHAN", "LESSTHANOREQUALTO", "LINE_COMMENT", "LPAREN", "LSQUARE", "Letter", "MINUS", "MOD", "NOTEQUAL", "Number", "NumberLiteral", "PLUS", "QUERY_HINT", "QUESTION", "QuotedIdentifier", "RCURLY", "RPAREN", "RSQUARE", "RegexComponent", "SEMICOLON", "STAR", "StringLiteral", "TILDE", "WS", "KW_ANTI", "KW_BATCH", "KW_DAYOFWEEK", "KW_HOLD_DDLTIME", "KW_NO_DROP", "KW_OFFLINE", "KW_PROTECTION", "KW_READONLY", "KW_TIMESTAMPTZ", "TOK_ABORT_COMPACTIONS", "TOK_ABORT_TRANSACTIONS", "TOK_ACTIVATE", "TOK_ADD_TRIGGER", "TOK_ADMIN_OPTION_FOR", "TOK_ALIAS", "TOK_ALIASLIST", "TOK_ALLCOLREF", "TOK_ALLOC_FRACTION", "TOK_ALTERDATABASE_LOCATION", "TOK_ALTERDATABASE_MANAGEDLOCATION", "TOK_ALTERDATABASE_OWNER", "TOK_ALTERDATABASE_PROPERTIES", "TOK_ALTERDATACONNECTOR_OWNER", "TOK_ALTERDATACONNECTOR_PROPERTIES", "TOK_ALTERDATACONNECTOR_URL", "TOK_ALTERPARTITION_BUCKETS", "TOK_ALTERPARTITION_FILEFORMAT", "TOK_ALTERPARTITION_LOCATION", "TOK_ALTERPARTITION_MERGEFILES", "TOK_ALTERPARTITION_SERIALIZER", "TOK_ALTERPARTITION_SETSERDEPROPERTIES", "TOK_ALTERPARTITION_UNSETSERDEPROPERTIES", "TOK_ALTERPARTITION_UPDATECOLSTATS", "TOK_ALTERPARTITION_UPDATESTATS", "TOK_ALTERTABLE", "TOK_ALTERTABLE_ADDCOLS", "TOK_ALTERTABLE_ADDCONSTRAINT", "TOK_ALTERTABLE_ADDPARTS", "TOK_ALTERTABLE_ARCHIVE", "TOK_ALTERTABLE_BUCKETS", "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION", "TOK_ALTERTABLE_CLUSTER_SORT", "TOK_ALTERTABLE_COMPACT", "TOK_ALTERTABLE_CONVERT", "TOK_ALTERTABLE_CREATE_BRANCH", "TOK_ALTERTABLE_CREATE_TAG", "TOK_ALTERTABLE_DROPCONSTRAINT", "TOK_ALTERTABLE_DROPPARTS", "TOK_ALTERTABLE_DROPPROPERTIES", "TOK_ALTERTABLE_DROP_BRANCH", "TOK_ALTERTABLE_DROP_TAG", "TOK_ALTERTABLE_EXCHANGEPARTITION", "TOK_ALTERTABLE_EXECUTE", "TOK_ALTERTABLE_FILEFORMAT", "TOK_ALTERTABLE_LOCATION", "TOK_ALTERTABLE_MERGEFILES", "TOK_ALTERTABLE_OWNER", "TOK_ALTERTABLE_PARTCOLTYPE", "TOK_ALTERTABLE_PROPERTIES", "TOK_ALTERTABLE_RENAME", "TOK_ALTERTABLE_RENAMECOL", "TOK_ALTERTABLE_RENAMEPART", "TOK_ALTERTABLE_RENAME_BRANCH", "TOK_ALTERTABLE_REPLACECOLS", "TOK_ALTERTABLE_REPLACE_SNAPSHOTREF", "TOK_ALTERTABLE_SERIALIZER", "TOK_ALTERTABLE_SETPARTSPEC", "TOK_ALTERTABLE_SETSERDEPROPERTIES", "TOK_ALTERTABLE_SKEWED", "TOK_ALTERTABLE_SKEWED_LOCATION", "TOK_ALTERTABLE_TOUCH", "TOK_ALTERTABLE_UNARCHIVE", "TOK_ALTERTABLE_UNSETSERDEPROPERTIES", "TOK_ALTERTABLE_UPDATECOLSTATS", "TOK_ALTERTABLE_UPDATECOLUMNS", "TOK_ALTERTABLE_UPDATESTATS", "TOK_ALTERVIEW", "TOK_ALTERVIEW_ADDPARTS", "TOK_ALTERVIEW_AS", "TOK_ALTERVIEW_DROPPARTS", "TOK_ALTERVIEW_DROPPROPERTIES", "TOK_ALTERVIEW_PROPERTIES", "TOK_ALTERVIEW_RENAME", "TOK_ALTER_MAPPING", "TOK_ALTER_MATERIALIZED_VIEW", "TOK_ALTER_MATERIALIZED_VIEW_REBUILD", "TOK_ALTER_MATERIALIZED_VIEW_REWRITE", "TOK_ALTER_POOL", "TOK_ALTER_POOL_ADD_TRIGGER", "TOK_ALTER_POOL_DROP_TRIGGER", "TOK_ALTER_RP_DISABLE", "TOK_ALTER_RP_ENABLE", "TOK_ALTER_RP_RENAME", "TOK_ALTER_RP_REPLACE", "TOK_ALTER_RP_SET", "TOK_ALTER_RP_UNSET", "TOK_ALTER_RP_VALIDATE", "TOK_ALTER_SCHEDULED_QUERY", "TOK_ALTER_TRIGGER", "TOK_ANALYZE", "TOK_ARCHIVE", "TOK_AS_OF_TAG", "TOK_AS_OF_TIME", "TOK_AS_OF_VERSION", "TOK_BIGINT", "TOK_BINARY", "TOK_BLOCKING", "TOK_BOOLEAN", "TOK_BUCKET", "TOK_CACHE_METADATA", "TOK_CASCADE", "TOK_CHAR", "TOK_CHARSETLITERAL", "TOK_CHECK_CONSTRAINT", "TOK_CLUSTERBY", "TOK_COLTYPELIST", "TOK_COL_NAME", "TOK_COMMIT", "TOK_COMPACTION_STATUS", "TOK_COMPACTION_TYPE", "TOK_COMPACT_ID", "TOK_COMPACT_POOL", "TOK_CONSTRAINT_NAME", "TOK_CREATEDATABASE", "TOK_CREATEDATACONNECTOR", "TOK_CREATEFUNCTION", "TOK_CREATEMACRO", "TOK_CREATEROLE", "TOK_CREATETABLE", "TOK_CREATEVIEW", "TOK_CREATE_MAPPING", "TOK_CREATE_MATERIALIZED_VIEW", "TOK_CREATE_POOL", "TOK_CREATE_RP", "TOK_CREATE_SCHEDULED_QUERY", "TOK_CREATE_TRIGGER", "TOK_CRON", "TOK_CROSSJOIN", "TOK_CTE", "TOK_CUBE_GROUPBY", "TOK_DATABASECOMMENT", "TOK_DATABASELOCATION", "TOK_DATABASEPROPERTIES", "TOK_DATABASE_MANAGEDLOCATION", "TOK_DATACONNECTOR", "TOK_DATACONNECTORCOMMENT", "TOK_DATACONNECTOROWNER", "TOK_DATACONNECTORPROPERTIES", "TOK_DATACONNECTORTYPE", "TOK_DATACONNECTORURL", "TOK_DATE", "TOK_DATELITERAL", "TOK_DATETIME", "TOK_DAY", "TOK_DBNAME", "TOK_DBPROPLIST", "TOK_DB_TYPE", "TOK_DDL", "TOK_DECIMAL", "TOK_DEFAULT_POOL", "TOK_DEFAULT_VALUE", "TOK_DELETE", "TOK_DELETE_FROM", "TOK_DESCDATABASE", "TOK_DESCDATACONNECTOR", "TOK_DESCFUNCTION", "TOK_DESCTABLE", "TOK_DESTINATION", "TOK_DETAIL", "TOK_DIR", "TOK_DISABLE", "TOK_DISTRIBUTEBY", "TOK_DOUBLE", "TOK_DROPDATABASE", "TOK_DROPDATACONNECTOR", "TOK_DROPFUNCTION", "TOK_DROPMACRO", "TOK_DROPROLE", "TOK_DROPTABLE", "TOK_DROPVIEW", "TOK_DROP_MAPPING", "TOK_DROP_MATERIALIZED_VIEW", "TOK_DROP_POOL", "TOK_DROP_RP", "TOK_DROP_SCHEDULED_QUERY", "TOK_DROP_TRIGGER", "TOK_ENABLE", "TOK_EVERY", "TOK_EXCEPTALL", "TOK_EXCEPTDISTINCT", "TOK_EXECUTE", "TOK_EXECUTED_AS", "TOK_EXECUTE_PARAM_LIST", "TOK_EXPLAIN", "TOK_EXPLAIN_SQ_REWRITE", "TOK_EXPLIST", "TOK_EXPORT", "TOK_EXPRESSION", "TOK_FALSE", "TOK_FILE", "TOK_FILEFORMAT_GENERIC", "TOK_FLOAT", "TOK_FORCE", "TOK_FOREIGN_KEY", "TOK_FROM", "TOK_FROM_VERSION", "TOK_FULLOUTERJOIN", "TOK_FUNCTION", "TOK_FUNCTIONDI", "TOK_FUNCTIONSTAR", "TOK_GRANT", "TOK_GRANT_OPTION_FOR", "TOK_GRANT_ROLE", "TOK_GRANT_WITH_ADMIN_OPTION", "TOK_GRANT_WITH_OPTION", "TOK_GROUP", "TOK_GROUPBY", "TOK_GROUPING_SETS", "TOK_GROUPING_SETS_EXPRESSION", "TOK_HAVING", "TOK_HOUR", "TOK_IDENTITY", "TOK_IFEXISTS", "TOK_IFNOTEXISTS", "TOK_IGNORE_NULLS", "TOK_IMPORT", "TOK_INPUTFORMAT", "TOK_INSERT", "TOK_INSERT_INTO", "TOK_INT", "TOK_INTERSECTALL", "TOK_INTERSECTDISTINCT", "TOK_INTERVAL_DAY_LITERAL", "TOK_INTERVAL_DAY_TIME", "TOK_INTERVAL_DAY_TIME_LITERAL", "TOK_INTERVAL_HOUR_LITERAL", "TOK_INTERVAL_MINUTE_LITERAL", "TOK_INTERVAL_MONTH_LITERAL", "TOK_INTERVAL_SECOND_LITERAL", "TOK_INTERVAL_YEAR_LITERAL", "TOK_INTERVAL_YEAR_MONTH", "TOK_INTERVAL_YEAR_MONTH_LITERAL", "TOK_ISOLATION_LEVEL", "TOK_ISOLATION_SNAPSHOT", "TOK_JAR", "TOK_JOIN", "TOK_KILL_QUERY", "TOK_LATERAL_VIEW", "TOK_LATERAL_VIEW_OUTER", "TOK_LEFTANTISEMIJOIN", "TOK_LEFTOUTERJOIN", "TOK_LEFTSEMIJOIN", "TOK_LENGTH", "TOK_LIKEFILE", "TOK_LIKERP", "TOK_LIKETABLE", "TOK_LIMIT", "TOK_LIST", "TOK_LOAD", "TOK_LOCKDB", "TOK_LOCKTABLE", "TOK_MAP", "TOK_MATCHED", "TOK_MERGE", "TOK_METADATA", "TOK_MONTH", "TOK_MSCK", "TOK_NORELY", "TOK_NOT_CLUSTERED", "TOK_NOT_MATCHED", "TOK_NOT_NULL", "TOK_NOT_SORTED", "TOK_NOVALIDATE", "TOK_NO_DROP", "TOK_NULL", "TOK_NULLS_FIRST", "TOK_NULLS_LAST", "TOK_OFFLINE", "TOK_OFFSET", "TOK_ONLY", "TOK_OPERATOR", "TOK_OP_ADD", "TOK_OP_AND", "TOK_OP_BITAND", "TOK_OP_BITNOT", "TOK_OP_BITOR", "TOK_OP_BITXOR", "TOK_OP_DIV", "TOK_OP_EQ", "TOK_OP_GE", "TOK_OP_GT", "TOK_OP_LE", "TOK_OP_LIKE", "TOK_OP_LT", "TOK_OP_MOD", "TOK_OP_MUL", "TOK_OP_NE", "TOK_OP_NOT", "TOK_OP_OR", "TOK_OP_SUB", "TOK_ORDERBY", "TOK_ORREPLACE", "TOK_PARAMETER", "TOK_PARAMETER_IDX", "TOK_PARTITIONINGSPEC", "TOK_PARTITIONLOCATION", "TOK_PARTSPEC", "TOK_PARTVAL", "TOK_PATH", "TOK_PERCENT", "TOK_PREPARE", "TOK_PRIMARY_KEY", "TOK_PRINCIPAL_NAME", "TOK_PRIVILEGE", "TOK_PRIVILEGE_LIST", "TOK_PRIV_ALL", "TOK_PRIV_ALTER_DATA", "TOK_PRIV_ALTER_METADATA", "TOK_PRIV_CREATE", "TOK_PRIV_DELETE", "TOK_PRIV_DROP", "TOK_PRIV_INSERT", "TOK_PRIV_LOCK", "TOK_PRIV_OBJECT", "TOK_PRIV_OBJECT_COL", "TOK_PRIV_SELECT", "TOK_PRIV_SHOW_DATABASE", "TOK_PTBLFUNCTION", "TOK_QUALIFY", "TOK_QUERY", "TOK_QUERY_PARALLELISM", "TOK_READONLY", "TOK_REAL", "TOK_RECORDREADER", "TOK_RECORDWRITER", "TOK_RELOADFUNCTIONS", "TOK_RELY", "TOK_REMOTE", "TOK_RENAME", "TOK_REPLACE", "TOK_REPLICATION", "TOK_REPL_CONFIG", "TOK_REPL_CONFIG_LIST", "TOK_REPL_DUMP", "TOK_REPL_LOAD", "TOK_REPL_STATUS", "TOK_REPL_TABLES", "TOK_REPL_TABLES_LIST", "TOK_RESOURCE_ALL", "TOK_RESOURCE_LIST", "TOK_RESOURCE_URI", "TOK_RESPECT_NULLS", "TOK_RESTRICT", "TOK_RETAIN", "TOK_REVOKE", "TOK_REVOKE_ROLE", "TOK_REWRITE_DISABLED", "TOK_REWRITE_ENABLED", "TOK_RIGHTOUTERJOIN", "TOK_ROLE", "TOK_ROLLBACK", "TOK_ROLLUP_GROUPBY", "TOK_ROWCOUNT", "TOK_SCHEDULE", "TOK_SCHEDULING_POLICY", "TOK_SELECT", "TOK_SELECTDI", "TOK_SELEXPR", "TOK_SERDE", "TOK_SERDENAME", "TOK_SERDEPROPS", "TOK_SERVER_TYPE", "TOK_SETCOLREF", "TOK_SET_AUTOCOMMIT", "TOK_SET_COLUMNS_CLAUSE", "TOK_SET_ROLE", "TOK_SHOWCOLUMNS", "TOK_SHOWCONF", "TOK_SHOWDATABASES", "TOK_SHOWDATACONNECTORS", "TOK_SHOWDBLOCKS", "TOK_SHOWFUNCTIONS", "TOK_SHOWLOCKS", "TOK_SHOWMATERIALIZEDVIEWS", "TOK_SHOWPARTITIONS", "TOK_SHOWTABLES", "TOK_SHOWVIEWS", "TOK_SHOW_COMPACTIONS", "TOK_SHOW_CREATEDATABASE", "TOK_SHOW_CREATETABLE", "TOK_SHOW_CURRENT_ROLE", "TOK_SHOW_GRANT", "TOK_SHOW_ROLES", "TOK_SHOW_ROLE_GRANT", "TOK_SHOW_ROLE_PRINCIPALS", "TOK_SHOW_RP", "TOK_SHOW_TABLESTATUS", "TOK_SHOW_TBLPROPERTIES", "TOK_SHOW_TRANSACTIONS", "TOK_SKEWED_LOCATIONS", "TOK_SKEWED_LOCATION_LIST", "TOK_SKEWED_LOCATION_MAP", "TOK_SMALLINT", "TOK_SORTBY", "TOK_START_TRANSACTION", "TOK_STORAGEHANDLER", "TOK_STOREDASDIRS", "TOK_STRING", "TOK_STRINGLITERALSEQUENCE", "TOK_STRUCT", "TOK_SUBQUERY", "TOK_SUBQUERY_EXPR", "TOK_SUBQUERY_OP", "TOK_SUBQUERY_OP_NOTEXISTS", "TOK_SUBQUERY_OP_NOTIN", "TOK_SUMMARY", "TOK_SWITCHDATABASE", "TOK_TAB", "TOK_TABALIAS", "TOK_TABCOL", "TOK_TABCOLLIST", "TOK_TABCOLNAME", "TOK_TABCOLVALUE", "TOK_TABCOLVALUES", "TOK_TABCOLVALUE_PAIR", "TOK_TABLEBUCKETSAMPLE", "TOK_TABLECOMMENT", "TOK_TABLEFILEFORMAT", "TOK_TABLELOCATION", "TOK_TABLEPARTCOLNAMES", "TOK_TABLEPARTCOLS", "TOK_TABLEPARTCOLSBYSPEC", "TOK_TABLEPROPERTIES", "TOK_TABLEPROPERTY", "TOK_TABLEPROPLIST", "TOK_TABLEROWFORMAT", "TOK_TABLEROWFORMATCOLLITEMS", "TOK_TABLEROWFORMATFIELD", "TOK_TABLEROWFORMATLINES", "TOK_TABLEROWFORMATMAPKEYS", "TOK_TABLEROWFORMATNULL", "TOK_TABLESERIALIZER", "TOK_TABLESKEWED", "TOK_TABLESPLITSAMPLE", "TOK_TABLE_OR_COL", "TOK_TABLE_PARTITION", "TOK_TABLE_TYPE", "TOK_TABNAME", "TOK_TABREF", "TOK_TABSORTCOLNAMEASC", "TOK_TABSORTCOLNAMEDESC", "TOK_TABSRC", "TOK_TABTYPE", "TOK_TEMPORARY", "TOK_TIMESTAMP", "TOK_TIMESTAMPLITERAL", "TOK_TIMESTAMPLOCALTZ", "TOK_TIMESTAMPLOCALTZLITERAL", "TOK_TINYINT", "TOK_TMP_FILE", "TOK_TO", "TOK_TRANSFORM", "TOK_TRIGGER_EXPRESSION", "TOK_TRUE", "TOK_TRUNCATE", "TOK_TRUNCATETABLE", "TOK_TXN_ACCESS_MODE", "TOK_TXN_READ_ONLY", "TOK_TXN_READ_WRITE", "TOK_UNIONALL", "TOK_UNIONDISTINCT", "TOK_UNIONTYPE", "TOK_UNIQUE", "TOK_UNIQUEJOIN", "TOK_UNKNOWN", "TOK_UNLOCKDB", "TOK_UNLOCKTABLE", "TOK_UNMANAGED", "TOK_UPDATE", "TOK_UPDATE_TABLE", "TOK_URI_TYPE", "TOK_USER", "TOK_USERSCRIPTCOLNAMES", "TOK_USERSCRIPTCOLSCHEMA", "TOK_VALIDATE", "TOK_VARCHAR", "TOK_VIEWCLUSTERCOLS", "TOK_VIEWDISTRIBUTECOLS", "TOK_VIEWPARTCOLS", "TOK_VIEWSORTCOLS", "TOK_WHERE", "TOK_WINDOWDEF", "TOK_WINDOWRANGE", "TOK_WINDOWSPEC", "TOK_WINDOWVALUES", "TOK_WITHIN_GROUP", "TOK_WITH_SNAPSHOT_RETENTION", "TOK_YEAR"
    };

    public static final int EOF=-1;
    public static final int AMPERSAND=4;
    public static final int BITWISEOR=5;
    public static final int BITWISEXOR=6;
    public static final int ByteLengthLiteral=7;
    public static final int COLON=8;
    public static final int COMMA=9;
    public static final int CONCATENATE=10;
    public static final int CharSetLiteral=11;
    public static final int CharSetName=12;
    public static final int DIV=13;
    public static final int DIVIDE=14;
    public static final int DOLLAR=15;
    public static final int DOT=16;
    public static final int Digit=17;
    public static final int EQUAL=18;
    public static final int EQUAL_NS=19;
    public static final int Exponent=20;
    public static final int GREATERTHAN=21;
    public static final int GREATERTHANOREQUALTO=22;
    public static final int HexDigit=23;
    public static final int Identifier=24;
    public static final int IntegralLiteral=25;
    public static final int KW_ABORT=26;
    public static final int KW_ACTIVATE=27;
    public static final int KW_ACTIVE=28;
    public static final int KW_ADD=29;
    public static final int KW_ADMIN=30;
    public static final int KW_AFTER=31;
    public static final int KW_ALL=32;
    public static final int KW_ALLOC_FRACTION=33;
    public static final int KW_ALTER=34;
    public static final int KW_ANALYZE=35;
    public static final int KW_AND=36;
    public static final int KW_ANY=37;
    public static final int KW_APPLICATION=38;
    public static final int KW_ARCHIVE=39;
    public static final int KW_ARRAY=40;
    public static final int KW_AS=41;
    public static final int KW_ASC=42;
    public static final int KW_AST=43;
    public static final int KW_AT=44;
    public static final int KW_AUTHORIZATION=45;
    public static final int KW_AUTOCOMMIT=46;
    public static final int KW_BEFORE=47;
    public static final int KW_BETWEEN=48;
    public static final int KW_BIGINT=49;
    public static final int KW_BINARY=50;
    public static final int KW_BOOLEAN=51;
    public static final int KW_BOTH=52;
    public static final int KW_BRANCH=53;
    public static final int KW_BUCKET=54;
    public static final int KW_BUCKETS=55;
    public static final int KW_BY=56;
    public static final int KW_CACHE=57;
    public static final int KW_CASCADE=58;
    public static final int KW_CASE=59;
    public static final int KW_CAST=60;
    public static final int KW_CBO=61;
    public static final int KW_CHANGE=62;
    public static final int KW_CHAR=63;
    public static final int KW_CHECK=64;
    public static final int KW_CHERRY_PICK=65;
    public static final int KW_CLUSTER=66;
    public static final int KW_CLUSTERED=67;
    public static final int KW_CLUSTERSTATUS=68;
    public static final int KW_COLLECTION=69;
    public static final int KW_COLUMN=70;
    public static final int KW_COLUMNS=71;
    public static final int KW_COMMENT=72;
    public static final int KW_COMMIT=73;
    public static final int KW_COMPACT=74;
    public static final int KW_COMPACTIONS=75;
    public static final int KW_COMPACT_ID=76;
    public static final int KW_COMPUTE=77;
    public static final int KW_CONCATENATE=78;
    public static final int KW_CONF=79;
    public static final int KW_CONSTRAINT=80;
    public static final int KW_CONTINUE=81;
    public static final int KW_CONVERT=82;
    public static final int KW_COST=83;
    public static final int KW_CREATE=84;
    public static final int KW_CRON=85;
    public static final int KW_CROSS=86;
    public static final int KW_CUBE=87;
    public static final int KW_CURRENT=88;
    public static final int KW_CURRENT_DATE=89;
    public static final int KW_CURRENT_TIMESTAMP=90;
    public static final int KW_CURSOR=91;
    public static final int KW_DATA=92;
    public static final int KW_DATABASE=93;
    public static final int KW_DATABASES=94;
    public static final int KW_DATACONNECTOR=95;
    public static final int KW_DATACONNECTORS=96;
    public static final int KW_DATE=97;
    public static final int KW_DATETIME=98;
    public static final int KW_DAY=99;
    public static final int KW_DBPROPERTIES=100;
    public static final int KW_DCPROPERTIES=101;
    public static final int KW_DDL=102;
    public static final int KW_DEBUG=103;
    public static final int KW_DECIMAL=104;
    public static final int KW_DEFAULT=105;
    public static final int KW_DEFERRED=106;
    public static final int KW_DEFINED=107;
    public static final int KW_DELETE=108;
    public static final int KW_DELIMITED=109;
    public static final int KW_DEPENDENCY=110;
    public static final int KW_DESC=111;
    public static final int KW_DESCRIBE=112;
    public static final int KW_DETAIL=113;
    public static final int KW_DIRECTORIES=114;
    public static final int KW_DIRECTORY=115;
    public static final int KW_DISABLE=116;
    public static final int KW_DISTINCT=117;
    public static final int KW_DISTRIBUTE=118;
    public static final int KW_DISTRIBUTED=119;
    public static final int KW_DO=120;
    public static final int KW_DOUBLE=121;
    public static final int KW_DOW=122;
    public static final int KW_DROP=123;
    public static final int KW_DUMP=124;
    public static final int KW_ELEM_TYPE=125;
    public static final int KW_ELSE=126;
    public static final int KW_ENABLE=127;
    public static final int KW_END=128;
    public static final int KW_ENFORCED=129;
    public static final int KW_ESCAPED=130;
    public static final int KW_EVERY=131;
    public static final int KW_EXCEPT=132;
    public static final int KW_EXCHANGE=133;
    public static final int KW_EXCLUSIVE=134;
    public static final int KW_EXECUTE=135;
    public static final int KW_EXECUTED=136;
    public static final int KW_EXISTS=137;
    public static final int KW_EXPIRE_SNAPSHOTS=138;
    public static final int KW_EXPLAIN=139;
    public static final int KW_EXPORT=140;
    public static final int KW_EXPRESSION=141;
    public static final int KW_EXTENDED=142;
    public static final int KW_EXTERNAL=143;
    public static final int KW_EXTRACT=144;
    public static final int KW_FALSE=145;
    public static final int KW_FAST_FORWARD=146;
    public static final int KW_FETCH=147;
    public static final int KW_FIELDS=148;
    public static final int KW_FILE=149;
    public static final int KW_FILEFORMAT=150;
    public static final int KW_FIRST=151;
    public static final int KW_FLOAT=152;
    public static final int KW_FLOOR=153;
    public static final int KW_FOLLOWING=154;
    public static final int KW_FOR=155;
    public static final int KW_FORCE=156;
    public static final int KW_FOREIGN=157;
    public static final int KW_FORMAT=158;
    public static final int KW_FORMATTED=159;
    public static final int KW_FROM=160;
    public static final int KW_FULL=161;
    public static final int KW_FUNCTION=162;
    public static final int KW_FUNCTIONS=163;
    public static final int KW_GRANT=164;
    public static final int KW_GROUP=165;
    public static final int KW_GROUPING=166;
    public static final int KW_HAVING=167;
    public static final int KW_HOUR=168;
    public static final int KW_IDXPROPERTIES=169;
    public static final int KW_IF=170;
    public static final int KW_IGNORE=171;
    public static final int KW_IMPORT=172;
    public static final int KW_IN=173;
    public static final int KW_INDEX=174;
    public static final int KW_INDEXES=175;
    public static final int KW_INNER=176;
    public static final int KW_INPATH=177;
    public static final int KW_INPUTDRIVER=178;
    public static final int KW_INPUTFORMAT=179;
    public static final int KW_INSERT=180;
    public static final int KW_INT=181;
    public static final int KW_INTERSECT=182;
    public static final int KW_INTERVAL=183;
    public static final int KW_INTO=184;
    public static final int KW_IS=185;
    public static final int KW_ISOLATION=186;
    public static final int KW_ITEMS=187;
    public static final int KW_JAR=188;
    public static final int KW_JOIN=189;
    public static final int KW_JOINCOST=190;
    public static final int KW_KEY=191;
    public static final int KW_KEYS=192;
    public static final int KW_KEY_TYPE=193;
    public static final int KW_KILL=194;
    public static final int KW_LAST=195;
    public static final int KW_LATERAL=196;
    public static final int KW_LEADING=197;
    public static final int KW_LEFT=198;
    public static final int KW_LESS=199;
    public static final int KW_LEVEL=200;
    public static final int KW_LIKE=201;
    public static final int KW_LIMIT=202;
    public static final int KW_LINES=203;
    public static final int KW_LOAD=204;
    public static final int KW_LOCAL=205;
    public static final int KW_LOCATION=206;
    public static final int KW_LOCK=207;
    public static final int KW_LOCKS=208;
    public static final int KW_LOGICAL=209;
    public static final int KW_LONG=210;
    public static final int KW_MACRO=211;
    public static final int KW_MANAGED=212;
    public static final int KW_MANAGEDLOCATION=213;
    public static final int KW_MANAGEMENT=214;
    public static final int KW_MAP=215;
    public static final int KW_MAPJOIN=216;
    public static final int KW_MAPPING=217;
    public static final int KW_MATCHED=218;
    public static final int KW_MATERIALIZED=219;
    public static final int KW_MERGE=220;
    public static final int KW_METADATA=221;
    public static final int KW_MINUS=222;
    public static final int KW_MINUTE=223;
    public static final int KW_MONTH=224;
    public static final int KW_MORE=225;
    public static final int KW_MOVE=226;
    public static final int KW_MSCK=227;
    public static final int KW_NONE=228;
    public static final int KW_NORELY=229;
    public static final int KW_NOSCAN=230;
    public static final int KW_NOT=231;
    public static final int KW_NOVALIDATE=232;
    public static final int KW_NULL=233;
    public static final int KW_NULLS=234;
    public static final int KW_OF=235;
    public static final int KW_OFFSET=236;
    public static final int KW_OLDER=237;
    public static final int KW_ON=238;
    public static final int KW_ONLY=239;
    public static final int KW_OPERATOR=240;
    public static final int KW_OPTIMIZE=241;
    public static final int KW_OPTION=242;
    public static final int KW_OR=243;
    public static final int KW_ORDER=244;
    public static final int KW_ORPHAN_FILES=245;
    public static final int KW_OUT=246;
    public static final int KW_OUTER=247;
    public static final int KW_OUTPUTDRIVER=248;
    public static final int KW_OUTPUTFORMAT=249;
    public static final int KW_OVER=250;
    public static final int KW_OVERWRITE=251;
    public static final int KW_OWNER=252;
    public static final int KW_PARTITION=253;
    public static final int KW_PARTITIONED=254;
    public static final int KW_PARTITIONS=255;
    public static final int KW_PATH=256;
    public static final int KW_PERCENT=257;
    public static final int KW_PKFK_JOIN=258;
    public static final int KW_PLAN=259;
    public static final int KW_PLANS=260;
    public static final int KW_PLUS=261;
    public static final int KW_POOL=262;
    public static final int KW_PRECEDING=263;
    public static final int KW_PRECISION=264;
    public static final int KW_PREPARE=265;
    public static final int KW_PRESERVE=266;
    public static final int KW_PRIMARY=267;
    public static final int KW_PRINCIPALS=268;
    public static final int KW_PROCEDURE=269;
    public static final int KW_PURGE=270;
    public static final int KW_QUALIFY=271;
    public static final int KW_QUARTER=272;
    public static final int KW_QUERY=273;
    public static final int KW_QUERY_PARALLELISM=274;
    public static final int KW_RANGE=275;
    public static final int KW_READ=276;
    public static final int KW_READS=277;
    public static final int KW_REAL=278;
    public static final int KW_REBUILD=279;
    public static final int KW_RECORDREADER=280;
    public static final int KW_RECORDWRITER=281;
    public static final int KW_REDUCE=282;
    public static final int KW_REFERENCES=283;
    public static final int KW_REGEXP=284;
    public static final int KW_RELOAD=285;
    public static final int KW_RELY=286;
    public static final int KW_REMOTE=287;
    public static final int KW_RENAME=288;
    public static final int KW_REOPTIMIZATION=289;
    public static final int KW_REPAIR=290;
    public static final int KW_REPL=291;
    public static final int KW_REPLACE=292;
    public static final int KW_REPLICATION=293;
    public static final int KW_RESOURCE=294;
    public static final int KW_RESPECT=295;
    public static final int KW_RESTRICT=296;
    public static final int KW_RETAIN=297;
    public static final int KW_RETENTION=298;
    public static final int KW_REVOKE=299;
    public static final int KW_REWRITE=300;
    public static final int KW_RIGHT=301;
    public static final int KW_RLIKE=302;
    public static final int KW_ROLE=303;
    public static final int KW_ROLES=304;
    public static final int KW_ROLLBACK=305;
    public static final int KW_ROLLUP=306;
    public static final int KW_ROW=307;
    public static final int KW_ROWS=308;
    public static final int KW_SCHEDULED=309;
    public static final int KW_SCHEDULING_POLICY=310;
    public static final int KW_SCHEMA=311;
    public static final int KW_SCHEMAS=312;
    public static final int KW_SECOND=313;
    public static final int KW_SELECT=314;
    public static final int KW_SEMI=315;
    public static final int KW_SERDE=316;
    public static final int KW_SERDEPROPERTIES=317;
    public static final int KW_SERVER=318;
    public static final int KW_SET=319;
    public static final int KW_SETS=320;
    public static final int KW_SET_CURRENT_SNAPSHOT=321;
    public static final int KW_SHARED=322;
    public static final int KW_SHOW=323;
    public static final int KW_SHOW_DATABASE=324;
    public static final int KW_SKEWED=325;
    public static final int KW_SMALLINT=326;
    public static final int KW_SNAPSHOT=327;
    public static final int KW_SNAPSHOTS=328;
    public static final int KW_SOME=329;
    public static final int KW_SORT=330;
    public static final int KW_SORTED=331;
    public static final int KW_SPEC=332;
    public static final int KW_SSL=333;
    public static final int KW_START=334;
    public static final int KW_STATISTICS=335;
    public static final int KW_STATUS=336;
    public static final int KW_STORED=337;
    public static final int KW_STREAMTABLE=338;
    public static final int KW_STRING=339;
    public static final int KW_STRUCT=340;
    public static final int KW_SUMMARY=341;
    public static final int KW_SYNC=342;
    public static final int KW_SYSTEM_TIME=343;
    public static final int KW_SYSTEM_VERSION=344;
    public static final int KW_TABLE=345;
    public static final int KW_TABLES=346;
    public static final int KW_TABLESAMPLE=347;
    public static final int KW_TAG=348;
    public static final int KW_TBLPROPERTIES=349;
    public static final int KW_TEMPORARY=350;
    public static final int KW_TERMINATED=351;
    public static final int KW_THAN=352;
    public static final int KW_THEN=353;
    public static final int KW_TIME=354;
    public static final int KW_TIMESTAMP=355;
    public static final int KW_TIMESTAMPLOCALTZ=356;
    public static final int KW_TINYINT=357;
    public static final int KW_TO=358;
    public static final int KW_TOUCH=359;
    public static final int KW_TRAILING=360;
    public static final int KW_TRANSACTION=361;
    public static final int KW_TRANSACTIONAL=362;
    public static final int KW_TRANSACTIONS=363;
    public static final int KW_TRANSFORM=364;
    public static final int KW_TRIGGER=365;
    public static final int KW_TRIM=366;
    public static final int KW_TRUE=367;
    public static final int KW_TRUNCATE=368;
    public static final int KW_TYPE=369;
    public static final int KW_UNARCHIVE=370;
    public static final int KW_UNBOUNDED=371;
    public static final int KW_UNDO=372;
    public static final int KW_UNION=373;
    public static final int KW_UNIONTYPE=374;
    public static final int KW_UNIQUE=375;
    public static final int KW_UNIQUEJOIN=376;
    public static final int KW_UNKNOWN=377;
    public static final int KW_UNLOCK=378;
    public static final int KW_UNMANAGED=379;
    public static final int KW_UNSET=380;
    public static final int KW_UNSIGNED=381;
    public static final int KW_UPDATE=382;
    public static final int KW_URI=383;
    public static final int KW_URL=384;
    public static final int KW_USE=385;
    public static final int KW_USER=386;
    public static final int KW_USING=387;
    public static final int KW_UTC=388;
    public static final int KW_UTCTIMESTAMP=389;
    public static final int KW_VALIDATE=390;
    public static final int KW_VALUES=391;
    public static final int KW_VALUE_TYPE=392;
    public static final int KW_VARCHAR=393;
    public static final int KW_VECTORIZATION=394;
    public static final int KW_VIEW=395;
    public static final int KW_VIEWS=396;
    public static final int KW_WAIT=397;
    public static final int KW_WEEK=398;
    public static final int KW_WHEN=399;
    public static final int KW_WHERE=400;
    public static final int KW_WHILE=401;
    public static final int KW_WINDOW=402;
    public static final int KW_WITH=403;
    public static final int KW_WITHIN=404;
    public static final int KW_WORK=405;
    public static final int KW_WORKLOAD=406;
    public static final int KW_WRITE=407;
    public static final int KW_YEAR=408;
    public static final int KW_ZONE=409;
    public static final int LCURLY=410;
    public static final int LESSTHAN=411;
    public static final int LESSTHANOREQUALTO=412;
    public static final int LINE_COMMENT=413;
    public static final int LPAREN=414;
    public static final int LSQUARE=415;
    public static final int Letter=416;
    public static final int MINUS=417;
    public static final int MOD=418;
    public static final int NOTEQUAL=419;
    public static final int Number=420;
    public static final int NumberLiteral=421;
    public static final int PLUS=422;
    public static final int QUERY_HINT=423;
    public static final int QUESTION=424;
    public static final int QuotedIdentifier=425;
    public static final int RCURLY=426;
    public static final int RPAREN=427;
    public static final int RSQUARE=428;
    public static final int RegexComponent=429;
    public static final int SEMICOLON=430;
    public static final int STAR=431;
    public static final int StringLiteral=432;
    public static final int TILDE=433;
    public static final int WS=434;
    public static final int KW_ANTI=463;
    public static final int KW_BATCH=473;
    public static final int KW_DAYOFWEEK=521;
    public static final int KW_HOLD_DDLTIME=580;
    public static final int KW_NO_DROP=636;
    public static final int KW_OFFLINE=640;
    public static final int KW_PROTECTION=670;
    public static final int KW_READONLY=678;
    public static final int KW_TIMESTAMPTZ=753;
    public static final int TOK_ABORT_COMPACTIONS=821;
    public static final int TOK_ABORT_TRANSACTIONS=822;
    public static final int TOK_ACTIVATE=823;
    public static final int TOK_ADD_TRIGGER=824;
    public static final int TOK_ADMIN_OPTION_FOR=825;
    public static final int TOK_ALIAS=826;
    public static final int TOK_ALIASLIST=827;
    public static final int TOK_ALLCOLREF=828;
    public static final int TOK_ALLOC_FRACTION=829;
    public static final int TOK_ALTERDATABASE_LOCATION=830;
    public static final int TOK_ALTERDATABASE_MANAGEDLOCATION=831;
    public static final int TOK_ALTERDATABASE_OWNER=832;
    public static final int TOK_ALTERDATABASE_PROPERTIES=833;
    public static final int TOK_ALTERDATACONNECTOR_OWNER=834;
    public static final int TOK_ALTERDATACONNECTOR_PROPERTIES=835;
    public static final int TOK_ALTERDATACONNECTOR_URL=836;
    public static final int TOK_ALTERPARTITION_BUCKETS=837;
    public static final int TOK_ALTERPARTITION_FILEFORMAT=838;
    public static final int TOK_ALTERPARTITION_LOCATION=839;
    public static final int TOK_ALTERPARTITION_MERGEFILES=840;
    public static final int TOK_ALTERPARTITION_SERIALIZER=841;
    public static final int TOK_ALTERPARTITION_SETSERDEPROPERTIES=842;
    public static final int TOK_ALTERPARTITION_UNSETSERDEPROPERTIES=843;
    public static final int TOK_ALTERPARTITION_UPDATECOLSTATS=844;
    public static final int TOK_ALTERPARTITION_UPDATESTATS=845;
    public static final int TOK_ALTERTABLE=846;
    public static final int TOK_ALTERTABLE_ADDCOLS=847;
    public static final int TOK_ALTERTABLE_ADDCONSTRAINT=848;
    public static final int TOK_ALTERTABLE_ADDPARTS=849;
    public static final int TOK_ALTERTABLE_ARCHIVE=850;
    public static final int TOK_ALTERTABLE_BUCKETS=851;
    public static final int TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION=852;
    public static final int TOK_ALTERTABLE_CLUSTER_SORT=853;
    public static final int TOK_ALTERTABLE_COMPACT=854;
    public static final int TOK_ALTERTABLE_CONVERT=855;
    public static final int TOK_ALTERTABLE_CREATE_BRANCH=856;
    public static final int TOK_ALTERTABLE_CREATE_TAG=857;
    public static final int TOK_ALTERTABLE_DROPCONSTRAINT=858;
    public static final int TOK_ALTERTABLE_DROPPARTS=859;
    public static final int TOK_ALTERTABLE_DROPPROPERTIES=860;
    public static final int TOK_ALTERTABLE_DROP_BRANCH=861;
    public static final int TOK_ALTERTABLE_DROP_TAG=862;
    public static final int TOK_ALTERTABLE_EXCHANGEPARTITION=863;
    public static final int TOK_ALTERTABLE_EXECUTE=864;
    public static final int TOK_ALTERTABLE_FILEFORMAT=865;
    public static final int TOK_ALTERTABLE_LOCATION=866;
    public static final int TOK_ALTERTABLE_MERGEFILES=867;
    public static final int TOK_ALTERTABLE_OWNER=868;
    public static final int TOK_ALTERTABLE_PARTCOLTYPE=869;
    public static final int TOK_ALTERTABLE_PROPERTIES=870;
    public static final int TOK_ALTERTABLE_RENAME=871;
    public static final int TOK_ALTERTABLE_RENAMECOL=872;
    public static final int TOK_ALTERTABLE_RENAMEPART=873;
    public static final int TOK_ALTERTABLE_RENAME_BRANCH=874;
    public static final int TOK_ALTERTABLE_REPLACECOLS=875;
    public static final int TOK_ALTERTABLE_REPLACE_SNAPSHOTREF=876;
    public static final int TOK_ALTERTABLE_SERIALIZER=877;
    public static final int TOK_ALTERTABLE_SETPARTSPEC=878;
    public static final int TOK_ALTERTABLE_SETSERDEPROPERTIES=879;
    public static final int TOK_ALTERTABLE_SKEWED=880;
    public static final int TOK_ALTERTABLE_SKEWED_LOCATION=881;
    public static final int TOK_ALTERTABLE_TOUCH=882;
    public static final int TOK_ALTERTABLE_UNARCHIVE=883;
    public static final int TOK_ALTERTABLE_UNSETSERDEPROPERTIES=884;
    public static final int TOK_ALTERTABLE_UPDATECOLSTATS=885;
    public static final int TOK_ALTERTABLE_UPDATECOLUMNS=886;
    public static final int TOK_ALTERTABLE_UPDATESTATS=887;
    public static final int TOK_ALTERVIEW=888;
    public static final int TOK_ALTERVIEW_ADDPARTS=889;
    public static final int TOK_ALTERVIEW_AS=890;
    public static final int TOK_ALTERVIEW_DROPPARTS=891;
    public static final int TOK_ALTERVIEW_DROPPROPERTIES=892;
    public static final int TOK_ALTERVIEW_PROPERTIES=893;
    public static final int TOK_ALTERVIEW_RENAME=894;
    public static final int TOK_ALTER_MAPPING=895;
    public static final int TOK_ALTER_MATERIALIZED_VIEW=896;
    public static final int TOK_ALTER_MATERIALIZED_VIEW_REBUILD=897;
    public static final int TOK_ALTER_MATERIALIZED_VIEW_REWRITE=898;
    public static final int TOK_ALTER_POOL=899;
    public static final int TOK_ALTER_POOL_ADD_TRIGGER=900;
    public static final int TOK_ALTER_POOL_DROP_TRIGGER=901;
    public static final int TOK_ALTER_RP_DISABLE=902;
    public static final int TOK_ALTER_RP_ENABLE=903;
    public static final int TOK_ALTER_RP_RENAME=904;
    public static final int TOK_ALTER_RP_REPLACE=905;
    public static final int TOK_ALTER_RP_SET=906;
    public static final int TOK_ALTER_RP_UNSET=907;
    public static final int TOK_ALTER_RP_VALIDATE=908;
    public static final int TOK_ALTER_SCHEDULED_QUERY=909;
    public static final int TOK_ALTER_TRIGGER=910;
    public static final int TOK_ANALYZE=911;
    public static final int TOK_ARCHIVE=912;
    public static final int TOK_AS_OF_TAG=913;
    public static final int TOK_AS_OF_TIME=914;
    public static final int TOK_AS_OF_VERSION=915;
    public static final int TOK_BIGINT=916;
    public static final int TOK_BINARY=917;
    public static final int TOK_BLOCKING=918;
    public static final int TOK_BOOLEAN=919;
    public static final int TOK_BUCKET=920;
    public static final int TOK_CACHE_METADATA=921;
    public static final int TOK_CASCADE=922;
    public static final int TOK_CHAR=923;
    public static final int TOK_CHARSETLITERAL=924;
    public static final int TOK_CHECK_CONSTRAINT=925;
    public static final int TOK_CLUSTERBY=926;
    public static final int TOK_COLTYPELIST=927;
    public static final int TOK_COL_NAME=928;
    public static final int TOK_COMMIT=929;
    public static final int TOK_COMPACTION_STATUS=930;
    public static final int TOK_COMPACTION_TYPE=931;
    public static final int TOK_COMPACT_ID=932;
    public static final int TOK_COMPACT_POOL=933;
    public static final int TOK_CONSTRAINT_NAME=934;
    public static final int TOK_CREATEDATABASE=935;
    public static final int TOK_CREATEDATACONNECTOR=936;
    public static final int TOK_CREATEFUNCTION=937;
    public static final int TOK_CREATEMACRO=938;
    public static final int TOK_CREATEROLE=939;
    public static final int TOK_CREATETABLE=940;
    public static final int TOK_CREATEVIEW=941;
    public static final int TOK_CREATE_MAPPING=942;
    public static final int TOK_CREATE_MATERIALIZED_VIEW=943;
    public static final int TOK_CREATE_POOL=944;
    public static final int TOK_CREATE_RP=945;
    public static final int TOK_CREATE_SCHEDULED_QUERY=946;
    public static final int TOK_CREATE_TRIGGER=947;
    public static final int TOK_CRON=948;
    public static final int TOK_CROSSJOIN=949;
    public static final int TOK_CTE=950;
    public static final int TOK_CUBE_GROUPBY=951;
    public static final int TOK_DATABASECOMMENT=952;
    public static final int TOK_DATABASELOCATION=953;
    public static final int TOK_DATABASEPROPERTIES=954;
    public static final int TOK_DATABASE_MANAGEDLOCATION=955;
    public static final int TOK_DATACONNECTOR=956;
    public static final int TOK_DATACONNECTORCOMMENT=957;
    public static final int TOK_DATACONNECTOROWNER=958;
    public static final int TOK_DATACONNECTORPROPERTIES=959;
    public static final int TOK_DATACONNECTORTYPE=960;
    public static final int TOK_DATACONNECTORURL=961;
    public static final int TOK_DATE=962;
    public static final int TOK_DATELITERAL=963;
    public static final int TOK_DATETIME=964;
    public static final int TOK_DAY=965;
    public static final int TOK_DBNAME=966;
    public static final int TOK_DBPROPLIST=967;
    public static final int TOK_DB_TYPE=968;
    public static final int TOK_DDL=969;
    public static final int TOK_DECIMAL=970;
    public static final int TOK_DEFAULT_POOL=971;
    public static final int TOK_DEFAULT_VALUE=972;
    public static final int TOK_DELETE=973;
    public static final int TOK_DELETE_FROM=974;
    public static final int TOK_DESCDATABASE=975;
    public static final int TOK_DESCDATACONNECTOR=976;
    public static final int TOK_DESCFUNCTION=977;
    public static final int TOK_DESCTABLE=978;
    public static final int TOK_DESTINATION=979;
    public static final int TOK_DETAIL=980;
    public static final int TOK_DIR=981;
    public static final int TOK_DISABLE=982;
    public static final int TOK_DISTRIBUTEBY=983;
    public static final int TOK_DOUBLE=984;
    public static final int TOK_DROPDATABASE=985;
    public static final int TOK_DROPDATACONNECTOR=986;
    public static final int TOK_DROPFUNCTION=987;
    public static final int TOK_DROPMACRO=988;
    public static final int TOK_DROPROLE=989;
    public static final int TOK_DROPTABLE=990;
    public static final int TOK_DROPVIEW=991;
    public static final int TOK_DROP_MAPPING=992;
    public static final int TOK_DROP_MATERIALIZED_VIEW=993;
    public static final int TOK_DROP_POOL=994;
    public static final int TOK_DROP_RP=995;
    public static final int TOK_DROP_SCHEDULED_QUERY=996;
    public static final int TOK_DROP_TRIGGER=997;
    public static final int TOK_ENABLE=998;
    public static final int TOK_EVERY=999;
    public static final int TOK_EXCEPTALL=1000;
    public static final int TOK_EXCEPTDISTINCT=1001;
    public static final int TOK_EXECUTE=1002;
    public static final int TOK_EXECUTED_AS=1003;
    public static final int TOK_EXECUTE_PARAM_LIST=1004;
    public static final int TOK_EXPLAIN=1005;
    public static final int TOK_EXPLAIN_SQ_REWRITE=1006;
    public static final int TOK_EXPLIST=1007;
    public static final int TOK_EXPORT=1008;
    public static final int TOK_EXPRESSION=1009;
    public static final int TOK_FALSE=1010;
    public static final int TOK_FILE=1011;
    public static final int TOK_FILEFORMAT_GENERIC=1012;
    public static final int TOK_FLOAT=1013;
    public static final int TOK_FORCE=1014;
    public static final int TOK_FOREIGN_KEY=1015;
    public static final int TOK_FROM=1016;
    public static final int TOK_FROM_VERSION=1017;
    public static final int TOK_FULLOUTERJOIN=1018;
    public static final int TOK_FUNCTION=1019;
    public static final int TOK_FUNCTIONDI=1020;
    public static final int TOK_FUNCTIONSTAR=1021;
    public static final int TOK_GRANT=1022;
    public static final int TOK_GRANT_OPTION_FOR=1023;
    public static final int TOK_GRANT_ROLE=1024;
    public static final int TOK_GRANT_WITH_ADMIN_OPTION=1025;
    public static final int TOK_GRANT_WITH_OPTION=1026;
    public static final int TOK_GROUP=1027;
    public static final int TOK_GROUPBY=1028;
    public static final int TOK_GROUPING_SETS=1029;
    public static final int TOK_GROUPING_SETS_EXPRESSION=1030;
    public static final int TOK_HAVING=1031;
    public static final int TOK_HOUR=1032;
    public static final int TOK_IDENTITY=1033;
    public static final int TOK_IFEXISTS=1034;
    public static final int TOK_IFNOTEXISTS=1035;
    public static final int TOK_IGNORE_NULLS=1036;
    public static final int TOK_IMPORT=1037;
    public static final int TOK_INPUTFORMAT=1038;
    public static final int TOK_INSERT=1039;
    public static final int TOK_INSERT_INTO=1040;
    public static final int TOK_INT=1041;
    public static final int TOK_INTERSECTALL=1042;
    public static final int TOK_INTERSECTDISTINCT=1043;
    public static final int TOK_INTERVAL_DAY_LITERAL=1044;
    public static final int TOK_INTERVAL_DAY_TIME=1045;
    public static final int TOK_INTERVAL_DAY_TIME_LITERAL=1046;
    public static final int TOK_INTERVAL_HOUR_LITERAL=1047;
    public static final int TOK_INTERVAL_MINUTE_LITERAL=1048;
    public static final int TOK_INTERVAL_MONTH_LITERAL=1049;
    public static final int TOK_INTERVAL_SECOND_LITERAL=1050;
    public static final int TOK_INTERVAL_YEAR_LITERAL=1051;
    public static final int TOK_INTERVAL_YEAR_MONTH=1052;
    public static final int TOK_INTERVAL_YEAR_MONTH_LITERAL=1053;
    public static final int TOK_ISOLATION_LEVEL=1054;
    public static final int TOK_ISOLATION_SNAPSHOT=1055;
    public static final int TOK_JAR=1056;
    public static final int TOK_JOIN=1057;
    public static final int TOK_KILL_QUERY=1058;
    public static final int TOK_LATERAL_VIEW=1059;
    public static final int TOK_LATERAL_VIEW_OUTER=1060;
    public static final int TOK_LEFTANTISEMIJOIN=1061;
    public static final int TOK_LEFTOUTERJOIN=1062;
    public static final int TOK_LEFTSEMIJOIN=1063;
    public static final int TOK_LENGTH=1064;
    public static final int TOK_LIKEFILE=1065;
    public static final int TOK_LIKERP=1066;
    public static final int TOK_LIKETABLE=1067;
    public static final int TOK_LIMIT=1068;
    public static final int TOK_LIST=1069;
    public static final int TOK_LOAD=1070;
    public static final int TOK_LOCKDB=1071;
    public static final int TOK_LOCKTABLE=1072;
    public static final int TOK_MAP=1073;
    public static final int TOK_MATCHED=1074;
    public static final int TOK_MERGE=1075;
    public static final int TOK_METADATA=1076;
    public static final int TOK_MONTH=1077;
    public static final int TOK_MSCK=1078;
    public static final int TOK_NORELY=1079;
    public static final int TOK_NOT_CLUSTERED=1080;
    public static final int TOK_NOT_MATCHED=1081;
    public static final int TOK_NOT_NULL=1082;
    public static final int TOK_NOT_SORTED=1083;
    public static final int TOK_NOVALIDATE=1084;
    public static final int TOK_NO_DROP=1085;
    public static final int TOK_NULL=1086;
    public static final int TOK_NULLS_FIRST=1087;
    public static final int TOK_NULLS_LAST=1088;
    public static final int TOK_OFFLINE=1089;
    public static final int TOK_OFFSET=1090;
    public static final int TOK_ONLY=1091;
    public static final int TOK_OPERATOR=1092;
    public static final int TOK_OP_ADD=1093;
    public static final int TOK_OP_AND=1094;
    public static final int TOK_OP_BITAND=1095;
    public static final int TOK_OP_BITNOT=1096;
    public static final int TOK_OP_BITOR=1097;
    public static final int TOK_OP_BITXOR=1098;
    public static final int TOK_OP_DIV=1099;
    public static final int TOK_OP_EQ=1100;
    public static final int TOK_OP_GE=1101;
    public static final int TOK_OP_GT=1102;
    public static final int TOK_OP_LE=1103;
    public static final int TOK_OP_LIKE=1104;
    public static final int TOK_OP_LT=1105;
    public static final int TOK_OP_MOD=1106;
    public static final int TOK_OP_MUL=1107;
    public static final int TOK_OP_NE=1108;
    public static final int TOK_OP_NOT=1109;
    public static final int TOK_OP_OR=1110;
    public static final int TOK_OP_SUB=1111;
    public static final int TOK_ORDERBY=1112;
    public static final int TOK_ORREPLACE=1113;
    public static final int TOK_PARAMETER=1114;
    public static final int TOK_PARAMETER_IDX=1115;
    public static final int TOK_PARTITIONINGSPEC=1116;
    public static final int TOK_PARTITIONLOCATION=1117;
    public static final int TOK_PARTSPEC=1118;
    public static final int TOK_PARTVAL=1119;
    public static final int TOK_PATH=1120;
    public static final int TOK_PERCENT=1121;
    public static final int TOK_PREPARE=1122;
    public static final int TOK_PRIMARY_KEY=1123;
    public static final int TOK_PRINCIPAL_NAME=1124;
    public static final int TOK_PRIVILEGE=1125;
    public static final int TOK_PRIVILEGE_LIST=1126;
    public static final int TOK_PRIV_ALL=1127;
    public static final int TOK_PRIV_ALTER_DATA=1128;
    public static final int TOK_PRIV_ALTER_METADATA=1129;
    public static final int TOK_PRIV_CREATE=1130;
    public static final int TOK_PRIV_DELETE=1131;
    public static final int TOK_PRIV_DROP=1132;
    public static final int TOK_PRIV_INSERT=1133;
    public static final int TOK_PRIV_LOCK=1134;
    public static final int TOK_PRIV_OBJECT=1135;
    public static final int TOK_PRIV_OBJECT_COL=1136;
    public static final int TOK_PRIV_SELECT=1137;
    public static final int TOK_PRIV_SHOW_DATABASE=1138;
    public static final int TOK_PTBLFUNCTION=1139;
    public static final int TOK_QUALIFY=1140;
    public static final int TOK_QUERY=1141;
    public static final int TOK_QUERY_PARALLELISM=1142;
    public static final int TOK_READONLY=1143;
    public static final int TOK_REAL=1144;
    public static final int TOK_RECORDREADER=1145;
    public static final int TOK_RECORDWRITER=1146;
    public static final int TOK_RELOADFUNCTIONS=1147;
    public static final int TOK_RELY=1148;
    public static final int TOK_REMOTE=1149;
    public static final int TOK_RENAME=1150;
    public static final int TOK_REPLACE=1151;
    public static final int TOK_REPLICATION=1152;
    public static final int TOK_REPL_CONFIG=1153;
    public static final int TOK_REPL_CONFIG_LIST=1154;
    public static final int TOK_REPL_DUMP=1155;
    public static final int TOK_REPL_LOAD=1156;
    public static final int TOK_REPL_STATUS=1157;
    public static final int TOK_REPL_TABLES=1158;
    public static final int TOK_REPL_TABLES_LIST=1159;
    public static final int TOK_RESOURCE_ALL=1160;
    public static final int TOK_RESOURCE_LIST=1161;
    public static final int TOK_RESOURCE_URI=1162;
    public static final int TOK_RESPECT_NULLS=1163;
    public static final int TOK_RESTRICT=1164;
    public static final int TOK_RETAIN=1165;
    public static final int TOK_REVOKE=1166;
    public static final int TOK_REVOKE_ROLE=1167;
    public static final int TOK_REWRITE_DISABLED=1168;
    public static final int TOK_REWRITE_ENABLED=1169;
    public static final int TOK_RIGHTOUTERJOIN=1170;
    public static final int TOK_ROLE=1171;
    public static final int TOK_ROLLBACK=1172;
    public static final int TOK_ROLLUP_GROUPBY=1173;
    public static final int TOK_ROWCOUNT=1174;
    public static final int TOK_SCHEDULE=1175;
    public static final int TOK_SCHEDULING_POLICY=1176;
    public static final int TOK_SELECT=1177;
    public static final int TOK_SELECTDI=1178;
    public static final int TOK_SELEXPR=1179;
    public static final int TOK_SERDE=1180;
    public static final int TOK_SERDENAME=1181;
    public static final int TOK_SERDEPROPS=1182;
    public static final int TOK_SERVER_TYPE=1183;
    public static final int TOK_SETCOLREF=1184;
    public static final int TOK_SET_AUTOCOMMIT=1185;
    public static final int TOK_SET_COLUMNS_CLAUSE=1186;
    public static final int TOK_SET_ROLE=1187;
    public static final int TOK_SHOWCOLUMNS=1188;
    public static final int TOK_SHOWCONF=1189;
    public static final int TOK_SHOWDATABASES=1190;
    public static final int TOK_SHOWDATACONNECTORS=1191;
    public static final int TOK_SHOWDBLOCKS=1192;
    public static final int TOK_SHOWFUNCTIONS=1193;
    public static final int TOK_SHOWLOCKS=1194;
    public static final int TOK_SHOWMATERIALIZEDVIEWS=1195;
    public static final int TOK_SHOWPARTITIONS=1196;
    public static final int TOK_SHOWTABLES=1197;
    public static final int TOK_SHOWVIEWS=1198;
    public static final int TOK_SHOW_COMPACTIONS=1199;
    public static final int TOK_SHOW_CREATEDATABASE=1200;
    public static final int TOK_SHOW_CREATETABLE=1201;
    public static final int TOK_SHOW_CURRENT_ROLE=1202;
    public static final int TOK_SHOW_GRANT=1203;
    public static final int TOK_SHOW_ROLES=1204;
    public static final int TOK_SHOW_ROLE_GRANT=1205;
    public static final int TOK_SHOW_ROLE_PRINCIPALS=1206;
    public static final int TOK_SHOW_RP=1207;
    public static final int TOK_SHOW_TABLESTATUS=1208;
    public static final int TOK_SHOW_TBLPROPERTIES=1209;
    public static final int TOK_SHOW_TRANSACTIONS=1210;
    public static final int TOK_SKEWED_LOCATIONS=1211;
    public static final int TOK_SKEWED_LOCATION_LIST=1212;
    public static final int TOK_SKEWED_LOCATION_MAP=1213;
    public static final int TOK_SMALLINT=1214;
    public static final int TOK_SORTBY=1215;
    public static final int TOK_START_TRANSACTION=1216;
    public static final int TOK_STORAGEHANDLER=1217;
    public static final int TOK_STOREDASDIRS=1218;
    public static final int TOK_STRING=1219;
    public static final int TOK_STRINGLITERALSEQUENCE=1220;
    public static final int TOK_STRUCT=1221;
    public static final int TOK_SUBQUERY=1222;
    public static final int TOK_SUBQUERY_EXPR=1223;
    public static final int TOK_SUBQUERY_OP=1224;
    public static final int TOK_SUBQUERY_OP_NOTEXISTS=1225;
    public static final int TOK_SUBQUERY_OP_NOTIN=1226;
    public static final int TOK_SUMMARY=1227;
    public static final int TOK_SWITCHDATABASE=1228;
    public static final int TOK_TAB=1229;
    public static final int TOK_TABALIAS=1230;
    public static final int TOK_TABCOL=1231;
    public static final int TOK_TABCOLLIST=1232;
    public static final int TOK_TABCOLNAME=1233;
    public static final int TOK_TABCOLVALUE=1234;
    public static final int TOK_TABCOLVALUES=1235;
    public static final int TOK_TABCOLVALUE_PAIR=1236;
    public static final int TOK_TABLEBUCKETSAMPLE=1237;
    public static final int TOK_TABLECOMMENT=1238;
    public static final int TOK_TABLEFILEFORMAT=1239;
    public static final int TOK_TABLELOCATION=1240;
    public static final int TOK_TABLEPARTCOLNAMES=1241;
    public static final int TOK_TABLEPARTCOLS=1242;
    public static final int TOK_TABLEPARTCOLSBYSPEC=1243;
    public static final int TOK_TABLEPROPERTIES=1244;
    public static final int TOK_TABLEPROPERTY=1245;
    public static final int TOK_TABLEPROPLIST=1246;
    public static final int TOK_TABLEROWFORMAT=1247;
    public static final int TOK_TABLEROWFORMATCOLLITEMS=1248;
    public static final int TOK_TABLEROWFORMATFIELD=1249;
    public static final int TOK_TABLEROWFORMATLINES=1250;
    public static final int TOK_TABLEROWFORMATMAPKEYS=1251;
    public static final int TOK_TABLEROWFORMATNULL=1252;
    public static final int TOK_TABLESERIALIZER=1253;
    public static final int TOK_TABLESKEWED=1254;
    public static final int TOK_TABLESPLITSAMPLE=1255;
    public static final int TOK_TABLE_OR_COL=1256;
    public static final int TOK_TABLE_PARTITION=1257;
    public static final int TOK_TABLE_TYPE=1258;
    public static final int TOK_TABNAME=1259;
    public static final int TOK_TABREF=1260;
    public static final int TOK_TABSORTCOLNAMEASC=1261;
    public static final int TOK_TABSORTCOLNAMEDESC=1262;
    public static final int TOK_TABSRC=1263;
    public static final int TOK_TABTYPE=1264;
    public static final int TOK_TEMPORARY=1265;
    public static final int TOK_TIMESTAMP=1266;
    public static final int TOK_TIMESTAMPLITERAL=1267;
    public static final int TOK_TIMESTAMPLOCALTZ=1268;
    public static final int TOK_TIMESTAMPLOCALTZLITERAL=1269;
    public static final int TOK_TINYINT=1270;
    public static final int TOK_TMP_FILE=1271;
    public static final int TOK_TO=1272;
    public static final int TOK_TRANSFORM=1273;
    public static final int TOK_TRIGGER_EXPRESSION=1274;
    public static final int TOK_TRUE=1275;
    public static final int TOK_TRUNCATE=1276;
    public static final int TOK_TRUNCATETABLE=1277;
    public static final int TOK_TXN_ACCESS_MODE=1278;
    public static final int TOK_TXN_READ_ONLY=1279;
    public static final int TOK_TXN_READ_WRITE=1280;
    public static final int TOK_UNIONALL=1281;
    public static final int TOK_UNIONDISTINCT=1282;
    public static final int TOK_UNIONTYPE=1283;
    public static final int TOK_UNIQUE=1284;
    public static final int TOK_UNIQUEJOIN=1285;
    public static final int TOK_UNKNOWN=1286;
    public static final int TOK_UNLOCKDB=1287;
    public static final int TOK_UNLOCKTABLE=1288;
    public static final int TOK_UNMANAGED=1289;
    public static final int TOK_UPDATE=1290;
    public static final int TOK_UPDATE_TABLE=1291;
    public static final int TOK_URI_TYPE=1292;
    public static final int TOK_USER=1293;
    public static final int TOK_USERSCRIPTCOLNAMES=1294;
    public static final int TOK_USERSCRIPTCOLSCHEMA=1295;
    public static final int TOK_VALIDATE=1296;
    public static final int TOK_VARCHAR=1297;
    public static final int TOK_VIEWCLUSTERCOLS=1298;
    public static final int TOK_VIEWDISTRIBUTECOLS=1299;
    public static final int TOK_VIEWPARTCOLS=1300;
    public static final int TOK_VIEWSORTCOLS=1301;
    public static final int TOK_WHERE=1302;
    public static final int TOK_WINDOWDEF=1303;
    public static final int TOK_WINDOWRANGE=1304;
    public static final int TOK_WINDOWSPEC=1305;
    public static final int TOK_WINDOWVALUES=1306;
    public static final int TOK_WITHIN_GROUP=1307;
    public static final int TOK_WITH_SNAPSHOT_RETENTION=1308;
    public static final int TOK_YEAR=1309;

    // delegates
    public HiveParser_AlterClauseParser gAlterClauseParser;
    public HiveParser_SelectClauseParser gSelectClauseParser;
    public HiveParser_FromClauseParser gFromClauseParser;
    public HiveParser_IdentifiersParser gIdentifiersParser;
    public HiveParser_ResourcePlanParser gResourcePlanParser;
    public HiveParser_CreateDDLParser gCreateDDLParser;
    public HiveParser_PrepareStatementParser gPrepareStatementParser;
    public HiveParser_ReplClauseParser gReplClauseParser;
    public Parser[] getDelegates() {
        return new Parser[] {gAlterClauseParser, gSelectClauseParser, gFromClauseParser, gIdentifiersParser, gResourcePlanParser, gCreateDDLParser, gPrepareStatementParser, gReplClauseParser};
    }

    // delegators


    public HiveParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public HiveParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
        gAlterClauseParser = new HiveParser_AlterClauseParser(input, state, this);
        gSelectClauseParser = new HiveParser_SelectClauseParser(input, state, this);
        gFromClauseParser = new HiveParser_FromClauseParser(input, state, this);
        gIdentifiersParser = new HiveParser_IdentifiersParser(input, state, this);
        gResourcePlanParser = new HiveParser_ResourcePlanParser(input, state, this);
        gCreateDDLParser = new HiveParser_CreateDDLParser(input, state, this);
        gPrepareStatementParser = new HiveParser_PrepareStatementParser(input, state, this);
        gReplClauseParser = new HiveParser_ReplClauseParser(input, state, this);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
    gAlterClauseParser.setTreeAdaptor(this.adaptor);gSelectClauseParser.setTreeAdaptor(this.adaptor);gFromClauseParser.setTreeAdaptor(this.adaptor);gIdentifiersParser.setTreeAdaptor(this.adaptor);gResourcePlanParser.setTreeAdaptor(this.adaptor);gCreateDDLParser.setTreeAdaptor(this.adaptor);gPrepareStatementParser.setTreeAdaptor(this.adaptor);gReplClauseParser.setTreeAdaptor(this.adaptor);
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return HiveParser.tokenNames; }
    public String getGrammarFileName() { return "HiveParser.g"; }


      ArrayList<ParseError> errors = new ArrayList<ParseError>();
      Stack msgs = new Stack<String>();

      private static HashMap<String, String> xlateMap;
      static {
        //this is used to support auto completion in CLI
        xlateMap = new HashMap<String, String>();

        // Keywords
        xlateMap.put("KW_TRUE", "TRUE");
        xlateMap.put("KW_FALSE", "FALSE");
        xlateMap.put("KW_UNKNOWN", "UNKNOWN");
        xlateMap.put("KW_ALL", "ALL");
        xlateMap.put("KW_NONE", "NONE");
        xlateMap.put("KW_AND", "AND");
        xlateMap.put("KW_OR", "OR");
        xlateMap.put("KW_NOT", "NOT");
        xlateMap.put("KW_LIKE", "LIKE");

        xlateMap.put("KW_ASC", "ASC");
        xlateMap.put("KW_DESC", "DESC");
        xlateMap.put("KW_NULLS", "NULLS");
        xlateMap.put("KW_LAST", "LAST");
        xlateMap.put("KW_ORDER", "ORDER");
        xlateMap.put("KW_BY", "BY");
        xlateMap.put("KW_GROUP", "GROUP");
        xlateMap.put("KW_WHERE", "WHERE");
        xlateMap.put("KW_FROM", "FROM");
        xlateMap.put("KW_AS", "AS");
        xlateMap.put("KW_SELECT", "SELECT");
        xlateMap.put("KW_DISTINCT", "DISTINCT");
        xlateMap.put("KW_INSERT", "INSERT");
        xlateMap.put("KW_OVERWRITE", "OVERWRITE");
        xlateMap.put("KW_OUTER", "OUTER");
        xlateMap.put("KW_JOIN", "JOIN");
        xlateMap.put("KW_LEFT", "LEFT");
        xlateMap.put("KW_RIGHT", "RIGHT");
        xlateMap.put("KW_FULL", "FULL");
        xlateMap.put("KW_ON", "ON");
        xlateMap.put("KW_PARTITION", "PARTITION");
        xlateMap.put("KW_PARTITIONS", "PARTITIONS");
        xlateMap.put("KW_TABLE", "TABLE");
        xlateMap.put("KW_TABLES", "TABLES");
        xlateMap.put("KW_TBLPROPERTIES", "TBLPROPERTIES");
        xlateMap.put("KW_SHOW", "SHOW");
        xlateMap.put("KW_MSCK", "MSCK");
        xlateMap.put("KW_DIRECTORY", "DIRECTORY");
        xlateMap.put("KW_LOCAL", "LOCAL");
        xlateMap.put("KW_TRANSFORM", "TRANSFORM");
        xlateMap.put("KW_USING", "USING");
        xlateMap.put("KW_CLUSTER", "CLUSTER");
        xlateMap.put("KW_DISTRIBUTE", "DISTRIBUTE");
        xlateMap.put("KW_SORT", "SORT");
        xlateMap.put("KW_SYNC", "SYNC");
        xlateMap.put("KW_UNION", "UNION");
        xlateMap.put("KW_INTERSECT", "INTERSECT");
        xlateMap.put("KW_EXCEPT", "EXCEPT");
        xlateMap.put("KW_LOAD", "LOAD");
        xlateMap.put("KW_DATA", "DATA");
        xlateMap.put("KW_OPTIMIZE", "OPTIMIZE");
        xlateMap.put("KW_INPATH", "INPATH");
        xlateMap.put("KW_IS", "IS");
        xlateMap.put("KW_NULL", "NULL");
        xlateMap.put("KW_CREATE", "CREATE");
        xlateMap.put("KW_EXTERNAL", "EXTERNAL");
        xlateMap.put("KW_ALTER", "ALTER");
        xlateMap.put("KW_DESCRIBE", "DESCRIBE");
        xlateMap.put("KW_DROP", "DROP");
        xlateMap.put("KW_RENAME", "RENAME");
        xlateMap.put("KW_TO", "TO");
        xlateMap.put("KW_COMMENT", "COMMENT");
        xlateMap.put("KW_BOOLEAN", "BOOLEAN");
        xlateMap.put("KW_TINYINT", "TINYINT");
        xlateMap.put("KW_SMALLINT", "SMALLINT");
        xlateMap.put("KW_INT", "INT");
        xlateMap.put("KW_BIGINT", "BIGINT");
        xlateMap.put("KW_FLOAT", "FLOAT");
        xlateMap.put("KW_REAL", "REAL");
        xlateMap.put("KW_DOUBLE", "DOUBLE");
        xlateMap.put("KW_PRECISION", "PRECISION");
        xlateMap.put("KW_DATE", "DATE");
        xlateMap.put("KW_DATETIME", "DATETIME");
        xlateMap.put("KW_TIMESTAMP", "TIMESTAMP");
        xlateMap.put("KW_TIMESTAMPLOCALTZ", "TIMESTAMPLOCALTZ");
        xlateMap.put("KW_TIME", "TIME");
        xlateMap.put("KW_ZONE", "ZONE");
        xlateMap.put("KW_STRING", "STRING");
        xlateMap.put("KW_BINARY", "BINARY");
        xlateMap.put("KW_ARRAY", "ARRAY");
        xlateMap.put("KW_MAP", "MAP");
        xlateMap.put("KW_REDUCE", "REDUCE");
        xlateMap.put("KW_PARTITIONED", "PARTITIONED");
        xlateMap.put("KW_CLUSTERED", "CLUSTERED");
        xlateMap.put("KW_SORTED", "SORTED");
        xlateMap.put("KW_INTO", "INTO");
        xlateMap.put("KW_BUCKETS", "BUCKETS");
        xlateMap.put("KW_ROW", "ROW");
        xlateMap.put("KW_FORMAT", "FORMAT");
        xlateMap.put("KW_DELIMITED", "DELIMITED");
        xlateMap.put("KW_FIELDS", "FIELDS");
        xlateMap.put("KW_TERMINATED", "TERMINATED");
        xlateMap.put("KW_COLLECTION", "COLLECTION");
        xlateMap.put("KW_ITEMS", "ITEMS");
        xlateMap.put("KW_KEYS", "KEYS");
        xlateMap.put("KW_KEY_TYPE", "$KEY$");
        xlateMap.put("KW_LINES", "LINES");
        xlateMap.put("KW_STORED", "STORED");
        xlateMap.put("KW_SEQUENCEFILE", "SEQUENCEFILE");
        xlateMap.put("KW_TEXTFILE", "TEXTFILE");
        xlateMap.put("KW_INPUTFORMAT", "INPUTFORMAT");
        xlateMap.put("KW_OUTPUTFORMAT", "OUTPUTFORMAT");
        xlateMap.put("KW_LOCATION", "LOCATION");
        xlateMap.put("KW_MANAGEDLOCATION", "MANAGEDLOCATION");
        xlateMap.put("KW_TABLESAMPLE", "TABLESAMPLE");
        xlateMap.put("KW_BUCKET", "BUCKET");
        xlateMap.put("KW_OUT", "OUT");
        xlateMap.put("KW_OF", "OF");
        xlateMap.put("KW_CAST", "CAST");
        xlateMap.put("KW_ADD", "ADD");
        xlateMap.put("KW_REPLACE", "REPLACE");
        xlateMap.put("KW_COLUMNS", "COLUMNS");
        xlateMap.put("KW_RLIKE", "RLIKE");
        xlateMap.put("KW_REGEXP", "REGEXP");
        xlateMap.put("KW_TEMPORARY", "TEMPORARY");
        xlateMap.put("KW_FUNCTION", "FUNCTION");
        xlateMap.put("KW_FUNCTIONS", "FUNCTIONS");
        xlateMap.put("KW_EXPLAIN", "EXPLAIN");
        xlateMap.put("KW_DDL", "DDL");
        xlateMap.put("KW_EXTENDED", "EXTENDED");
        xlateMap.put("KW_DEBUG", "DEBUG");
        xlateMap.put("KW_SERDE", "SERDE");
        xlateMap.put("KW_WITH", "WITH");
        xlateMap.put("KW_SERDEPROPERTIES", "SERDEPROPERTIES");
        xlateMap.put("KW_LIMIT", "LIMIT");
        xlateMap.put("KW_OFFSET", "OFFSET");
        xlateMap.put("KW_SET", "SET");
        xlateMap.put("KW_PROPERTIES", "TBLPROPERTIES");
        xlateMap.put("KW_VALUE_TYPE", "$VALUE$");
        xlateMap.put("KW_ELEM_TYPE", "$ELEM$");
        xlateMap.put("KW_DEFINED", "DEFINED");
        xlateMap.put("KW_SUBQUERY", "SUBQUERY");
        xlateMap.put("KW_REWRITE", "REWRITE");
        xlateMap.put("KW_UPDATE", "UPDATE");
        xlateMap.put("KW_VALUES", "VALUES");
        xlateMap.put("KW_PURGE", "PURGE");
        xlateMap.put("KW_UNIQUE", "UNIQUE");
        xlateMap.put("KW_PRIMARY", "PRIMARY");
        xlateMap.put("KW_FOREIGN", "FOREIGN");
        xlateMap.put("KW_KEY", "KEY");
        xlateMap.put("KW_REFERENCES", "REFERENCES");
        xlateMap.put("KW_CONSTRAINT", "CONSTRAINT");
        xlateMap.put("KW_ENABLE", "ENABLE");
        xlateMap.put("KW_DISABLE", "DISABLE");
        xlateMap.put("KW_VALIDATE", "VALIDATE");
        xlateMap.put("KW_NOVALIDATE", "NOVALIDATE");
        xlateMap.put("KW_RELY", "RELY");
        xlateMap.put("KW_NORELY", "NORELY");
        xlateMap.put("KW_ABORT", "ABORT");
        xlateMap.put("KW_TRANSACTIONS", "TRANSACTIONS");
        xlateMap.put("KW_COMPACTIONS", "COMPACTIONS");
        xlateMap.put("KW_COMPACT", "COMPACT");
        xlateMap.put("KW_WAIT", "WAIT");
        xlateMap.put("KW_KILL", "KILL");
        xlateMap.put("KW_QUERY", "QUERY");
        xlateMap.put("KW_RESOURCE", "RESOURCE");
        xlateMap.put("KW_PLAN", "PLAN");
        xlateMap.put("KW_QUERY_PARALLELISM", "QUERY_PARALLELISM");
        xlateMap.put("KW_PLANS", "PLANS");
        xlateMap.put("KW_ACTIVATE", "ACTIVATE");
        xlateMap.put("KW_DEFAULT", "DEFAULT");
        xlateMap.put("KW_CHECK", "CHECK");
        xlateMap.put("KW_POOL", "POOL");
        xlateMap.put("KW_COMPACT_ID", "COMPACTIONID");
        xlateMap.put("KW_MOVE", "MOVE");
        xlateMap.put("KW_DO", "DO");
        xlateMap.put("KW_ALLOC_FRACTION", "ALLOC_FRACTION");
        xlateMap.put("KW_SCHEDULING_POLICY", "SCHEDULING_POLICY");
        xlateMap.put("KW_PATH", "PATH");
        xlateMap.put("KW_AST", "AST");
        xlateMap.put("KW_TRANSACTIONAL", "TRANSACTIONAL");
        xlateMap.put("KW_MANAGED", "MANAGED");
        xlateMap.put("KW_LEADING", "LEADING");
        xlateMap.put("KW_TRAILING", "TRAILING");
        xlateMap.put("KW_BOTH", "BOTH");

        xlateMap.put("KW_TYPE", "TYPE");
        xlateMap.put("KW_DATACONNECTOR", "CONNECTOR");
        xlateMap.put("KW_DATACONNECTORS", "CONNECTORS");
        xlateMap.put("KW_REMOTE", "REMOTE");
        xlateMap.put("KW_SPEC", "SPEC");
        xlateMap.put("KW_YEAR", "YEAR");
        xlateMap.put("KW_MONTH", "MONTH");
        xlateMap.put("KW_DAY", "DAY");
        xlateMap.put("KW_HOUR", "HOUR");
        xlateMap.put("KW_BUCKET", "BUCKET");
        xlateMap.put("KW_TRUNCATE", "TRUNCATE");

        // Operators
        xlateMap.put("DOT", ".");
        xlateMap.put("COLON", ":");
        xlateMap.put("COMMA", ",");
        xlateMap.put("SEMICOLON", ");");

        xlateMap.put("LPAREN", "(");
        xlateMap.put("RPAREN", ")");
        xlateMap.put("LSQUARE", "[");
        xlateMap.put("RSQUARE", "]");

        xlateMap.put("EQUAL", "=");
        xlateMap.put("NOTEQUAL", "<>");
        xlateMap.put("EQUAL_NS", "<=>");
        xlateMap.put("LESSTHANOREQUALTO", "<=");
        xlateMap.put("LESSTHAN", "<");
        xlateMap.put("GREATERTHANOREQUALTO", ">=");
        xlateMap.put("GREATERTHAN", ">");

        xlateMap.put("DIVIDE", "/");
        xlateMap.put("PLUS", "+");
        xlateMap.put("MINUS", "-");
        xlateMap.put("STAR", "*");
        xlateMap.put("MOD", "%");

        xlateMap.put("AMPERSAND", "&");
        xlateMap.put("TILDE", "~");
        xlateMap.put("BITWISEOR", "|");
        xlateMap.put("BITWISEXOR", "^");
        xlateMap.put("CharSetLiteral", "\\'");
      }

      public static Collection<String> getKeywords() {
        return xlateMap.values();
      }

      private static String xlate(String name) {

        String ret = xlateMap.get(name);
        if (ret == null) {
          ret = name;
        }

        return ret;
      }

      @Override
      public Object recoverFromMismatchedSet(IntStream input,
          RecognitionException re, BitSet follow) throws RecognitionException {
        throw re;
      }

      @Override
      public void displayRecognitionError(String[] tokenNames,
          RecognitionException e) {
        errors.add(new ParseError(this, e, tokenNames));
      }

      @Override
      public String getErrorHeader(RecognitionException e) {
        String header = null;
        if (e.charPositionInLine < 0 && input.LT(-1) != null) {
          Token t = input.LT(-1);
          header = "line " + t.getLine() + ":" + t.getCharPositionInLine();
        } else {
          header = super.getErrorHeader(e);
        }

        return header;
      }

      @Override
      public String getErrorMessage(RecognitionException e, String[] tokenNames) {
        String msg = null;

        // Translate the token names to something that the user can understand
        String[] xlateNames = new String[tokenNames.length];
        for (int i = 0; i < tokenNames.length; ++i) {
          xlateNames[i] = HiveParser.xlate(tokenNames[i]);
        }

        if (e instanceof NoViableAltException) {
          @SuppressWarnings("unused")
          NoViableAltException nvae = (NoViableAltException) e;
          // for development, can add
          // "decision=<<"+nvae.grammarDecisionDescription+">>"
          // and "(decision="+nvae.decisionNumber+") and
          // "state "+nvae.stateNumber
          msg = "cannot recognize input near"
                  + (input.LT(1) != null ? " " + getTokenErrorDisplay(input.LT(1)) : "")
                  + (input.LT(2) != null ? " " + getTokenErrorDisplay(input.LT(2)) : "")
                  + (input.LT(3) != null ? " " + getTokenErrorDisplay(input.LT(3)) : "");
        } else if (e instanceof MismatchedTokenException) {
          MismatchedTokenException mte = (MismatchedTokenException) e;
          msg = super.getErrorMessage(e, xlateNames) + (input.LT(-1) == null ? "":" near '" + input.LT(-1).getText()) + "'";
        } else if (e instanceof FailedPredicateException) {
          FailedPredicateException fpe = (FailedPredicateException) e;
          msg = "Failed to recognize predicate '" + fpe.token.getText() + "'. Failed rule: '" + fpe.ruleName + "'";
        } else {
          msg = super.getErrorMessage(e, xlateNames);
        }

        if (msgs.size() > 0) {
          msg = msg + " in " + msgs.peek();
        }
        return msg;
      }

      public void pushMsg(String msg, RecognizerSharedState state) {
        // ANTLR generated code does not wrap the @init code wit this backtracking check,
        //  even if the matching @after has it. If we have parser rules with that are doing
        // some lookahead with syntactic predicates this can cause the push() and pop() calls
        // to become unbalanced, so make sure both push/pop check the backtracking state.
        if (state.backtracking == 0) {
          msgs.push(msg);
        }
      }

      public void popMsg(RecognizerSharedState state) {
        if (state.backtracking == 0) {
          Object o = msgs.pop();
        }
      }

      // counter to generate unique union aliases
      private int aliasCounter;
      private String generateUnionAlias() {
        return "__u" + (++aliasCounter);
      }
      private char [] excludedCharForColumnName = {'.', ':'};
      private boolean containExcludedCharForCreateTableColumnName(String input) {
        for(char c : excludedCharForColumnName) {
          if(input.indexOf(c)>-1) {
            return true;
          }
        }
        return false;
      }
      private CommonTree throwSetOpException() throws RecognitionException {
        throw new FailedPredicateException(input, "orderByClause clusterByClause distributeByClause sortByClause limitClause can only be applied to the whole union.", "");
      }
      private CommonTree throwColumnNameException() throws RecognitionException {
        throw new FailedPredicateException(input, Arrays.toString(excludedCharForColumnName) + " can not be used in column name in create table statement.", "");
      }
      private Configuration hiveConf;
      public void setHiveConf(Configuration hiveConf) {
        this.hiveConf = hiveConf;
      }
      protected boolean nullsLast() {
        if(hiveConf == null){
          return HiveConf.ConfVars.HIVE_AM_SPLIT_GENERATION.defaultBoolVal;
        }
        return HiveConf.getBoolVar(hiveConf, HiveConf.ConfVars.HIVE_AM_SPLIT_GENERATION);
      }


    public static class statement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // HiveParser.g:901:1: statement : ( explainStatement EOF | execStatement EOF );
    public final HiveParser.statement_return statement() throws RecognitionException {
        HiveParser.statement_return retval = new HiveParser.statement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token EOF2=null;
        Token EOF4=null;
        HiveParser.explainStatement_return explainStatement1 =null;

        HiveParser.execStatement_return execStatement3 =null;


        ASTNode EOF2_tree=null;
        ASTNode EOF4_tree=null;

        try {
            // HiveParser.g:902:2: ( explainStatement EOF | execStatement EOF )
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==KW_EXPLAIN) ) {
                alt1=1;
            }
            else if ( (LA1_0==KW_ABORT||(LA1_0 >= KW_ALTER && LA1_0 <= KW_ANALYZE)||LA1_0==KW_COMMIT||LA1_0==KW_CREATE||LA1_0==KW_DELETE||(LA1_0 >= KW_DESC && LA1_0 <= KW_DESCRIBE)||LA1_0==KW_DISABLE||LA1_0==KW_DROP||LA1_0==KW_ENABLE||LA1_0==KW_EXECUTE||LA1_0==KW_EXPORT||LA1_0==KW_FROM||LA1_0==KW_GRANT||LA1_0==KW_IMPORT||LA1_0==KW_INSERT||LA1_0==KW_KILL||LA1_0==KW_LOAD||LA1_0==KW_LOCK||LA1_0==KW_MAP||LA1_0==KW_MERGE||LA1_0==KW_MSCK||LA1_0==KW_OPTIMIZE||LA1_0==KW_PREPARE||LA1_0==KW_REDUCE||LA1_0==KW_RELOAD||(LA1_0 >= KW_REPL && LA1_0 <= KW_REPLACE)||LA1_0==KW_REVOKE||LA1_0==KW_ROLLBACK||LA1_0==KW_SELECT||LA1_0==KW_SET||LA1_0==KW_SHOW||LA1_0==KW_START||LA1_0==KW_TRUNCATE||LA1_0==KW_UNLOCK||LA1_0==KW_UPDATE||LA1_0==KW_USE||LA1_0==KW_VALUES||LA1_0==KW_WITH||LA1_0==LPAREN) ) {
                alt1=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;

            }
            switch (alt1) {
                case 1 :
                    // HiveParser.g:902:4: explainStatement EOF
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_explainStatement_in_statement1566);
                    explainStatement1=explainStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explainStatement1.getTree());

                    EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_statement1568); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EOF2_tree = 
                    (ASTNode)adaptor.create(EOF2)
                    ;
                    adaptor.addChild(root_0, EOF2_tree);
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:903:4: execStatement EOF
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_execStatement_in_statement1573);
                    execStatement3=execStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, execStatement3.getTree());

                    EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_statement1575); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EOF4_tree = 
                    (ASTNode)adaptor.create(EOF4)
                    ;
                    adaptor.addChild(root_0, EOF4_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class explainStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explainStatement"
    // HiveParser.g:906:1: explainStatement : KW_EXPLAIN ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) ) ;
    public final HiveParser.explainStatement_return explainStatement() throws RecognitionException {
        HiveParser.explainStatement_return retval = new HiveParser.explainStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_EXPLAIN5=null;
        Token KW_REWRITE8=null;
        HiveParser.explainOption_return explainOption6 =null;

        HiveParser.execStatement_return execStatement7 =null;

        HiveParser.queryStatementExpression_return queryStatementExpression9 =null;


        ASTNode KW_EXPLAIN5_tree=null;
        ASTNode KW_REWRITE8_tree=null;
        RewriteRuleTokenStream stream_KW_REWRITE=new RewriteRuleTokenStream(adaptor,"token KW_REWRITE");
        RewriteRuleTokenStream stream_KW_EXPLAIN=new RewriteRuleTokenStream(adaptor,"token KW_EXPLAIN");
        RewriteRuleSubtreeStream stream_queryStatementExpression=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpression");
        RewriteRuleSubtreeStream stream_explainOption=new RewriteRuleSubtreeStream(adaptor,"rule explainOption");
        RewriteRuleSubtreeStream stream_execStatement=new RewriteRuleSubtreeStream(adaptor,"rule execStatement");
         pushMsg("explain statement", state); 
        try {
            // HiveParser.g:909:2: ( KW_EXPLAIN ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) ) )
            // HiveParser.g:909:4: KW_EXPLAIN ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) )
            {
            KW_EXPLAIN5=(Token)match(input,KW_EXPLAIN,FOLLOW_KW_EXPLAIN_in_explainStatement1596); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_EXPLAIN.add(KW_EXPLAIN5);


            // HiveParser.g:909:15: ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==KW_ABORT||(LA3_0 >= KW_ALTER && LA3_0 <= KW_ANALYZE)||LA3_0==KW_AST||LA3_0==KW_AUTHORIZATION||LA3_0==KW_CBO||LA3_0==KW_COMMIT||LA3_0==KW_CREATE||(LA3_0 >= KW_DDL && LA3_0 <= KW_DEBUG)||LA3_0==KW_DELETE||(LA3_0 >= KW_DEPENDENCY && LA3_0 <= KW_DESCRIBE)||LA3_0==KW_DISABLE||LA3_0==KW_DROP||LA3_0==KW_ENABLE||LA3_0==KW_EXECUTE||LA3_0==KW_EXPORT||LA3_0==KW_EXTENDED||(LA3_0 >= KW_FORMATTED && LA3_0 <= KW_FROM)||LA3_0==KW_GRANT||LA3_0==KW_IMPORT||LA3_0==KW_INSERT||LA3_0==KW_KILL||LA3_0==KW_LOAD||(LA3_0 >= KW_LOCK && LA3_0 <= KW_LOGICAL)||LA3_0==KW_MAP||LA3_0==KW_MERGE||LA3_0==KW_MSCK||LA3_0==KW_OPTIMIZE||LA3_0==KW_PREPARE||LA3_0==KW_REDUCE||LA3_0==KW_RELOAD||LA3_0==KW_REOPTIMIZATION||(LA3_0 >= KW_REPL && LA3_0 <= KW_REPLACE)||LA3_0==KW_REVOKE||LA3_0==KW_ROLLBACK||LA3_0==KW_SELECT||LA3_0==KW_SET||LA3_0==KW_SHOW||LA3_0==KW_START||LA3_0==KW_TRUNCATE||LA3_0==KW_UNLOCK||LA3_0==KW_UPDATE||LA3_0==KW_USE||LA3_0==KW_VALUES||LA3_0==KW_VECTORIZATION||LA3_0==KW_WITH||LA3_0==LPAREN) ) {
                alt3=1;
            }
            else if ( (LA3_0==KW_REWRITE) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // HiveParser.g:910:6: ( explainOption )* execStatement
                    {
                    // HiveParser.g:910:6: ( explainOption )*
                    loop2:
                    do {
                        int alt2=2;
                        alt2 = dfa2.predict(input);
                        switch (alt2) {
                    	case 1 :
                    	    // HiveParser.g:910:6: explainOption
                    	    {
                    	    pushFollow(FOLLOW_explainOption_in_explainStatement1605);
                    	    explainOption6=explainOption();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_explainOption.add(explainOption6.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop2;
                        }
                    } while (true);


                    pushFollow(FOLLOW_execStatement_in_explainStatement1608);
                    execStatement7=execStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_execStatement.add(execStatement7.getTree());

                    // AST REWRITE
                    // elements: explainOption, execStatement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 910:35: -> ^( TOK_EXPLAIN execStatement ( explainOption )* )
                    {
                        // HiveParser.g:910:38: ^( TOK_EXPLAIN execStatement ( explainOption )* )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_EXPLAIN, "TOK_EXPLAIN")
                        , root_1);

                        adaptor.addChild(root_1, stream_execStatement.nextTree());

                        // HiveParser.g:910:66: ( explainOption )*
                        while ( stream_explainOption.hasNext() ) {
                            adaptor.addChild(root_1, stream_explainOption.nextTree());

                        }
                        stream_explainOption.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:912:9: KW_REWRITE queryStatementExpression
                    {
                    KW_REWRITE8=(Token)match(input,KW_REWRITE,FOLLOW_KW_REWRITE_in_explainStatement1639); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_REWRITE.add(KW_REWRITE8);


                    pushFollow(FOLLOW_queryStatementExpression_in_explainStatement1641);
                    queryStatementExpression9=queryStatementExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_queryStatementExpression.add(queryStatementExpression9.getTree());

                    // AST REWRITE
                    // elements: queryStatementExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 912:45: -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression )
                    {
                        // HiveParser.g:912:48: ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_EXPLAIN_SQ_REWRITE, "TOK_EXPLAIN_SQ_REWRITE")
                        , root_1);

                        adaptor.addChild(root_1, stream_queryStatementExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explainStatement"


    public static class explainOption_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explainOption"
    // HiveParser.g:916:1: explainOption : ( KW_EXTENDED | KW_FORMATTED | KW_DEPENDENCY | KW_CBO ( KW_COST | KW_JOINCOST )? | KW_LOGICAL | KW_AUTHORIZATION | KW_ANALYZE | KW_REOPTIMIZATION | KW_LOCKS | KW_AST | ( KW_VECTORIZATION ( vectorizationOnly )? ( vectorizatonDetail )? ) | KW_DEBUG | KW_DDL );
    public final HiveParser.explainOption_return explainOption() throws RecognitionException {
        HiveParser.explainOption_return retval = new HiveParser.explainOption_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_EXTENDED10=null;
        Token KW_FORMATTED11=null;
        Token KW_DEPENDENCY12=null;
        Token KW_CBO13=null;
        Token set14=null;
        Token KW_LOGICAL15=null;
        Token KW_AUTHORIZATION16=null;
        Token KW_ANALYZE17=null;
        Token KW_REOPTIMIZATION18=null;
        Token KW_LOCKS19=null;
        Token KW_AST20=null;
        Token KW_VECTORIZATION21=null;
        Token KW_DEBUG24=null;
        Token KW_DDL25=null;
        HiveParser.vectorizationOnly_return vectorizationOnly22 =null;

        HiveParser.vectorizatonDetail_return vectorizatonDetail23 =null;


        ASTNode KW_EXTENDED10_tree=null;
        ASTNode KW_FORMATTED11_tree=null;
        ASTNode KW_DEPENDENCY12_tree=null;
        ASTNode KW_CBO13_tree=null;
        ASTNode set14_tree=null;
        ASTNode KW_LOGICAL15_tree=null;
        ASTNode KW_AUTHORIZATION16_tree=null;
        ASTNode KW_ANALYZE17_tree=null;
        ASTNode KW_REOPTIMIZATION18_tree=null;
        ASTNode KW_LOCKS19_tree=null;
        ASTNode KW_AST20_tree=null;
        ASTNode KW_VECTORIZATION21_tree=null;
        ASTNode KW_DEBUG24_tree=null;
        ASTNode KW_DDL25_tree=null;

         msgs.push("explain option"); 
        try {
            // HiveParser.g:919:5: ( KW_EXTENDED | KW_FORMATTED | KW_DEPENDENCY | KW_CBO ( KW_COST | KW_JOINCOST )? | KW_LOGICAL | KW_AUTHORIZATION | KW_ANALYZE | KW_REOPTIMIZATION | KW_LOCKS | KW_AST | ( KW_VECTORIZATION ( vectorizationOnly )? ( vectorizatonDetail )? ) | KW_DEBUG | KW_DDL )
            int alt7=13;
            switch ( input.LA(1) ) {
            case KW_EXTENDED:
                {
                alt7=1;
                }
                break;
            case KW_FORMATTED:
                {
                alt7=2;
                }
                break;
            case KW_DEPENDENCY:
                {
                alt7=3;
                }
                break;
            case KW_CBO:
                {
                alt7=4;
                }
                break;
            case KW_LOGICAL:
                {
                alt7=5;
                }
                break;
            case KW_AUTHORIZATION:
                {
                alt7=6;
                }
                break;
            case KW_ANALYZE:
                {
                alt7=7;
                }
                break;
            case KW_REOPTIMIZATION:
                {
                alt7=8;
                }
                break;
            case KW_LOCKS:
                {
                alt7=9;
                }
                break;
            case KW_AST:
                {
                alt7=10;
                }
                break;
            case KW_VECTORIZATION:
                {
                alt7=11;
                }
                break;
            case KW_DEBUG:
                {
                alt7=12;
                }
                break;
            case KW_DDL:
                {
                alt7=13;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }

            switch (alt7) {
                case 1 :
                    // HiveParser.g:919:7: KW_EXTENDED
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    KW_EXTENDED10=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_explainOption1681); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KW_EXTENDED10_tree = 
                    (ASTNode)adaptor.create(KW_EXTENDED10)
                    ;
                    adaptor.addChild(root_0, KW_EXTENDED10_tree);
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:920:7: KW_FORMATTED
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    KW_FORMATTED11=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_explainOption1689); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KW_FORMATTED11_tree = 
                    (ASTNode)adaptor.create(KW_FORMATTED11)
                    ;
                    adaptor.addChild(root_0, KW_FORMATTED11_tree);
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:921:7: KW_DEPENDENCY
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    KW_DEPENDENCY12=(Token)match(input,KW_DEPENDENCY,FOLLOW_KW_DEPENDENCY_in_explainOption1697); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KW_DEPENDENCY12_tree = 
                    (ASTNode)adaptor.create(KW_DEPENDENCY12)
                    ;
                    adaptor.addChild(root_0, KW_DEPENDENCY12_tree);
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:922:7: KW_CBO ( KW_COST | KW_JOINCOST )?
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    KW_CBO13=(Token)match(input,KW_CBO,FOLLOW_KW_CBO_in_explainOption1705); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KW_CBO13_tree = 
                    (ASTNode)adaptor.create(KW_CBO13)
                    ;
                    adaptor.addChild(root_0, KW_CBO13_tree);
                    }

                    // HiveParser.g:922:14: ( KW_COST | KW_JOINCOST )?
                    int alt4=2;
                    int LA4_0 = input.LA(1);

                    if ( (LA4_0==KW_COST||LA4_0==KW_JOINCOST) ) {
                        alt4=1;
                    }
                    switch (alt4) {
                        case 1 :
                            // HiveParser.g:
                            {
                            set14=(Token)input.LT(1);

                            if ( input.LA(1)==KW_COST||input.LA(1)==KW_JOINCOST ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (ASTNode)adaptor.create(set14)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // HiveParser.g:923:7: KW_LOGICAL
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    KW_LOGICAL15=(Token)match(input,KW_LOGICAL,FOLLOW_KW_LOGICAL_in_explainOption1722); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KW_LOGICAL15_tree = 
                    (ASTNode)adaptor.create(KW_LOGICAL15)
                    ;
                    adaptor.addChild(root_0, KW_LOGICAL15_tree);
                    }

                    }
                    break;
                case 6 :
                    // HiveParser.g:924:7: KW_AUTHORIZATION
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    KW_AUTHORIZATION16=(Token)match(input,KW_AUTHORIZATION,FOLLOW_KW_AUTHORIZATION_in_explainOption1730); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KW_AUTHORIZATION16_tree = 
                    (ASTNode)adaptor.create(KW_AUTHORIZATION16)
                    ;
                    adaptor.addChild(root_0, KW_AUTHORIZATION16_tree);
                    }

                    }
                    break;
                case 7 :
                    // HiveParser.g:925:7: KW_ANALYZE
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    KW_ANALYZE17=(Token)match(input,KW_ANALYZE,FOLLOW_KW_ANALYZE_in_explainOption1738); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KW_ANALYZE17_tree = 
                    (ASTNode)adaptor.create(KW_ANALYZE17)
                    ;
                    adaptor.addChild(root_0, KW_ANALYZE17_tree);
                    }

                    }
                    break;
                case 8 :
                    // HiveParser.g:926:7: KW_REOPTIMIZATION
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    KW_REOPTIMIZATION18=(Token)match(input,KW_REOPTIMIZATION,FOLLOW_KW_REOPTIMIZATION_in_explainOption1746); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KW_REOPTIMIZATION18_tree = 
                    (ASTNode)adaptor.create(KW_REOPTIMIZATION18)
                    ;
                    adaptor.addChild(root_0, KW_REOPTIMIZATION18_tree);
                    }

                    }
                    break;
                case 9 :
                    // HiveParser.g:927:7: KW_LOCKS
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    KW_LOCKS19=(Token)match(input,KW_LOCKS,FOLLOW_KW_LOCKS_in_explainOption1754); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KW_LOCKS19_tree = 
                    (ASTNode)adaptor.create(KW_LOCKS19)
                    ;
                    adaptor.addChild(root_0, KW_LOCKS19_tree);
                    }

                    }
                    break;
                case 10 :
                    // HiveParser.g:928:7: KW_AST
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    KW_AST20=(Token)match(input,KW_AST,FOLLOW_KW_AST_in_explainOption1762); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KW_AST20_tree = 
                    (ASTNode)adaptor.create(KW_AST20)
                    ;
                    adaptor.addChild(root_0, KW_AST20_tree);
                    }

                    }
                    break;
                case 11 :
                    // HiveParser.g:929:7: ( KW_VECTORIZATION ( vectorizationOnly )? ( vectorizatonDetail )? )
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    // HiveParser.g:929:7: ( KW_VECTORIZATION ( vectorizationOnly )? ( vectorizatonDetail )? )
                    // HiveParser.g:929:8: KW_VECTORIZATION ( vectorizationOnly )? ( vectorizatonDetail )?
                    {
                    KW_VECTORIZATION21=(Token)match(input,KW_VECTORIZATION,FOLLOW_KW_VECTORIZATION_in_explainOption1771); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KW_VECTORIZATION21_tree = 
                    (ASTNode)adaptor.create(KW_VECTORIZATION21)
                    ;
                    adaptor.addChild(root_0, KW_VECTORIZATION21_tree);
                    }

                    // HiveParser.g:929:25: ( vectorizationOnly )?
                    int alt5=2;
                    alt5 = dfa5.predict(input);
                    switch (alt5) {
                        case 1 :
                            // HiveParser.g:929:25: vectorizationOnly
                            {
                            pushFollow(FOLLOW_vectorizationOnly_in_explainOption1773);
                            vectorizationOnly22=vectorizationOnly();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, vectorizationOnly22.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:929:44: ( vectorizatonDetail )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==KW_DETAIL||LA6_0==KW_EXPRESSION||LA6_0==KW_OPERATOR||LA6_0==KW_SUMMARY) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // HiveParser.g:929:44: vectorizatonDetail
                            {
                            pushFollow(FOLLOW_vectorizatonDetail_in_explainOption1776);
                            vectorizatonDetail23=vectorizatonDetail();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, vectorizatonDetail23.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 12 :
                    // HiveParser.g:930:7: KW_DEBUG
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    KW_DEBUG24=(Token)match(input,KW_DEBUG,FOLLOW_KW_DEBUG_in_explainOption1786); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KW_DEBUG24_tree = 
                    (ASTNode)adaptor.create(KW_DEBUG24)
                    ;
                    adaptor.addChild(root_0, KW_DEBUG24_tree);
                    }

                    }
                    break;
                case 13 :
                    // HiveParser.g:931:7: KW_DDL
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    KW_DDL25=(Token)match(input,KW_DDL,FOLLOW_KW_DDL_in_explainOption1794); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KW_DDL25_tree = 
                    (ASTNode)adaptor.create(KW_DDL25)
                    ;
                    adaptor.addChild(root_0, KW_DDL25_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { msgs.pop(); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explainOption"


    public static class vectorizationOnly_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "vectorizationOnly"
    // HiveParser.g:934:1: vectorizationOnly : KW_ONLY -> ^( TOK_ONLY ) ;
    public final HiveParser.vectorizationOnly_return vectorizationOnly() throws RecognitionException {
        HiveParser.vectorizationOnly_return retval = new HiveParser.vectorizationOnly_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_ONLY26=null;

        ASTNode KW_ONLY26_tree=null;
        RewriteRuleTokenStream stream_KW_ONLY=new RewriteRuleTokenStream(adaptor,"token KW_ONLY");

         pushMsg("vectorization's only clause", state); 
        try {
            // HiveParser.g:937:5: ( KW_ONLY -> ^( TOK_ONLY ) )
            // HiveParser.g:937:7: KW_ONLY
            {
            KW_ONLY26=(Token)match(input,KW_ONLY,FOLLOW_KW_ONLY_in_vectorizationOnly1821); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ONLY.add(KW_ONLY26);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 938:5: -> ^( TOK_ONLY )
            {
                // HiveParser.g:938:8: ^( TOK_ONLY )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_ONLY, "TOK_ONLY")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "vectorizationOnly"


    public static class vectorizatonDetail_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "vectorizatonDetail"
    // HiveParser.g:941:1: vectorizatonDetail : ( KW_SUMMARY -> ^( TOK_SUMMARY ) | KW_OPERATOR -> ^( TOK_OPERATOR ) | KW_EXPRESSION -> ^( TOK_EXPRESSION ) | KW_DETAIL -> ^( TOK_DETAIL ) );
    public final HiveParser.vectorizatonDetail_return vectorizatonDetail() throws RecognitionException {
        HiveParser.vectorizatonDetail_return retval = new HiveParser.vectorizatonDetail_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_SUMMARY27=null;
        Token KW_OPERATOR28=null;
        Token KW_EXPRESSION29=null;
        Token KW_DETAIL30=null;

        ASTNode KW_SUMMARY27_tree=null;
        ASTNode KW_OPERATOR28_tree=null;
        ASTNode KW_EXPRESSION29_tree=null;
        ASTNode KW_DETAIL30_tree=null;
        RewriteRuleTokenStream stream_KW_SUMMARY=new RewriteRuleTokenStream(adaptor,"token KW_SUMMARY");
        RewriteRuleTokenStream stream_KW_DETAIL=new RewriteRuleTokenStream(adaptor,"token KW_DETAIL");
        RewriteRuleTokenStream stream_KW_OPERATOR=new RewriteRuleTokenStream(adaptor,"token KW_OPERATOR");
        RewriteRuleTokenStream stream_KW_EXPRESSION=new RewriteRuleTokenStream(adaptor,"token KW_EXPRESSION");

         pushMsg("vectorization's detail level clause", state); 
        try {
            // HiveParser.g:944:5: ( KW_SUMMARY -> ^( TOK_SUMMARY ) | KW_OPERATOR -> ^( TOK_OPERATOR ) | KW_EXPRESSION -> ^( TOK_EXPRESSION ) | KW_DETAIL -> ^( TOK_DETAIL ) )
            int alt8=4;
            switch ( input.LA(1) ) {
            case KW_SUMMARY:
                {
                alt8=1;
                }
                break;
            case KW_OPERATOR:
                {
                alt8=2;
                }
                break;
            case KW_EXPRESSION:
                {
                alt8=3;
                }
                break;
            case KW_DETAIL:
                {
                alt8=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }

            switch (alt8) {
                case 1 :
                    // HiveParser.g:944:7: KW_SUMMARY
                    {
                    KW_SUMMARY27=(Token)match(input,KW_SUMMARY,FOLLOW_KW_SUMMARY_in_vectorizatonDetail1858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SUMMARY.add(KW_SUMMARY27);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 945:5: -> ^( TOK_SUMMARY )
                    {
                        // HiveParser.g:945:8: ^( TOK_SUMMARY )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SUMMARY, "TOK_SUMMARY")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:946:7: KW_OPERATOR
                    {
                    KW_OPERATOR28=(Token)match(input,KW_OPERATOR,FOLLOW_KW_OPERATOR_in_vectorizatonDetail1876); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_OPERATOR.add(KW_OPERATOR28);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 947:5: -> ^( TOK_OPERATOR )
                    {
                        // HiveParser.g:947:8: ^( TOK_OPERATOR )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_OPERATOR, "TOK_OPERATOR")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:948:7: KW_EXPRESSION
                    {
                    KW_EXPRESSION29=(Token)match(input,KW_EXPRESSION,FOLLOW_KW_EXPRESSION_in_vectorizatonDetail1894); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_EXPRESSION.add(KW_EXPRESSION29);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 949:5: -> ^( TOK_EXPRESSION )
                    {
                        // HiveParser.g:949:8: ^( TOK_EXPRESSION )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_EXPRESSION, "TOK_EXPRESSION")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:950:7: KW_DETAIL
                    {
                    KW_DETAIL30=(Token)match(input,KW_DETAIL,FOLLOW_KW_DETAIL_in_vectorizatonDetail1912); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DETAIL.add(KW_DETAIL30);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 951:5: -> ^( TOK_DETAIL )
                    {
                        // HiveParser.g:951:8: ^( TOK_DETAIL )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DETAIL, "TOK_DETAIL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "vectorizatonDetail"


    public static class execStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "execStatement"
    // HiveParser.g:954:1: execStatement : ( queryStatementExpression | loadStatement | exportStatement | importStatement | replDumpStatement | replLoadStatement | replStatusStatement | ddlStatement | deleteStatement | updateStatement | sqlTransactionStatement | mergeStatement | prepareStatement | executeStatement );
    public final HiveParser.execStatement_return execStatement() throws RecognitionException {
        HiveParser.execStatement_return retval = new HiveParser.execStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.queryStatementExpression_return queryStatementExpression31 =null;

        HiveParser.loadStatement_return loadStatement32 =null;

        HiveParser.exportStatement_return exportStatement33 =null;

        HiveParser.importStatement_return importStatement34 =null;

        HiveParser_ReplClauseParser.replDumpStatement_return replDumpStatement35 =null;

        HiveParser_ReplClauseParser.replLoadStatement_return replLoadStatement36 =null;

        HiveParser_ReplClauseParser.replStatusStatement_return replStatusStatement37 =null;

        HiveParser.ddlStatement_return ddlStatement38 =null;

        HiveParser.deleteStatement_return deleteStatement39 =null;

        HiveParser.updateStatement_return updateStatement40 =null;

        HiveParser.sqlTransactionStatement_return sqlTransactionStatement41 =null;

        HiveParser.mergeStatement_return mergeStatement42 =null;

        HiveParser_PrepareStatementParser.prepareStatement_return prepareStatement43 =null;

        HiveParser_PrepareStatementParser.executeStatement_return executeStatement44 =null;



         pushMsg("statement", state); 
        try {
            // HiveParser.g:957:5: ( queryStatementExpression | loadStatement | exportStatement | importStatement | replDumpStatement | replLoadStatement | replStatusStatement | ddlStatement | deleteStatement | updateStatement | sqlTransactionStatement | mergeStatement | prepareStatement | executeStatement )
            int alt9=14;
            switch ( input.LA(1) ) {
            case KW_FROM:
            case KW_INSERT:
            case KW_MAP:
            case KW_REDUCE:
            case KW_SELECT:
            case KW_VALUES:
            case KW_WITH:
            case LPAREN:
                {
                alt9=1;
                }
                break;
            case KW_LOAD:
                {
                alt9=2;
                }
                break;
            case KW_EXPORT:
                {
                alt9=3;
                }
                break;
            case KW_IMPORT:
                {
                alt9=4;
                }
                break;
            case KW_REPL:
                {
                switch ( input.LA(2) ) {
                case KW_DUMP:
                    {
                    alt9=5;
                    }
                    break;
                case KW_LOAD:
                    {
                    alt9=6;
                    }
                    break;
                case KW_STATUS:
                    {
                    alt9=7;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 12, input);

                    throw nvae;

                }

                }
                break;
            case KW_ABORT:
            case KW_ALTER:
            case KW_ANALYZE:
            case KW_CREATE:
            case KW_DESC:
            case KW_DESCRIBE:
            case KW_DISABLE:
            case KW_DROP:
            case KW_ENABLE:
            case KW_GRANT:
            case KW_KILL:
            case KW_LOCK:
            case KW_MSCK:
            case KW_OPTIMIZE:
            case KW_RELOAD:
            case KW_REPLACE:
            case KW_REVOKE:
            case KW_SHOW:
            case KW_TRUNCATE:
            case KW_UNLOCK:
            case KW_USE:
                {
                alt9=8;
                }
                break;
            case KW_SET:
                {
                int LA9_29 = input.LA(2);

                if ( (LA9_29==KW_ROLE) ) {
                    alt9=8;
                }
                else if ( (LA9_29==KW_AUTOCOMMIT) ) {
                    alt9=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 29, input);

                    throw nvae;

                }
                }
                break;
            case KW_DELETE:
                {
                alt9=9;
                }
                break;
            case KW_UPDATE:
                {
                alt9=10;
                }
                break;
            case KW_COMMIT:
            case KW_ROLLBACK:
            case KW_START:
                {
                alt9=11;
                }
                break;
            case KW_MERGE:
                {
                alt9=12;
                }
                break;
            case KW_PREPARE:
                {
                alt9=13;
                }
                break;
            case KW_EXECUTE:
                {
                alt9=14;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }

            switch (alt9) {
                case 1 :
                    // HiveParser.g:957:7: queryStatementExpression
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_queryStatementExpression_in_execStatement1949);
                    queryStatementExpression31=queryStatementExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, queryStatementExpression31.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:958:7: loadStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_loadStatement_in_execStatement1957);
                    loadStatement32=loadStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, loadStatement32.getTree());

                    }
                    break;
                case 3 :
                    // HiveParser.g:959:7: exportStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_exportStatement_in_execStatement1965);
                    exportStatement33=exportStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exportStatement33.getTree());

                    }
                    break;
                case 4 :
                    // HiveParser.g:960:7: importStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_importStatement_in_execStatement1973);
                    importStatement34=importStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, importStatement34.getTree());

                    }
                    break;
                case 5 :
                    // HiveParser.g:961:7: replDumpStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_replDumpStatement_in_execStatement1981);
                    replDumpStatement35=replDumpStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, replDumpStatement35.getTree());

                    }
                    break;
                case 6 :
                    // HiveParser.g:962:7: replLoadStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_replLoadStatement_in_execStatement1989);
                    replLoadStatement36=replLoadStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, replLoadStatement36.getTree());

                    }
                    break;
                case 7 :
                    // HiveParser.g:963:7: replStatusStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_replStatusStatement_in_execStatement1997);
                    replStatusStatement37=replStatusStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, replStatusStatement37.getTree());

                    }
                    break;
                case 8 :
                    // HiveParser.g:964:7: ddlStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_ddlStatement_in_execStatement2005);
                    ddlStatement38=ddlStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ddlStatement38.getTree());

                    }
                    break;
                case 9 :
                    // HiveParser.g:965:7: deleteStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_deleteStatement_in_execStatement2013);
                    deleteStatement39=deleteStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteStatement39.getTree());

                    }
                    break;
                case 10 :
                    // HiveParser.g:966:7: updateStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_updateStatement_in_execStatement2021);
                    updateStatement40=updateStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateStatement40.getTree());

                    }
                    break;
                case 11 :
                    // HiveParser.g:967:7: sqlTransactionStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_sqlTransactionStatement_in_execStatement2029);
                    sqlTransactionStatement41=sqlTransactionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlTransactionStatement41.getTree());

                    }
                    break;
                case 12 :
                    // HiveParser.g:968:7: mergeStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_mergeStatement_in_execStatement2037);
                    mergeStatement42=mergeStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeStatement42.getTree());

                    }
                    break;
                case 13 :
                    // HiveParser.g:969:7: prepareStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_prepareStatement_in_execStatement2045);
                    prepareStatement43=prepareStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepareStatement43.getTree());

                    }
                    break;
                case 14 :
                    // HiveParser.g:970:7: executeStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_executeStatement_in_execStatement2053);
                    executeStatement44=executeStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, executeStatement44.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "execStatement"


    public static class loadStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "loadStatement"
    // HiveParser.g:973:1: loadStatement : KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) ( inputFileFormat )? -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ( inputFileFormat )? ) ;
    public final HiveParser.loadStatement_return loadStatement() throws RecognitionException {
        HiveParser.loadStatement_return retval = new HiveParser.loadStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token islocal=null;
        Token path=null;
        Token isoverwrite=null;
        Token KW_LOAD45=null;
        Token KW_DATA46=null;
        Token KW_INPATH47=null;
        Token KW_INTO48=null;
        Token KW_TABLE49=null;
        HiveParser_IdentifiersParser.tableOrPartition_return tab =null;

        HiveParser.inputFileFormat_return inputFileFormat50 =null;


        ASTNode islocal_tree=null;
        ASTNode path_tree=null;
        ASTNode isoverwrite_tree=null;
        ASTNode KW_LOAD45_tree=null;
        ASTNode KW_DATA46_tree=null;
        ASTNode KW_INPATH47_tree=null;
        ASTNode KW_INTO48_tree=null;
        ASTNode KW_TABLE49_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_KW_INPATH=new RewriteRuleTokenStream(adaptor,"token KW_INPATH");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
        RewriteRuleTokenStream stream_KW_LOAD=new RewriteRuleTokenStream(adaptor,"token KW_LOAD");
        RewriteRuleTokenStream stream_KW_DATA=new RewriteRuleTokenStream(adaptor,"token KW_DATA");
        RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
        RewriteRuleSubtreeStream stream_inputFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule inputFileFormat");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
         pushMsg("load statement", state); 
        try {
            // HiveParser.g:976:5: ( KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) ( inputFileFormat )? -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ( inputFileFormat )? ) )
            // HiveParser.g:976:7: KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) ( inputFileFormat )?
            {
            KW_LOAD45=(Token)match(input,KW_LOAD,FOLLOW_KW_LOAD_in_loadStatement2080); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LOAD.add(KW_LOAD45);


            KW_DATA46=(Token)match(input,KW_DATA,FOLLOW_KW_DATA_in_loadStatement2082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DATA.add(KW_DATA46);


            // HiveParser.g:976:23: (islocal= KW_LOCAL )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==KW_LOCAL) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // HiveParser.g:976:24: islocal= KW_LOCAL
                    {
                    islocal=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_loadStatement2087); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_LOCAL.add(islocal);


                    }
                    break;

            }


            KW_INPATH47=(Token)match(input,KW_INPATH,FOLLOW_KW_INPATH_in_loadStatement2091); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_INPATH.add(KW_INPATH47);


            // HiveParser.g:976:53: (path= StringLiteral )
            // HiveParser.g:976:54: path= StringLiteral
            {
            path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_loadStatement2096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(path);


            }


            // HiveParser.g:976:74: (isoverwrite= KW_OVERWRITE )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==KW_OVERWRITE) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // HiveParser.g:976:75: isoverwrite= KW_OVERWRITE
                    {
                    isoverwrite=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_loadStatement2102); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_OVERWRITE.add(isoverwrite);


                    }
                    break;

            }


            KW_INTO48=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_loadStatement2106); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO48);


            KW_TABLE49=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_loadStatement2108); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE49);


            // HiveParser.g:976:119: (tab= tableOrPartition )
            // HiveParser.g:976:120: tab= tableOrPartition
            {
            pushFollow(FOLLOW_tableOrPartition_in_loadStatement2113);
            tab=tableOrPartition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableOrPartition.add(tab.getTree());

            }


            // HiveParser.g:976:142: ( inputFileFormat )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==KW_INPUTFORMAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // HiveParser.g:976:142: inputFileFormat
                    {
                    pushFollow(FOLLOW_inputFileFormat_in_loadStatement2116);
                    inputFileFormat50=inputFileFormat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inputFileFormat.add(inputFileFormat50.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tab, inputFileFormat, islocal, path, isoverwrite
            // token labels: islocal, path, isoverwrite
            // rule labels: tab, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_islocal=new RewriteRuleTokenStream(adaptor,"token islocal",islocal);
            RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
            RewriteRuleTokenStream stream_isoverwrite=new RewriteRuleTokenStream(adaptor,"token isoverwrite",isoverwrite);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 977:5: -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ( inputFileFormat )? )
            {
                // HiveParser.g:977:8: ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ( inputFileFormat )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_LOAD, "TOK_LOAD")
                , root_1);

                adaptor.addChild(root_1, stream_path.nextNode());

                adaptor.addChild(root_1, stream_tab.nextTree());

                // HiveParser.g:977:31: ( $islocal)?
                if ( stream_islocal.hasNext() ) {
                    adaptor.addChild(root_1, stream_islocal.nextNode());

                }
                stream_islocal.reset();

                // HiveParser.g:977:41: ( $isoverwrite)?
                if ( stream_isoverwrite.hasNext() ) {
                    adaptor.addChild(root_1, stream_isoverwrite.nextNode());

                }
                stream_isoverwrite.reset();

                // HiveParser.g:977:54: ( inputFileFormat )?
                if ( stream_inputFileFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_inputFileFormat.nextTree());

                }
                stream_inputFileFormat.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "loadStatement"


    public static class exportStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exportStatement"
    // HiveParser.g:980:1: exportStatement : KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) ( replicationClause )? -> ^( TOK_EXPORT $tab $path ( replicationClause )? ) ;
    public final HiveParser.exportStatement_return exportStatement() throws RecognitionException {
        HiveParser.exportStatement_return retval = new HiveParser.exportStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token path=null;
        Token KW_EXPORT51=null;
        Token KW_TABLE52=null;
        Token KW_TO53=null;
        HiveParser_IdentifiersParser.tableOrPartition_return tab =null;

        HiveParser_ReplClauseParser.replicationClause_return replicationClause54 =null;


        ASTNode path_tree=null;
        ASTNode KW_EXPORT51_tree=null;
        ASTNode KW_TABLE52_tree=null;
        ASTNode KW_TO53_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleTokenStream stream_KW_EXPORT=new RewriteRuleTokenStream(adaptor,"token KW_EXPORT");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
        RewriteRuleSubtreeStream stream_replicationClause=new RewriteRuleSubtreeStream(adaptor,"rule replicationClause");
         pushMsg("export statement", state); 
        try {
            // HiveParser.g:983:5: ( KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) ( replicationClause )? -> ^( TOK_EXPORT $tab $path ( replicationClause )? ) )
            // HiveParser.g:983:7: KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) ( replicationClause )?
            {
            KW_EXPORT51=(Token)match(input,KW_EXPORT,FOLLOW_KW_EXPORT_in_exportStatement2171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_EXPORT.add(KW_EXPORT51);


            KW_TABLE52=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_exportStatement2179); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE52);


            // HiveParser.g:984:16: (tab= tableOrPartition )
            // HiveParser.g:984:17: tab= tableOrPartition
            {
            pushFollow(FOLLOW_tableOrPartition_in_exportStatement2184);
            tab=tableOrPartition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableOrPartition.add(tab.getTree());

            }


            KW_TO53=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_exportStatement2193); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO53);


            // HiveParser.g:985:13: (path= StringLiteral )
            // HiveParser.g:985:14: path= StringLiteral
            {
            path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_exportStatement2198); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(path);


            }


            // HiveParser.g:986:7: ( replicationClause )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==KW_FOR) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // HiveParser.g:986:7: replicationClause
                    {
                    pushFollow(FOLLOW_replicationClause_in_exportStatement2207);
                    replicationClause54=replicationClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_replicationClause.add(replicationClause54.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: path, replicationClause, tab
            // token labels: path
            // rule labels: tab, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 987:5: -> ^( TOK_EXPORT $tab $path ( replicationClause )? )
            {
                // HiveParser.g:987:8: ^( TOK_EXPORT $tab $path ( replicationClause )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_EXPORT, "TOK_EXPORT")
                , root_1);

                adaptor.addChild(root_1, stream_tab.nextTree());

                adaptor.addChild(root_1, stream_path.nextNode());

                // HiveParser.g:987:32: ( replicationClause )?
                if ( stream_replicationClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_replicationClause.nextTree());

                }
                stream_replicationClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exportStatement"


    public static class importStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "importStatement"
    // HiveParser.g:990:1: importStatement : KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) ;
    public final HiveParser.importStatement_return importStatement() throws RecognitionException {
        HiveParser.importStatement_return retval = new HiveParser.importStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token ext=null;
        Token path=null;
        Token KW_IMPORT55=null;
        Token KW_TABLE56=null;
        Token KW_FROM57=null;
        HiveParser_IdentifiersParser.tableOrPartition_return tab =null;

        HiveParser.tableLocation_return tableLocation58 =null;


        ASTNode ext_tree=null;
        ASTNode path_tree=null;
        ASTNode KW_IMPORT55_tree=null;
        ASTNode KW_TABLE56_tree=null;
        ASTNode KW_FROM57_tree=null;
        RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_IMPORT=new RewriteRuleTokenStream(adaptor,"token KW_IMPORT");
        RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
         pushMsg("import statement", state); 
        try {
            // HiveParser.g:993:8: ( KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) )
            // HiveParser.g:993:10: KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )?
            {
            KW_IMPORT55=(Token)match(input,KW_IMPORT,FOLLOW_KW_IMPORT_in_importStatement2257); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_IMPORT.add(KW_IMPORT55);


            // HiveParser.g:994:10: ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==KW_EXTERNAL||LA15_0==KW_TABLE) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // HiveParser.g:994:11: (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition )
                    {
                    // HiveParser.g:994:11: (ext= KW_EXTERNAL )?
                    int alt14=2;
                    int LA14_0 = input.LA(1);

                    if ( (LA14_0==KW_EXTERNAL) ) {
                        alt14=1;
                    }
                    switch (alt14) {
                        case 1 :
                            // HiveParser.g:994:12: ext= KW_EXTERNAL
                            {
                            ext=(Token)match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_importStatement2272); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_EXTERNAL.add(ext);


                            }
                            break;

                    }


                    KW_TABLE56=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_importStatement2276); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE56);


                    // HiveParser.g:994:39: (tab= tableOrPartition )
                    // HiveParser.g:994:40: tab= tableOrPartition
                    {
                    pushFollow(FOLLOW_tableOrPartition_in_importStatement2281);
                    tab=tableOrPartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableOrPartition.add(tab.getTree());

                    }


                    }
                    break;

            }


            KW_FROM57=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_importStatement2295); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM57);


            // HiveParser.g:995:18: (path= StringLiteral )
            // HiveParser.g:995:19: path= StringLiteral
            {
            path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_importStatement2300); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(path);


            }


            // HiveParser.g:996:10: ( tableLocation )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==KW_LOCATION) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // HiveParser.g:996:10: tableLocation
                    {
                    pushFollow(FOLLOW_tableLocation_in_importStatement2312);
                    tableLocation58=tableLocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation58.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: path, tab, tableLocation, ext
            // token labels: ext, path
            // rule labels: tab, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
            RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 997:5: -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
            {
                // HiveParser.g:997:8: ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_IMPORT, "TOK_IMPORT")
                , root_1);

                adaptor.addChild(root_1, stream_path.nextNode());

                // HiveParser.g:997:28: ( $tab)?
                if ( stream_tab.hasNext() ) {
                    adaptor.addChild(root_1, stream_tab.nextTree());

                }
                stream_tab.reset();

                // HiveParser.g:997:34: ( $ext)?
                if ( stream_ext.hasNext() ) {
                    adaptor.addChild(root_1, stream_ext.nextNode());

                }
                stream_ext.reset();

                // HiveParser.g:997:39: ( tableLocation )?
                if ( stream_tableLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableLocation.nextTree());

                }
                stream_tableLocation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "importStatement"


    public static class ddlStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ddlStatement"
    // HiveParser.g:1000:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | createMaterializedViewStatement | createScheduledQueryStatement | alterScheduledQueryStatement | dropScheduledQueryStatement | dropViewStatement | dropMaterializedViewStatement | createFunctionStatement | createMacroStatement | dropFunctionStatement | reloadFunctionsStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | ( grantPrivileges )=> grantPrivileges | ( revokePrivileges )=> revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole | abortTransactionStatement | abortCompactionStatement | killQueryStatement | resourcePlanDdlStatements | createDataConnectorStatement | dropDataConnectorStatement );
    public final HiveParser.ddlStatement_return ddlStatement() throws RecognitionException {
        HiveParser.ddlStatement_return retval = new HiveParser.ddlStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.createDatabaseStatement_return createDatabaseStatement59 =null;

        HiveParser.switchDatabaseStatement_return switchDatabaseStatement60 =null;

        HiveParser.dropDatabaseStatement_return dropDatabaseStatement61 =null;

        HiveParser_CreateDDLParser.createTableStatement_return createTableStatement62 =null;

        HiveParser.dropTableStatement_return dropTableStatement63 =null;

        HiveParser.truncateTableStatement_return truncateTableStatement64 =null;

        HiveParser_AlterClauseParser.alterStatement_return alterStatement65 =null;

        HiveParser.descStatement_return descStatement66 =null;

        HiveParser.showStatement_return showStatement67 =null;

        HiveParser.metastoreCheck_return metastoreCheck68 =null;

        HiveParser.createViewStatement_return createViewStatement69 =null;

        HiveParser.createMaterializedViewStatement_return createMaterializedViewStatement70 =null;

        HiveParser.createScheduledQueryStatement_return createScheduledQueryStatement71 =null;

        HiveParser.alterScheduledQueryStatement_return alterScheduledQueryStatement72 =null;

        HiveParser.dropScheduledQueryStatement_return dropScheduledQueryStatement73 =null;

        HiveParser.dropViewStatement_return dropViewStatement74 =null;

        HiveParser.dropMaterializedViewStatement_return dropMaterializedViewStatement75 =null;

        HiveParser.createFunctionStatement_return createFunctionStatement76 =null;

        HiveParser.createMacroStatement_return createMacroStatement77 =null;

        HiveParser.dropFunctionStatement_return dropFunctionStatement78 =null;

        HiveParser.reloadFunctionsStatement_return reloadFunctionsStatement79 =null;

        HiveParser.dropMacroStatement_return dropMacroStatement80 =null;

        HiveParser.analyzeStatement_return analyzeStatement81 =null;

        HiveParser.lockStatement_return lockStatement82 =null;

        HiveParser.unlockStatement_return unlockStatement83 =null;

        HiveParser.lockDatabase_return lockDatabase84 =null;

        HiveParser.unlockDatabase_return unlockDatabase85 =null;

        HiveParser.createRoleStatement_return createRoleStatement86 =null;

        HiveParser.dropRoleStatement_return dropRoleStatement87 =null;

        HiveParser.grantPrivileges_return grantPrivileges88 =null;

        HiveParser.revokePrivileges_return revokePrivileges89 =null;

        HiveParser.showGrants_return showGrants90 =null;

        HiveParser.showRoleGrants_return showRoleGrants91 =null;

        HiveParser.showRolePrincipals_return showRolePrincipals92 =null;

        HiveParser.showRoles_return showRoles93 =null;

        HiveParser.grantRole_return grantRole94 =null;

        HiveParser.revokeRole_return revokeRole95 =null;

        HiveParser.setRole_return setRole96 =null;

        HiveParser.showCurrentRole_return showCurrentRole97 =null;

        HiveParser.abortTransactionStatement_return abortTransactionStatement98 =null;

        HiveParser.abortCompactionStatement_return abortCompactionStatement99 =null;

        HiveParser.killQueryStatement_return killQueryStatement100 =null;

        HiveParser_ResourcePlanParser.resourcePlanDdlStatements_return resourcePlanDdlStatements101 =null;

        HiveParser_CreateDDLParser.createDataConnectorStatement_return createDataConnectorStatement102 =null;

        HiveParser_CreateDDLParser.dropDataConnectorStatement_return dropDataConnectorStatement103 =null;



         pushMsg("ddl statement", state); 
        try {
            // HiveParser.g:1003:5: ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | createMaterializedViewStatement | createScheduledQueryStatement | alterScheduledQueryStatement | dropScheduledQueryStatement | dropViewStatement | dropMaterializedViewStatement | createFunctionStatement | createMacroStatement | dropFunctionStatement | reloadFunctionsStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | ( grantPrivileges )=> grantPrivileges | ( revokePrivileges )=> revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole | abortTransactionStatement | abortCompactionStatement | killQueryStatement | resourcePlanDdlStatements | createDataConnectorStatement | dropDataConnectorStatement )
            int alt17=45;
            alt17 = dfa17.predict(input);
            switch (alt17) {
                case 1 :
                    // HiveParser.g:1003:7: createDatabaseStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_createDatabaseStatement_in_ddlStatement2364);
                    createDatabaseStatement59=createDatabaseStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createDatabaseStatement59.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:1004:7: switchDatabaseStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_switchDatabaseStatement_in_ddlStatement2372);
                    switchDatabaseStatement60=switchDatabaseStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchDatabaseStatement60.getTree());

                    }
                    break;
                case 3 :
                    // HiveParser.g:1005:7: dropDatabaseStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_dropDatabaseStatement_in_ddlStatement2380);
                    dropDatabaseStatement61=dropDatabaseStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dropDatabaseStatement61.getTree());

                    }
                    break;
                case 4 :
                    // HiveParser.g:1006:7: createTableStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_createTableStatement_in_ddlStatement2388);
                    createTableStatement62=createTableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createTableStatement62.getTree());

                    }
                    break;
                case 5 :
                    // HiveParser.g:1007:7: dropTableStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_dropTableStatement_in_ddlStatement2396);
                    dropTableStatement63=dropTableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dropTableStatement63.getTree());

                    }
                    break;
                case 6 :
                    // HiveParser.g:1008:7: truncateTableStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_truncateTableStatement_in_ddlStatement2404);
                    truncateTableStatement64=truncateTableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, truncateTableStatement64.getTree());

                    }
                    break;
                case 7 :
                    // HiveParser.g:1009:7: alterStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_alterStatement_in_ddlStatement2412);
                    alterStatement65=alterStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatement65.getTree());

                    }
                    break;
                case 8 :
                    // HiveParser.g:1010:7: descStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_descStatement_in_ddlStatement2420);
                    descStatement66=descStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, descStatement66.getTree());

                    }
                    break;
                case 9 :
                    // HiveParser.g:1011:7: showStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_showStatement_in_ddlStatement2428);
                    showStatement67=showStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, showStatement67.getTree());

                    }
                    break;
                case 10 :
                    // HiveParser.g:1012:7: metastoreCheck
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_metastoreCheck_in_ddlStatement2436);
                    metastoreCheck68=metastoreCheck();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, metastoreCheck68.getTree());

                    }
                    break;
                case 11 :
                    // HiveParser.g:1013:7: createViewStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_createViewStatement_in_ddlStatement2444);
                    createViewStatement69=createViewStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createViewStatement69.getTree());

                    }
                    break;
                case 12 :
                    // HiveParser.g:1014:7: createMaterializedViewStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_createMaterializedViewStatement_in_ddlStatement2452);
                    createMaterializedViewStatement70=createMaterializedViewStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createMaterializedViewStatement70.getTree());

                    }
                    break;
                case 13 :
                    // HiveParser.g:1015:7: createScheduledQueryStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_createScheduledQueryStatement_in_ddlStatement2460);
                    createScheduledQueryStatement71=createScheduledQueryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createScheduledQueryStatement71.getTree());

                    }
                    break;
                case 14 :
                    // HiveParser.g:1016:7: alterScheduledQueryStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_alterScheduledQueryStatement_in_ddlStatement2468);
                    alterScheduledQueryStatement72=alterScheduledQueryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterScheduledQueryStatement72.getTree());

                    }
                    break;
                case 15 :
                    // HiveParser.g:1017:7: dropScheduledQueryStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_dropScheduledQueryStatement_in_ddlStatement2476);
                    dropScheduledQueryStatement73=dropScheduledQueryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dropScheduledQueryStatement73.getTree());

                    }
                    break;
                case 16 :
                    // HiveParser.g:1018:7: dropViewStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_dropViewStatement_in_ddlStatement2484);
                    dropViewStatement74=dropViewStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dropViewStatement74.getTree());

                    }
                    break;
                case 17 :
                    // HiveParser.g:1019:7: dropMaterializedViewStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_dropMaterializedViewStatement_in_ddlStatement2492);
                    dropMaterializedViewStatement75=dropMaterializedViewStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dropMaterializedViewStatement75.getTree());

                    }
                    break;
                case 18 :
                    // HiveParser.g:1020:7: createFunctionStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_createFunctionStatement_in_ddlStatement2500);
                    createFunctionStatement76=createFunctionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createFunctionStatement76.getTree());

                    }
                    break;
                case 19 :
                    // HiveParser.g:1021:7: createMacroStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_createMacroStatement_in_ddlStatement2508);
                    createMacroStatement77=createMacroStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createMacroStatement77.getTree());

                    }
                    break;
                case 20 :
                    // HiveParser.g:1022:7: dropFunctionStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_dropFunctionStatement_in_ddlStatement2516);
                    dropFunctionStatement78=dropFunctionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dropFunctionStatement78.getTree());

                    }
                    break;
                case 21 :
                    // HiveParser.g:1023:7: reloadFunctionsStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_reloadFunctionsStatement_in_ddlStatement2524);
                    reloadFunctionsStatement79=reloadFunctionsStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reloadFunctionsStatement79.getTree());

                    }
                    break;
                case 22 :
                    // HiveParser.g:1024:7: dropMacroStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_dropMacroStatement_in_ddlStatement2532);
                    dropMacroStatement80=dropMacroStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dropMacroStatement80.getTree());

                    }
                    break;
                case 23 :
                    // HiveParser.g:1025:7: analyzeStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_analyzeStatement_in_ddlStatement2540);
                    analyzeStatement81=analyzeStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, analyzeStatement81.getTree());

                    }
                    break;
                case 24 :
                    // HiveParser.g:1026:7: lockStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_lockStatement_in_ddlStatement2548);
                    lockStatement82=lockStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lockStatement82.getTree());

                    }
                    break;
                case 25 :
                    // HiveParser.g:1027:7: unlockStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_unlockStatement_in_ddlStatement2556);
                    unlockStatement83=unlockStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unlockStatement83.getTree());

                    }
                    break;
                case 26 :
                    // HiveParser.g:1028:7: lockDatabase
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_lockDatabase_in_ddlStatement2564);
                    lockDatabase84=lockDatabase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lockDatabase84.getTree());

                    }
                    break;
                case 27 :
                    // HiveParser.g:1029:7: unlockDatabase
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_unlockDatabase_in_ddlStatement2572);
                    unlockDatabase85=unlockDatabase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unlockDatabase85.getTree());

                    }
                    break;
                case 28 :
                    // HiveParser.g:1030:7: createRoleStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_createRoleStatement_in_ddlStatement2580);
                    createRoleStatement86=createRoleStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createRoleStatement86.getTree());

                    }
                    break;
                case 29 :
                    // HiveParser.g:1031:7: dropRoleStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_dropRoleStatement_in_ddlStatement2588);
                    dropRoleStatement87=dropRoleStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dropRoleStatement87.getTree());

                    }
                    break;
                case 30 :
                    // HiveParser.g:1032:7: ( grantPrivileges )=> grantPrivileges
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_grantPrivileges_in_ddlStatement2602);
                    grantPrivileges88=grantPrivileges();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grantPrivileges88.getTree());

                    }
                    break;
                case 31 :
                    // HiveParser.g:1033:7: ( revokePrivileges )=> revokePrivileges
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_revokePrivileges_in_ddlStatement2616);
                    revokePrivileges89=revokePrivileges();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, revokePrivileges89.getTree());

                    }
                    break;
                case 32 :
                    // HiveParser.g:1034:7: showGrants
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_showGrants_in_ddlStatement2624);
                    showGrants90=showGrants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, showGrants90.getTree());

                    }
                    break;
                case 33 :
                    // HiveParser.g:1035:7: showRoleGrants
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_showRoleGrants_in_ddlStatement2632);
                    showRoleGrants91=showRoleGrants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, showRoleGrants91.getTree());

                    }
                    break;
                case 34 :
                    // HiveParser.g:1036:7: showRolePrincipals
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_showRolePrincipals_in_ddlStatement2640);
                    showRolePrincipals92=showRolePrincipals();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, showRolePrincipals92.getTree());

                    }
                    break;
                case 35 :
                    // HiveParser.g:1037:7: showRoles
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_showRoles_in_ddlStatement2648);
                    showRoles93=showRoles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, showRoles93.getTree());

                    }
                    break;
                case 36 :
                    // HiveParser.g:1038:7: grantRole
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_grantRole_in_ddlStatement2656);
                    grantRole94=grantRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grantRole94.getTree());

                    }
                    break;
                case 37 :
                    // HiveParser.g:1039:7: revokeRole
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_revokeRole_in_ddlStatement2664);
                    revokeRole95=revokeRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, revokeRole95.getTree());

                    }
                    break;
                case 38 :
                    // HiveParser.g:1040:7: setRole
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_setRole_in_ddlStatement2672);
                    setRole96=setRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, setRole96.getTree());

                    }
                    break;
                case 39 :
                    // HiveParser.g:1041:7: showCurrentRole
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_showCurrentRole_in_ddlStatement2680);
                    showCurrentRole97=showCurrentRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, showCurrentRole97.getTree());

                    }
                    break;
                case 40 :
                    // HiveParser.g:1042:7: abortTransactionStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_abortTransactionStatement_in_ddlStatement2688);
                    abortTransactionStatement98=abortTransactionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, abortTransactionStatement98.getTree());

                    }
                    break;
                case 41 :
                    // HiveParser.g:1043:7: abortCompactionStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_abortCompactionStatement_in_ddlStatement2696);
                    abortCompactionStatement99=abortCompactionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, abortCompactionStatement99.getTree());

                    }
                    break;
                case 42 :
                    // HiveParser.g:1044:7: killQueryStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_killQueryStatement_in_ddlStatement2704);
                    killQueryStatement100=killQueryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, killQueryStatement100.getTree());

                    }
                    break;
                case 43 :
                    // HiveParser.g:1045:7: resourcePlanDdlStatements
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_resourcePlanDdlStatements_in_ddlStatement2712);
                    resourcePlanDdlStatements101=resourcePlanDdlStatements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, resourcePlanDdlStatements101.getTree());

                    }
                    break;
                case 44 :
                    // HiveParser.g:1046:7: createDataConnectorStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_createDataConnectorStatement_in_ddlStatement2720);
                    createDataConnectorStatement102=createDataConnectorStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createDataConnectorStatement102.getTree());

                    }
                    break;
                case 45 :
                    // HiveParser.g:1047:7: dropDataConnectorStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_dropDataConnectorStatement_in_ddlStatement2728);
                    dropDataConnectorStatement103=dropDataConnectorStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dropDataConnectorStatement103.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ddlStatement"


    public static class ifExists_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ifExists"
    // HiveParser.g:1050:1: ifExists : KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) ;
    public final HiveParser.ifExists_return ifExists() throws RecognitionException {
        HiveParser.ifExists_return retval = new HiveParser.ifExists_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_IF104=null;
        Token KW_EXISTS105=null;

        ASTNode KW_IF104_tree=null;
        ASTNode KW_EXISTS105_tree=null;
        RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");
        RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");

         pushMsg("if exists clause", state); 
        try {
            // HiveParser.g:1053:5: ( KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) )
            // HiveParser.g:1053:7: KW_IF KW_EXISTS
            {
            KW_IF104=(Token)match(input,KW_IF,FOLLOW_KW_IF_in_ifExists2755); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_IF.add(KW_IF104);


            KW_EXISTS105=(Token)match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifExists2757); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_EXISTS.add(KW_EXISTS105);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1054:5: -> ^( TOK_IFEXISTS )
            {
                // HiveParser.g:1054:8: ^( TOK_IFEXISTS )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_IFEXISTS, "TOK_IFEXISTS")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ifExists"


    public static class restrictOrCascade_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "restrictOrCascade"
    // HiveParser.g:1057:1: restrictOrCascade : ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) );
    public final HiveParser.restrictOrCascade_return restrictOrCascade() throws RecognitionException {
        HiveParser.restrictOrCascade_return retval = new HiveParser.restrictOrCascade_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_RESTRICT106=null;
        Token KW_CASCADE107=null;

        ASTNode KW_RESTRICT106_tree=null;
        ASTNode KW_CASCADE107_tree=null;
        RewriteRuleTokenStream stream_KW_CASCADE=new RewriteRuleTokenStream(adaptor,"token KW_CASCADE");
        RewriteRuleTokenStream stream_KW_RESTRICT=new RewriteRuleTokenStream(adaptor,"token KW_RESTRICT");

         pushMsg("restrict or cascade clause", state); 
        try {
            // HiveParser.g:1060:5: ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==KW_RESTRICT) ) {
                alt18=1;
            }
            else if ( (LA18_0==KW_CASCADE) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }
            switch (alt18) {
                case 1 :
                    // HiveParser.g:1060:7: KW_RESTRICT
                    {
                    KW_RESTRICT106=(Token)match(input,KW_RESTRICT,FOLLOW_KW_RESTRICT_in_restrictOrCascade2794); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_RESTRICT.add(KW_RESTRICT106);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1061:5: -> ^( TOK_RESTRICT )
                    {
                        // HiveParser.g:1061:8: ^( TOK_RESTRICT )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_RESTRICT, "TOK_RESTRICT")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1062:7: KW_CASCADE
                    {
                    KW_CASCADE107=(Token)match(input,KW_CASCADE,FOLLOW_KW_CASCADE_in_restrictOrCascade2812); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CASCADE.add(KW_CASCADE107);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1063:5: -> ^( TOK_CASCADE )
                    {
                        // HiveParser.g:1063:8: ^( TOK_CASCADE )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_CASCADE, "TOK_CASCADE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "restrictOrCascade"


    public static class ifNotExists_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ifNotExists"
    // HiveParser.g:1066:1: ifNotExists : KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) ;
    public final HiveParser.ifNotExists_return ifNotExists() throws RecognitionException {
        HiveParser.ifNotExists_return retval = new HiveParser.ifNotExists_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_IF108=null;
        Token KW_NOT109=null;
        Token KW_EXISTS110=null;

        ASTNode KW_IF108_tree=null;
        ASTNode KW_NOT109_tree=null;
        ASTNode KW_EXISTS110_tree=null;
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");
        RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");

         pushMsg("if not exists clause", state); 
        try {
            // HiveParser.g:1069:5: ( KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) )
            // HiveParser.g:1069:7: KW_IF KW_NOT KW_EXISTS
            {
            KW_IF108=(Token)match(input,KW_IF,FOLLOW_KW_IF_in_ifNotExists2849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_IF.add(KW_IF108);


            KW_NOT109=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_ifNotExists2851); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT109);


            KW_EXISTS110=(Token)match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifNotExists2853); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_EXISTS.add(KW_EXISTS110);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1070:5: -> ^( TOK_IFNOTEXISTS )
            {
                // HiveParser.g:1070:8: ^( TOK_IFNOTEXISTS )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_IFNOTEXISTS, "TOK_IFNOTEXISTS")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ifNotExists"


    public static class force_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "force"
    // HiveParser.g:1073:1: force : KW_FORCE -> ^( TOK_FORCE ) ;
    public final HiveParser.force_return force() throws RecognitionException {
        HiveParser.force_return retval = new HiveParser.force_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_FORCE111=null;

        ASTNode KW_FORCE111_tree=null;
        RewriteRuleTokenStream stream_KW_FORCE=new RewriteRuleTokenStream(adaptor,"token KW_FORCE");

         msgs.push("force clause"); 
        try {
            // HiveParser.g:1076:5: ( KW_FORCE -> ^( TOK_FORCE ) )
            // HiveParser.g:1076:7: KW_FORCE
            {
            KW_FORCE111=(Token)match(input,KW_FORCE,FOLLOW_KW_FORCE_in_force2890); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FORCE.add(KW_FORCE111);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1077:5: -> ^( TOK_FORCE )
            {
                // HiveParser.g:1077:8: ^( TOK_FORCE )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_FORCE, "TOK_FORCE")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { msgs.pop(); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "force"


    public static class rewriteEnabled_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rewriteEnabled"
    // HiveParser.g:1080:1: rewriteEnabled : KW_ENABLE KW_REWRITE -> ^( TOK_REWRITE_ENABLED ) ;
    public final rewriteEnabled_return rewriteEnabled() throws RecognitionException {
        HiveParser.rewriteEnabled_return retval = new HiveParser.rewriteEnabled_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_ENABLE112=null;
        Token KW_REWRITE113=null;

        ASTNode KW_ENABLE112_tree=null;
        ASTNode KW_REWRITE113_tree=null;
        RewriteRuleTokenStream stream_KW_REWRITE=new RewriteRuleTokenStream(adaptor,"token KW_REWRITE");
        RewriteRuleTokenStream stream_KW_ENABLE=new RewriteRuleTokenStream(adaptor,"token KW_ENABLE");

         pushMsg("rewrite enabled clause", state); 
        try {
            // HiveParser.g:1083:5: ( KW_ENABLE KW_REWRITE -> ^( TOK_REWRITE_ENABLED ) )
            // HiveParser.g:1083:7: KW_ENABLE KW_REWRITE
            {
            KW_ENABLE112=(Token)match(input,KW_ENABLE,FOLLOW_KW_ENABLE_in_rewriteEnabled2927); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ENABLE.add(KW_ENABLE112);


            KW_REWRITE113=(Token)match(input,KW_REWRITE,FOLLOW_KW_REWRITE_in_rewriteEnabled2929); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_REWRITE.add(KW_REWRITE113);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1084:5: -> ^( TOK_REWRITE_ENABLED )
            {
                // HiveParser.g:1084:8: ^( TOK_REWRITE_ENABLED )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_REWRITE_ENABLED, "TOK_REWRITE_ENABLED")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rewriteEnabled"


    public static class rewriteDisabled_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rewriteDisabled"
    // HiveParser.g:1087:1: rewriteDisabled : KW_DISABLE KW_REWRITE -> ^( TOK_REWRITE_DISABLED ) ;
    public final rewriteDisabled_return rewriteDisabled() throws RecognitionException {
        HiveParser.rewriteDisabled_return retval = new HiveParser.rewriteDisabled_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_DISABLE114=null;
        Token KW_REWRITE115=null;

        ASTNode KW_DISABLE114_tree=null;
        ASTNode KW_REWRITE115_tree=null;
        RewriteRuleTokenStream stream_KW_DISABLE=new RewriteRuleTokenStream(adaptor,"token KW_DISABLE");
        RewriteRuleTokenStream stream_KW_REWRITE=new RewriteRuleTokenStream(adaptor,"token KW_REWRITE");

         pushMsg("rewrite disabled clause", state); 
        try {
            // HiveParser.g:1090:5: ( KW_DISABLE KW_REWRITE -> ^( TOK_REWRITE_DISABLED ) )
            // HiveParser.g:1090:7: KW_DISABLE KW_REWRITE
            {
            KW_DISABLE114=(Token)match(input,KW_DISABLE,FOLLOW_KW_DISABLE_in_rewriteDisabled2966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DISABLE.add(KW_DISABLE114);


            KW_REWRITE115=(Token)match(input,KW_REWRITE,FOLLOW_KW_REWRITE_in_rewriteDisabled2968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_REWRITE.add(KW_REWRITE115);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1091:5: -> ^( TOK_REWRITE_DISABLED )
            {
                // HiveParser.g:1091:8: ^( TOK_REWRITE_DISABLED )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_REWRITE_DISABLED, "TOK_REWRITE_DISABLED")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rewriteDisabled"


    public static class storedAsDirs_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "storedAsDirs"
    // HiveParser.g:1094:1: storedAsDirs : KW_STORED KW_AS KW_DIRECTORIES -> ^( TOK_STOREDASDIRS ) ;
    public final HiveParser.storedAsDirs_return storedAsDirs() throws RecognitionException {
        HiveParser.storedAsDirs_return retval = new HiveParser.storedAsDirs_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_STORED116=null;
        Token KW_AS117=null;
        Token KW_DIRECTORIES118=null;

        ASTNode KW_STORED116_tree=null;
        ASTNode KW_AS117_tree=null;
        ASTNode KW_DIRECTORIES118_tree=null;
        RewriteRuleTokenStream stream_KW_DIRECTORIES=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORIES");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");

         pushMsg("stored as directories", state); 
        try {
            // HiveParser.g:1097:5: ( KW_STORED KW_AS KW_DIRECTORIES -> ^( TOK_STOREDASDIRS ) )
            // HiveParser.g:1097:7: KW_STORED KW_AS KW_DIRECTORIES
            {
            KW_STORED116=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_storedAsDirs3005); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED116);


            KW_AS117=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_storedAsDirs3007); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS117);


            KW_DIRECTORIES118=(Token)match(input,KW_DIRECTORIES,FOLLOW_KW_DIRECTORIES_in_storedAsDirs3009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DIRECTORIES.add(KW_DIRECTORIES118);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1098:5: -> ^( TOK_STOREDASDIRS )
            {
                // HiveParser.g:1098:8: ^( TOK_STOREDASDIRS )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_STOREDASDIRS, "TOK_STOREDASDIRS")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "storedAsDirs"


    public static class orReplace_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "orReplace"
    // HiveParser.g:1101:1: orReplace : KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) ;
    public final HiveParser.orReplace_return orReplace() throws RecognitionException {
        HiveParser.orReplace_return retval = new HiveParser.orReplace_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_OR119=null;
        Token KW_REPLACE120=null;

        ASTNode KW_OR119_tree=null;
        ASTNode KW_REPLACE120_tree=null;
        RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
        RewriteRuleTokenStream stream_KW_OR=new RewriteRuleTokenStream(adaptor,"token KW_OR");

         pushMsg("or replace clause", state); 
        try {
            // HiveParser.g:1104:5: ( KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) )
            // HiveParser.g:1104:7: KW_OR KW_REPLACE
            {
            KW_OR119=(Token)match(input,KW_OR,FOLLOW_KW_OR_in_orReplace3046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_OR.add(KW_OR119);


            KW_REPLACE120=(Token)match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_orReplace3048); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_REPLACE.add(KW_REPLACE120);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1105:5: -> ^( TOK_ORREPLACE )
            {
                // HiveParser.g:1105:8: ^( TOK_ORREPLACE )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_ORREPLACE, "TOK_ORREPLACE")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orReplace"


    public static class createDatabaseStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createDatabaseStatement"
    // HiveParser.g:1108:1: createDatabaseStatement : ( KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( dbManagedLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( dbManagedLocation )? ( databaseComment )? ( $dbprops)? ) | KW_CREATE KW_REMOTE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? dbConnectorName ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( databaseComment )? ( $dbprops)? dbConnectorName ) );
    public final HiveParser.createDatabaseStatement_return createDatabaseStatement() throws RecognitionException {
        HiveParser.createDatabaseStatement_return retval = new HiveParser.createDatabaseStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_CREATE121=null;
        Token KW_DATABASE122=null;
        Token KW_SCHEMA123=null;
        Token KW_WITH128=null;
        Token KW_DBPROPERTIES129=null;
        Token KW_CREATE130=null;
        Token KW_REMOTE131=null;
        Token KW_DATABASE132=null;
        Token KW_SCHEMA133=null;
        Token KW_WITH137=null;
        Token KW_DBPROPERTIES138=null;
        HiveParser_IdentifiersParser.identifier_return name =null;

        HiveParser.dbProperties_return dbprops =null;

        HiveParser.ifNotExists_return ifNotExists124 =null;

        HiveParser.databaseComment_return databaseComment125 =null;

        HiveParser.dbLocation_return dbLocation126 =null;

        HiveParser.dbManagedLocation_return dbManagedLocation127 =null;

        HiveParser.ifNotExists_return ifNotExists134 =null;

        HiveParser.databaseComment_return databaseComment135 =null;

        HiveParser.dbConnectorName_return dbConnectorName136 =null;


        ASTNode KW_CREATE121_tree=null;
        ASTNode KW_DATABASE122_tree=null;
        ASTNode KW_SCHEMA123_tree=null;
        ASTNode KW_WITH128_tree=null;
        ASTNode KW_DBPROPERTIES129_tree=null;
        ASTNode KW_CREATE130_tree=null;
        ASTNode KW_REMOTE131_tree=null;
        ASTNode KW_DATABASE132_tree=null;
        ASTNode KW_SCHEMA133_tree=null;
        ASTNode KW_WITH137_tree=null;
        ASTNode KW_DBPROPERTIES138_tree=null;
        RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_REMOTE=new RewriteRuleTokenStream(adaptor,"token KW_REMOTE");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");
        RewriteRuleSubtreeStream stream_databaseComment=new RewriteRuleSubtreeStream(adaptor,"rule databaseComment");
        RewriteRuleSubtreeStream stream_dbConnectorName=new RewriteRuleSubtreeStream(adaptor,"rule dbConnectorName");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_dbLocation=new RewriteRuleSubtreeStream(adaptor,"rule dbLocation");
        RewriteRuleSubtreeStream stream_dbManagedLocation=new RewriteRuleSubtreeStream(adaptor,"rule dbManagedLocation");
         pushMsg("create database statement", state); 
        try {
            // HiveParser.g:1111:5: ( KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( dbManagedLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( dbManagedLocation )? ( databaseComment )? ( $dbprops)? ) | KW_CREATE KW_REMOTE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? dbConnectorName ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( databaseComment )? ( $dbprops)? dbConnectorName ) )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==KW_CREATE) ) {
                int LA29_1 = input.LA(2);

                if ( (LA29_1==KW_REMOTE) ) {
                    alt29=2;
                }
                else if ( (LA29_1==KW_DATABASE||LA29_1==KW_SCHEMA) ) {
                    alt29=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 29, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;

            }
            switch (alt29) {
                case 1 :
                    // HiveParser.g:1111:7: KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( dbManagedLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
                    {
                    KW_CREATE121=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createDatabaseStatement3085); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE121);


                    // HiveParser.g:1111:17: ( KW_DATABASE | KW_SCHEMA )
                    int alt19=2;
                    int LA19_0 = input.LA(1);

                    if ( (LA19_0==KW_DATABASE) ) {
                        alt19=1;
                    }
                    else if ( (LA19_0==KW_SCHEMA) ) {
                        alt19=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 19, 0, input);

                        throw nvae;

                    }
                    switch (alt19) {
                        case 1 :
                            // HiveParser.g:1111:18: KW_DATABASE
                            {
                            KW_DATABASE122=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_createDatabaseStatement3088); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE122);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1111:30: KW_SCHEMA
                            {
                            KW_SCHEMA123=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_createDatabaseStatement3090); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA123);


                            }
                            break;

                    }


                    // HiveParser.g:1112:9: ( ifNotExists )?
                    int alt20=2;
                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==KW_IF) ) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            // HiveParser.g:1112:9: ifNotExists
                            {
                            pushFollow(FOLLOW_ifNotExists_in_createDatabaseStatement3101);
                            ifNotExists124=ifNotExists();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists124.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_identifier_in_createDatabaseStatement3114);
                    name=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(name.getTree());

                    // HiveParser.g:1114:9: ( databaseComment )?
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==KW_COMMENT) ) {
                        alt21=1;
                    }
                    switch (alt21) {
                        case 1 :
                            // HiveParser.g:1114:9: databaseComment
                            {
                            pushFollow(FOLLOW_databaseComment_in_createDatabaseStatement3124);
                            databaseComment125=databaseComment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_databaseComment.add(databaseComment125.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:1115:9: ( dbLocation )?
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==KW_LOCATION) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            // HiveParser.g:1115:9: dbLocation
                            {
                            pushFollow(FOLLOW_dbLocation_in_createDatabaseStatement3135);
                            dbLocation126=dbLocation();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dbLocation.add(dbLocation126.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:1116:9: ( dbManagedLocation )?
                    int alt23=2;
                    int LA23_0 = input.LA(1);

                    if ( (LA23_0==KW_MANAGEDLOCATION) ) {
                        alt23=1;
                    }
                    switch (alt23) {
                        case 1 :
                            // HiveParser.g:1116:9: dbManagedLocation
                            {
                            pushFollow(FOLLOW_dbManagedLocation_in_createDatabaseStatement3146);
                            dbManagedLocation127=dbManagedLocation();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dbManagedLocation.add(dbManagedLocation127.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:1117:9: ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
                    int alt24=2;
                    int LA24_0 = input.LA(1);

                    if ( (LA24_0==KW_WITH) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            // HiveParser.g:1117:10: KW_WITH KW_DBPROPERTIES dbprops= dbProperties
                            {
                            KW_WITH128=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_createDatabaseStatement3158); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH128);


                            KW_DBPROPERTIES129=(Token)match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement3160); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES129);


                            pushFollow(FOLLOW_dbProperties_in_createDatabaseStatement3164);
                            dbprops=dbProperties();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dbProperties.add(dbprops.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: databaseComment, dbprops, ifNotExists, dbManagedLocation, dbLocation, name
                    // token labels: 
                    // rule labels: name, dbprops, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);
                    RewriteRuleSubtreeStream stream_dbprops=new RewriteRuleSubtreeStream(adaptor,"rule dbprops",dbprops!=null?dbprops.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1118:5: -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( dbManagedLocation )? ( databaseComment )? ( $dbprops)? )
                    {
                        // HiveParser.g:1118:8: ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( dbManagedLocation )? ( databaseComment )? ( $dbprops)? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_CREATEDATABASE, "TOK_CREATEDATABASE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        // HiveParser.g:1118:35: ( ifNotExists )?
                        if ( stream_ifNotExists.hasNext() ) {
                            adaptor.addChild(root_1, stream_ifNotExists.nextTree());

                        }
                        stream_ifNotExists.reset();

                        // HiveParser.g:1118:48: ( dbLocation )?
                        if ( stream_dbLocation.hasNext() ) {
                            adaptor.addChild(root_1, stream_dbLocation.nextTree());

                        }
                        stream_dbLocation.reset();

                        // HiveParser.g:1118:60: ( dbManagedLocation )?
                        if ( stream_dbManagedLocation.hasNext() ) {
                            adaptor.addChild(root_1, stream_dbManagedLocation.nextTree());

                        }
                        stream_dbManagedLocation.reset();

                        // HiveParser.g:1118:79: ( databaseComment )?
                        if ( stream_databaseComment.hasNext() ) {
                            adaptor.addChild(root_1, stream_databaseComment.nextTree());

                        }
                        stream_databaseComment.reset();

                        // HiveParser.g:1118:97: ( $dbprops)?
                        if ( stream_dbprops.hasNext() ) {
                            adaptor.addChild(root_1, stream_dbprops.nextTree());

                        }
                        stream_dbprops.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1120:7: KW_CREATE KW_REMOTE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? dbConnectorName ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
                    {
                    KW_CREATE130=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createDatabaseStatement3204); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE130);


                    KW_REMOTE131=(Token)match(input,KW_REMOTE,FOLLOW_KW_REMOTE_in_createDatabaseStatement3206); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_REMOTE.add(KW_REMOTE131);


                    // HiveParser.g:1120:27: ( KW_DATABASE | KW_SCHEMA )
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==KW_DATABASE) ) {
                        alt25=1;
                    }
                    else if ( (LA25_0==KW_SCHEMA) ) {
                        alt25=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 25, 0, input);

                        throw nvae;

                    }
                    switch (alt25) {
                        case 1 :
                            // HiveParser.g:1120:28: KW_DATABASE
                            {
                            KW_DATABASE132=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_createDatabaseStatement3209); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE132);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1120:40: KW_SCHEMA
                            {
                            KW_SCHEMA133=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_createDatabaseStatement3211); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA133);


                            }
                            break;

                    }


                    // HiveParser.g:1121:9: ( ifNotExists )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==KW_IF) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // HiveParser.g:1121:9: ifNotExists
                            {
                            pushFollow(FOLLOW_ifNotExists_in_createDatabaseStatement3222);
                            ifNotExists134=ifNotExists();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists134.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_identifier_in_createDatabaseStatement3235);
                    name=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(name.getTree());

                    // HiveParser.g:1123:9: ( databaseComment )?
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==KW_COMMENT) ) {
                        alt27=1;
                    }
                    switch (alt27) {
                        case 1 :
                            // HiveParser.g:1123:9: databaseComment
                            {
                            pushFollow(FOLLOW_databaseComment_in_createDatabaseStatement3245);
                            databaseComment135=databaseComment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_databaseComment.add(databaseComment135.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_dbConnectorName_in_createDatabaseStatement3256);
                    dbConnectorName136=dbConnectorName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dbConnectorName.add(dbConnectorName136.getTree());

                    // HiveParser.g:1125:9: ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==KW_WITH) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // HiveParser.g:1125:10: KW_WITH KW_DBPROPERTIES dbprops= dbProperties
                            {
                            KW_WITH137=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_createDatabaseStatement3267); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH137);


                            KW_DBPROPERTIES138=(Token)match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement3269); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES138);


                            pushFollow(FOLLOW_dbProperties_in_createDatabaseStatement3273);
                            dbprops=dbProperties();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dbProperties.add(dbprops.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: ifNotExists, dbprops, name, databaseComment, dbConnectorName
                    // token labels: 
                    // rule labels: name, dbprops, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);
                    RewriteRuleSubtreeStream stream_dbprops=new RewriteRuleSubtreeStream(adaptor,"rule dbprops",dbprops!=null?dbprops.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1126:5: -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( databaseComment )? ( $dbprops)? dbConnectorName )
                    {
                        // HiveParser.g:1126:8: ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( databaseComment )? ( $dbprops)? dbConnectorName )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_CREATEDATABASE, "TOK_CREATEDATABASE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        // HiveParser.g:1126:35: ( ifNotExists )?
                        if ( stream_ifNotExists.hasNext() ) {
                            adaptor.addChild(root_1, stream_ifNotExists.nextTree());

                        }
                        stream_ifNotExists.reset();

                        // HiveParser.g:1126:48: ( databaseComment )?
                        if ( stream_databaseComment.hasNext() ) {
                            adaptor.addChild(root_1, stream_databaseComment.nextTree());

                        }
                        stream_databaseComment.reset();

                        // HiveParser.g:1126:66: ( $dbprops)?
                        if ( stream_dbprops.hasNext() ) {
                            adaptor.addChild(root_1, stream_dbprops.nextTree());

                        }
                        stream_dbprops.reset();

                        adaptor.addChild(root_1, stream_dbConnectorName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createDatabaseStatement"


    public static class dbLocation_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dbLocation"
    // HiveParser.g:1129:1: dbLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) ;
    public final HiveParser.dbLocation_return dbLocation() throws RecognitionException {
        HiveParser.dbLocation_return retval = new HiveParser.dbLocation_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token locn=null;
        Token KW_LOCATION139=null;

        ASTNode locn_tree=null;
        ASTNode KW_LOCATION139_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

         pushMsg("database location specification", state); 
        try {
            // HiveParser.g:1132:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) )
            // HiveParser.g:1133:7: KW_LOCATION locn= StringLiteral
            {
            KW_LOCATION139=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_dbLocation3333); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION139);


            locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_dbLocation3337); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1133:38: -> ^( TOK_DATABASELOCATION $locn)
            {
                // HiveParser.g:1133:41: ^( TOK_DATABASELOCATION $locn)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DATABASELOCATION, "TOK_DATABASELOCATION")
                , root_1);

                adaptor.addChild(root_1, stream_locn.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dbLocation"


    public static class dbManagedLocation_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dbManagedLocation"
    // HiveParser.g:1136:1: dbManagedLocation : KW_MANAGEDLOCATION locn= StringLiteral -> ^( TOK_DATABASE_MANAGEDLOCATION $locn) ;
    public final HiveParser.dbManagedLocation_return dbManagedLocation() throws RecognitionException {
        HiveParser.dbManagedLocation_return retval = new HiveParser.dbManagedLocation_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token locn=null;
        Token KW_MANAGEDLOCATION140=null;

        ASTNode locn_tree=null;
        ASTNode KW_MANAGEDLOCATION140_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_MANAGEDLOCATION=new RewriteRuleTokenStream(adaptor,"token KW_MANAGEDLOCATION");

         pushMsg("database managed location specification", state); 
        try {
            // HiveParser.g:1139:5: ( KW_MANAGEDLOCATION locn= StringLiteral -> ^( TOK_DATABASE_MANAGEDLOCATION $locn) )
            // HiveParser.g:1140:7: KW_MANAGEDLOCATION locn= StringLiteral
            {
            KW_MANAGEDLOCATION140=(Token)match(input,KW_MANAGEDLOCATION,FOLLOW_KW_MANAGEDLOCATION_in_dbManagedLocation3379); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MANAGEDLOCATION.add(KW_MANAGEDLOCATION140);


            locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_dbManagedLocation3383); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1140:45: -> ^( TOK_DATABASE_MANAGEDLOCATION $locn)
            {
                // HiveParser.g:1140:48: ^( TOK_DATABASE_MANAGEDLOCATION $locn)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DATABASE_MANAGEDLOCATION, "TOK_DATABASE_MANAGEDLOCATION")
                , root_1);

                adaptor.addChild(root_1, stream_locn.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dbManagedLocation"


    public static class dbProperties_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dbProperties"
    // HiveParser.g:1143:1: dbProperties : LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) ;
    public final HiveParser.dbProperties_return dbProperties() throws RecognitionException {
        HiveParser.dbProperties_return retval = new HiveParser.dbProperties_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token LPAREN141=null;
        Token RPAREN143=null;
        HiveParser.dbPropertiesList_return dbPropertiesList142 =null;


        ASTNode LPAREN141_tree=null;
        ASTNode RPAREN143_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_dbPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule dbPropertiesList");
         pushMsg("dbproperties", state); 
        try {
            // HiveParser.g:1146:5: ( LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) )
            // HiveParser.g:1147:7: LPAREN dbPropertiesList RPAREN
            {
            LPAREN141=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_dbProperties3425); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN141);


            pushFollow(FOLLOW_dbPropertiesList_in_dbProperties3427);
            dbPropertiesList142=dbPropertiesList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dbPropertiesList.add(dbPropertiesList142.getTree());

            RPAREN143=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_dbProperties3429); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN143);


            // AST REWRITE
            // elements: dbPropertiesList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1147:38: -> ^( TOK_DATABASEPROPERTIES dbPropertiesList )
            {
                // HiveParser.g:1147:41: ^( TOK_DATABASEPROPERTIES dbPropertiesList )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DATABASEPROPERTIES, "TOK_DATABASEPROPERTIES")
                , root_1);

                adaptor.addChild(root_1, stream_dbPropertiesList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dbProperties"


    public static class dbPropertiesList_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dbPropertiesList"
    // HiveParser.g:1150:1: dbPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) ;
    public final HiveParser.dbPropertiesList_return dbPropertiesList() throws RecognitionException {
        HiveParser.dbPropertiesList_return retval = new HiveParser.dbPropertiesList_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA145=null;
        HiveParser.keyValueProperty_return keyValueProperty144 =null;

        HiveParser.keyValueProperty_return keyValueProperty146 =null;


        ASTNode COMMA145_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
         pushMsg("database properties list", state); 
        try {
            // HiveParser.g:1153:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) )
            // HiveParser.g:1154:7: keyValueProperty ( COMMA keyValueProperty )*
            {
            pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList3470);
            keyValueProperty144=keyValueProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty144.getTree());

            // HiveParser.g:1154:24: ( COMMA keyValueProperty )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==COMMA) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // HiveParser.g:1154:25: COMMA keyValueProperty
            	    {
            	    COMMA145=(Token)match(input,COMMA,FOLLOW_COMMA_in_dbPropertiesList3473); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA145);


            	    pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList3475);
            	    keyValueProperty146=keyValueProperty();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty146.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            // AST REWRITE
            // elements: keyValueProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1154:50: -> ^( TOK_DBPROPLIST ( keyValueProperty )+ )
            {
                // HiveParser.g:1154:53: ^( TOK_DBPROPLIST ( keyValueProperty )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DBPROPLIST, "TOK_DBPROPLIST")
                , root_1);

                if ( !(stream_keyValueProperty.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_keyValueProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_keyValueProperty.nextTree());

                }
                stream_keyValueProperty.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dbPropertiesList"


    public static class dbConnectorName_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dbConnectorName"
    // HiveParser.g:1157:1: dbConnectorName : KW_USING dcName= identifier -> ^( TOK_DATACONNECTOR $dcName) ;
    public final HiveParser.dbConnectorName_return dbConnectorName() throws RecognitionException {
        HiveParser.dbConnectorName_return retval = new HiveParser.dbConnectorName_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_USING147=null;
        HiveParser_IdentifiersParser.identifier_return dcName =null;


        ASTNode KW_USING147_tree=null;
        RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
         pushMsg("remote database using connector", state); 
        try {
            // HiveParser.g:1160:5: ( KW_USING dcName= identifier -> ^( TOK_DATACONNECTOR $dcName) )
            // HiveParser.g:1161:7: KW_USING dcName= identifier
            {
            KW_USING147=(Token)match(input,KW_USING,FOLLOW_KW_USING_in_dbConnectorName3519); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_USING.add(KW_USING147);


            pushFollow(FOLLOW_identifier_in_dbConnectorName3523);
            dcName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(dcName.getTree());

            // AST REWRITE
            // elements: dcName
            // token labels: 
            // rule labels: dcName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_dcName=new RewriteRuleSubtreeStream(adaptor,"rule dcName",dcName!=null?dcName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1161:34: -> ^( TOK_DATACONNECTOR $dcName)
            {
                // HiveParser.g:1161:37: ^( TOK_DATACONNECTOR $dcName)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DATACONNECTOR, "TOK_DATACONNECTOR")
                , root_1);

                adaptor.addChild(root_1, stream_dcName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dbConnectorName"


    public static class switchDatabaseStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switchDatabaseStatement"
    // HiveParser.g:1164:1: switchDatabaseStatement : KW_USE identifier -> ^( TOK_SWITCHDATABASE identifier ) ;
    public final HiveParser.switchDatabaseStatement_return switchDatabaseStatement() throws RecognitionException {
        HiveParser.switchDatabaseStatement_return retval = new HiveParser.switchDatabaseStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_USE148=null;
        HiveParser_IdentifiersParser.identifier_return identifier149 =null;


        ASTNode KW_USE148_tree=null;
        RewriteRuleTokenStream stream_KW_USE=new RewriteRuleTokenStream(adaptor,"token KW_USE");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
         pushMsg("switch database statement", state); 
        try {
            // HiveParser.g:1167:5: ( KW_USE identifier -> ^( TOK_SWITCHDATABASE identifier ) )
            // HiveParser.g:1167:7: KW_USE identifier
            {
            KW_USE148=(Token)match(input,KW_USE,FOLLOW_KW_USE_in_switchDatabaseStatement3559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_USE.add(KW_USE148);


            pushFollow(FOLLOW_identifier_in_switchDatabaseStatement3561);
            identifier149=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier149.getTree());

            // AST REWRITE
            // elements: identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1168:5: -> ^( TOK_SWITCHDATABASE identifier )
            {
                // HiveParser.g:1168:8: ^( TOK_SWITCHDATABASE identifier )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SWITCHDATABASE, "TOK_SWITCHDATABASE")
                , root_1);

                adaptor.addChild(root_1, stream_identifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switchDatabaseStatement"


    public static class dropDatabaseStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropDatabaseStatement"
    // HiveParser.g:1171:1: dropDatabaseStatement : KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? ) ;
    public final HiveParser.dropDatabaseStatement_return dropDatabaseStatement() throws RecognitionException {
        HiveParser.dropDatabaseStatement_return retval = new HiveParser.dropDatabaseStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_DROP150=null;
        Token KW_DATABASE151=null;
        Token KW_SCHEMA152=null;
        HiveParser.ifExists_return ifExists153 =null;

        HiveParser_IdentifiersParser.identifier_return identifier154 =null;

        HiveParser.restrictOrCascade_return restrictOrCascade155 =null;


        ASTNode KW_DROP150_tree=null;
        ASTNode KW_DATABASE151_tree=null;
        ASTNode KW_SCHEMA152_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
        RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");
         pushMsg("drop database statement", state); 
        try {
            // HiveParser.g:1174:5: ( KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? ) )
            // HiveParser.g:1174:7: KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )?
            {
            KW_DROP150=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropDatabaseStatement3600); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP150);


            // HiveParser.g:1174:15: ( KW_DATABASE | KW_SCHEMA )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==KW_DATABASE) ) {
                alt31=1;
            }
            else if ( (LA31_0==KW_SCHEMA) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;

            }
            switch (alt31) {
                case 1 :
                    // HiveParser.g:1174:16: KW_DATABASE
                    {
                    KW_DATABASE151=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_dropDatabaseStatement3603); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE151);


                    }
                    break;
                case 2 :
                    // HiveParser.g:1174:28: KW_SCHEMA
                    {
                    KW_SCHEMA152=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_dropDatabaseStatement3605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA152);


                    }
                    break;

            }


            // HiveParser.g:1174:39: ( ifExists )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==KW_IF) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // HiveParser.g:1174:39: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropDatabaseStatement3608);
                    ifExists153=ifExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifExists.add(ifExists153.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_identifier_in_dropDatabaseStatement3611);
            identifier154=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier154.getTree());

            // HiveParser.g:1174:60: ( restrictOrCascade )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==KW_CASCADE||LA33_0==KW_RESTRICT) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // HiveParser.g:1174:60: restrictOrCascade
                    {
                    pushFollow(FOLLOW_restrictOrCascade_in_dropDatabaseStatement3613);
                    restrictOrCascade155=restrictOrCascade();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_restrictOrCascade.add(restrictOrCascade155.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: identifier, ifExists, restrictOrCascade
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1175:5: -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? )
            {
                // HiveParser.g:1175:8: ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DROPDATABASE, "TOK_DROPDATABASE")
                , root_1);

                adaptor.addChild(root_1, stream_identifier.nextTree());

                // HiveParser.g:1175:38: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                // HiveParser.g:1175:48: ( restrictOrCascade )?
                if ( stream_restrictOrCascade.hasNext() ) {
                    adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());

                }
                stream_restrictOrCascade.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropDatabaseStatement"


    public static class databaseComment_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "databaseComment"
    // HiveParser.g:1178:1: databaseComment : KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) ;
    public final HiveParser.databaseComment_return databaseComment() throws RecognitionException {
        HiveParser.databaseComment_return retval = new HiveParser.databaseComment_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token comment=null;
        Token KW_COMMENT156=null;

        ASTNode comment_tree=null;
        ASTNode KW_COMMENT156_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

         pushMsg("database's comment", state); 
        try {
            // HiveParser.g:1181:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) )
            // HiveParser.g:1181:7: KW_COMMENT comment= StringLiteral
            {
            KW_COMMENT156=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_databaseComment3659); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT156);


            comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_databaseComment3663); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(comment);


            // AST REWRITE
            // elements: comment
            // token labels: comment
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1182:5: -> ^( TOK_DATABASECOMMENT $comment)
            {
                // HiveParser.g:1182:8: ^( TOK_DATABASECOMMENT $comment)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DATABASECOMMENT, "TOK_DATABASECOMMENT")
                , root_1);

                adaptor.addChild(root_1, stream_comment.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "databaseComment"


    public static class truncateTableStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "truncateTableStatement"
    // HiveParser.g:1185:1: truncateTableStatement : KW_TRUNCATE ( KW_TABLE )? tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )? ( force )? -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? ( force )? ) ;
    public final HiveParser.truncateTableStatement_return truncateTableStatement() throws RecognitionException {
        HiveParser.truncateTableStatement_return retval = new HiveParser.truncateTableStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_TRUNCATE157=null;
        Token KW_TABLE158=null;
        Token KW_COLUMNS160=null;
        Token LPAREN161=null;
        Token RPAREN163=null;
        HiveParser_AlterClauseParser.tablePartitionPrefix_return tablePartitionPrefix159 =null;

        HiveParser.columnNameList_return columnNameList162 =null;

        HiveParser.force_return force164 =null;


        ASTNode KW_TRUNCATE157_tree=null;
        ASTNode KW_TABLE158_tree=null;
        ASTNode KW_COLUMNS160_tree=null;
        ASTNode LPAREN161_tree=null;
        ASTNode RPAREN163_tree=null;
        RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_TRUNCATE=new RewriteRuleTokenStream(adaptor,"token KW_TRUNCATE");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_force=new RewriteRuleSubtreeStream(adaptor,"rule force");
        RewriteRuleSubtreeStream stream_tablePartitionPrefix=new RewriteRuleSubtreeStream(adaptor,"rule tablePartitionPrefix");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         pushMsg("truncate table statement", state); 
        try {
            // HiveParser.g:1188:5: ( KW_TRUNCATE ( KW_TABLE )? tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )? ( force )? -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? ( force )? ) )
            // HiveParser.g:1188:7: KW_TRUNCATE ( KW_TABLE )? tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )? ( force )?
            {
            KW_TRUNCATE157=(Token)match(input,KW_TRUNCATE,FOLLOW_KW_TRUNCATE_in_truncateTableStatement3703); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TRUNCATE.add(KW_TRUNCATE157);


            // HiveParser.g:1188:19: ( KW_TABLE )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==KW_TABLE) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // HiveParser.g:1188:19: KW_TABLE
                    {
                    KW_TABLE158=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_truncateTableStatement3705); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE158);


                    }
                    break;

            }


            pushFollow(FOLLOW_tablePartitionPrefix_in_truncateTableStatement3708);
            tablePartitionPrefix159=tablePartitionPrefix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tablePartitionPrefix.add(tablePartitionPrefix159.getTree());

            // HiveParser.g:1188:50: ( KW_COLUMNS LPAREN columnNameList RPAREN )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==KW_COLUMNS) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // HiveParser.g:1188:51: KW_COLUMNS LPAREN columnNameList RPAREN
                    {
                    KW_COLUMNS160=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_truncateTableStatement3711); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS160);


                    LPAREN161=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_truncateTableStatement3713); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN161);


                    pushFollow(FOLLOW_columnNameList_in_truncateTableStatement3715);
                    columnNameList162=columnNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnNameList.add(columnNameList162.getTree());

                    RPAREN163=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_truncateTableStatement3717); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN163);


                    }
                    break;

            }


            // HiveParser.g:1188:93: ( force )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==KW_FORCE) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // HiveParser.g:1188:93: force
                    {
                    pushFollow(FOLLOW_force_in_truncateTableStatement3721);
                    force164=force();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_force.add(force164.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: columnNameList, tablePartitionPrefix, force
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1189:5: -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? ( force )? )
            {
                // HiveParser.g:1189:8: ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? ( force )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TRUNCATETABLE, "TOK_TRUNCATETABLE")
                , root_1);

                adaptor.addChild(root_1, stream_tablePartitionPrefix.nextTree());

                // HiveParser.g:1189:49: ( columnNameList )?
                if ( stream_columnNameList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameList.nextTree());

                }
                stream_columnNameList.reset();

                // HiveParser.g:1189:65: ( force )?
                if ( stream_force.hasNext() ) {
                    adaptor.addChild(root_1, stream_force.nextTree());

                }
                stream_force.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "truncateTableStatement"


    public static class dropTableStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropTableStatement"
    // HiveParser.g:1191:1: dropTableStatement : KW_DROP KW_TABLE ( ifExists )? tableName ( KW_PURGE )? ( replicationClause )? -> ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? ) ;
    public final HiveParser.dropTableStatement_return dropTableStatement() throws RecognitionException {
        HiveParser.dropTableStatement_return retval = new HiveParser.dropTableStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_DROP165=null;
        Token KW_TABLE166=null;
        Token KW_PURGE169=null;
        HiveParser.ifExists_return ifExists167 =null;

        HiveParser_FromClauseParser.tableName_return tableName168 =null;

        HiveParser_ReplClauseParser.replicationClause_return replicationClause170 =null;


        ASTNode KW_DROP165_tree=null;
        ASTNode KW_TABLE166_tree=null;
        ASTNode KW_PURGE169_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_PURGE=new RewriteRuleTokenStream(adaptor,"token KW_PURGE");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
        RewriteRuleSubtreeStream stream_replicationClause=new RewriteRuleSubtreeStream(adaptor,"rule replicationClause");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("drop statement", state); 
        try {
            // HiveParser.g:1194:5: ( KW_DROP KW_TABLE ( ifExists )? tableName ( KW_PURGE )? ( replicationClause )? -> ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? ) )
            // HiveParser.g:1194:7: KW_DROP KW_TABLE ( ifExists )? tableName ( KW_PURGE )? ( replicationClause )?
            {
            KW_DROP165=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropTableStatement3762); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP165);


            KW_TABLE166=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_dropTableStatement3764); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE166);


            // HiveParser.g:1194:24: ( ifExists )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==KW_IF) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // HiveParser.g:1194:24: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropTableStatement3766);
                    ifExists167=ifExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifExists.add(ifExists167.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_tableName_in_dropTableStatement3769);
            tableName168=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tableName168.getTree());

            // HiveParser.g:1194:44: ( KW_PURGE )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==KW_PURGE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // HiveParser.g:1194:44: KW_PURGE
                    {
                    KW_PURGE169=(Token)match(input,KW_PURGE,FOLLOW_KW_PURGE_in_dropTableStatement3771); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_PURGE.add(KW_PURGE169);


                    }
                    break;

            }


            // HiveParser.g:1194:54: ( replicationClause )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==KW_FOR) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // HiveParser.g:1194:54: replicationClause
                    {
                    pushFollow(FOLLOW_replicationClause_in_dropTableStatement3774);
                    replicationClause170=replicationClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_replicationClause.add(replicationClause170.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableName, replicationClause, ifExists, KW_PURGE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1195:5: -> ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? )
            {
                // HiveParser.g:1195:8: ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DROPTABLE, "TOK_DROPTABLE")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                // HiveParser.g:1195:34: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                // HiveParser.g:1195:44: ( KW_PURGE )?
                if ( stream_KW_PURGE.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_KW_PURGE.nextNode()
                    );

                }
                stream_KW_PURGE.reset();

                // HiveParser.g:1195:54: ( replicationClause )?
                if ( stream_replicationClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_replicationClause.nextTree());

                }
                stream_replicationClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropTableStatement"


    public static class inputFileFormat_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inputFileFormat"
    // HiveParser.g:1198:1: inputFileFormat : KW_INPUTFORMAT inFmt= StringLiteral KW_SERDE serdeCls= StringLiteral -> ^( TOK_INPUTFORMAT $inFmt $serdeCls) ;
    public final HiveParser.inputFileFormat_return inputFileFormat() throws RecognitionException {
        HiveParser.inputFileFormat_return retval = new HiveParser.inputFileFormat_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token inFmt=null;
        Token serdeCls=null;
        Token KW_INPUTFORMAT171=null;
        Token KW_SERDE172=null;

        ASTNode inFmt_tree=null;
        ASTNode serdeCls_tree=null;
        ASTNode KW_INPUTFORMAT171_tree=null;
        ASTNode KW_SERDE172_tree=null;
        RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");

         pushMsg("Load Data input file format specification", state); 
        try {
            // HiveParser.g:1201:5: ( KW_INPUTFORMAT inFmt= StringLiteral KW_SERDE serdeCls= StringLiteral -> ^( TOK_INPUTFORMAT $inFmt $serdeCls) )
            // HiveParser.g:1201:7: KW_INPUTFORMAT inFmt= StringLiteral KW_SERDE serdeCls= StringLiteral
            {
            KW_INPUTFORMAT171=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_inputFileFormat3823); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT171);


            inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_inputFileFormat3827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(inFmt);


            KW_SERDE172=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_inputFileFormat3829); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SERDE.add(KW_SERDE172);


            serdeCls=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_inputFileFormat3833); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(serdeCls);


            // AST REWRITE
            // elements: inFmt, serdeCls
            // token labels: inFmt, serdeCls
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
            RewriteRuleTokenStream stream_serdeCls=new RewriteRuleTokenStream(adaptor,"token serdeCls",serdeCls);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1202:7: -> ^( TOK_INPUTFORMAT $inFmt $serdeCls)
            {
                // HiveParser.g:1202:10: ^( TOK_INPUTFORMAT $inFmt $serdeCls)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_INPUTFORMAT, "TOK_INPUTFORMAT")
                , root_1);

                adaptor.addChild(root_1, stream_inFmt.nextNode());

                adaptor.addChild(root_1, stream_serdeCls.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inputFileFormat"


    public static class tabTypeExpr_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tabTypeExpr"
    // HiveParser.g:1205:1: tabTypeExpr : identifier ( DOT ^ identifier )? ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )? ;
    public final HiveParser.tabTypeExpr_return tabTypeExpr() throws RecognitionException {
        HiveParser.tabTypeExpr_return retval = new HiveParser.tabTypeExpr_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token DOT174=null;
        Token DOT177=null;
        Token KW_ELEM_TYPE178=null;
        Token KW_KEY_TYPE179=null;
        Token KW_VALUE_TYPE180=null;
        HiveParser_IdentifiersParser.identifier_return identifier173 =null;

        HiveParser_IdentifiersParser.identifier_return identifier175 =null;

        HiveParser_IdentifiersParser.identifier_return identifier176 =null;

        HiveParser_IdentifiersParser.identifier_return identifier181 =null;


        ASTNode DOT174_tree=null;
        ASTNode DOT177_tree=null;
        ASTNode KW_ELEM_TYPE178_tree=null;
        ASTNode KW_KEY_TYPE179_tree=null;
        ASTNode KW_VALUE_TYPE180_tree=null;

         pushMsg("specifying table types", state); 
        try {
            // HiveParser.g:1208:4: ( identifier ( DOT ^ identifier )? ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )? )
            // HiveParser.g:1208:6: identifier ( DOT ^ identifier )? ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )?
            {
            root_0 = (ASTNode)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_tabTypeExpr3877);
            identifier173=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier173.getTree());

            // HiveParser.g:1208:17: ( DOT ^ identifier )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==DOT) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // HiveParser.g:1208:18: DOT ^ identifier
                    {
                    DOT174=(Token)match(input,DOT,FOLLOW_DOT_in_tabTypeExpr3880); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT174_tree = 
                    (ASTNode)adaptor.create(DOT174)
                    ;
                    root_0 = (ASTNode)adaptor.becomeRoot(DOT174_tree, root_0);
                    }

                    pushFollow(FOLLOW_identifier_in_tabTypeExpr3883);
                    identifier175=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier175.getTree());

                    }
                    break;

            }


            // HiveParser.g:1209:4: ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )?
            int alt43=2;
            switch ( input.LA(1) ) {
                case Identifier:
                case KW_ABORT:
                case KW_ACTIVATE:
                case KW_ACTIVE:
                case KW_ADD:
                case KW_ADMIN:
                case KW_AFTER:
                case KW_ALLOC_FRACTION:
                case KW_ANALYZE:
                case KW_ARCHIVE:
                case KW_ASC:
                case KW_AST:
                case KW_AT:
                case KW_AUTOCOMMIT:
                case KW_BEFORE:
                case KW_BRANCH:
                case KW_BUCKET:
                case KW_BUCKETS:
                case KW_CACHE:
                case KW_CASCADE:
                case KW_CBO:
                case KW_CHANGE:
                case KW_CHECK:
                case KW_CLUSTER:
                case KW_CLUSTERED:
                case KW_CLUSTERSTATUS:
                case KW_COLLECTION:
                case KW_COLUMNS:
                case KW_COMMENT:
                case KW_COMPACT:
                case KW_COMPACTIONS:
                case KW_COMPUTE:
                case KW_CONCATENATE:
                case KW_CONTINUE:
                case KW_COST:
                case KW_CRON:
                case KW_DATA:
                case KW_DATABASES:
                case KW_DATETIME:
                case KW_DAY:
                case KW_DBPROPERTIES:
                case KW_DCPROPERTIES:
                case KW_DEBUG:
                case KW_DEFAULT:
                case KW_DEFERRED:
                case KW_DEFINED:
                case KW_DELIMITED:
                case KW_DEPENDENCY:
                case KW_DESC:
                case KW_DETAIL:
                case KW_DIRECTORIES:
                case KW_DIRECTORY:
                case KW_DISABLE:
                case KW_DISTRIBUTE:
                case KW_DISTRIBUTED:
                case KW_DO:
                case KW_DOW:
                case KW_DUMP:
                case KW_ELEM_TYPE:
                case KW_ENABLE:
                case KW_ENFORCED:
                case KW_ESCAPED:
                case KW_EVERY:
                case KW_EXCLUSIVE:
                case KW_EXECUTE:
                case KW_EXECUTED:
                case KW_EXPIRE_SNAPSHOTS:
                case KW_EXPLAIN:
                case KW_EXPORT:
                case KW_EXPRESSION:
                case KW_FAST_FORWARD:
                case KW_FIELDS:
                case KW_FILE:
                case KW_FILEFORMAT:
                case KW_FIRST:
                case KW_FORMAT:
                case KW_FORMATTED:
                case KW_FUNCTIONS:
                case KW_HOUR:
                case KW_IDXPROPERTIES:
                case KW_IGNORE:
                case KW_INDEX:
                case KW_INDEXES:
                case KW_INPATH:
                case KW_INPUTDRIVER:
                case KW_INPUTFORMAT:
                case KW_ISOLATION:
                case KW_ITEMS:
                case KW_JAR:
                case KW_JOINCOST:
                case KW_KEY:
                case KW_KEYS:
                case KW_KEY_TYPE:
                case KW_KILL:
                case KW_LAST:
                case KW_LEVEL:
                case KW_LINES:
                case KW_LOAD:
                case KW_LOCATION:
                case KW_LOCK:
                case KW_LOCKS:
                case KW_LOGICAL:
                case KW_LONG:
                case KW_MANAGED:
                case KW_MANAGEDLOCATION:
                case KW_MANAGEMENT:
                case KW_MAPJOIN:
                case KW_MAPPING:
                case KW_MATCHED:
                case KW_MATERIALIZED:
                case KW_METADATA:
                case KW_MINUTE:
                case KW_MONTH:
                case KW_MOVE:
                case KW_MSCK:
                case KW_NORELY:
                case KW_NOSCAN:
                case KW_NOVALIDATE:
                case KW_NULLS:
                case KW_OFFSET:
                case KW_OPERATOR:
                case KW_OPTIMIZE:
                case KW_OPTION:
                case KW_OUTPUTDRIVER:
                case KW_OUTPUTFORMAT:
                case KW_OVERWRITE:
                case KW_OWNER:
                case KW_PARTITIONED:
                case KW_PARTITIONS:
                case KW_PATH:
                case KW_PLAN:
                case KW_PLANS:
                case KW_PLUS:
                case KW_PRINCIPALS:
                case KW_PURGE:
                case KW_QUARTER:
                case KW_QUERY:
                case KW_QUERY_PARALLELISM:
                case KW_READ:
                case KW_REBUILD:
                case KW_RECORDREADER:
                case KW_RECORDWRITER:
                case KW_RELOAD:
                case KW_RELY:
                case KW_REMOTE:
                case KW_RENAME:
                case KW_REOPTIMIZATION:
                case KW_REPAIR:
                case KW_REPL:
                case KW_REPLACE:
                case KW_REPLICATION:
                case KW_RESOURCE:
                case KW_RESPECT:
                case KW_RESTRICT:
                case KW_RETAIN:
                case KW_RETENTION:
                case KW_REWRITE:
                case KW_ROLE:
                case KW_ROLES:
                case KW_SCHEDULED:
                case KW_SCHEDULING_POLICY:
                case KW_SCHEMA:
                case KW_SCHEMAS:
                case KW_SECOND:
                case KW_SEMI:
                case KW_SERDE:
                case KW_SERDEPROPERTIES:
                case KW_SERVER:
                case KW_SETS:
                case KW_SET_CURRENT_SNAPSHOT:
                case KW_SHARED:
                case KW_SHOW:
                case KW_SHOW_DATABASE:
                case KW_SKEWED:
                case KW_SNAPSHOT:
                case KW_SNAPSHOTS:
                case KW_SORT:
                case KW_SORTED:
                case KW_SPEC:
                case KW_SSL:
                case KW_STATISTICS:
                case KW_STORED:
                case KW_STREAMTABLE:
                case KW_STRING:
                case KW_STRUCT:
                case KW_SUMMARY:
                case KW_SYSTEM_TIME:
                case KW_SYSTEM_VERSION:
                case KW_TABLES:
                case KW_TAG:
                case KW_TBLPROPERTIES:
                case KW_TEMPORARY:
                case KW_TERMINATED:
                case KW_TINYINT:
                case KW_TOUCH:
                case KW_TRANSACTION:
                case KW_TRANSACTIONAL:
                case KW_TRANSACTIONS:
                case KW_TRIM:
                case KW_UNARCHIVE:
                case KW_UNDO:
                case KW_UNIONTYPE:
                case KW_UNKNOWN:
                case KW_UNLOCK:
                case KW_UNMANAGED:
                case KW_UNSET:
                case KW_UNSIGNED:
                case KW_URI:
                case KW_URL:
                case KW_USE:
                case KW_UTC:
                case KW_UTCTIMESTAMP:
                case KW_VALIDATE:
                case KW_VALUE_TYPE:
                case KW_VECTORIZATION:
                case KW_VIEW:
                case KW_VIEWS:
                case KW_WAIT:
                case KW_WEEK:
                case KW_WHILE:
                case KW_WITHIN:
                case KW_WORK:
                case KW_WORKLOAD:
                case KW_WRITE:
                case KW_YEAR:
                case KW_ZONE:
                case KW_BATCH:
                case KW_DAYOFWEEK:
                case KW_HOLD_DDLTIME:
                case KW_NO_DROP:
                case KW_OFFLINE:
                case KW_PROTECTION:
                case KW_READONLY:
                case KW_TIMESTAMPTZ:
                    {
                    alt43=1;
                    }
                    break;
                case KW_POOL:
                    {
                    int LA43_2 = input.LA(2);

                    if ( (LA43_2==EOF||LA43_2==DOT||LA43_2==KW_EXTENDED||LA43_2==KW_LIMIT||LA43_2==KW_ORDER||LA43_2==KW_PARTITION||LA43_2==KW_POOL||LA43_2==KW_STATUS||LA43_2==KW_TYPE) ) {
                        alt43=1;
                    }
                    }
                    break;
                case KW_TYPE:
                    {
                    int LA43_6 = input.LA(2);

                    if ( (LA43_6==EOF||LA43_6==DOT||LA43_6==KW_EXTENDED||LA43_6==KW_LIMIT||LA43_6==KW_ORDER||LA43_6==KW_PARTITION||LA43_6==KW_POOL||LA43_6==KW_STATUS||LA43_6==KW_TYPE) ) {
                        alt43=1;
                    }
                    }
                    break;
                case KW_STATUS:
                    {
                    int LA43_7 = input.LA(2);

                    if ( (LA43_7==EOF||LA43_7==DOT||LA43_7==KW_EXTENDED||LA43_7==KW_LIMIT||LA43_7==KW_ORDER||LA43_7==KW_PARTITION||LA43_7==KW_POOL||LA43_7==KW_STATUS||LA43_7==KW_TYPE) ) {
                        alt43=1;
                    }
                    }
                    break;
                case KW_LIMIT:
                    {
                    int LA43_8 = input.LA(2);

                    if ( (LA43_8==EOF||LA43_8==DOT||LA43_8==KW_EXTENDED||LA43_8==KW_LIMIT||LA43_8==KW_ORDER||LA43_8==KW_PARTITION||LA43_8==KW_POOL||LA43_8==KW_STATUS||LA43_8==KW_TYPE) ) {
                        alt43=1;
                    }
                    }
                    break;
            }

            switch (alt43) {
                case 1 :
                    // HiveParser.g:1209:5: identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
                    {
                    pushFollow(FOLLOW_identifier_in_tabTypeExpr3891);
                    identifier176=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier176.getTree());

                    // HiveParser.g:1209:16: ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
                    loop42:
                    do {
                        int alt42=2;
                        int LA42_0 = input.LA(1);

                        if ( (LA42_0==DOT) ) {
                            alt42=1;
                        }


                        switch (alt42) {
                    	case 1 :
                    	    // HiveParser.g:1209:17: DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
                    	    {
                    	    DOT177=(Token)match(input,DOT,FOLLOW_DOT_in_tabTypeExpr3894); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT177_tree = 
                    	    (ASTNode)adaptor.create(DOT177)
                    	    ;
                    	    root_0 = (ASTNode)adaptor.becomeRoot(DOT177_tree, root_0);
                    	    }

                    	    // HiveParser.g:1210:4: ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
                    	    int alt41=4;
                    	    switch ( input.LA(1) ) {
                    	    case KW_ELEM_TYPE:
                    	        {
                    	        int LA41_1 = input.LA(2);

                    	        if ( (synpred3_HiveParser()) ) {
                    	            alt41=1;
                    	        }
                    	        else if ( (true) ) {
                    	            alt41=4;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 41, 1, input);

                    	            throw nvae;

                    	        }
                    	        }
                    	        break;
                    	    case KW_KEY_TYPE:
                    	        {
                    	        int LA41_2 = input.LA(2);

                    	        if ( (synpred4_HiveParser()) ) {
                    	            alt41=2;
                    	        }
                    	        else if ( (true) ) {
                    	            alt41=4;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 41, 2, input);

                    	            throw nvae;

                    	        }
                    	        }
                    	        break;
                    	    case KW_VALUE_TYPE:
                    	        {
                    	        int LA41_3 = input.LA(2);

                    	        if ( (synpred5_HiveParser()) ) {
                    	            alt41=3;
                    	        }
                    	        else if ( (true) ) {
                    	            alt41=4;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 41, 3, input);

                    	            throw nvae;

                    	        }
                    	        }
                    	        break;
                    	    case Identifier:
                    	    case KW_ABORT:
                    	    case KW_ACTIVATE:
                    	    case KW_ACTIVE:
                    	    case KW_ADD:
                    	    case KW_ADMIN:
                    	    case KW_AFTER:
                    	    case KW_ALLOC_FRACTION:
                    	    case KW_ANALYZE:
                    	    case KW_ARCHIVE:
                    	    case KW_ASC:
                    	    case KW_AST:
                    	    case KW_AT:
                    	    case KW_AUTOCOMMIT:
                    	    case KW_BEFORE:
                    	    case KW_BRANCH:
                    	    case KW_BUCKET:
                    	    case KW_BUCKETS:
                    	    case KW_CACHE:
                    	    case KW_CASCADE:
                    	    case KW_CBO:
                    	    case KW_CHANGE:
                    	    case KW_CHECK:
                    	    case KW_CLUSTER:
                    	    case KW_CLUSTERED:
                    	    case KW_CLUSTERSTATUS:
                    	    case KW_COLLECTION:
                    	    case KW_COLUMNS:
                    	    case KW_COMMENT:
                    	    case KW_COMPACT:
                    	    case KW_COMPACTIONS:
                    	    case KW_COMPUTE:
                    	    case KW_CONCATENATE:
                    	    case KW_CONTINUE:
                    	    case KW_COST:
                    	    case KW_CRON:
                    	    case KW_DATA:
                    	    case KW_DATABASES:
                    	    case KW_DATETIME:
                    	    case KW_DAY:
                    	    case KW_DBPROPERTIES:
                    	    case KW_DCPROPERTIES:
                    	    case KW_DEBUG:
                    	    case KW_DEFAULT:
                    	    case KW_DEFERRED:
                    	    case KW_DEFINED:
                    	    case KW_DELIMITED:
                    	    case KW_DEPENDENCY:
                    	    case KW_DESC:
                    	    case KW_DETAIL:
                    	    case KW_DIRECTORIES:
                    	    case KW_DIRECTORY:
                    	    case KW_DISABLE:
                    	    case KW_DISTRIBUTE:
                    	    case KW_DISTRIBUTED:
                    	    case KW_DO:
                    	    case KW_DOW:
                    	    case KW_DUMP:
                    	    case KW_ENABLE:
                    	    case KW_ENFORCED:
                    	    case KW_ESCAPED:
                    	    case KW_EVERY:
                    	    case KW_EXCLUSIVE:
                    	    case KW_EXECUTE:
                    	    case KW_EXECUTED:
                    	    case KW_EXPIRE_SNAPSHOTS:
                    	    case KW_EXPLAIN:
                    	    case KW_EXPORT:
                    	    case KW_EXPRESSION:
                    	    case KW_FAST_FORWARD:
                    	    case KW_FIELDS:
                    	    case KW_FILE:
                    	    case KW_FILEFORMAT:
                    	    case KW_FIRST:
                    	    case KW_FORMAT:
                    	    case KW_FORMATTED:
                    	    case KW_FUNCTIONS:
                    	    case KW_HOUR:
                    	    case KW_IDXPROPERTIES:
                    	    case KW_IGNORE:
                    	    case KW_INDEX:
                    	    case KW_INDEXES:
                    	    case KW_INPATH:
                    	    case KW_INPUTDRIVER:
                    	    case KW_INPUTFORMAT:
                    	    case KW_ISOLATION:
                    	    case KW_ITEMS:
                    	    case KW_JAR:
                    	    case KW_JOINCOST:
                    	    case KW_KEY:
                    	    case KW_KEYS:
                    	    case KW_KILL:
                    	    case KW_LAST:
                    	    case KW_LEVEL:
                    	    case KW_LIMIT:
                    	    case KW_LINES:
                    	    case KW_LOAD:
                    	    case KW_LOCATION:
                    	    case KW_LOCK:
                    	    case KW_LOCKS:
                    	    case KW_LOGICAL:
                    	    case KW_LONG:
                    	    case KW_MANAGED:
                    	    case KW_MANAGEDLOCATION:
                    	    case KW_MANAGEMENT:
                    	    case KW_MAPJOIN:
                    	    case KW_MAPPING:
                    	    case KW_MATCHED:
                    	    case KW_MATERIALIZED:
                    	    case KW_METADATA:
                    	    case KW_MINUTE:
                    	    case KW_MONTH:
                    	    case KW_MOVE:
                    	    case KW_MSCK:
                    	    case KW_NORELY:
                    	    case KW_NOSCAN:
                    	    case KW_NOVALIDATE:
                    	    case KW_NULLS:
                    	    case KW_OFFSET:
                    	    case KW_OPERATOR:
                    	    case KW_OPTIMIZE:
                    	    case KW_OPTION:
                    	    case KW_OUTPUTDRIVER:
                    	    case KW_OUTPUTFORMAT:
                    	    case KW_OVERWRITE:
                    	    case KW_OWNER:
                    	    case KW_PARTITIONED:
                    	    case KW_PARTITIONS:
                    	    case KW_PATH:
                    	    case KW_PLAN:
                    	    case KW_PLANS:
                    	    case KW_PLUS:
                    	    case KW_POOL:
                    	    case KW_PRINCIPALS:
                    	    case KW_PURGE:
                    	    case KW_QUARTER:
                    	    case KW_QUERY:
                    	    case KW_QUERY_PARALLELISM:
                    	    case KW_READ:
                    	    case KW_REBUILD:
                    	    case KW_RECORDREADER:
                    	    case KW_RECORDWRITER:
                    	    case KW_RELOAD:
                    	    case KW_RELY:
                    	    case KW_REMOTE:
                    	    case KW_RENAME:
                    	    case KW_REOPTIMIZATION:
                    	    case KW_REPAIR:
                    	    case KW_REPL:
                    	    case KW_REPLACE:
                    	    case KW_REPLICATION:
                    	    case KW_RESOURCE:
                    	    case KW_RESPECT:
                    	    case KW_RESTRICT:
                    	    case KW_RETAIN:
                    	    case KW_RETENTION:
                    	    case KW_REWRITE:
                    	    case KW_ROLE:
                    	    case KW_ROLES:
                    	    case KW_SCHEDULED:
                    	    case KW_SCHEDULING_POLICY:
                    	    case KW_SCHEMA:
                    	    case KW_SCHEMAS:
                    	    case KW_SECOND:
                    	    case KW_SEMI:
                    	    case KW_SERDE:
                    	    case KW_SERDEPROPERTIES:
                    	    case KW_SERVER:
                    	    case KW_SETS:
                    	    case KW_SET_CURRENT_SNAPSHOT:
                    	    case KW_SHARED:
                    	    case KW_SHOW:
                    	    case KW_SHOW_DATABASE:
                    	    case KW_SKEWED:
                    	    case KW_SNAPSHOT:
                    	    case KW_SNAPSHOTS:
                    	    case KW_SORT:
                    	    case KW_SORTED:
                    	    case KW_SPEC:
                    	    case KW_SSL:
                    	    case KW_STATISTICS:
                    	    case KW_STATUS:
                    	    case KW_STORED:
                    	    case KW_STREAMTABLE:
                    	    case KW_STRING:
                    	    case KW_STRUCT:
                    	    case KW_SUMMARY:
                    	    case KW_SYSTEM_TIME:
                    	    case KW_SYSTEM_VERSION:
                    	    case KW_TABLES:
                    	    case KW_TAG:
                    	    case KW_TBLPROPERTIES:
                    	    case KW_TEMPORARY:
                    	    case KW_TERMINATED:
                    	    case KW_TINYINT:
                    	    case KW_TOUCH:
                    	    case KW_TRANSACTION:
                    	    case KW_TRANSACTIONAL:
                    	    case KW_TRANSACTIONS:
                    	    case KW_TRIM:
                    	    case KW_TYPE:
                    	    case KW_UNARCHIVE:
                    	    case KW_UNDO:
                    	    case KW_UNIONTYPE:
                    	    case KW_UNKNOWN:
                    	    case KW_UNLOCK:
                    	    case KW_UNMANAGED:
                    	    case KW_UNSET:
                    	    case KW_UNSIGNED:
                    	    case KW_URI:
                    	    case KW_URL:
                    	    case KW_USE:
                    	    case KW_UTC:
                    	    case KW_UTCTIMESTAMP:
                    	    case KW_VALIDATE:
                    	    case KW_VECTORIZATION:
                    	    case KW_VIEW:
                    	    case KW_VIEWS:
                    	    case KW_WAIT:
                    	    case KW_WEEK:
                    	    case KW_WHILE:
                    	    case KW_WITHIN:
                    	    case KW_WORK:
                    	    case KW_WORKLOAD:
                    	    case KW_WRITE:
                    	    case KW_YEAR:
                    	    case KW_ZONE:
                    	    case KW_BATCH:
                    	    case KW_DAYOFWEEK:
                    	    case KW_HOLD_DDLTIME:
                    	    case KW_NO_DROP:
                    	    case KW_OFFLINE:
                    	    case KW_PROTECTION:
                    	    case KW_READONLY:
                    	    case KW_TIMESTAMPTZ:
                    	        {
                    	        alt41=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 41, 0, input);

                    	        throw nvae;

                    	    }

                    	    switch (alt41) {
                    	        case 1 :
                    	            // HiveParser.g:1211:4: ( KW_ELEM_TYPE )=> KW_ELEM_TYPE
                    	            {
                    	            KW_ELEM_TYPE178=(Token)match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_tabTypeExpr3911); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	            KW_ELEM_TYPE178_tree = 
                    	            (ASTNode)adaptor.create(KW_ELEM_TYPE178)
                    	            ;
                    	            adaptor.addChild(root_0, KW_ELEM_TYPE178_tree);
                    	            }

                    	            }
                    	            break;
                    	        case 2 :
                    	            // HiveParser.g:1213:4: ( KW_KEY_TYPE )=> KW_KEY_TYPE
                    	            {
                    	            KW_KEY_TYPE179=(Token)match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_tabTypeExpr3927); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	            KW_KEY_TYPE179_tree = 
                    	            (ASTNode)adaptor.create(KW_KEY_TYPE179)
                    	            ;
                    	            adaptor.addChild(root_0, KW_KEY_TYPE179_tree);
                    	            }

                    	            }
                    	            break;
                    	        case 3 :
                    	            // HiveParser.g:1215:4: ( KW_VALUE_TYPE )=> KW_VALUE_TYPE
                    	            {
                    	            KW_VALUE_TYPE180=(Token)match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_tabTypeExpr3943); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	            KW_VALUE_TYPE180_tree = 
                    	            (ASTNode)adaptor.create(KW_VALUE_TYPE180)
                    	            ;
                    	            adaptor.addChild(root_0, KW_VALUE_TYPE180_tree);
                    	            }

                    	            }
                    	            break;
                    	        case 4 :
                    	            // HiveParser.g:1216:6: identifier
                    	            {
                    	            pushFollow(FOLLOW_identifier_in_tabTypeExpr3950);
                    	            identifier181=identifier();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier181.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop42;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tabTypeExpr"


    public static class partTypeExpr_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partTypeExpr"
    // HiveParser.g:1221:1: partTypeExpr : tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) ;
    public final HiveParser.partTypeExpr_return partTypeExpr() throws RecognitionException {
        HiveParser.partTypeExpr_return retval = new HiveParser.partTypeExpr_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.tabTypeExpr_return tabTypeExpr182 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec183 =null;


        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tabTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule tabTypeExpr");
         pushMsg("specifying table partitions", state); 
        try {
            // HiveParser.g:1224:5: ( tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) )
            // HiveParser.g:1224:8: tabTypeExpr ( partitionSpec )?
            {
            pushFollow(FOLLOW_tabTypeExpr_in_partTypeExpr3990);
            tabTypeExpr182=tabTypeExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tabTypeExpr.add(tabTypeExpr182.getTree());

            // HiveParser.g:1224:20: ( partitionSpec )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==KW_PARTITION) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // HiveParser.g:1224:20: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_partTypeExpr3992);
                    partitionSpec183=partitionSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec183.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tabTypeExpr, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1224:35: -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
            {
                // HiveParser.g:1224:38: ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABTYPE, "TOK_TABTYPE")
                , root_1);

                adaptor.addChild(root_1, stream_tabTypeExpr.nextTree());

                // HiveParser.g:1224:64: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partTypeExpr"


    public static class tabPartColTypeExpr_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tabPartColTypeExpr"
    // HiveParser.g:1227:1: tabPartColTypeExpr : tableName ( partitionSpec )? ( extColumnName )? -> ^( TOK_TABTYPE tableName ( partitionSpec )? ( extColumnName )? ) ;
    public final HiveParser.tabPartColTypeExpr_return tabPartColTypeExpr() throws RecognitionException {
        HiveParser.tabPartColTypeExpr_return retval = new HiveParser.tabPartColTypeExpr_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser_FromClauseParser.tableName_return tableName184 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec185 =null;

        HiveParser.extColumnName_return extColumnName186 =null;


        RewriteRuleSubtreeStream stream_extColumnName=new RewriteRuleSubtreeStream(adaptor,"rule extColumnName");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("specifying table partitions columnName", state); 
        try {
            // HiveParser.g:1230:5: ( tableName ( partitionSpec )? ( extColumnName )? -> ^( TOK_TABTYPE tableName ( partitionSpec )? ( extColumnName )? ) )
            // HiveParser.g:1230:8: tableName ( partitionSpec )? ( extColumnName )?
            {
            pushFollow(FOLLOW_tableName_in_tabPartColTypeExpr4032);
            tableName184=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tableName184.getTree());

            // HiveParser.g:1230:18: ( partitionSpec )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==KW_PARTITION) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // HiveParser.g:1230:18: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_tabPartColTypeExpr4034);
                    partitionSpec185=partitionSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec185.getTree());

                    }
                    break;

            }


            // HiveParser.g:1230:33: ( extColumnName )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==Identifier||(LA46_0 >= KW_ABORT && LA46_0 <= KW_AFTER)||LA46_0==KW_ALLOC_FRACTION||LA46_0==KW_ANALYZE||LA46_0==KW_ARCHIVE||(LA46_0 >= KW_ASC && LA46_0 <= KW_AT)||(LA46_0 >= KW_AUTOCOMMIT && LA46_0 <= KW_BEFORE)||(LA46_0 >= KW_BRANCH && LA46_0 <= KW_BUCKETS)||(LA46_0 >= KW_CACHE && LA46_0 <= KW_CASCADE)||(LA46_0 >= KW_CBO && LA46_0 <= KW_CHANGE)||LA46_0==KW_CHECK||(LA46_0 >= KW_CLUSTER && LA46_0 <= KW_COLLECTION)||(LA46_0 >= KW_COLUMNS && LA46_0 <= KW_COMMENT)||(LA46_0 >= KW_COMPACT && LA46_0 <= KW_COMPACTIONS)||(LA46_0 >= KW_COMPUTE && LA46_0 <= KW_CONCATENATE)||LA46_0==KW_CONTINUE||LA46_0==KW_COST||LA46_0==KW_CRON||LA46_0==KW_DATA||LA46_0==KW_DATABASES||(LA46_0 >= KW_DATETIME && LA46_0 <= KW_DCPROPERTIES)||LA46_0==KW_DEBUG||(LA46_0 >= KW_DEFAULT && LA46_0 <= KW_DEFINED)||(LA46_0 >= KW_DELIMITED && LA46_0 <= KW_DESC)||(LA46_0 >= KW_DETAIL && LA46_0 <= KW_DISABLE)||(LA46_0 >= KW_DISTRIBUTE && LA46_0 <= KW_DO)||LA46_0==KW_DOW||(LA46_0 >= KW_DUMP && LA46_0 <= KW_ELEM_TYPE)||LA46_0==KW_ENABLE||(LA46_0 >= KW_ENFORCED && LA46_0 <= KW_EVERY)||(LA46_0 >= KW_EXCLUSIVE && LA46_0 <= KW_EXECUTED)||(LA46_0 >= KW_EXPIRE_SNAPSHOTS && LA46_0 <= KW_EXPRESSION)||LA46_0==KW_FAST_FORWARD||(LA46_0 >= KW_FIELDS && LA46_0 <= KW_FIRST)||(LA46_0 >= KW_FORMAT && LA46_0 <= KW_FORMATTED)||LA46_0==KW_FUNCTIONS||(LA46_0 >= KW_HOUR && LA46_0 <= KW_IDXPROPERTIES)||LA46_0==KW_IGNORE||(LA46_0 >= KW_INDEX && LA46_0 <= KW_INDEXES)||(LA46_0 >= KW_INPATH && LA46_0 <= KW_INPUTFORMAT)||(LA46_0 >= KW_ISOLATION && LA46_0 <= KW_JAR)||(LA46_0 >= KW_JOINCOST && LA46_0 <= KW_LAST)||LA46_0==KW_LEVEL||(LA46_0 >= KW_LIMIT && LA46_0 <= KW_LOAD)||(LA46_0 >= KW_LOCATION && LA46_0 <= KW_LONG)||(LA46_0 >= KW_MANAGED && LA46_0 <= KW_MANAGEMENT)||(LA46_0 >= KW_MAPJOIN && LA46_0 <= KW_MATERIALIZED)||LA46_0==KW_METADATA||(LA46_0 >= KW_MINUTE && LA46_0 <= KW_MONTH)||(LA46_0 >= KW_MOVE && LA46_0 <= KW_MSCK)||(LA46_0 >= KW_NORELY && LA46_0 <= KW_NOSCAN)||LA46_0==KW_NOVALIDATE||LA46_0==KW_NULLS||LA46_0==KW_OFFSET||(LA46_0 >= KW_OPERATOR && LA46_0 <= KW_OPTION)||(LA46_0 >= KW_OUTPUTDRIVER && LA46_0 <= KW_OUTPUTFORMAT)||(LA46_0 >= KW_OVERWRITE && LA46_0 <= KW_OWNER)||(LA46_0 >= KW_PARTITIONED && LA46_0 <= KW_PATH)||(LA46_0 >= KW_PLAN && LA46_0 <= KW_POOL)||LA46_0==KW_PRINCIPALS||LA46_0==KW_PURGE||(LA46_0 >= KW_QUARTER && LA46_0 <= KW_QUERY_PARALLELISM)||LA46_0==KW_READ||(LA46_0 >= KW_REBUILD && LA46_0 <= KW_RECORDWRITER)||(LA46_0 >= KW_RELOAD && LA46_0 <= KW_RETENTION)||LA46_0==KW_REWRITE||(LA46_0 >= KW_ROLE && LA46_0 <= KW_ROLES)||(LA46_0 >= KW_SCHEDULED && LA46_0 <= KW_SECOND)||(LA46_0 >= KW_SEMI && LA46_0 <= KW_SERVER)||(LA46_0 >= KW_SETS && LA46_0 <= KW_SKEWED)||(LA46_0 >= KW_SNAPSHOT && LA46_0 <= KW_SNAPSHOTS)||(LA46_0 >= KW_SORT && LA46_0 <= KW_SSL)||(LA46_0 >= KW_STATISTICS && LA46_0 <= KW_SUMMARY)||(LA46_0 >= KW_SYSTEM_TIME && LA46_0 <= KW_SYSTEM_VERSION)||LA46_0==KW_TABLES||(LA46_0 >= KW_TAG && LA46_0 <= KW_TERMINATED)||LA46_0==KW_TINYINT||LA46_0==KW_TOUCH||(LA46_0 >= KW_TRANSACTION && LA46_0 <= KW_TRANSACTIONS)||LA46_0==KW_TRIM||(LA46_0 >= KW_TYPE && LA46_0 <= KW_UNARCHIVE)||LA46_0==KW_UNDO||LA46_0==KW_UNIONTYPE||(LA46_0 >= KW_UNKNOWN && LA46_0 <= KW_UNSIGNED)||(LA46_0 >= KW_URI && LA46_0 <= KW_USE)||(LA46_0 >= KW_UTC && LA46_0 <= KW_VALIDATE)||LA46_0==KW_VALUE_TYPE||(LA46_0 >= KW_VECTORIZATION && LA46_0 <= KW_WEEK)||LA46_0==KW_WHILE||(LA46_0 >= KW_WITHIN && LA46_0 <= KW_ZONE)||LA46_0==KW_BATCH||LA46_0==KW_DAYOFWEEK||LA46_0==KW_HOLD_DDLTIME||LA46_0==KW_NO_DROP||LA46_0==KW_OFFLINE||LA46_0==KW_PROTECTION||LA46_0==KW_READONLY||LA46_0==KW_TIMESTAMPTZ) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // HiveParser.g:1230:33: extColumnName
                    {
                    pushFollow(FOLLOW_extColumnName_in_tabPartColTypeExpr4037);
                    extColumnName186=extColumnName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_extColumnName.add(extColumnName186.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableName, partitionSpec, extColumnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1230:48: -> ^( TOK_TABTYPE tableName ( partitionSpec )? ( extColumnName )? )
            {
                // HiveParser.g:1230:51: ^( TOK_TABTYPE tableName ( partitionSpec )? ( extColumnName )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABTYPE, "TOK_TABTYPE")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                // HiveParser.g:1230:75: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                // HiveParser.g:1230:90: ( extColumnName )?
                if ( stream_extColumnName.hasNext() ) {
                    adaptor.addChild(root_1, stream_extColumnName.nextTree());

                }
                stream_extColumnName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tabPartColTypeExpr"


    public static class descStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "descStatement"
    // HiveParser.g:1233:1: descStatement : ( KW_DESCRIBE | KW_DESC ) ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_DATACONNECTOR )=> ( KW_DATACONNECTOR ) ( KW_EXTENDED )? (dcName= identifier ) -> ^( TOK_DESCDATACONNECTOR $dcName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) ) ;
    public final HiveParser.descStatement_return descStatement() throws RecognitionException {
        HiveParser.descStatement_return retval = new HiveParser.descStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token descOptions=null;
        Token KW_DESCRIBE187=null;
        Token KW_DESC188=null;
        Token KW_DATABASE189=null;
        Token KW_SCHEMA190=null;
        Token KW_EXTENDED191=null;
        Token KW_DATACONNECTOR192=null;
        Token KW_EXTENDED193=null;
        Token KW_FUNCTION194=null;
        Token KW_EXTENDED195=null;
        HiveParser_IdentifiersParser.identifier_return dbName =null;

        HiveParser_IdentifiersParser.identifier_return dcName =null;

        HiveParser_IdentifiersParser.descFuncNames_return name =null;

        HiveParser.tabPartColTypeExpr_return parttype =null;


        ASTNode descOptions_tree=null;
        ASTNode KW_DESCRIBE187_tree=null;
        ASTNode KW_DESC188_tree=null;
        ASTNode KW_DATABASE189_tree=null;
        ASTNode KW_SCHEMA190_tree=null;
        ASTNode KW_EXTENDED191_tree=null;
        ASTNode KW_DATACONNECTOR192_tree=null;
        ASTNode KW_EXTENDED193_tree=null;
        ASTNode KW_FUNCTION194_tree=null;
        ASTNode KW_EXTENDED195_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_DATACONNECTOR=new RewriteRuleTokenStream(adaptor,"token KW_DATACONNECTOR");
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
        RewriteRuleTokenStream stream_KW_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token KW_DESCRIBE");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_tabPartColTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule tabPartColTypeExpr");
        RewriteRuleSubtreeStream stream_descFuncNames=new RewriteRuleSubtreeStream(adaptor,"rule descFuncNames");
         pushMsg("describe statement", state); 
        try {
            // HiveParser.g:1236:5: ( ( KW_DESCRIBE | KW_DESC ) ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_DATACONNECTOR )=> ( KW_DATACONNECTOR ) ( KW_EXTENDED )? (dcName= identifier ) -> ^( TOK_DESCDATACONNECTOR $dcName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) ) )
            // HiveParser.g:1237:5: ( KW_DESCRIBE | KW_DESC ) ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_DATACONNECTOR )=> ( KW_DATACONNECTOR ) ( KW_EXTENDED )? (dcName= identifier ) -> ^( TOK_DESCDATACONNECTOR $dcName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) )
            {
            // HiveParser.g:1237:5: ( KW_DESCRIBE | KW_DESC )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==KW_DESCRIBE) ) {
                alt47=1;
            }
            else if ( (LA47_0==KW_DESC) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }
            switch (alt47) {
                case 1 :
                    // HiveParser.g:1237:6: KW_DESCRIBE
                    {
                    KW_DESCRIBE187=(Token)match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement4084); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DESCRIBE.add(KW_DESCRIBE187);


                    }
                    break;
                case 2 :
                    // HiveParser.g:1237:18: KW_DESC
                    {
                    KW_DESC188=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement4086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DESC.add(KW_DESC188);


                    }
                    break;

            }


            // HiveParser.g:1238:5: ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_DATACONNECTOR )=> ( KW_DATACONNECTOR ) ( KW_EXTENDED )? (dcName= identifier ) -> ^( TOK_DESCDATACONNECTOR $dcName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) )
            int alt53=5;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==KW_DATABASE) && (synpred6_HiveParser())) {
                alt53=1;
            }
            else if ( (LA53_0==KW_SCHEMA) ) {
                int LA53_2 = input.LA(2);

                if ( (LA53_2==KW_EXTENDED) && (synpred6_HiveParser())) {
                    alt53=1;
                }
                else if ( (LA53_2==Identifier) ) {
                    int LA53_10 = input.LA(3);

                    if ( (synpred6_HiveParser()) ) {
                        alt53=1;
                    }
                    else if ( (true) ) {
                        alt53=5;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 53, 10, input);

                        throw nvae;

                    }
                }
                else if ( ((LA53_2 >= KW_ABORT && LA53_2 <= KW_AFTER)||LA53_2==KW_ALLOC_FRACTION||LA53_2==KW_ANALYZE||LA53_2==KW_ARCHIVE||(LA53_2 >= KW_ASC && LA53_2 <= KW_AT)||(LA53_2 >= KW_AUTOCOMMIT && LA53_2 <= KW_BEFORE)||(LA53_2 >= KW_BRANCH && LA53_2 <= KW_BUCKETS)||(LA53_2 >= KW_CACHE && LA53_2 <= KW_CASCADE)||(LA53_2 >= KW_CBO && LA53_2 <= KW_CHANGE)||LA53_2==KW_CHECK||(LA53_2 >= KW_CLUSTER && LA53_2 <= KW_COLLECTION)||(LA53_2 >= KW_COLUMNS && LA53_2 <= KW_COMMENT)||(LA53_2 >= KW_COMPACT && LA53_2 <= KW_COMPACTIONS)||(LA53_2 >= KW_COMPUTE && LA53_2 <= KW_CONCATENATE)||LA53_2==KW_CONTINUE||LA53_2==KW_COST||LA53_2==KW_CRON||LA53_2==KW_DATA||LA53_2==KW_DATABASES||(LA53_2 >= KW_DATETIME && LA53_2 <= KW_DCPROPERTIES)||LA53_2==KW_DEBUG||(LA53_2 >= KW_DEFAULT && LA53_2 <= KW_DEFINED)||(LA53_2 >= KW_DELIMITED && LA53_2 <= KW_DESC)||(LA53_2 >= KW_DETAIL && LA53_2 <= KW_DISABLE)||(LA53_2 >= KW_DISTRIBUTE && LA53_2 <= KW_DO)||LA53_2==KW_DOW||(LA53_2 >= KW_DUMP && LA53_2 <= KW_ELEM_TYPE)||LA53_2==KW_ENABLE||(LA53_2 >= KW_ENFORCED && LA53_2 <= KW_EVERY)||(LA53_2 >= KW_EXCLUSIVE && LA53_2 <= KW_EXECUTED)||(LA53_2 >= KW_EXPIRE_SNAPSHOTS && LA53_2 <= KW_EXPRESSION)||LA53_2==KW_FAST_FORWARD||(LA53_2 >= KW_FIELDS && LA53_2 <= KW_FIRST)||(LA53_2 >= KW_FORMAT && LA53_2 <= KW_FORMATTED)||LA53_2==KW_FUNCTIONS||(LA53_2 >= KW_HOUR && LA53_2 <= KW_IDXPROPERTIES)||LA53_2==KW_IGNORE||(LA53_2 >= KW_INDEX && LA53_2 <= KW_INDEXES)||(LA53_2 >= KW_INPATH && LA53_2 <= KW_INPUTFORMAT)||(LA53_2 >= KW_ISOLATION && LA53_2 <= KW_JAR)||(LA53_2 >= KW_JOINCOST && LA53_2 <= KW_LAST)||LA53_2==KW_LEVEL||(LA53_2 >= KW_LIMIT && LA53_2 <= KW_LOAD)||(LA53_2 >= KW_LOCATION && LA53_2 <= KW_LONG)||(LA53_2 >= KW_MANAGED && LA53_2 <= KW_MANAGEMENT)||(LA53_2 >= KW_MAPJOIN && LA53_2 <= KW_MATERIALIZED)||LA53_2==KW_METADATA||(LA53_2 >= KW_MINUTE && LA53_2 <= KW_MONTH)||(LA53_2 >= KW_MOVE && LA53_2 <= KW_MSCK)||(LA53_2 >= KW_NORELY && LA53_2 <= KW_NOSCAN)||LA53_2==KW_NOVALIDATE||LA53_2==KW_NULLS||LA53_2==KW_OFFSET||(LA53_2 >= KW_OPERATOR && LA53_2 <= KW_OPTION)||(LA53_2 >= KW_OUTPUTDRIVER && LA53_2 <= KW_OUTPUTFORMAT)||(LA53_2 >= KW_OVERWRITE && LA53_2 <= KW_OWNER)||(LA53_2 >= KW_PARTITIONED && LA53_2 <= KW_PATH)||(LA53_2 >= KW_PLAN && LA53_2 <= KW_POOL)||LA53_2==KW_PRINCIPALS||LA53_2==KW_PURGE||(LA53_2 >= KW_QUARTER && LA53_2 <= KW_QUERY_PARALLELISM)||LA53_2==KW_READ||(LA53_2 >= KW_REBUILD && LA53_2 <= KW_RECORDWRITER)||(LA53_2 >= KW_RELOAD && LA53_2 <= KW_RETENTION)||LA53_2==KW_REWRITE||(LA53_2 >= KW_ROLE && LA53_2 <= KW_ROLES)||(LA53_2 >= KW_SCHEDULED && LA53_2 <= KW_SECOND)||(LA53_2 >= KW_SEMI && LA53_2 <= KW_SERVER)||(LA53_2 >= KW_SETS && LA53_2 <= KW_SKEWED)||(LA53_2 >= KW_SNAPSHOT && LA53_2 <= KW_SNAPSHOTS)||(LA53_2 >= KW_SORT && LA53_2 <= KW_SSL)||(LA53_2 >= KW_STATISTICS && LA53_2 <= KW_SUMMARY)||(LA53_2 >= KW_SYSTEM_TIME && LA53_2 <= KW_SYSTEM_VERSION)||LA53_2==KW_TABLES||(LA53_2 >= KW_TAG && LA53_2 <= KW_TERMINATED)||LA53_2==KW_TINYINT||LA53_2==KW_TOUCH||(LA53_2 >= KW_TRANSACTION && LA53_2 <= KW_TRANSACTIONS)||LA53_2==KW_TRIM||(LA53_2 >= KW_TYPE && LA53_2 <= KW_UNARCHIVE)||LA53_2==KW_UNDO||LA53_2==KW_UNIONTYPE||(LA53_2 >= KW_UNKNOWN && LA53_2 <= KW_UNSIGNED)||(LA53_2 >= KW_URI && LA53_2 <= KW_USE)||(LA53_2 >= KW_UTC && LA53_2 <= KW_VALIDATE)||LA53_2==KW_VALUE_TYPE||(LA53_2 >= KW_VECTORIZATION && LA53_2 <= KW_WEEK)||LA53_2==KW_WHILE||(LA53_2 >= KW_WITHIN && LA53_2 <= KW_ZONE)||LA53_2==KW_BATCH||LA53_2==KW_DAYOFWEEK||LA53_2==KW_HOLD_DDLTIME||LA53_2==KW_NO_DROP||LA53_2==KW_OFFLINE||LA53_2==KW_PROTECTION||LA53_2==KW_READONLY||LA53_2==KW_TIMESTAMPTZ) ) {
                    int LA53_11 = input.LA(3);

                    if ( (synpred6_HiveParser()) ) {
                        alt53=1;
                    }
                    else if ( (true) ) {
                        alt53=5;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 53, 11, input);

                        throw nvae;

                    }
                }
                else if ( (LA53_2==EOF||LA53_2==DOT||LA53_2==KW_PARTITION) ) {
                    alt53=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 53, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA53_0==KW_DATACONNECTOR) && (synpred7_HiveParser())) {
                alt53=2;
            }
            else if ( (LA53_0==KW_FUNCTION) && (synpred8_HiveParser())) {
                alt53=3;
            }
            else if ( (LA53_0==KW_FORMATTED) ) {
                switch ( input.LA(2) ) {
                case Identifier:
                    {
                    int LA53_15 = input.LA(3);

                    if ( (synpred9_HiveParser()) ) {
                        alt53=4;
                    }
                    else if ( (true) ) {
                        alt53=5;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 53, 15, input);

                        throw nvae;

                    }
                    }
                    break;
                case KW_ABORT:
                case KW_ACTIVATE:
                case KW_ACTIVE:
                case KW_ADD:
                case KW_ADMIN:
                case KW_AFTER:
                case KW_ALLOC_FRACTION:
                case KW_ANALYZE:
                case KW_ARCHIVE:
                case KW_ASC:
                case KW_AST:
                case KW_AT:
                case KW_AUTOCOMMIT:
                case KW_BEFORE:
                case KW_BRANCH:
                case KW_BUCKET:
                case KW_BUCKETS:
                case KW_CACHE:
                case KW_CASCADE:
                case KW_CBO:
                case KW_CHANGE:
                case KW_CHECK:
                case KW_CLUSTER:
                case KW_CLUSTERED:
                case KW_CLUSTERSTATUS:
                case KW_COLLECTION:
                case KW_COLUMNS:
                case KW_COMMENT:
                case KW_COMPACT:
                case KW_COMPACTIONS:
                case KW_COMPUTE:
                case KW_CONCATENATE:
                case KW_CONTINUE:
                case KW_COST:
                case KW_CRON:
                case KW_DATA:
                case KW_DATABASES:
                case KW_DATETIME:
                case KW_DAY:
                case KW_DBPROPERTIES:
                case KW_DCPROPERTIES:
                case KW_DEBUG:
                case KW_DEFAULT:
                case KW_DEFERRED:
                case KW_DEFINED:
                case KW_DELIMITED:
                case KW_DEPENDENCY:
                case KW_DESC:
                case KW_DETAIL:
                case KW_DIRECTORIES:
                case KW_DIRECTORY:
                case KW_DISABLE:
                case KW_DISTRIBUTE:
                case KW_DISTRIBUTED:
                case KW_DO:
                case KW_DOW:
                case KW_DUMP:
                case KW_ELEM_TYPE:
                case KW_ENABLE:
                case KW_ENFORCED:
                case KW_ESCAPED:
                case KW_EVERY:
                case KW_EXCLUSIVE:
                case KW_EXECUTE:
                case KW_EXECUTED:
                case KW_EXPIRE_SNAPSHOTS:
                case KW_EXPLAIN:
                case KW_EXPORT:
                case KW_EXPRESSION:
                case KW_FAST_FORWARD:
                case KW_FIELDS:
                case KW_FILE:
                case KW_FILEFORMAT:
                case KW_FIRST:
                case KW_FORMAT:
                case KW_FORMATTED:
                case KW_FUNCTIONS:
                case KW_HOUR:
                case KW_IDXPROPERTIES:
                case KW_IGNORE:
                case KW_INDEX:
                case KW_INDEXES:
                case KW_INPATH:
                case KW_INPUTDRIVER:
                case KW_INPUTFORMAT:
                case KW_ISOLATION:
                case KW_ITEMS:
                case KW_JAR:
                case KW_JOINCOST:
                case KW_KEY:
                case KW_KEYS:
                case KW_KEY_TYPE:
                case KW_KILL:
                case KW_LAST:
                case KW_LEVEL:
                case KW_LIMIT:
                case KW_LINES:
                case KW_LOAD:
                case KW_LOCATION:
                case KW_LOCK:
                case KW_LOCKS:
                case KW_LOGICAL:
                case KW_LONG:
                case KW_MANAGED:
                case KW_MANAGEDLOCATION:
                case KW_MANAGEMENT:
                case KW_MAPJOIN:
                case KW_MAPPING:
                case KW_MATCHED:
                case KW_MATERIALIZED:
                case KW_METADATA:
                case KW_MINUTE:
                case KW_MONTH:
                case KW_MOVE:
                case KW_MSCK:
                case KW_NORELY:
                case KW_NOSCAN:
                case KW_NOVALIDATE:
                case KW_NULLS:
                case KW_OFFSET:
                case KW_OPERATOR:
                case KW_OPTIMIZE:
                case KW_OPTION:
                case KW_OUTPUTDRIVER:
                case KW_OUTPUTFORMAT:
                case KW_OVERWRITE:
                case KW_OWNER:
                case KW_PARTITIONED:
                case KW_PARTITIONS:
                case KW_PATH:
                case KW_PLAN:
                case KW_PLANS:
                case KW_PLUS:
                case KW_POOL:
                case KW_PRINCIPALS:
                case KW_PURGE:
                case KW_QUARTER:
                case KW_QUERY:
                case KW_QUERY_PARALLELISM:
                case KW_READ:
                case KW_REBUILD:
                case KW_RECORDREADER:
                case KW_RECORDWRITER:
                case KW_RELOAD:
                case KW_RELY:
                case KW_REMOTE:
                case KW_RENAME:
                case KW_REOPTIMIZATION:
                case KW_REPAIR:
                case KW_REPL:
                case KW_REPLACE:
                case KW_REPLICATION:
                case KW_RESOURCE:
                case KW_RESPECT:
                case KW_RESTRICT:
                case KW_RETAIN:
                case KW_RETENTION:
                case KW_REWRITE:
                case KW_ROLE:
                case KW_ROLES:
                case KW_SCHEDULED:
                case KW_SCHEDULING_POLICY:
                case KW_SCHEMA:
                case KW_SCHEMAS:
                case KW_SECOND:
                case KW_SEMI:
                case KW_SERDE:
                case KW_SERDEPROPERTIES:
                case KW_SERVER:
                case KW_SETS:
                case KW_SET_CURRENT_SNAPSHOT:
                case KW_SHARED:
                case KW_SHOW:
                case KW_SHOW_DATABASE:
                case KW_SKEWED:
                case KW_SNAPSHOT:
                case KW_SNAPSHOTS:
                case KW_SORT:
                case KW_SORTED:
                case KW_SPEC:
                case KW_SSL:
                case KW_STATISTICS:
                case KW_STATUS:
                case KW_STORED:
                case KW_STREAMTABLE:
                case KW_STRING:
                case KW_STRUCT:
                case KW_SUMMARY:
                case KW_SYSTEM_TIME:
                case KW_SYSTEM_VERSION:
                case KW_TABLES:
                case KW_TAG:
                case KW_TBLPROPERTIES:
                case KW_TEMPORARY:
                case KW_TERMINATED:
                case KW_TINYINT:
                case KW_TOUCH:
                case KW_TRANSACTION:
                case KW_TRANSACTIONAL:
                case KW_TRANSACTIONS:
                case KW_TRIM:
                case KW_TYPE:
                case KW_UNARCHIVE:
                case KW_UNDO:
                case KW_UNIONTYPE:
                case KW_UNKNOWN:
                case KW_UNLOCK:
                case KW_UNMANAGED:
                case KW_UNSET:
                case KW_UNSIGNED:
                case KW_URI:
                case KW_URL:
                case KW_USE:
                case KW_UTC:
                case KW_UTCTIMESTAMP:
                case KW_VALIDATE:
                case KW_VALUE_TYPE:
                case KW_VECTORIZATION:
                case KW_VIEW:
                case KW_VIEWS:
                case KW_WAIT:
                case KW_WEEK:
                case KW_WHILE:
                case KW_WITHIN:
                case KW_WORK:
                case KW_WORKLOAD:
                case KW_WRITE:
                case KW_YEAR:
                case KW_ZONE:
                case KW_BATCH:
                case KW_DAYOFWEEK:
                case KW_HOLD_DDLTIME:
                case KW_NO_DROP:
                case KW_OFFLINE:
                case KW_PROTECTION:
                case KW_READONLY:
                case KW_TIMESTAMPTZ:
                    {
                    int LA53_16 = input.LA(3);

                    if ( (synpred9_HiveParser()) ) {
                        alt53=4;
                    }
                    else if ( (true) ) {
                        alt53=5;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 53, 16, input);

                        throw nvae;

                    }
                    }
                    break;
                case EOF:
                case DOT:
                case KW_PARTITION:
                    {
                    alt53=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 53, 5, input);

                    throw nvae;

                }

            }
            else if ( (LA53_0==KW_EXTENDED) && (synpred9_HiveParser())) {
                alt53=4;
            }
            else if ( (LA53_0==Identifier||(LA53_0 >= KW_ABORT && LA53_0 <= KW_AFTER)||LA53_0==KW_ALLOC_FRACTION||LA53_0==KW_ANALYZE||LA53_0==KW_ARCHIVE||(LA53_0 >= KW_ASC && LA53_0 <= KW_AT)||(LA53_0 >= KW_AUTOCOMMIT && LA53_0 <= KW_BEFORE)||(LA53_0 >= KW_BRANCH && LA53_0 <= KW_BUCKETS)||(LA53_0 >= KW_CACHE && LA53_0 <= KW_CASCADE)||(LA53_0 >= KW_CBO && LA53_0 <= KW_CHANGE)||LA53_0==KW_CHECK||(LA53_0 >= KW_CLUSTER && LA53_0 <= KW_COLLECTION)||(LA53_0 >= KW_COLUMNS && LA53_0 <= KW_COMMENT)||(LA53_0 >= KW_COMPACT && LA53_0 <= KW_COMPACTIONS)||(LA53_0 >= KW_COMPUTE && LA53_0 <= KW_CONCATENATE)||LA53_0==KW_CONTINUE||LA53_0==KW_COST||LA53_0==KW_CRON||LA53_0==KW_DATA||LA53_0==KW_DATABASES||(LA53_0 >= KW_DATETIME && LA53_0 <= KW_DCPROPERTIES)||LA53_0==KW_DEBUG||(LA53_0 >= KW_DEFAULT && LA53_0 <= KW_DEFINED)||(LA53_0 >= KW_DELIMITED && LA53_0 <= KW_DESC)||(LA53_0 >= KW_DETAIL && LA53_0 <= KW_DISABLE)||(LA53_0 >= KW_DISTRIBUTE && LA53_0 <= KW_DO)||LA53_0==KW_DOW||(LA53_0 >= KW_DUMP && LA53_0 <= KW_ELEM_TYPE)||LA53_0==KW_ENABLE||(LA53_0 >= KW_ENFORCED && LA53_0 <= KW_EVERY)||(LA53_0 >= KW_EXCLUSIVE && LA53_0 <= KW_EXECUTED)||(LA53_0 >= KW_EXPIRE_SNAPSHOTS && LA53_0 <= KW_EXPRESSION)||LA53_0==KW_FAST_FORWARD||(LA53_0 >= KW_FIELDS && LA53_0 <= KW_FIRST)||LA53_0==KW_FORMAT||LA53_0==KW_FUNCTIONS||(LA53_0 >= KW_HOUR && LA53_0 <= KW_IDXPROPERTIES)||LA53_0==KW_IGNORE||(LA53_0 >= KW_INDEX && LA53_0 <= KW_INDEXES)||(LA53_0 >= KW_INPATH && LA53_0 <= KW_INPUTFORMAT)||(LA53_0 >= KW_ISOLATION && LA53_0 <= KW_JAR)||(LA53_0 >= KW_JOINCOST && LA53_0 <= KW_LAST)||LA53_0==KW_LEVEL||(LA53_0 >= KW_LIMIT && LA53_0 <= KW_LOAD)||(LA53_0 >= KW_LOCATION && LA53_0 <= KW_LONG)||(LA53_0 >= KW_MANAGED && LA53_0 <= KW_MANAGEMENT)||(LA53_0 >= KW_MAPJOIN && LA53_0 <= KW_MATERIALIZED)||LA53_0==KW_METADATA||(LA53_0 >= KW_MINUTE && LA53_0 <= KW_MONTH)||(LA53_0 >= KW_MOVE && LA53_0 <= KW_MSCK)||(LA53_0 >= KW_NORELY && LA53_0 <= KW_NOSCAN)||LA53_0==KW_NOVALIDATE||LA53_0==KW_NULLS||LA53_0==KW_OFFSET||(LA53_0 >= KW_OPERATOR && LA53_0 <= KW_OPTION)||(LA53_0 >= KW_OUTPUTDRIVER && LA53_0 <= KW_OUTPUTFORMAT)||(LA53_0 >= KW_OVERWRITE && LA53_0 <= KW_OWNER)||(LA53_0 >= KW_PARTITIONED && LA53_0 <= KW_PATH)||(LA53_0 >= KW_PLAN && LA53_0 <= KW_POOL)||LA53_0==KW_PRINCIPALS||LA53_0==KW_PURGE||(LA53_0 >= KW_QUARTER && LA53_0 <= KW_QUERY_PARALLELISM)||LA53_0==KW_READ||(LA53_0 >= KW_REBUILD && LA53_0 <= KW_RECORDWRITER)||(LA53_0 >= KW_RELOAD && LA53_0 <= KW_RETENTION)||LA53_0==KW_REWRITE||(LA53_0 >= KW_ROLE && LA53_0 <= KW_ROLES)||(LA53_0 >= KW_SCHEDULED && LA53_0 <= KW_SCHEDULING_POLICY)||(LA53_0 >= KW_SCHEMAS && LA53_0 <= KW_SECOND)||(LA53_0 >= KW_SEMI && LA53_0 <= KW_SERVER)||(LA53_0 >= KW_SETS && LA53_0 <= KW_SKEWED)||(LA53_0 >= KW_SNAPSHOT && LA53_0 <= KW_SNAPSHOTS)||(LA53_0 >= KW_SORT && LA53_0 <= KW_SSL)||(LA53_0 >= KW_STATISTICS && LA53_0 <= KW_SUMMARY)||(LA53_0 >= KW_SYSTEM_TIME && LA53_0 <= KW_SYSTEM_VERSION)||LA53_0==KW_TABLES||(LA53_0 >= KW_TAG && LA53_0 <= KW_TERMINATED)||LA53_0==KW_TINYINT||LA53_0==KW_TOUCH||(LA53_0 >= KW_TRANSACTION && LA53_0 <= KW_TRANSACTIONS)||LA53_0==KW_TRIM||(LA53_0 >= KW_TYPE && LA53_0 <= KW_UNARCHIVE)||LA53_0==KW_UNDO||LA53_0==KW_UNIONTYPE||(LA53_0 >= KW_UNKNOWN && LA53_0 <= KW_UNSIGNED)||(LA53_0 >= KW_URI && LA53_0 <= KW_USE)||(LA53_0 >= KW_UTC && LA53_0 <= KW_VALIDATE)||LA53_0==KW_VALUE_TYPE||(LA53_0 >= KW_VECTORIZATION && LA53_0 <= KW_WEEK)||LA53_0==KW_WHILE||(LA53_0 >= KW_WITHIN && LA53_0 <= KW_ZONE)||LA53_0==KW_BATCH||LA53_0==KW_DAYOFWEEK||LA53_0==KW_HOLD_DDLTIME||LA53_0==KW_NO_DROP||LA53_0==KW_OFFLINE||LA53_0==KW_PROTECTION||LA53_0==KW_READONLY||LA53_0==KW_TIMESTAMPTZ) ) {
                alt53=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;

            }
            switch (alt53) {
                case 1 :
                    // HiveParser.g:1239:5: ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier )
                    {
                    // HiveParser.g:1239:32: ( KW_DATABASE | KW_SCHEMA )
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==KW_DATABASE) ) {
                        alt48=1;
                    }
                    else if ( (LA48_0==KW_SCHEMA) ) {
                        alt48=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 48, 0, input);

                        throw nvae;

                    }
                    switch (alt48) {
                        case 1 :
                            // HiveParser.g:1239:33: KW_DATABASE
                            {
                            KW_DATABASE189=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_descStatement4108); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE189);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1239:45: KW_SCHEMA
                            {
                            KW_SCHEMA190=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_descStatement4110); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA190);


                            }
                            break;

                    }


                    // HiveParser.g:1239:56: ( KW_EXTENDED )?
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==KW_EXTENDED) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            // HiveParser.g:1239:56: KW_EXTENDED
                            {
                            KW_EXTENDED191=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement4113); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_EXTENDED.add(KW_EXTENDED191);


                            }
                            break;

                    }


                    // HiveParser.g:1239:69: (dbName= identifier )
                    // HiveParser.g:1239:70: dbName= identifier
                    {
                    pushFollow(FOLLOW_identifier_in_descStatement4119);
                    dbName=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());

                    }


                    // AST REWRITE
                    // elements: KW_EXTENDED, dbName
                    // token labels: 
                    // rule labels: dbName, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1239:89: -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
                    {
                        // HiveParser.g:1239:92: ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DESCDATABASE, "TOK_DESCDATABASE")
                        , root_1);

                        adaptor.addChild(root_1, stream_dbName.nextTree());

                        // HiveParser.g:1239:119: ( KW_EXTENDED )?
                        if ( stream_KW_EXTENDED.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_KW_EXTENDED.nextNode()
                            );

                        }
                        stream_KW_EXTENDED.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1241:5: ( KW_DATACONNECTOR )=> ( KW_DATACONNECTOR ) ( KW_EXTENDED )? (dcName= identifier )
                    {
                    // HiveParser.g:1241:27: ( KW_DATACONNECTOR )
                    // HiveParser.g:1241:28: KW_DATACONNECTOR
                    {
                    KW_DATACONNECTOR192=(Token)match(input,KW_DATACONNECTOR,FOLLOW_KW_DATACONNECTOR_in_descStatement4151); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DATACONNECTOR.add(KW_DATACONNECTOR192);


                    }


                    // HiveParser.g:1241:46: ( KW_EXTENDED )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==KW_EXTENDED) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // HiveParser.g:1241:46: KW_EXTENDED
                            {
                            KW_EXTENDED193=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement4154); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_EXTENDED.add(KW_EXTENDED193);


                            }
                            break;

                    }


                    // HiveParser.g:1241:59: (dcName= identifier )
                    // HiveParser.g:1241:60: dcName= identifier
                    {
                    pushFollow(FOLLOW_identifier_in_descStatement4160);
                    dcName=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(dcName.getTree());

                    }


                    // AST REWRITE
                    // elements: dcName, KW_EXTENDED
                    // token labels: 
                    // rule labels: dcName, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_dcName=new RewriteRuleSubtreeStream(adaptor,"rule dcName",dcName!=null?dcName.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1241:79: -> ^( TOK_DESCDATACONNECTOR $dcName ( KW_EXTENDED )? )
                    {
                        // HiveParser.g:1241:82: ^( TOK_DESCDATACONNECTOR $dcName ( KW_EXTENDED )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DESCDATACONNECTOR, "TOK_DESCDATACONNECTOR")
                        , root_1);

                        adaptor.addChild(root_1, stream_dcName.nextTree());

                        // HiveParser.g:1241:114: ( KW_EXTENDED )?
                        if ( stream_KW_EXTENDED.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_KW_EXTENDED.nextNode()
                            );

                        }
                        stream_KW_EXTENDED.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1243:5: ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames )
                    {
                    KW_FUNCTION194=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_descStatement4191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION194);


                    // HiveParser.g:1243:34: ( KW_EXTENDED )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==KW_EXTENDED) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // HiveParser.g:1243:34: KW_EXTENDED
                            {
                            KW_EXTENDED195=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement4193); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_EXTENDED.add(KW_EXTENDED195);


                            }
                            break;

                    }


                    // HiveParser.g:1243:47: (name= descFuncNames )
                    // HiveParser.g:1243:48: name= descFuncNames
                    {
                    pushFollow(FOLLOW_descFuncNames_in_descStatement4199);
                    name=descFuncNames();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_descFuncNames.add(name.getTree());

                    }


                    // AST REWRITE
                    // elements: name, KW_EXTENDED
                    // token labels: 
                    // rule labels: name, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1243:68: -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
                    {
                        // HiveParser.g:1243:71: ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DESCFUNCTION, "TOK_DESCFUNCTION")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        // HiveParser.g:1243:96: ( KW_EXTENDED )?
                        if ( stream_KW_EXTENDED.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_KW_EXTENDED.nextNode()
                            );

                        }
                        stream_KW_EXTENDED.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:1245:5: ( KW_FORMATTED | KW_EXTENDED )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED ) parttype= tabPartColTypeExpr )
                    {
                    // HiveParser.g:1245:35: ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED ) parttype= tabPartColTypeExpr )
                    // HiveParser.g:1245:36: (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED ) parttype= tabPartColTypeExpr
                    {
                    // HiveParser.g:1245:36: (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED )
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==KW_FORMATTED) ) {
                        alt52=1;
                    }
                    else if ( (LA52_0==KW_EXTENDED) ) {
                        alt52=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 52, 0, input);

                        throw nvae;

                    }
                    switch (alt52) {
                        case 1 :
                            // HiveParser.g:1245:37: descOptions= KW_FORMATTED
                            {
                            descOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_descStatement4236); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_FORMATTED.add(descOptions);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1245:62: descOptions= KW_EXTENDED
                            {
                            descOptions=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement4240); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_EXTENDED.add(descOptions);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_tabPartColTypeExpr_in_descStatement4245);
                    parttype=tabPartColTypeExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tabPartColTypeExpr.add(parttype.getTree());

                    }


                    // AST REWRITE
                    // elements: parttype, descOptions
                    // token labels: descOptions
                    // rule labels: parttype, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_descOptions=new RewriteRuleTokenStream(adaptor,"token descOptions",descOptions);
                    RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1245:116: -> ^( TOK_DESCTABLE $parttype $descOptions)
                    {
                        // HiveParser.g:1245:119: ^( TOK_DESCTABLE $parttype $descOptions)
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DESCTABLE, "TOK_DESCTABLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_parttype.nextTree());

                        adaptor.addChild(root_1, stream_descOptions.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // HiveParser.g:1247:5: parttype= tabPartColTypeExpr
                    {
                    pushFollow(FOLLOW_tabPartColTypeExpr_in_descStatement4272);
                    parttype=tabPartColTypeExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tabPartColTypeExpr.add(parttype.getTree());

                    // AST REWRITE
                    // elements: parttype
                    // token labels: 
                    // rule labels: parttype, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1247:33: -> ^( TOK_DESCTABLE $parttype)
                    {
                        // HiveParser.g:1247:36: ^( TOK_DESCTABLE $parttype)
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DESCTABLE, "TOK_DESCTABLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_parttype.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "descStatement"


    public static class analyzeStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "analyzeStatement"
    // HiveParser.g:1251:1: analyzeStatement : KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) ( ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) | ( KW_CACHE )=> KW_CACHE KW_METADATA -> ^( TOK_CACHE_METADATA $parttype) ) ;
    public final HiveParser.analyzeStatement_return analyzeStatement() throws RecognitionException {
        HiveParser.analyzeStatement_return retval = new HiveParser.analyzeStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token noscan=null;
        Token KW_ANALYZE196=null;
        Token KW_TABLE197=null;
        Token KW_COMPUTE198=null;
        Token KW_STATISTICS199=null;
        Token KW_FOR200=null;
        Token KW_COLUMNS201=null;
        Token KW_CACHE202=null;
        Token KW_METADATA203=null;
        HiveParser_IdentifiersParser.tableOrPartition_return parttype =null;

        HiveParser.columnNameList_return statsColumnName =null;


        ASTNode noscan_tree=null;
        ASTNode KW_ANALYZE196_tree=null;
        ASTNode KW_TABLE197_tree=null;
        ASTNode KW_COMPUTE198_tree=null;
        ASTNode KW_STATISTICS199_tree=null;
        ASTNode KW_FOR200_tree=null;
        ASTNode KW_COLUMNS201_tree=null;
        ASTNode KW_CACHE202_tree=null;
        ASTNode KW_METADATA203_tree=null;
        RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
        RewriteRuleTokenStream stream_KW_ANALYZE=new RewriteRuleTokenStream(adaptor,"token KW_ANALYZE");
        RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
        RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_COMPUTE=new RewriteRuleTokenStream(adaptor,"token KW_COMPUTE");
        RewriteRuleTokenStream stream_KW_METADATA=new RewriteRuleTokenStream(adaptor,"token KW_METADATA");
        RewriteRuleTokenStream stream_KW_NOSCAN=new RewriteRuleTokenStream(adaptor,"token KW_NOSCAN");
        RewriteRuleTokenStream stream_KW_CACHE=new RewriteRuleTokenStream(adaptor,"token KW_CACHE");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         pushMsg("analyze statement", state); 
        try {
            // HiveParser.g:1254:5: ( KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) ( ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) | ( KW_CACHE )=> KW_CACHE KW_METADATA -> ^( TOK_CACHE_METADATA $parttype) ) )
            // HiveParser.g:1254:7: KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) ( ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) | ( KW_CACHE )=> KW_CACHE KW_METADATA -> ^( TOK_CACHE_METADATA $parttype) )
            {
            KW_ANALYZE196=(Token)match(input,KW_ANALYZE,FOLLOW_KW_ANALYZE_in_analyzeStatement4314); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ANALYZE.add(KW_ANALYZE196);


            KW_TABLE197=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_analyzeStatement4316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE197);


            // HiveParser.g:1254:27: (parttype= tableOrPartition )
            // HiveParser.g:1254:28: parttype= tableOrPartition
            {
            pushFollow(FOLLOW_tableOrPartition_in_analyzeStatement4321);
            parttype=tableOrPartition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableOrPartition.add(parttype.getTree());

            }


            // HiveParser.g:1255:7: ( ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) | ( KW_CACHE )=> KW_CACHE KW_METADATA -> ^( TOK_CACHE_METADATA $parttype) )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==KW_COMPUTE) && (synpred10_HiveParser())) {
                alt56=1;
            }
            else if ( (LA56_0==KW_CACHE) && (synpred11_HiveParser())) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;

            }
            switch (alt56) {
                case 1 :
                    // HiveParser.g:1256:7: ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )?
                    {
                    KW_COMPUTE198=(Token)match(input,KW_COMPUTE,FOLLOW_KW_COMPUTE_in_analyzeStatement4344); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COMPUTE.add(KW_COMPUTE198);


                    KW_STATISTICS199=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_analyzeStatement4346); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_STATISTICS.add(KW_STATISTICS199);


                    // HiveParser.g:1256:48: ( (noscan= KW_NOSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )?
                    int alt55=3;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==KW_NOSCAN) ) {
                        alt55=1;
                    }
                    else if ( (LA55_0==KW_FOR) ) {
                        alt55=2;
                    }
                    switch (alt55) {
                        case 1 :
                            // HiveParser.g:1256:49: (noscan= KW_NOSCAN )
                            {
                            // HiveParser.g:1256:49: (noscan= KW_NOSCAN )
                            // HiveParser.g:1256:50: noscan= KW_NOSCAN
                            {
                            noscan=(Token)match(input,KW_NOSCAN,FOLLOW_KW_NOSCAN_in_analyzeStatement4352); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_NOSCAN.add(noscan);


                            }


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1257:57: ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? )
                            {
                            // HiveParser.g:1257:57: ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? )
                            // HiveParser.g:1257:58: KW_FOR KW_COLUMNS (statsColumnName= columnNameList )?
                            {
                            KW_FOR200=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_analyzeStatement4412); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR200);


                            KW_COLUMNS201=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_analyzeStatement4414); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS201);


                            // HiveParser.g:1257:76: (statsColumnName= columnNameList )?
                            int alt54=2;
                            int LA54_0 = input.LA(1);

                            if ( (LA54_0==Identifier||(LA54_0 >= KW_ABORT && LA54_0 <= KW_AFTER)||LA54_0==KW_ALLOC_FRACTION||LA54_0==KW_ANALYZE||LA54_0==KW_ARCHIVE||(LA54_0 >= KW_ASC && LA54_0 <= KW_AT)||(LA54_0 >= KW_AUTOCOMMIT && LA54_0 <= KW_BEFORE)||(LA54_0 >= KW_BRANCH && LA54_0 <= KW_BUCKETS)||(LA54_0 >= KW_CACHE && LA54_0 <= KW_CASCADE)||(LA54_0 >= KW_CBO && LA54_0 <= KW_CHANGE)||LA54_0==KW_CHECK||(LA54_0 >= KW_CLUSTER && LA54_0 <= KW_COLLECTION)||(LA54_0 >= KW_COLUMNS && LA54_0 <= KW_COMMENT)||(LA54_0 >= KW_COMPACT && LA54_0 <= KW_COMPACTIONS)||(LA54_0 >= KW_COMPUTE && LA54_0 <= KW_CONCATENATE)||LA54_0==KW_CONTINUE||LA54_0==KW_COST||LA54_0==KW_CRON||LA54_0==KW_DATA||LA54_0==KW_DATABASES||(LA54_0 >= KW_DATETIME && LA54_0 <= KW_DCPROPERTIES)||LA54_0==KW_DEBUG||(LA54_0 >= KW_DEFAULT && LA54_0 <= KW_DEFINED)||(LA54_0 >= KW_DELIMITED && LA54_0 <= KW_DESC)||(LA54_0 >= KW_DETAIL && LA54_0 <= KW_DISABLE)||(LA54_0 >= KW_DISTRIBUTE && LA54_0 <= KW_DO)||LA54_0==KW_DOW||(LA54_0 >= KW_DUMP && LA54_0 <= KW_ELEM_TYPE)||LA54_0==KW_ENABLE||(LA54_0 >= KW_ENFORCED && LA54_0 <= KW_EVERY)||(LA54_0 >= KW_EXCLUSIVE && LA54_0 <= KW_EXECUTED)||(LA54_0 >= KW_EXPIRE_SNAPSHOTS && LA54_0 <= KW_EXPRESSION)||LA54_0==KW_FAST_FORWARD||(LA54_0 >= KW_FIELDS && LA54_0 <= KW_FIRST)||(LA54_0 >= KW_FORMAT && LA54_0 <= KW_FORMATTED)||LA54_0==KW_FUNCTIONS||(LA54_0 >= KW_HOUR && LA54_0 <= KW_IDXPROPERTIES)||LA54_0==KW_IGNORE||(LA54_0 >= KW_INDEX && LA54_0 <= KW_INDEXES)||(LA54_0 >= KW_INPATH && LA54_0 <= KW_INPUTFORMAT)||(LA54_0 >= KW_ISOLATION && LA54_0 <= KW_JAR)||(LA54_0 >= KW_JOINCOST && LA54_0 <= KW_LAST)||LA54_0==KW_LEVEL||(LA54_0 >= KW_LIMIT && LA54_0 <= KW_LOAD)||(LA54_0 >= KW_LOCATION && LA54_0 <= KW_LONG)||(LA54_0 >= KW_MANAGED && LA54_0 <= KW_MANAGEMENT)||(LA54_0 >= KW_MAPJOIN && LA54_0 <= KW_MATERIALIZED)||LA54_0==KW_METADATA||(LA54_0 >= KW_MINUTE && LA54_0 <= KW_MONTH)||(LA54_0 >= KW_MOVE && LA54_0 <= KW_MSCK)||(LA54_0 >= KW_NORELY && LA54_0 <= KW_NOSCAN)||LA54_0==KW_NOVALIDATE||LA54_0==KW_NULLS||LA54_0==KW_OFFSET||(LA54_0 >= KW_OPERATOR && LA54_0 <= KW_OPTION)||(LA54_0 >= KW_OUTPUTDRIVER && LA54_0 <= KW_OUTPUTFORMAT)||(LA54_0 >= KW_OVERWRITE && LA54_0 <= KW_OWNER)||(LA54_0 >= KW_PARTITIONED && LA54_0 <= KW_PATH)||(LA54_0 >= KW_PLAN && LA54_0 <= KW_POOL)||LA54_0==KW_PRINCIPALS||LA54_0==KW_PURGE||(LA54_0 >= KW_QUARTER && LA54_0 <= KW_QUERY_PARALLELISM)||LA54_0==KW_READ||(LA54_0 >= KW_REBUILD && LA54_0 <= KW_RECORDWRITER)||(LA54_0 >= KW_RELOAD && LA54_0 <= KW_RETENTION)||LA54_0==KW_REWRITE||(LA54_0 >= KW_ROLE && LA54_0 <= KW_ROLES)||(LA54_0 >= KW_SCHEDULED && LA54_0 <= KW_SECOND)||(LA54_0 >= KW_SEMI && LA54_0 <= KW_SERVER)||(LA54_0 >= KW_SETS && LA54_0 <= KW_SKEWED)||(LA54_0 >= KW_SNAPSHOT && LA54_0 <= KW_SNAPSHOTS)||(LA54_0 >= KW_SORT && LA54_0 <= KW_SSL)||(LA54_0 >= KW_STATISTICS && LA54_0 <= KW_SUMMARY)||(LA54_0 >= KW_SYSTEM_TIME && LA54_0 <= KW_SYSTEM_VERSION)||LA54_0==KW_TABLES||(LA54_0 >= KW_TAG && LA54_0 <= KW_TERMINATED)||LA54_0==KW_TINYINT||LA54_0==KW_TOUCH||(LA54_0 >= KW_TRANSACTION && LA54_0 <= KW_TRANSACTIONS)||LA54_0==KW_TRIM||(LA54_0 >= KW_TYPE && LA54_0 <= KW_UNARCHIVE)||LA54_0==KW_UNDO||LA54_0==KW_UNIONTYPE||(LA54_0 >= KW_UNKNOWN && LA54_0 <= KW_UNSIGNED)||(LA54_0 >= KW_URI && LA54_0 <= KW_USE)||(LA54_0 >= KW_UTC && LA54_0 <= KW_VALIDATE)||LA54_0==KW_VALUE_TYPE||(LA54_0 >= KW_VECTORIZATION && LA54_0 <= KW_WEEK)||LA54_0==KW_WHILE||(LA54_0 >= KW_WITHIN && LA54_0 <= KW_ZONE)||LA54_0==KW_BATCH||LA54_0==KW_DAYOFWEEK||LA54_0==KW_HOLD_DDLTIME||LA54_0==KW_NO_DROP||LA54_0==KW_OFFLINE||LA54_0==KW_PROTECTION||LA54_0==KW_READONLY||LA54_0==KW_TIMESTAMPTZ) ) {
                                alt54=1;
                            }
                            switch (alt54) {
                                case 1 :
                                    // HiveParser.g:1257:77: statsColumnName= columnNameList
                                    {
                                    pushFollow(FOLLOW_columnNameList_in_analyzeStatement4419);
                                    statsColumnName=columnNameList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_columnNameList.add(statsColumnName.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: KW_COLUMNS, statsColumnName, parttype, noscan
                    // token labels: noscan
                    // rule labels: statsColumnName, parttype, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_noscan=new RewriteRuleTokenStream(adaptor,"token noscan",noscan);
                    RewriteRuleSubtreeStream stream_statsColumnName=new RewriteRuleSubtreeStream(adaptor,"rule statsColumnName",statsColumnName!=null?statsColumnName.tree:null);
                    RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1258:7: -> ^( TOK_ANALYZE $parttype ( $noscan)? ( KW_COLUMNS )? ( $statsColumnName)? )
                    {
                        // HiveParser.g:1258:10: ^( TOK_ANALYZE $parttype ( $noscan)? ( KW_COLUMNS )? ( $statsColumnName)? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_ANALYZE, "TOK_ANALYZE")
                        , root_1);

                        adaptor.addChild(root_1, stream_parttype.nextTree());

                        // HiveParser.g:1258:35: ( $noscan)?
                        if ( stream_noscan.hasNext() ) {
                            adaptor.addChild(root_1, stream_noscan.nextNode());

                        }
                        stream_noscan.reset();

                        // HiveParser.g:1258:43: ( KW_COLUMNS )?
                        if ( stream_KW_COLUMNS.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_KW_COLUMNS.nextNode()
                            );

                        }
                        stream_KW_COLUMNS.reset();

                        // HiveParser.g:1258:56: ( $statsColumnName)?
                        if ( stream_statsColumnName.hasNext() ) {
                            adaptor.addChild(root_1, stream_statsColumnName.nextTree());

                        }
                        stream_statsColumnName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1260:7: ( KW_CACHE )=> KW_CACHE KW_METADATA
                    {
                    KW_CACHE202=(Token)match(input,KW_CACHE,FOLLOW_KW_CACHE_in_analyzeStatement4472); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CACHE.add(KW_CACHE202);


                    KW_METADATA203=(Token)match(input,KW_METADATA,FOLLOW_KW_METADATA_in_analyzeStatement4474); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_METADATA.add(KW_METADATA203);


                    // AST REWRITE
                    // elements: parttype
                    // token labels: 
                    // rule labels: parttype, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1260:42: -> ^( TOK_CACHE_METADATA $parttype)
                    {
                        // HiveParser.g:1260:45: ^( TOK_CACHE_METADATA $parttype)
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_CACHE_METADATA, "TOK_CACHE_METADATA")
                        , root_1);

                        adaptor.addChild(root_1, stream_parttype.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "analyzeStatement"


    public static class showStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showStatement"
    // HiveParser.g:1264:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW (isExtended= KW_EXTENDED )? KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? (filter= showTablesFilterExpr )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( $filter)? ( $isExtended)? ) | KW_SHOW KW_VIEWS ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_MATERIALIZED KW_VIEWS ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWMATERIALIZEDVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW ( KW_SORTED )? KW_COLUMNS ( KW_FROM | KW_IN ) tableName ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWCOLUMNS tableName ( TOK_FROM $db_name)? ( showStmtIdentifier )? ( KW_SORTED )? ) | KW_SHOW KW_FUNCTIONS ( KW_LIKE showFunctionIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? ) | KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )? ( whereClause )? ( orderByClause )? ( limitClause )? -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? ( whereClause )? ( orderByClause )? ( limitClause )? ) | KW_SHOW KW_CREATE ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier -> ^( TOK_SHOW_CREATEDATABASE $db_name) | KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tableName ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? ) | KW_SHOW KW_LOCKS ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) ) | KW_SHOW KW_COMPACTIONS ( ( KW_COMPACT_ID )=> compactionId -> ^( TOK_SHOW_COMPACTIONS compactionId ) | ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? -> ^( TOK_SHOW_COMPACTIONS $dbName ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? ) | (parttype= partTypeExpr )? ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? -> ^( TOK_SHOW_COMPACTIONS ( $parttype)? ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? ) ) | KW_SHOW KW_TRANSACTIONS -> ^( TOK_SHOW_TRANSACTIONS ) | KW_SHOW KW_CONF StringLiteral -> ^( TOK_SHOWCONF StringLiteral ) | KW_SHOW KW_RESOURCE ( ( KW_PLAN rp_name= identifier -> ^( TOK_SHOW_RP $rp_name) ) | ( KW_PLANS -> ^( TOK_SHOW_RP ) ) ) | KW_SHOW ( KW_DATACONNECTORS ) -> ^( TOK_SHOWDATACONNECTORS ) );
    public final HiveParser.showStatement_return showStatement() throws RecognitionException {
        HiveParser.showStatement_return retval = new HiveParser.showStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token isExtended=null;
        Token prptyName=null;
        Token KW_SHOW204=null;
        Token KW_DATABASES205=null;
        Token KW_SCHEMAS206=null;
        Token KW_LIKE207=null;
        Token KW_SHOW209=null;
        Token KW_TABLES210=null;
        Token KW_FROM211=null;
        Token KW_IN212=null;
        Token KW_SHOW213=null;
        Token KW_VIEWS214=null;
        Token KW_FROM215=null;
        Token KW_IN216=null;
        Token KW_LIKE217=null;
        Token KW_SHOW220=null;
        Token KW_MATERIALIZED221=null;
        Token KW_VIEWS222=null;
        Token KW_FROM223=null;
        Token KW_IN224=null;
        Token KW_LIKE225=null;
        Token KW_SHOW228=null;
        Token KW_SORTED229=null;
        Token KW_COLUMNS230=null;
        Token KW_FROM231=null;
        Token KW_IN232=null;
        Token KW_FROM234=null;
        Token KW_IN235=null;
        Token KW_LIKE236=null;
        Token KW_SHOW239=null;
        Token KW_FUNCTIONS240=null;
        Token KW_LIKE241=null;
        Token KW_SHOW243=null;
        Token KW_PARTITIONS244=null;
        Token KW_SHOW249=null;
        Token KW_CREATE250=null;
        Token KW_DATABASE251=null;
        Token KW_SCHEMA252=null;
        Token KW_TABLE253=null;
        Token KW_SHOW254=null;
        Token KW_TABLE255=null;
        Token KW_EXTENDED256=null;
        Token KW_FROM257=null;
        Token KW_IN258=null;
        Token KW_LIKE259=null;
        Token KW_SHOW262=null;
        Token KW_TBLPROPERTIES263=null;
        Token LPAREN265=null;
        Token RPAREN266=null;
        Token KW_SHOW267=null;
        Token KW_LOCKS268=null;
        Token KW_DATABASE269=null;
        Token KW_SCHEMA270=null;
        Token KW_SHOW271=null;
        Token KW_COMPACTIONS272=null;
        Token KW_DATABASE274=null;
        Token KW_SCHEMA275=null;
        Token KW_SHOW286=null;
        Token KW_TRANSACTIONS287=null;
        Token KW_SHOW288=null;
        Token KW_CONF289=null;
        Token StringLiteral290=null;
        Token KW_SHOW291=null;
        Token KW_RESOURCE292=null;
        Token KW_PLAN293=null;
        Token KW_PLANS294=null;
        Token KW_SHOW295=null;
        Token KW_DATACONNECTORS296=null;
        HiveParser_IdentifiersParser.identifier_return db_name =null;

        HiveParser.showTablesFilterExpr_return filter =null;

        HiveParser_FromClauseParser.tableName_return tabName =null;

        HiveParser_IdentifiersParser.identifier_return dbName =null;

        HiveParser.partTypeExpr_return parttype =null;

        HiveParser_IdentifiersParser.identifier_return rp_name =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier208 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier218 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier219 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier226 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier227 =null;

        HiveParser_FromClauseParser.tableName_return tableName233 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier237 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier238 =null;

        HiveParser.showFunctionIdentifier_return showFunctionIdentifier242 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec245 =null;

        HiveParser_FromClauseParser.whereClause_return whereClause246 =null;

        HiveParser_IdentifiersParser.orderByClause_return orderByClause247 =null;

        HiveParser.limitClause_return limitClause248 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier260 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec261 =null;

        HiveParser_FromClauseParser.tableName_return tableName264 =null;

        HiveParser.compactionId_return compactionId273 =null;

        HiveParser.compactionPool_return compactionPool276 =null;

        HiveParser.compactionType_return compactionType277 =null;

        HiveParser.compactionStatus_return compactionStatus278 =null;

        HiveParser_IdentifiersParser.orderByClause_return orderByClause279 =null;

        HiveParser.limitClause_return limitClause280 =null;

        HiveParser.compactionPool_return compactionPool281 =null;

        HiveParser.compactionType_return compactionType282 =null;

        HiveParser.compactionStatus_return compactionStatus283 =null;

        HiveParser_IdentifiersParser.orderByClause_return orderByClause284 =null;

        HiveParser.limitClause_return limitClause285 =null;


        ASTNode isExtended_tree=null;
        ASTNode prptyName_tree=null;
        ASTNode KW_SHOW204_tree=null;
        ASTNode KW_DATABASES205_tree=null;
        ASTNode KW_SCHEMAS206_tree=null;
        ASTNode KW_LIKE207_tree=null;
        ASTNode KW_SHOW209_tree=null;
        ASTNode KW_TABLES210_tree=null;
        ASTNode KW_FROM211_tree=null;
        ASTNode KW_IN212_tree=null;
        ASTNode KW_SHOW213_tree=null;
        ASTNode KW_VIEWS214_tree=null;
        ASTNode KW_FROM215_tree=null;
        ASTNode KW_IN216_tree=null;
        ASTNode KW_LIKE217_tree=null;
        ASTNode KW_SHOW220_tree=null;
        ASTNode KW_MATERIALIZED221_tree=null;
        ASTNode KW_VIEWS222_tree=null;
        ASTNode KW_FROM223_tree=null;
        ASTNode KW_IN224_tree=null;
        ASTNode KW_LIKE225_tree=null;
        ASTNode KW_SHOW228_tree=null;
        ASTNode KW_SORTED229_tree=null;
        ASTNode KW_COLUMNS230_tree=null;
        ASTNode KW_FROM231_tree=null;
        ASTNode KW_IN232_tree=null;
        ASTNode KW_FROM234_tree=null;
        ASTNode KW_IN235_tree=null;
        ASTNode KW_LIKE236_tree=null;
        ASTNode KW_SHOW239_tree=null;
        ASTNode KW_FUNCTIONS240_tree=null;
        ASTNode KW_LIKE241_tree=null;
        ASTNode KW_SHOW243_tree=null;
        ASTNode KW_PARTITIONS244_tree=null;
        ASTNode KW_SHOW249_tree=null;
        ASTNode KW_CREATE250_tree=null;
        ASTNode KW_DATABASE251_tree=null;
        ASTNode KW_SCHEMA252_tree=null;
        ASTNode KW_TABLE253_tree=null;
        ASTNode KW_SHOW254_tree=null;
        ASTNode KW_TABLE255_tree=null;
        ASTNode KW_EXTENDED256_tree=null;
        ASTNode KW_FROM257_tree=null;
        ASTNode KW_IN258_tree=null;
        ASTNode KW_LIKE259_tree=null;
        ASTNode KW_SHOW262_tree=null;
        ASTNode KW_TBLPROPERTIES263_tree=null;
        ASTNode LPAREN265_tree=null;
        ASTNode RPAREN266_tree=null;
        ASTNode KW_SHOW267_tree=null;
        ASTNode KW_LOCKS268_tree=null;
        ASTNode KW_DATABASE269_tree=null;
        ASTNode KW_SCHEMA270_tree=null;
        ASTNode KW_SHOW271_tree=null;
        ASTNode KW_COMPACTIONS272_tree=null;
        ASTNode KW_DATABASE274_tree=null;
        ASTNode KW_SCHEMA275_tree=null;
        ASTNode KW_SHOW286_tree=null;
        ASTNode KW_TRANSACTIONS287_tree=null;
        ASTNode KW_SHOW288_tree=null;
        ASTNode KW_CONF289_tree=null;
        ASTNode StringLiteral290_tree=null;
        ASTNode KW_SHOW291_tree=null;
        ASTNode KW_RESOURCE292_tree=null;
        ASTNode KW_PLAN293_tree=null;
        ASTNode KW_PLANS294_tree=null;
        ASTNode KW_SHOW295_tree=null;
        ASTNode KW_DATACONNECTORS296_tree=null;
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_VIEWS=new RewriteRuleTokenStream(adaptor,"token KW_VIEWS");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
        RewriteRuleTokenStream stream_KW_PARTITIONS=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONS");
        RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
        RewriteRuleTokenStream stream_KW_LOCKS=new RewriteRuleTokenStream(adaptor,"token KW_LOCKS");
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_TABLES=new RewriteRuleTokenStream(adaptor,"token KW_TABLES");
        RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
        RewriteRuleTokenStream stream_KW_FUNCTIONS=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTIONS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_CONF=new RewriteRuleTokenStream(adaptor,"token KW_CONF");
        RewriteRuleTokenStream stream_KW_PLAN=new RewriteRuleTokenStream(adaptor,"token KW_PLAN");
        RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
        RewriteRuleTokenStream stream_KW_TRANSACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_TRANSACTIONS");
        RewriteRuleTokenStream stream_KW_DATACONNECTORS=new RewriteRuleTokenStream(adaptor,"token KW_DATACONNECTORS");
        RewriteRuleTokenStream stream_KW_SCHEMAS=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMAS");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_COMPACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_COMPACTIONS");
        RewriteRuleTokenStream stream_KW_PLANS=new RewriteRuleTokenStream(adaptor,"token KW_PLANS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_RESOURCE=new RewriteRuleTokenStream(adaptor,"token KW_RESOURCE");
        RewriteRuleTokenStream stream_KW_DATABASES=new RewriteRuleTokenStream(adaptor,"token KW_DATABASES");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_MATERIALIZED=new RewriteRuleTokenStream(adaptor,"token KW_MATERIALIZED");
        RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
        RewriteRuleSubtreeStream stream_showStmtIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showStmtIdentifier");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_compactionPool=new RewriteRuleSubtreeStream(adaptor,"rule compactionPool");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_showTablesFilterExpr=new RewriteRuleSubtreeStream(adaptor,"rule showTablesFilterExpr");
        RewriteRuleSubtreeStream stream_showFunctionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showFunctionIdentifier");
        RewriteRuleSubtreeStream stream_partTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule partTypeExpr");
        RewriteRuleSubtreeStream stream_compactionType=new RewriteRuleSubtreeStream(adaptor,"rule compactionType");
        RewriteRuleSubtreeStream stream_compactionId=new RewriteRuleSubtreeStream(adaptor,"rule compactionId");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_compactionStatus=new RewriteRuleSubtreeStream(adaptor,"rule compactionStatus");
         pushMsg("show statement", state); 
        try {
            // HiveParser.g:1267:5: ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW (isExtended= KW_EXTENDED )? KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? (filter= showTablesFilterExpr )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( $filter)? ( $isExtended)? ) | KW_SHOW KW_VIEWS ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_MATERIALIZED KW_VIEWS ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWMATERIALIZEDVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW ( KW_SORTED )? KW_COLUMNS ( KW_FROM | KW_IN ) tableName ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWCOLUMNS tableName ( TOK_FROM $db_name)? ( showStmtIdentifier )? ( KW_SORTED )? ) | KW_SHOW KW_FUNCTIONS ( KW_LIKE showFunctionIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? ) | KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )? ( whereClause )? ( orderByClause )? ( limitClause )? -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? ( whereClause )? ( orderByClause )? ( limitClause )? ) | KW_SHOW KW_CREATE ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier -> ^( TOK_SHOW_CREATEDATABASE $db_name) | KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tableName ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? ) | KW_SHOW KW_LOCKS ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) ) | KW_SHOW KW_COMPACTIONS ( ( KW_COMPACT_ID )=> compactionId -> ^( TOK_SHOW_COMPACTIONS compactionId ) | ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? -> ^( TOK_SHOW_COMPACTIONS $dbName ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? ) | (parttype= partTypeExpr )? ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? -> ^( TOK_SHOW_COMPACTIONS ( $parttype)? ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? ) ) | KW_SHOW KW_TRANSACTIONS -> ^( TOK_SHOW_TRANSACTIONS ) | KW_SHOW KW_CONF StringLiteral -> ^( TOK_SHOWCONF StringLiteral ) | KW_SHOW KW_RESOURCE ( ( KW_PLAN rp_name= identifier -> ^( TOK_SHOW_RP $rp_name) ) | ( KW_PLANS -> ^( TOK_SHOW_RP ) ) ) | KW_SHOW ( KW_DATACONNECTORS ) -> ^( TOK_SHOWDATACONNECTORS ) )
            int alt104=16;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==KW_SHOW) ) {
                switch ( input.LA(2) ) {
                case KW_VIEWS:
                    {
                    alt104=3;
                    }
                    break;
                case KW_MATERIALIZED:
                    {
                    alt104=4;
                    }
                    break;
                case KW_FUNCTIONS:
                    {
                    alt104=6;
                    }
                    break;
                case KW_PARTITIONS:
                    {
                    alt104=7;
                    }
                    break;
                case KW_CREATE:
                    {
                    alt104=8;
                    }
                    break;
                case KW_TABLE:
                    {
                    alt104=9;
                    }
                    break;
                case KW_TBLPROPERTIES:
                    {
                    alt104=10;
                    }
                    break;
                case KW_LOCKS:
                    {
                    alt104=11;
                    }
                    break;
                case KW_COMPACTIONS:
                    {
                    alt104=12;
                    }
                    break;
                case KW_TRANSACTIONS:
                    {
                    alt104=13;
                    }
                    break;
                case KW_CONF:
                    {
                    alt104=14;
                    }
                    break;
                case KW_RESOURCE:
                    {
                    alt104=15;
                    }
                    break;
                case KW_DATABASES:
                case KW_SCHEMAS:
                    {
                    alt104=1;
                    }
                    break;
                case KW_EXTENDED:
                case KW_TABLES:
                    {
                    alt104=2;
                    }
                    break;
                case KW_COLUMNS:
                case KW_SORTED:
                    {
                    alt104=5;
                    }
                    break;
                case KW_DATACONNECTORS:
                    {
                    alt104=16;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 104, 1, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;

            }
            switch (alt104) {
                case 1 :
                    // HiveParser.g:1267:7: KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )?
                    {
                    KW_SHOW204=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement4518); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW204);


                    // HiveParser.g:1267:15: ( KW_DATABASES | KW_SCHEMAS )
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==KW_DATABASES) ) {
                        alt57=1;
                    }
                    else if ( (LA57_0==KW_SCHEMAS) ) {
                        alt57=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 57, 0, input);

                        throw nvae;

                    }
                    switch (alt57) {
                        case 1 :
                            // HiveParser.g:1267:16: KW_DATABASES
                            {
                            KW_DATABASES205=(Token)match(input,KW_DATABASES,FOLLOW_KW_DATABASES_in_showStatement4521); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DATABASES.add(KW_DATABASES205);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1267:29: KW_SCHEMAS
                            {
                            KW_SCHEMAS206=(Token)match(input,KW_SCHEMAS,FOLLOW_KW_SCHEMAS_in_showStatement4523); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SCHEMAS.add(KW_SCHEMAS206);


                            }
                            break;

                    }


                    // HiveParser.g:1267:41: ( KW_LIKE showStmtIdentifier )?
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==KW_LIKE) ) {
                        alt58=1;
                    }
                    switch (alt58) {
                        case 1 :
                            // HiveParser.g:1267:42: KW_LIKE showStmtIdentifier
                            {
                            KW_LIKE207=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement4527); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE207);


                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement4529);
                            showStmtIdentifier208=showStmtIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier208.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showStmtIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1267:71: -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
                    {
                        // HiveParser.g:1267:74: ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SHOWDATABASES, "TOK_SHOWDATABASES")
                        , root_1);

                        // HiveParser.g:1267:94: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1268:7: KW_SHOW (isExtended= KW_EXTENDED )? KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? (filter= showTablesFilterExpr )?
                    {
                    KW_SHOW209=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement4548); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW209);


                    // HiveParser.g:1268:15: (isExtended= KW_EXTENDED )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==KW_EXTENDED) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // HiveParser.g:1268:16: isExtended= KW_EXTENDED
                            {
                            isExtended=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement4553); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_EXTENDED.add(isExtended);


                            }
                            break;

                    }


                    KW_TABLES210=(Token)match(input,KW_TABLES,FOLLOW_KW_TABLES_in_showStatement4557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TABLES.add(KW_TABLES210);


                    // HiveParser.g:1268:51: ( ( KW_FROM | KW_IN ) db_name= identifier )?
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==KW_FROM||LA61_0==KW_IN) ) {
                        alt61=1;
                    }
                    switch (alt61) {
                        case 1 :
                            // HiveParser.g:1268:52: ( KW_FROM | KW_IN ) db_name= identifier
                            {
                            // HiveParser.g:1268:52: ( KW_FROM | KW_IN )
                            int alt60=2;
                            int LA60_0 = input.LA(1);

                            if ( (LA60_0==KW_FROM) ) {
                                alt60=1;
                            }
                            else if ( (LA60_0==KW_IN) ) {
                                alt60=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 60, 0, input);

                                throw nvae;

                            }
                            switch (alt60) {
                                case 1 :
                                    // HiveParser.g:1268:53: KW_FROM
                                    {
                                    KW_FROM211=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement4561); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM211);


                                    }
                                    break;
                                case 2 :
                                    // HiveParser.g:1268:61: KW_IN
                                    {
                                    KW_IN212=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement4563); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN212);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_identifier_in_showStatement4568);
                            db_name=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:1268:89: (filter= showTablesFilterExpr )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==Identifier||(LA62_0 >= KW_ABORT && LA62_0 <= KW_AFTER)||LA62_0==KW_ALLOC_FRACTION||LA62_0==KW_ANALYZE||LA62_0==KW_ARCHIVE||(LA62_0 >= KW_ASC && LA62_0 <= KW_AT)||(LA62_0 >= KW_AUTOCOMMIT && LA62_0 <= KW_BEFORE)||(LA62_0 >= KW_BRANCH && LA62_0 <= KW_BUCKETS)||(LA62_0 >= KW_CACHE && LA62_0 <= KW_CASCADE)||(LA62_0 >= KW_CBO && LA62_0 <= KW_CHANGE)||LA62_0==KW_CHECK||(LA62_0 >= KW_CLUSTER && LA62_0 <= KW_COLLECTION)||(LA62_0 >= KW_COLUMNS && LA62_0 <= KW_COMMENT)||(LA62_0 >= KW_COMPACT && LA62_0 <= KW_COMPACTIONS)||(LA62_0 >= KW_COMPUTE && LA62_0 <= KW_CONCATENATE)||LA62_0==KW_CONTINUE||LA62_0==KW_COST||LA62_0==KW_CRON||LA62_0==KW_DATA||LA62_0==KW_DATABASES||(LA62_0 >= KW_DATETIME && LA62_0 <= KW_DCPROPERTIES)||LA62_0==KW_DEBUG||(LA62_0 >= KW_DEFAULT && LA62_0 <= KW_DEFINED)||(LA62_0 >= KW_DELIMITED && LA62_0 <= KW_DESC)||(LA62_0 >= KW_DETAIL && LA62_0 <= KW_DISABLE)||(LA62_0 >= KW_DISTRIBUTE && LA62_0 <= KW_DO)||LA62_0==KW_DOW||(LA62_0 >= KW_DUMP && LA62_0 <= KW_ELEM_TYPE)||LA62_0==KW_ENABLE||(LA62_0 >= KW_ENFORCED && LA62_0 <= KW_EVERY)||(LA62_0 >= KW_EXCLUSIVE && LA62_0 <= KW_EXECUTED)||(LA62_0 >= KW_EXPIRE_SNAPSHOTS && LA62_0 <= KW_EXPRESSION)||LA62_0==KW_FAST_FORWARD||(LA62_0 >= KW_FIELDS && LA62_0 <= KW_FIRST)||(LA62_0 >= KW_FORMAT && LA62_0 <= KW_FORMATTED)||LA62_0==KW_FUNCTIONS||(LA62_0 >= KW_HOUR && LA62_0 <= KW_IDXPROPERTIES)||LA62_0==KW_IGNORE||(LA62_0 >= KW_INDEX && LA62_0 <= KW_INDEXES)||(LA62_0 >= KW_INPATH && LA62_0 <= KW_INPUTFORMAT)||(LA62_0 >= KW_ISOLATION && LA62_0 <= KW_JAR)||(LA62_0 >= KW_JOINCOST && LA62_0 <= KW_LAST)||(LA62_0 >= KW_LEVEL && LA62_0 <= KW_LOAD)||(LA62_0 >= KW_LOCATION && LA62_0 <= KW_LONG)||(LA62_0 >= KW_MANAGED && LA62_0 <= KW_MANAGEMENT)||(LA62_0 >= KW_MAPJOIN && LA62_0 <= KW_MATERIALIZED)||LA62_0==KW_METADATA||(LA62_0 >= KW_MINUTE && LA62_0 <= KW_MONTH)||(LA62_0 >= KW_MOVE && LA62_0 <= KW_MSCK)||(LA62_0 >= KW_NORELY && LA62_0 <= KW_NOSCAN)||LA62_0==KW_NOVALIDATE||LA62_0==KW_NULLS||LA62_0==KW_OFFSET||(LA62_0 >= KW_OPERATOR && LA62_0 <= KW_OPTION)||(LA62_0 >= KW_OUTPUTDRIVER && LA62_0 <= KW_OUTPUTFORMAT)||(LA62_0 >= KW_OVERWRITE && LA62_0 <= KW_OWNER)||(LA62_0 >= KW_PARTITIONED && LA62_0 <= KW_PATH)||(LA62_0 >= KW_PLAN && LA62_0 <= KW_POOL)||LA62_0==KW_PRINCIPALS||LA62_0==KW_PURGE||(LA62_0 >= KW_QUARTER && LA62_0 <= KW_QUERY_PARALLELISM)||LA62_0==KW_READ||(LA62_0 >= KW_REBUILD && LA62_0 <= KW_RECORDWRITER)||(LA62_0 >= KW_RELOAD && LA62_0 <= KW_RETENTION)||LA62_0==KW_REWRITE||(LA62_0 >= KW_ROLE && LA62_0 <= KW_ROLES)||(LA62_0 >= KW_SCHEDULED && LA62_0 <= KW_SECOND)||(LA62_0 >= KW_SEMI && LA62_0 <= KW_SERVER)||(LA62_0 >= KW_SETS && LA62_0 <= KW_SKEWED)||(LA62_0 >= KW_SNAPSHOT && LA62_0 <= KW_SNAPSHOTS)||(LA62_0 >= KW_SORT && LA62_0 <= KW_SSL)||(LA62_0 >= KW_STATISTICS && LA62_0 <= KW_SUMMARY)||(LA62_0 >= KW_SYSTEM_TIME && LA62_0 <= KW_SYSTEM_VERSION)||LA62_0==KW_TABLES||(LA62_0 >= KW_TAG && LA62_0 <= KW_TERMINATED)||LA62_0==KW_TINYINT||LA62_0==KW_TOUCH||(LA62_0 >= KW_TRANSACTION && LA62_0 <= KW_TRANSACTIONS)||LA62_0==KW_TRIM||(LA62_0 >= KW_TYPE && LA62_0 <= KW_UNARCHIVE)||LA62_0==KW_UNDO||LA62_0==KW_UNIONTYPE||(LA62_0 >= KW_UNKNOWN && LA62_0 <= KW_UNSIGNED)||(LA62_0 >= KW_URI && LA62_0 <= KW_USE)||(LA62_0 >= KW_UTC && LA62_0 <= KW_VALIDATE)||LA62_0==KW_VALUE_TYPE||(LA62_0 >= KW_VECTORIZATION && LA62_0 <= KW_WEEK)||(LA62_0 >= KW_WHERE && LA62_0 <= KW_WHILE)||(LA62_0 >= KW_WITHIN && LA62_0 <= KW_ZONE)||LA62_0==StringLiteral||LA62_0==KW_BATCH||LA62_0==KW_DAYOFWEEK||LA62_0==KW_HOLD_DDLTIME||LA62_0==KW_NO_DROP||LA62_0==KW_OFFLINE||LA62_0==KW_PROTECTION||LA62_0==KW_READONLY||LA62_0==KW_TIMESTAMPTZ) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // HiveParser.g:1268:90: filter= showTablesFilterExpr
                            {
                            pushFollow(FOLLOW_showTablesFilterExpr_in_showStatement4575);
                            filter=showTablesFilterExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_showTablesFilterExpr.add(filter.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: isExtended, db_name, filter
                    // token labels: isExtended
                    // rule labels: filter, db_name, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
                    RewriteRuleSubtreeStream stream_filter=new RewriteRuleSubtreeStream(adaptor,"rule filter",filter!=null?filter.tree:null);
                    RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1269:5: -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( $filter)? ( $isExtended)? )
                    {
                        // HiveParser.g:1269:8: ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( $filter)? ( $isExtended)? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SHOWTABLES, "TOK_SHOWTABLES")
                        , root_1);

                        // HiveParser.g:1269:25: ( TOK_FROM $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, 
                            (ASTNode)adaptor.create(TOK_FROM, "TOK_FROM")
                            );

                            adaptor.addChild(root_1, stream_db_name.nextTree());

                        }
                        stream_db_name.reset();

                        // HiveParser.g:1269:47: ( $filter)?
                        if ( stream_filter.hasNext() ) {
                            adaptor.addChild(root_1, stream_filter.nextTree());

                        }
                        stream_filter.reset();

                        // HiveParser.g:1269:56: ( $isExtended)?
                        if ( stream_isExtended.hasNext() ) {
                            adaptor.addChild(root_1, stream_isExtended.nextNode());

                        }
                        stream_isExtended.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1270:7: KW_SHOW KW_VIEWS ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
                    {
                    KW_SHOW213=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement4611); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW213);


                    KW_VIEWS214=(Token)match(input,KW_VIEWS,FOLLOW_KW_VIEWS_in_showStatement4613); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_VIEWS.add(KW_VIEWS214);


                    // HiveParser.g:1270:24: ( ( KW_FROM | KW_IN ) db_name= identifier )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==KW_FROM||LA64_0==KW_IN) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // HiveParser.g:1270:25: ( KW_FROM | KW_IN ) db_name= identifier
                            {
                            // HiveParser.g:1270:25: ( KW_FROM | KW_IN )
                            int alt63=2;
                            int LA63_0 = input.LA(1);

                            if ( (LA63_0==KW_FROM) ) {
                                alt63=1;
                            }
                            else if ( (LA63_0==KW_IN) ) {
                                alt63=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 63, 0, input);

                                throw nvae;

                            }
                            switch (alt63) {
                                case 1 :
                                    // HiveParser.g:1270:26: KW_FROM
                                    {
                                    KW_FROM215=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement4617); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM215);


                                    }
                                    break;
                                case 2 :
                                    // HiveParser.g:1270:34: KW_IN
                                    {
                                    KW_IN216=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement4619); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN216);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_identifier_in_showStatement4624);
                            db_name=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:1270:62: ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
                    int alt65=3;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==KW_LIKE) ) {
                        alt65=1;
                    }
                    else if ( (LA65_0==Identifier||(LA65_0 >= KW_ABORT && LA65_0 <= KW_AFTER)||LA65_0==KW_ALLOC_FRACTION||LA65_0==KW_ANALYZE||LA65_0==KW_ARCHIVE||(LA65_0 >= KW_ASC && LA65_0 <= KW_AT)||(LA65_0 >= KW_AUTOCOMMIT && LA65_0 <= KW_BEFORE)||(LA65_0 >= KW_BRANCH && LA65_0 <= KW_BUCKETS)||(LA65_0 >= KW_CACHE && LA65_0 <= KW_CASCADE)||(LA65_0 >= KW_CBO && LA65_0 <= KW_CHANGE)||LA65_0==KW_CHECK||(LA65_0 >= KW_CLUSTER && LA65_0 <= KW_COLLECTION)||(LA65_0 >= KW_COLUMNS && LA65_0 <= KW_COMMENT)||(LA65_0 >= KW_COMPACT && LA65_0 <= KW_COMPACTIONS)||(LA65_0 >= KW_COMPUTE && LA65_0 <= KW_CONCATENATE)||LA65_0==KW_CONTINUE||LA65_0==KW_COST||LA65_0==KW_CRON||LA65_0==KW_DATA||LA65_0==KW_DATABASES||(LA65_0 >= KW_DATETIME && LA65_0 <= KW_DCPROPERTIES)||LA65_0==KW_DEBUG||(LA65_0 >= KW_DEFAULT && LA65_0 <= KW_DEFINED)||(LA65_0 >= KW_DELIMITED && LA65_0 <= KW_DESC)||(LA65_0 >= KW_DETAIL && LA65_0 <= KW_DISABLE)||(LA65_0 >= KW_DISTRIBUTE && LA65_0 <= KW_DO)||LA65_0==KW_DOW||(LA65_0 >= KW_DUMP && LA65_0 <= KW_ELEM_TYPE)||LA65_0==KW_ENABLE||(LA65_0 >= KW_ENFORCED && LA65_0 <= KW_EVERY)||(LA65_0 >= KW_EXCLUSIVE && LA65_0 <= KW_EXECUTED)||(LA65_0 >= KW_EXPIRE_SNAPSHOTS && LA65_0 <= KW_EXPRESSION)||LA65_0==KW_FAST_FORWARD||(LA65_0 >= KW_FIELDS && LA65_0 <= KW_FIRST)||(LA65_0 >= KW_FORMAT && LA65_0 <= KW_FORMATTED)||LA65_0==KW_FUNCTIONS||(LA65_0 >= KW_HOUR && LA65_0 <= KW_IDXPROPERTIES)||LA65_0==KW_IGNORE||(LA65_0 >= KW_INDEX && LA65_0 <= KW_INDEXES)||(LA65_0 >= KW_INPATH && LA65_0 <= KW_INPUTFORMAT)||(LA65_0 >= KW_ISOLATION && LA65_0 <= KW_JAR)||(LA65_0 >= KW_JOINCOST && LA65_0 <= KW_LAST)||LA65_0==KW_LEVEL||(LA65_0 >= KW_LIMIT && LA65_0 <= KW_LOAD)||(LA65_0 >= KW_LOCATION && LA65_0 <= KW_LONG)||(LA65_0 >= KW_MANAGED && LA65_0 <= KW_MANAGEMENT)||(LA65_0 >= KW_MAPJOIN && LA65_0 <= KW_MATERIALIZED)||LA65_0==KW_METADATA||(LA65_0 >= KW_MINUTE && LA65_0 <= KW_MONTH)||(LA65_0 >= KW_MOVE && LA65_0 <= KW_MSCK)||(LA65_0 >= KW_NORELY && LA65_0 <= KW_NOSCAN)||LA65_0==KW_NOVALIDATE||LA65_0==KW_NULLS||LA65_0==KW_OFFSET||(LA65_0 >= KW_OPERATOR && LA65_0 <= KW_OPTION)||(LA65_0 >= KW_OUTPUTDRIVER && LA65_0 <= KW_OUTPUTFORMAT)||(LA65_0 >= KW_OVERWRITE && LA65_0 <= KW_OWNER)||(LA65_0 >= KW_PARTITIONED && LA65_0 <= KW_PATH)||(LA65_0 >= KW_PLAN && LA65_0 <= KW_POOL)||LA65_0==KW_PRINCIPALS||LA65_0==KW_PURGE||(LA65_0 >= KW_QUARTER && LA65_0 <= KW_QUERY_PARALLELISM)||LA65_0==KW_READ||(LA65_0 >= KW_REBUILD && LA65_0 <= KW_RECORDWRITER)||(LA65_0 >= KW_RELOAD && LA65_0 <= KW_RETENTION)||LA65_0==KW_REWRITE||(LA65_0 >= KW_ROLE && LA65_0 <= KW_ROLES)||(LA65_0 >= KW_SCHEDULED && LA65_0 <= KW_SECOND)||(LA65_0 >= KW_SEMI && LA65_0 <= KW_SERVER)||(LA65_0 >= KW_SETS && LA65_0 <= KW_SKEWED)||(LA65_0 >= KW_SNAPSHOT && LA65_0 <= KW_SNAPSHOTS)||(LA65_0 >= KW_SORT && LA65_0 <= KW_SSL)||(LA65_0 >= KW_STATISTICS && LA65_0 <= KW_SUMMARY)||(LA65_0 >= KW_SYSTEM_TIME && LA65_0 <= KW_SYSTEM_VERSION)||LA65_0==KW_TABLES||(LA65_0 >= KW_TAG && LA65_0 <= KW_TERMINATED)||LA65_0==KW_TINYINT||LA65_0==KW_TOUCH||(LA65_0 >= KW_TRANSACTION && LA65_0 <= KW_TRANSACTIONS)||LA65_0==KW_TRIM||(LA65_0 >= KW_TYPE && LA65_0 <= KW_UNARCHIVE)||LA65_0==KW_UNDO||LA65_0==KW_UNIONTYPE||(LA65_0 >= KW_UNKNOWN && LA65_0 <= KW_UNSIGNED)||(LA65_0 >= KW_URI && LA65_0 <= KW_USE)||(LA65_0 >= KW_UTC && LA65_0 <= KW_VALIDATE)||LA65_0==KW_VALUE_TYPE||(LA65_0 >= KW_VECTORIZATION && LA65_0 <= KW_WEEK)||LA65_0==KW_WHILE||(LA65_0 >= KW_WITHIN && LA65_0 <= KW_ZONE)||LA65_0==StringLiteral||LA65_0==KW_BATCH||LA65_0==KW_DAYOFWEEK||LA65_0==KW_HOLD_DDLTIME||LA65_0==KW_NO_DROP||LA65_0==KW_OFFLINE||LA65_0==KW_PROTECTION||LA65_0==KW_READONLY||LA65_0==KW_TIMESTAMPTZ) ) {
                        alt65=2;
                    }
                    switch (alt65) {
                        case 1 :
                            // HiveParser.g:1270:63: KW_LIKE showStmtIdentifier
                            {
                            KW_LIKE217=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement4629); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE217);


                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement4631);
                            showStmtIdentifier218=showStmtIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier218.getTree());

                            }
                            break;
                        case 2 :
                            // HiveParser.g:1270:90: showStmtIdentifier
                            {
                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement4633);
                            showStmtIdentifier219=showStmtIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier219.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: db_name, showStmtIdentifier
                    // token labels: 
                    // rule labels: db_name, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1270:112: -> ^( TOK_SHOWVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
                    {
                        // HiveParser.g:1270:115: ^( TOK_SHOWVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SHOWVIEWS, "TOK_SHOWVIEWS")
                        , root_1);

                        // HiveParser.g:1270:131: ( TOK_FROM $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, 
                            (ASTNode)adaptor.create(TOK_FROM, "TOK_FROM")
                            );

                            adaptor.addChild(root_1, stream_db_name.nextTree());

                        }
                        stream_db_name.reset();

                        // HiveParser.g:1270:152: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:1271:7: KW_SHOW KW_MATERIALIZED KW_VIEWS ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
                    {
                    KW_SHOW220=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement4661); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW220);


                    KW_MATERIALIZED221=(Token)match(input,KW_MATERIALIZED,FOLLOW_KW_MATERIALIZED_in_showStatement4663); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_MATERIALIZED.add(KW_MATERIALIZED221);


                    KW_VIEWS222=(Token)match(input,KW_VIEWS,FOLLOW_KW_VIEWS_in_showStatement4665); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_VIEWS.add(KW_VIEWS222);


                    // HiveParser.g:1271:40: ( ( KW_FROM | KW_IN ) db_name= identifier )?
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==KW_FROM||LA67_0==KW_IN) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            // HiveParser.g:1271:41: ( KW_FROM | KW_IN ) db_name= identifier
                            {
                            // HiveParser.g:1271:41: ( KW_FROM | KW_IN )
                            int alt66=2;
                            int LA66_0 = input.LA(1);

                            if ( (LA66_0==KW_FROM) ) {
                                alt66=1;
                            }
                            else if ( (LA66_0==KW_IN) ) {
                                alt66=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 66, 0, input);

                                throw nvae;

                            }
                            switch (alt66) {
                                case 1 :
                                    // HiveParser.g:1271:42: KW_FROM
                                    {
                                    KW_FROM223=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement4669); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM223);


                                    }
                                    break;
                                case 2 :
                                    // HiveParser.g:1271:50: KW_IN
                                    {
                                    KW_IN224=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement4671); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN224);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_identifier_in_showStatement4676);
                            db_name=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:1271:78: ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
                    int alt68=3;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==KW_LIKE) ) {
                        alt68=1;
                    }
                    else if ( (LA68_0==Identifier||(LA68_0 >= KW_ABORT && LA68_0 <= KW_AFTER)||LA68_0==KW_ALLOC_FRACTION||LA68_0==KW_ANALYZE||LA68_0==KW_ARCHIVE||(LA68_0 >= KW_ASC && LA68_0 <= KW_AT)||(LA68_0 >= KW_AUTOCOMMIT && LA68_0 <= KW_BEFORE)||(LA68_0 >= KW_BRANCH && LA68_0 <= KW_BUCKETS)||(LA68_0 >= KW_CACHE && LA68_0 <= KW_CASCADE)||(LA68_0 >= KW_CBO && LA68_0 <= KW_CHANGE)||LA68_0==KW_CHECK||(LA68_0 >= KW_CLUSTER && LA68_0 <= KW_COLLECTION)||(LA68_0 >= KW_COLUMNS && LA68_0 <= KW_COMMENT)||(LA68_0 >= KW_COMPACT && LA68_0 <= KW_COMPACTIONS)||(LA68_0 >= KW_COMPUTE && LA68_0 <= KW_CONCATENATE)||LA68_0==KW_CONTINUE||LA68_0==KW_COST||LA68_0==KW_CRON||LA68_0==KW_DATA||LA68_0==KW_DATABASES||(LA68_0 >= KW_DATETIME && LA68_0 <= KW_DCPROPERTIES)||LA68_0==KW_DEBUG||(LA68_0 >= KW_DEFAULT && LA68_0 <= KW_DEFINED)||(LA68_0 >= KW_DELIMITED && LA68_0 <= KW_DESC)||(LA68_0 >= KW_DETAIL && LA68_0 <= KW_DISABLE)||(LA68_0 >= KW_DISTRIBUTE && LA68_0 <= KW_DO)||LA68_0==KW_DOW||(LA68_0 >= KW_DUMP && LA68_0 <= KW_ELEM_TYPE)||LA68_0==KW_ENABLE||(LA68_0 >= KW_ENFORCED && LA68_0 <= KW_EVERY)||(LA68_0 >= KW_EXCLUSIVE && LA68_0 <= KW_EXECUTED)||(LA68_0 >= KW_EXPIRE_SNAPSHOTS && LA68_0 <= KW_EXPRESSION)||LA68_0==KW_FAST_FORWARD||(LA68_0 >= KW_FIELDS && LA68_0 <= KW_FIRST)||(LA68_0 >= KW_FORMAT && LA68_0 <= KW_FORMATTED)||LA68_0==KW_FUNCTIONS||(LA68_0 >= KW_HOUR && LA68_0 <= KW_IDXPROPERTIES)||LA68_0==KW_IGNORE||(LA68_0 >= KW_INDEX && LA68_0 <= KW_INDEXES)||(LA68_0 >= KW_INPATH && LA68_0 <= KW_INPUTFORMAT)||(LA68_0 >= KW_ISOLATION && LA68_0 <= KW_JAR)||(LA68_0 >= KW_JOINCOST && LA68_0 <= KW_LAST)||LA68_0==KW_LEVEL||(LA68_0 >= KW_LIMIT && LA68_0 <= KW_LOAD)||(LA68_0 >= KW_LOCATION && LA68_0 <= KW_LONG)||(LA68_0 >= KW_MANAGED && LA68_0 <= KW_MANAGEMENT)||(LA68_0 >= KW_MAPJOIN && LA68_0 <= KW_MATERIALIZED)||LA68_0==KW_METADATA||(LA68_0 >= KW_MINUTE && LA68_0 <= KW_MONTH)||(LA68_0 >= KW_MOVE && LA68_0 <= KW_MSCK)||(LA68_0 >= KW_NORELY && LA68_0 <= KW_NOSCAN)||LA68_0==KW_NOVALIDATE||LA68_0==KW_NULLS||LA68_0==KW_OFFSET||(LA68_0 >= KW_OPERATOR && LA68_0 <= KW_OPTION)||(LA68_0 >= KW_OUTPUTDRIVER && LA68_0 <= KW_OUTPUTFORMAT)||(LA68_0 >= KW_OVERWRITE && LA68_0 <= KW_OWNER)||(LA68_0 >= KW_PARTITIONED && LA68_0 <= KW_PATH)||(LA68_0 >= KW_PLAN && LA68_0 <= KW_POOL)||LA68_0==KW_PRINCIPALS||LA68_0==KW_PURGE||(LA68_0 >= KW_QUARTER && LA68_0 <= KW_QUERY_PARALLELISM)||LA68_0==KW_READ||(LA68_0 >= KW_REBUILD && LA68_0 <= KW_RECORDWRITER)||(LA68_0 >= KW_RELOAD && LA68_0 <= KW_RETENTION)||LA68_0==KW_REWRITE||(LA68_0 >= KW_ROLE && LA68_0 <= KW_ROLES)||(LA68_0 >= KW_SCHEDULED && LA68_0 <= KW_SECOND)||(LA68_0 >= KW_SEMI && LA68_0 <= KW_SERVER)||(LA68_0 >= KW_SETS && LA68_0 <= KW_SKEWED)||(LA68_0 >= KW_SNAPSHOT && LA68_0 <= KW_SNAPSHOTS)||(LA68_0 >= KW_SORT && LA68_0 <= KW_SSL)||(LA68_0 >= KW_STATISTICS && LA68_0 <= KW_SUMMARY)||(LA68_0 >= KW_SYSTEM_TIME && LA68_0 <= KW_SYSTEM_VERSION)||LA68_0==KW_TABLES||(LA68_0 >= KW_TAG && LA68_0 <= KW_TERMINATED)||LA68_0==KW_TINYINT||LA68_0==KW_TOUCH||(LA68_0 >= KW_TRANSACTION && LA68_0 <= KW_TRANSACTIONS)||LA68_0==KW_TRIM||(LA68_0 >= KW_TYPE && LA68_0 <= KW_UNARCHIVE)||LA68_0==KW_UNDO||LA68_0==KW_UNIONTYPE||(LA68_0 >= KW_UNKNOWN && LA68_0 <= KW_UNSIGNED)||(LA68_0 >= KW_URI && LA68_0 <= KW_USE)||(LA68_0 >= KW_UTC && LA68_0 <= KW_VALIDATE)||LA68_0==KW_VALUE_TYPE||(LA68_0 >= KW_VECTORIZATION && LA68_0 <= KW_WEEK)||LA68_0==KW_WHILE||(LA68_0 >= KW_WITHIN && LA68_0 <= KW_ZONE)||LA68_0==StringLiteral||LA68_0==KW_BATCH||LA68_0==KW_DAYOFWEEK||LA68_0==KW_HOLD_DDLTIME||LA68_0==KW_NO_DROP||LA68_0==KW_OFFLINE||LA68_0==KW_PROTECTION||LA68_0==KW_READONLY||LA68_0==KW_TIMESTAMPTZ) ) {
                        alt68=2;
                    }
                    switch (alt68) {
                        case 1 :
                            // HiveParser.g:1271:79: KW_LIKE showStmtIdentifier
                            {
                            KW_LIKE225=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement4681); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE225);


                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement4683);
                            showStmtIdentifier226=showStmtIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier226.getTree());

                            }
                            break;
                        case 2 :
                            // HiveParser.g:1271:106: showStmtIdentifier
                            {
                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement4685);
                            showStmtIdentifier227=showStmtIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier227.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: db_name, showStmtIdentifier
                    // token labels: 
                    // rule labels: db_name, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1271:128: -> ^( TOK_SHOWMATERIALIZEDVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
                    {
                        // HiveParser.g:1271:131: ^( TOK_SHOWMATERIALIZEDVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SHOWMATERIALIZEDVIEWS, "TOK_SHOWMATERIALIZEDVIEWS")
                        , root_1);

                        // HiveParser.g:1271:159: ( TOK_FROM $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, 
                            (ASTNode)adaptor.create(TOK_FROM, "TOK_FROM")
                            );

                            adaptor.addChild(root_1, stream_db_name.nextTree());

                        }
                        stream_db_name.reset();

                        // HiveParser.g:1271:180: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // HiveParser.g:1272:7: KW_SHOW ( KW_SORTED )? KW_COLUMNS ( KW_FROM | KW_IN ) tableName ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
                    {
                    KW_SHOW228=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement4713); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW228);


                    // HiveParser.g:1272:15: ( KW_SORTED )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==KW_SORTED) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // HiveParser.g:1272:15: KW_SORTED
                            {
                            KW_SORTED229=(Token)match(input,KW_SORTED,FOLLOW_KW_SORTED_in_showStatement4715); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SORTED.add(KW_SORTED229);


                            }
                            break;

                    }


                    KW_COLUMNS230=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_showStatement4718); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS230);


                    // HiveParser.g:1272:37: ( KW_FROM | KW_IN )
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==KW_FROM) ) {
                        alt70=1;
                    }
                    else if ( (LA70_0==KW_IN) ) {
                        alt70=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 70, 0, input);

                        throw nvae;

                    }
                    switch (alt70) {
                        case 1 :
                            // HiveParser.g:1272:38: KW_FROM
                            {
                            KW_FROM231=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement4721); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM231);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1272:46: KW_IN
                            {
                            KW_IN232=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement4723); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN232);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_tableName_in_showStatement4726);
                    tableName233=tableName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableName.add(tableName233.getTree());

                    // HiveParser.g:1272:63: ( ( KW_FROM | KW_IN ) db_name= identifier )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==KW_FROM||LA72_0==KW_IN) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // HiveParser.g:1272:64: ( KW_FROM | KW_IN ) db_name= identifier
                            {
                            // HiveParser.g:1272:64: ( KW_FROM | KW_IN )
                            int alt71=2;
                            int LA71_0 = input.LA(1);

                            if ( (LA71_0==KW_FROM) ) {
                                alt71=1;
                            }
                            else if ( (LA71_0==KW_IN) ) {
                                alt71=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 71, 0, input);

                                throw nvae;

                            }
                            switch (alt71) {
                                case 1 :
                                    // HiveParser.g:1272:65: KW_FROM
                                    {
                                    KW_FROM234=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement4730); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM234);


                                    }
                                    break;
                                case 2 :
                                    // HiveParser.g:1272:73: KW_IN
                                    {
                                    KW_IN235=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement4732); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN235);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_identifier_in_showStatement4737);
                            db_name=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:1272:101: ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
                    int alt73=3;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==KW_LIKE) ) {
                        alt73=1;
                    }
                    else if ( (LA73_0==Identifier||(LA73_0 >= KW_ABORT && LA73_0 <= KW_AFTER)||LA73_0==KW_ALLOC_FRACTION||LA73_0==KW_ANALYZE||LA73_0==KW_ARCHIVE||(LA73_0 >= KW_ASC && LA73_0 <= KW_AT)||(LA73_0 >= KW_AUTOCOMMIT && LA73_0 <= KW_BEFORE)||(LA73_0 >= KW_BRANCH && LA73_0 <= KW_BUCKETS)||(LA73_0 >= KW_CACHE && LA73_0 <= KW_CASCADE)||(LA73_0 >= KW_CBO && LA73_0 <= KW_CHANGE)||LA73_0==KW_CHECK||(LA73_0 >= KW_CLUSTER && LA73_0 <= KW_COLLECTION)||(LA73_0 >= KW_COLUMNS && LA73_0 <= KW_COMMENT)||(LA73_0 >= KW_COMPACT && LA73_0 <= KW_COMPACTIONS)||(LA73_0 >= KW_COMPUTE && LA73_0 <= KW_CONCATENATE)||LA73_0==KW_CONTINUE||LA73_0==KW_COST||LA73_0==KW_CRON||LA73_0==KW_DATA||LA73_0==KW_DATABASES||(LA73_0 >= KW_DATETIME && LA73_0 <= KW_DCPROPERTIES)||LA73_0==KW_DEBUG||(LA73_0 >= KW_DEFAULT && LA73_0 <= KW_DEFINED)||(LA73_0 >= KW_DELIMITED && LA73_0 <= KW_DESC)||(LA73_0 >= KW_DETAIL && LA73_0 <= KW_DISABLE)||(LA73_0 >= KW_DISTRIBUTE && LA73_0 <= KW_DO)||LA73_0==KW_DOW||(LA73_0 >= KW_DUMP && LA73_0 <= KW_ELEM_TYPE)||LA73_0==KW_ENABLE||(LA73_0 >= KW_ENFORCED && LA73_0 <= KW_EVERY)||(LA73_0 >= KW_EXCLUSIVE && LA73_0 <= KW_EXECUTED)||(LA73_0 >= KW_EXPIRE_SNAPSHOTS && LA73_0 <= KW_EXPRESSION)||LA73_0==KW_FAST_FORWARD||(LA73_0 >= KW_FIELDS && LA73_0 <= KW_FIRST)||(LA73_0 >= KW_FORMAT && LA73_0 <= KW_FORMATTED)||LA73_0==KW_FUNCTIONS||(LA73_0 >= KW_HOUR && LA73_0 <= KW_IDXPROPERTIES)||LA73_0==KW_IGNORE||(LA73_0 >= KW_INDEX && LA73_0 <= KW_INDEXES)||(LA73_0 >= KW_INPATH && LA73_0 <= KW_INPUTFORMAT)||(LA73_0 >= KW_ISOLATION && LA73_0 <= KW_JAR)||(LA73_0 >= KW_JOINCOST && LA73_0 <= KW_LAST)||LA73_0==KW_LEVEL||(LA73_0 >= KW_LIMIT && LA73_0 <= KW_LOAD)||(LA73_0 >= KW_LOCATION && LA73_0 <= KW_LONG)||(LA73_0 >= KW_MANAGED && LA73_0 <= KW_MANAGEMENT)||(LA73_0 >= KW_MAPJOIN && LA73_0 <= KW_MATERIALIZED)||LA73_0==KW_METADATA||(LA73_0 >= KW_MINUTE && LA73_0 <= KW_MONTH)||(LA73_0 >= KW_MOVE && LA73_0 <= KW_MSCK)||(LA73_0 >= KW_NORELY && LA73_0 <= KW_NOSCAN)||LA73_0==KW_NOVALIDATE||LA73_0==KW_NULLS||LA73_0==KW_OFFSET||(LA73_0 >= KW_OPERATOR && LA73_0 <= KW_OPTION)||(LA73_0 >= KW_OUTPUTDRIVER && LA73_0 <= KW_OUTPUTFORMAT)||(LA73_0 >= KW_OVERWRITE && LA73_0 <= KW_OWNER)||(LA73_0 >= KW_PARTITIONED && LA73_0 <= KW_PATH)||(LA73_0 >= KW_PLAN && LA73_0 <= KW_POOL)||LA73_0==KW_PRINCIPALS||LA73_0==KW_PURGE||(LA73_0 >= KW_QUARTER && LA73_0 <= KW_QUERY_PARALLELISM)||LA73_0==KW_READ||(LA73_0 >= KW_REBUILD && LA73_0 <= KW_RECORDWRITER)||(LA73_0 >= KW_RELOAD && LA73_0 <= KW_RETENTION)||LA73_0==KW_REWRITE||(LA73_0 >= KW_ROLE && LA73_0 <= KW_ROLES)||(LA73_0 >= KW_SCHEDULED && LA73_0 <= KW_SECOND)||(LA73_0 >= KW_SEMI && LA73_0 <= KW_SERVER)||(LA73_0 >= KW_SETS && LA73_0 <= KW_SKEWED)||(LA73_0 >= KW_SNAPSHOT && LA73_0 <= KW_SNAPSHOTS)||(LA73_0 >= KW_SORT && LA73_0 <= KW_SSL)||(LA73_0 >= KW_STATISTICS && LA73_0 <= KW_SUMMARY)||(LA73_0 >= KW_SYSTEM_TIME && LA73_0 <= KW_SYSTEM_VERSION)||LA73_0==KW_TABLES||(LA73_0 >= KW_TAG && LA73_0 <= KW_TERMINATED)||LA73_0==KW_TINYINT||LA73_0==KW_TOUCH||(LA73_0 >= KW_TRANSACTION && LA73_0 <= KW_TRANSACTIONS)||LA73_0==KW_TRIM||(LA73_0 >= KW_TYPE && LA73_0 <= KW_UNARCHIVE)||LA73_0==KW_UNDO||LA73_0==KW_UNIONTYPE||(LA73_0 >= KW_UNKNOWN && LA73_0 <= KW_UNSIGNED)||(LA73_0 >= KW_URI && LA73_0 <= KW_USE)||(LA73_0 >= KW_UTC && LA73_0 <= KW_VALIDATE)||LA73_0==KW_VALUE_TYPE||(LA73_0 >= KW_VECTORIZATION && LA73_0 <= KW_WEEK)||LA73_0==KW_WHILE||(LA73_0 >= KW_WITHIN && LA73_0 <= KW_ZONE)||LA73_0==StringLiteral||LA73_0==KW_BATCH||LA73_0==KW_DAYOFWEEK||LA73_0==KW_HOLD_DDLTIME||LA73_0==KW_NO_DROP||LA73_0==KW_OFFLINE||LA73_0==KW_PROTECTION||LA73_0==KW_READONLY||LA73_0==KW_TIMESTAMPTZ) ) {
                        alt73=2;
                    }
                    switch (alt73) {
                        case 1 :
                            // HiveParser.g:1272:102: KW_LIKE showStmtIdentifier
                            {
                            KW_LIKE236=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement4742); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE236);


                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement4744);
                            showStmtIdentifier237=showStmtIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier237.getTree());

                            }
                            break;
                        case 2 :
                            // HiveParser.g:1272:129: showStmtIdentifier
                            {
                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement4746);
                            showStmtIdentifier238=showStmtIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier238.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showStmtIdentifier, db_name, tableName, KW_SORTED
                    // token labels: 
                    // rule labels: db_name, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1273:5: -> ^( TOK_SHOWCOLUMNS tableName ( TOK_FROM $db_name)? ( showStmtIdentifier )? ( KW_SORTED )? )
                    {
                        // HiveParser.g:1273:8: ^( TOK_SHOWCOLUMNS tableName ( TOK_FROM $db_name)? ( showStmtIdentifier )? ( KW_SORTED )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SHOWCOLUMNS, "TOK_SHOWCOLUMNS")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableName.nextTree());

                        // HiveParser.g:1273:36: ( TOK_FROM $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, 
                            (ASTNode)adaptor.create(TOK_FROM, "TOK_FROM")
                            );

                            adaptor.addChild(root_1, stream_db_name.nextTree());

                        }
                        stream_db_name.reset();

                        // HiveParser.g:1273:57: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());

                        }
                        stream_showStmtIdentifier.reset();

                        // HiveParser.g:1273:77: ( KW_SORTED )?
                        if ( stream_KW_SORTED.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_KW_SORTED.nextNode()
                            );

                        }
                        stream_KW_SORTED.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // HiveParser.g:1274:7: KW_SHOW KW_FUNCTIONS ( KW_LIKE showFunctionIdentifier )?
                    {
                    KW_SHOW239=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement4782); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW239);


                    KW_FUNCTIONS240=(Token)match(input,KW_FUNCTIONS,FOLLOW_KW_FUNCTIONS_in_showStatement4784); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_FUNCTIONS.add(KW_FUNCTIONS240);


                    // HiveParser.g:1274:28: ( KW_LIKE showFunctionIdentifier )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==KW_LIKE) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // HiveParser.g:1274:29: KW_LIKE showFunctionIdentifier
                            {
                            KW_LIKE241=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement4787); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE241);


                            pushFollow(FOLLOW_showFunctionIdentifier_in_showStatement4789);
                            showFunctionIdentifier242=showFunctionIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_showFunctionIdentifier.add(showFunctionIdentifier242.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showFunctionIdentifier, KW_LIKE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1274:63: -> ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? )
                    {
                        // HiveParser.g:1274:66: ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SHOWFUNCTIONS, "TOK_SHOWFUNCTIONS")
                        , root_1);

                        // HiveParser.g:1274:86: ( KW_LIKE )?
                        if ( stream_KW_LIKE.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_KW_LIKE.nextNode()
                            );

                        }
                        stream_KW_LIKE.reset();

                        // HiveParser.g:1274:95: ( showFunctionIdentifier )?
                        if ( stream_showFunctionIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showFunctionIdentifier.nextTree());

                        }
                        stream_showFunctionIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // HiveParser.g:1275:7: KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )? ( whereClause )? ( orderByClause )? ( limitClause )?
                    {
                    KW_SHOW243=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement4812); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW243);


                    KW_PARTITIONS244=(Token)match(input,KW_PARTITIONS,FOLLOW_KW_PARTITIONS_in_showStatement4814); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_PARTITIONS.add(KW_PARTITIONS244);


                    pushFollow(FOLLOW_tableName_in_showStatement4818);
                    tabName=tableName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());

                    // HiveParser.g:1275:47: ( partitionSpec )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==KW_PARTITION) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // HiveParser.g:1275:47: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_showStatement4820);
                            partitionSpec245=partitionSpec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec245.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:1275:62: ( whereClause )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==KW_WHERE) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // HiveParser.g:1275:62: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_showStatement4823);
                            whereClause246=whereClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause246.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:1275:75: ( orderByClause )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==KW_ORDER) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // HiveParser.g:1275:75: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_showStatement4826);
                            orderByClause247=orderByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_orderByClause.add(orderByClause247.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:1275:90: ( limitClause )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==KW_LIMIT) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // HiveParser.g:1275:90: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_showStatement4829);
                            limitClause248=limitClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_limitClause.add(limitClause248.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: orderByClause, whereClause, limitClause, partitionSpec, tabName
                    // token labels: 
                    // rule labels: tabName, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1275:103: -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? ( whereClause )? ( orderByClause )? ( limitClause )? )
                    {
                        // HiveParser.g:1275:106: ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? ( whereClause )? ( orderByClause )? ( limitClause )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SHOWPARTITIONS, "TOK_SHOWPARTITIONS")
                        , root_1);

                        adaptor.addChild(root_1, stream_tabName.nextTree());

                        // HiveParser.g:1275:136: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                        }
                        stream_partitionSpec.reset();

                        // HiveParser.g:1275:151: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whereClause.nextTree());

                        }
                        stream_whereClause.reset();

                        // HiveParser.g:1275:164: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_orderByClause.nextTree());

                        }
                        stream_orderByClause.reset();

                        // HiveParser.g:1275:179: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_limitClause.nextTree());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // HiveParser.g:1276:7: KW_SHOW KW_CREATE ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier -> ^( TOK_SHOW_CREATEDATABASE $db_name) | KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) )
                    {
                    KW_SHOW249=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement4859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW249);


                    KW_CREATE250=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_showStatement4861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE250);


                    // HiveParser.g:1276:25: ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier -> ^( TOK_SHOW_CREATEDATABASE $db_name) | KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) )
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==KW_DATABASE) && (synpred12_HiveParser())) {
                        alt80=1;
                    }
                    else if ( (LA80_0==KW_SCHEMA) && (synpred12_HiveParser())) {
                        alt80=1;
                    }
                    else if ( (LA80_0==KW_TABLE) ) {
                        alt80=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 80, 0, input);

                        throw nvae;

                    }
                    switch (alt80) {
                        case 1 :
                            // HiveParser.g:1277:9: ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier
                            {
                            // HiveParser.g:1277:36: ( KW_DATABASE | KW_SCHEMA )
                            int alt79=2;
                            int LA79_0 = input.LA(1);

                            if ( (LA79_0==KW_DATABASE) ) {
                                alt79=1;
                            }
                            else if ( (LA79_0==KW_SCHEMA) ) {
                                alt79=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 79, 0, input);

                                throw nvae;

                            }
                            switch (alt79) {
                                case 1 :
                                    // HiveParser.g:1277:37: KW_DATABASE
                                    {
                                    KW_DATABASE251=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_showStatement4882); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE251);


                                    }
                                    break;
                                case 2 :
                                    // HiveParser.g:1277:49: KW_SCHEMA
                                    {
                                    KW_SCHEMA252=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_showStatement4884); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA252);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_identifier_in_showStatement4889);
                            db_name=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());

                            // AST REWRITE
                            // elements: db_name
                            // token labels: 
                            // rule labels: db_name, retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.tree:null);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (ASTNode)adaptor.nil();
                            // 1277:79: -> ^( TOK_SHOW_CREATEDATABASE $db_name)
                            {
                                // HiveParser.g:1277:82: ^( TOK_SHOW_CREATEDATABASE $db_name)
                                {
                                ASTNode root_1 = (ASTNode)adaptor.nil();
                                root_1 = (ASTNode)adaptor.becomeRoot(
                                (ASTNode)adaptor.create(TOK_SHOW_CREATEDATABASE, "TOK_SHOW_CREATEDATABASE")
                                , root_1);

                                adaptor.addChild(root_1, stream_db_name.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 2 :
                            // HiveParser.g:1279:9: KW_TABLE tabName= tableName
                            {
                            KW_TABLE253=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement4918); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE253);


                            pushFollow(FOLLOW_tableName_in_showStatement4922);
                            tabName=tableName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());

                            // AST REWRITE
                            // elements: tabName
                            // token labels: 
                            // rule labels: tabName, retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.tree:null);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (ASTNode)adaptor.nil();
                            // 1279:36: -> ^( TOK_SHOW_CREATETABLE $tabName)
                            {
                                // HiveParser.g:1279:39: ^( TOK_SHOW_CREATETABLE $tabName)
                                {
                                ASTNode root_1 = (ASTNode)adaptor.nil();
                                root_1 = (ASTNode)adaptor.becomeRoot(
                                (ASTNode)adaptor.create(TOK_SHOW_CREATETABLE, "TOK_SHOW_CREATETABLE")
                                , root_1);

                                adaptor.addChild(root_1, stream_tabName.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // HiveParser.g:1281:7: KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )?
                    {
                    KW_SHOW254=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement4947); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW254);


                    KW_TABLE255=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement4949); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE255);


                    KW_EXTENDED256=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement4951); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_EXTENDED.add(KW_EXTENDED256);


                    // HiveParser.g:1281:36: ( ( KW_FROM | KW_IN ) db_name= identifier )?
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==KW_FROM||LA82_0==KW_IN) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            // HiveParser.g:1281:37: ( KW_FROM | KW_IN ) db_name= identifier
                            {
                            // HiveParser.g:1281:37: ( KW_FROM | KW_IN )
                            int alt81=2;
                            int LA81_0 = input.LA(1);

                            if ( (LA81_0==KW_FROM) ) {
                                alt81=1;
                            }
                            else if ( (LA81_0==KW_IN) ) {
                                alt81=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 81, 0, input);

                                throw nvae;

                            }
                            switch (alt81) {
                                case 1 :
                                    // HiveParser.g:1281:38: KW_FROM
                                    {
                                    KW_FROM257=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement4955); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM257);


                                    }
                                    break;
                                case 2 :
                                    // HiveParser.g:1281:46: KW_IN
                                    {
                                    KW_IN258=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement4957); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN258);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_identifier_in_showStatement4962);
                            db_name=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());

                            }
                            break;

                    }


                    KW_LIKE259=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement4966); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE259);


                    pushFollow(FOLLOW_showStmtIdentifier_in_showStatement4968);
                    showStmtIdentifier260=showStmtIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier260.getTree());

                    // HiveParser.g:1281:101: ( partitionSpec )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==KW_PARTITION) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // HiveParser.g:1281:101: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_showStatement4970);
                            partitionSpec261=partitionSpec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec261.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: partitionSpec, showStmtIdentifier, db_name
                    // token labels: 
                    // rule labels: db_name, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1282:5: -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
                    {
                        // HiveParser.g:1282:8: ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SHOW_TABLESTATUS, "TOK_SHOW_TABLESTATUS")
                        , root_1);

                        adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());

                        // HiveParser.g:1282:51: ( $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_db_name.nextTree());

                        }
                        stream_db_name.reset();

                        // HiveParser.g:1282:60: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 10 :
                    // HiveParser.g:1283:7: KW_SHOW KW_TBLPROPERTIES tableName ( LPAREN prptyName= StringLiteral RPAREN )?
                    {
                    KW_SHOW262=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement4998); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW262);


                    KW_TBLPROPERTIES263=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_showStatement5000); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES263);


                    pushFollow(FOLLOW_tableName_in_showStatement5002);
                    tableName264=tableName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableName.add(tableName264.getTree());

                    // HiveParser.g:1283:42: ( LPAREN prptyName= StringLiteral RPAREN )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==LPAREN) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // HiveParser.g:1283:43: LPAREN prptyName= StringLiteral RPAREN
                            {
                            LPAREN265=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_showStatement5005); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN265);


                            prptyName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStatement5009); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_StringLiteral.add(prptyName);


                            RPAREN266=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_showStatement5011); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN266);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: tableName, prptyName
                    // token labels: prptyName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_prptyName=new RewriteRuleTokenStream(adaptor,"token prptyName",prptyName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1283:83: -> ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? )
                    {
                        // HiveParser.g:1283:86: ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SHOW_TBLPROPERTIES, "TOK_SHOW_TBLPROPERTIES")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableName.nextTree());

                        // HiveParser.g:1283:122: ( $prptyName)?
                        if ( stream_prptyName.hasNext() ) {
                            adaptor.addChild(root_1, stream_prptyName.nextNode());

                        }
                        stream_prptyName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 11 :
                    // HiveParser.g:1284:7: KW_SHOW KW_LOCKS ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) )
                    {
                    KW_SHOW267=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW267);


                    KW_LOCKS268=(Token)match(input,KW_LOCKS,FOLLOW_KW_LOCKS_in_showStatement5035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_LOCKS.add(KW_LOCKS268);


                    // HiveParser.g:1285:7: ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) )
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==KW_DATABASE) && (synpred13_HiveParser())) {
                        alt89=1;
                    }
                    else if ( (LA89_0==KW_SCHEMA) ) {
                        switch ( input.LA(2) ) {
                        case Identifier:
                            {
                            int LA89_7 = input.LA(3);

                            if ( (synpred13_HiveParser()) ) {
                                alt89=1;
                            }
                            else if ( (true) ) {
                                alt89=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 89, 7, input);

                                throw nvae;

                            }
                            }
                            break;
                        case KW_ABORT:
                        case KW_ACTIVATE:
                        case KW_ACTIVE:
                        case KW_ADD:
                        case KW_ADMIN:
                        case KW_AFTER:
                        case KW_ALLOC_FRACTION:
                        case KW_ANALYZE:
                        case KW_ARCHIVE:
                        case KW_ASC:
                        case KW_AST:
                        case KW_AT:
                        case KW_AUTOCOMMIT:
                        case KW_BEFORE:
                        case KW_BRANCH:
                        case KW_BUCKET:
                        case KW_BUCKETS:
                        case KW_CACHE:
                        case KW_CASCADE:
                        case KW_CBO:
                        case KW_CHANGE:
                        case KW_CHECK:
                        case KW_CLUSTER:
                        case KW_CLUSTERED:
                        case KW_CLUSTERSTATUS:
                        case KW_COLLECTION:
                        case KW_COLUMNS:
                        case KW_COMMENT:
                        case KW_COMPACT:
                        case KW_COMPACTIONS:
                        case KW_COMPUTE:
                        case KW_CONCATENATE:
                        case KW_CONTINUE:
                        case KW_COST:
                        case KW_CRON:
                        case KW_DATA:
                        case KW_DATABASES:
                        case KW_DATETIME:
                        case KW_DAY:
                        case KW_DBPROPERTIES:
                        case KW_DCPROPERTIES:
                        case KW_DEBUG:
                        case KW_DEFAULT:
                        case KW_DEFERRED:
                        case KW_DEFINED:
                        case KW_DELIMITED:
                        case KW_DEPENDENCY:
                        case KW_DESC:
                        case KW_DETAIL:
                        case KW_DIRECTORIES:
                        case KW_DIRECTORY:
                        case KW_DISABLE:
                        case KW_DISTRIBUTE:
                        case KW_DISTRIBUTED:
                        case KW_DO:
                        case KW_DOW:
                        case KW_DUMP:
                        case KW_ELEM_TYPE:
                        case KW_ENABLE:
                        case KW_ENFORCED:
                        case KW_ESCAPED:
                        case KW_EVERY:
                        case KW_EXCLUSIVE:
                        case KW_EXECUTE:
                        case KW_EXECUTED:
                        case KW_EXPIRE_SNAPSHOTS:
                        case KW_EXPLAIN:
                        case KW_EXPORT:
                        case KW_EXPRESSION:
                        case KW_FAST_FORWARD:
                        case KW_FIELDS:
                        case KW_FILE:
                        case KW_FILEFORMAT:
                        case KW_FIRST:
                        case KW_FORMAT:
                        case KW_FORMATTED:
                        case KW_FUNCTIONS:
                        case KW_HOUR:
                        case KW_IDXPROPERTIES:
                        case KW_IGNORE:
                        case KW_INDEX:
                        case KW_INDEXES:
                        case KW_INPATH:
                        case KW_INPUTDRIVER:
                        case KW_INPUTFORMAT:
                        case KW_ISOLATION:
                        case KW_ITEMS:
                        case KW_JAR:
                        case KW_JOINCOST:
                        case KW_KEY:
                        case KW_KEYS:
                        case KW_KEY_TYPE:
                        case KW_KILL:
                        case KW_LAST:
                        case KW_LEVEL:
                        case KW_LIMIT:
                        case KW_LINES:
                        case KW_LOAD:
                        case KW_LOCATION:
                        case KW_LOCK:
                        case KW_LOCKS:
                        case KW_LOGICAL:
                        case KW_LONG:
                        case KW_MANAGED:
                        case KW_MANAGEDLOCATION:
                        case KW_MANAGEMENT:
                        case KW_MAPJOIN:
                        case KW_MAPPING:
                        case KW_MATCHED:
                        case KW_MATERIALIZED:
                        case KW_METADATA:
                        case KW_MINUTE:
                        case KW_MONTH:
                        case KW_MOVE:
                        case KW_MSCK:
                        case KW_NORELY:
                        case KW_NOSCAN:
                        case KW_NOVALIDATE:
                        case KW_NULLS:
                        case KW_OFFSET:
                        case KW_OPERATOR:
                        case KW_OPTIMIZE:
                        case KW_OPTION:
                        case KW_OUTPUTDRIVER:
                        case KW_OUTPUTFORMAT:
                        case KW_OVERWRITE:
                        case KW_OWNER:
                        case KW_PARTITIONED:
                        case KW_PARTITIONS:
                        case KW_PATH:
                        case KW_PLAN:
                        case KW_PLANS:
                        case KW_PLUS:
                        case KW_POOL:
                        case KW_PRINCIPALS:
                        case KW_PURGE:
                        case KW_QUARTER:
                        case KW_QUERY:
                        case KW_QUERY_PARALLELISM:
                        case KW_READ:
                        case KW_REBUILD:
                        case KW_RECORDREADER:
                        case KW_RECORDWRITER:
                        case KW_RELOAD:
                        case KW_RELY:
                        case KW_REMOTE:
                        case KW_RENAME:
                        case KW_REOPTIMIZATION:
                        case KW_REPAIR:
                        case KW_REPL:
                        case KW_REPLACE:
                        case KW_REPLICATION:
                        case KW_RESOURCE:
                        case KW_RESPECT:
                        case KW_RESTRICT:
                        case KW_RETAIN:
                        case KW_RETENTION:
                        case KW_REWRITE:
                        case KW_ROLE:
                        case KW_ROLES:
                        case KW_SCHEDULED:
                        case KW_SCHEDULING_POLICY:
                        case KW_SCHEMA:
                        case KW_SCHEMAS:
                        case KW_SECOND:
                        case KW_SEMI:
                        case KW_SERDE:
                        case KW_SERDEPROPERTIES:
                        case KW_SERVER:
                        case KW_SETS:
                        case KW_SET_CURRENT_SNAPSHOT:
                        case KW_SHARED:
                        case KW_SHOW:
                        case KW_SHOW_DATABASE:
                        case KW_SKEWED:
                        case KW_SNAPSHOT:
                        case KW_SNAPSHOTS:
                        case KW_SORT:
                        case KW_SORTED:
                        case KW_SPEC:
                        case KW_SSL:
                        case KW_STATISTICS:
                        case KW_STATUS:
                        case KW_STORED:
                        case KW_STREAMTABLE:
                        case KW_STRING:
                        case KW_STRUCT:
                        case KW_SUMMARY:
                        case KW_SYSTEM_TIME:
                        case KW_SYSTEM_VERSION:
                        case KW_TABLES:
                        case KW_TAG:
                        case KW_TBLPROPERTIES:
                        case KW_TEMPORARY:
                        case KW_TERMINATED:
                        case KW_TINYINT:
                        case KW_TOUCH:
                        case KW_TRANSACTION:
                        case KW_TRANSACTIONAL:
                        case KW_TRANSACTIONS:
                        case KW_TRIM:
                        case KW_TYPE:
                        case KW_UNARCHIVE:
                        case KW_UNDO:
                        case KW_UNIONTYPE:
                        case KW_UNKNOWN:
                        case KW_UNLOCK:
                        case KW_UNMANAGED:
                        case KW_UNSET:
                        case KW_UNSIGNED:
                        case KW_URI:
                        case KW_URL:
                        case KW_USE:
                        case KW_UTC:
                        case KW_UTCTIMESTAMP:
                        case KW_VALIDATE:
                        case KW_VALUE_TYPE:
                        case KW_VECTORIZATION:
                        case KW_VIEW:
                        case KW_VIEWS:
                        case KW_WAIT:
                        case KW_WEEK:
                        case KW_WHILE:
                        case KW_WITHIN:
                        case KW_WORK:
                        case KW_WORKLOAD:
                        case KW_WRITE:
                        case KW_YEAR:
                        case KW_ZONE:
                        case KW_BATCH:
                        case KW_DAYOFWEEK:
                        case KW_HOLD_DDLTIME:
                        case KW_NO_DROP:
                        case KW_OFFLINE:
                        case KW_PROTECTION:
                        case KW_READONLY:
                        case KW_TIMESTAMPTZ:
                            {
                            int LA89_8 = input.LA(3);

                            if ( (synpred13_HiveParser()) ) {
                                alt89=1;
                            }
                            else if ( (true) ) {
                                alt89=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 89, 8, input);

                                throw nvae;

                            }
                            }
                            break;
                        case EOF:
                        case DOT:
                        case KW_EXTENDED:
                        case KW_PARTITION:
                            {
                            alt89=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 89, 2, input);

                            throw nvae;

                        }

                    }
                    else if ( (LA89_0==EOF||LA89_0==Identifier||(LA89_0 >= KW_ABORT && LA89_0 <= KW_AFTER)||LA89_0==KW_ALLOC_FRACTION||LA89_0==KW_ANALYZE||LA89_0==KW_ARCHIVE||(LA89_0 >= KW_ASC && LA89_0 <= KW_AT)||(LA89_0 >= KW_AUTOCOMMIT && LA89_0 <= KW_BEFORE)||(LA89_0 >= KW_BRANCH && LA89_0 <= KW_BUCKETS)||(LA89_0 >= KW_CACHE && LA89_0 <= KW_CASCADE)||(LA89_0 >= KW_CBO && LA89_0 <= KW_CHANGE)||LA89_0==KW_CHECK||(LA89_0 >= KW_CLUSTER && LA89_0 <= KW_COLLECTION)||(LA89_0 >= KW_COLUMNS && LA89_0 <= KW_COMMENT)||(LA89_0 >= KW_COMPACT && LA89_0 <= KW_COMPACTIONS)||(LA89_0 >= KW_COMPUTE && LA89_0 <= KW_CONCATENATE)||LA89_0==KW_CONTINUE||LA89_0==KW_COST||LA89_0==KW_CRON||LA89_0==KW_DATA||LA89_0==KW_DATABASES||(LA89_0 >= KW_DATETIME && LA89_0 <= KW_DCPROPERTIES)||LA89_0==KW_DEBUG||(LA89_0 >= KW_DEFAULT && LA89_0 <= KW_DEFINED)||(LA89_0 >= KW_DELIMITED && LA89_0 <= KW_DESC)||(LA89_0 >= KW_DETAIL && LA89_0 <= KW_DISABLE)||(LA89_0 >= KW_DISTRIBUTE && LA89_0 <= KW_DO)||LA89_0==KW_DOW||(LA89_0 >= KW_DUMP && LA89_0 <= KW_ELEM_TYPE)||LA89_0==KW_ENABLE||(LA89_0 >= KW_ENFORCED && LA89_0 <= KW_EVERY)||(LA89_0 >= KW_EXCLUSIVE && LA89_0 <= KW_EXECUTED)||(LA89_0 >= KW_EXPIRE_SNAPSHOTS && LA89_0 <= KW_EXTENDED)||LA89_0==KW_FAST_FORWARD||(LA89_0 >= KW_FIELDS && LA89_0 <= KW_FIRST)||(LA89_0 >= KW_FORMAT && LA89_0 <= KW_FORMATTED)||LA89_0==KW_FUNCTIONS||(LA89_0 >= KW_HOUR && LA89_0 <= KW_IDXPROPERTIES)||LA89_0==KW_IGNORE||(LA89_0 >= KW_INDEX && LA89_0 <= KW_INDEXES)||(LA89_0 >= KW_INPATH && LA89_0 <= KW_INPUTFORMAT)||(LA89_0 >= KW_ISOLATION && LA89_0 <= KW_JAR)||(LA89_0 >= KW_JOINCOST && LA89_0 <= KW_LAST)||LA89_0==KW_LEVEL||(LA89_0 >= KW_LIMIT && LA89_0 <= KW_LOAD)||(LA89_0 >= KW_LOCATION && LA89_0 <= KW_LONG)||(LA89_0 >= KW_MANAGED && LA89_0 <= KW_MANAGEMENT)||(LA89_0 >= KW_MAPJOIN && LA89_0 <= KW_MATERIALIZED)||LA89_0==KW_METADATA||(LA89_0 >= KW_MINUTE && LA89_0 <= KW_MONTH)||(LA89_0 >= KW_MOVE && LA89_0 <= KW_MSCK)||(LA89_0 >= KW_NORELY && LA89_0 <= KW_NOSCAN)||LA89_0==KW_NOVALIDATE||LA89_0==KW_NULLS||LA89_0==KW_OFFSET||(LA89_0 >= KW_OPERATOR && LA89_0 <= KW_OPTION)||(LA89_0 >= KW_OUTPUTDRIVER && LA89_0 <= KW_OUTPUTFORMAT)||(LA89_0 >= KW_OVERWRITE && LA89_0 <= KW_OWNER)||(LA89_0 >= KW_PARTITIONED && LA89_0 <= KW_PATH)||(LA89_0 >= KW_PLAN && LA89_0 <= KW_POOL)||LA89_0==KW_PRINCIPALS||LA89_0==KW_PURGE||(LA89_0 >= KW_QUARTER && LA89_0 <= KW_QUERY_PARALLELISM)||LA89_0==KW_READ||(LA89_0 >= KW_REBUILD && LA89_0 <= KW_RECORDWRITER)||(LA89_0 >= KW_RELOAD && LA89_0 <= KW_RETENTION)||LA89_0==KW_REWRITE||(LA89_0 >= KW_ROLE && LA89_0 <= KW_ROLES)||(LA89_0 >= KW_SCHEDULED && LA89_0 <= KW_SCHEDULING_POLICY)||(LA89_0 >= KW_SCHEMAS && LA89_0 <= KW_SECOND)||(LA89_0 >= KW_SEMI && LA89_0 <= KW_SERVER)||(LA89_0 >= KW_SETS && LA89_0 <= KW_SKEWED)||(LA89_0 >= KW_SNAPSHOT && LA89_0 <= KW_SNAPSHOTS)||(LA89_0 >= KW_SORT && LA89_0 <= KW_SSL)||(LA89_0 >= KW_STATISTICS && LA89_0 <= KW_SUMMARY)||(LA89_0 >= KW_SYSTEM_TIME && LA89_0 <= KW_SYSTEM_VERSION)||LA89_0==KW_TABLES||(LA89_0 >= KW_TAG && LA89_0 <= KW_TERMINATED)||LA89_0==KW_TINYINT||LA89_0==KW_TOUCH||(LA89_0 >= KW_TRANSACTION && LA89_0 <= KW_TRANSACTIONS)||LA89_0==KW_TRIM||(LA89_0 >= KW_TYPE && LA89_0 <= KW_UNARCHIVE)||LA89_0==KW_UNDO||LA89_0==KW_UNIONTYPE||(LA89_0 >= KW_UNKNOWN && LA89_0 <= KW_UNSIGNED)||(LA89_0 >= KW_URI && LA89_0 <= KW_USE)||(LA89_0 >= KW_UTC && LA89_0 <= KW_VALIDATE)||LA89_0==KW_VALUE_TYPE||(LA89_0 >= KW_VECTORIZATION && LA89_0 <= KW_WEEK)||LA89_0==KW_WHILE||(LA89_0 >= KW_WITHIN && LA89_0 <= KW_ZONE)||LA89_0==KW_BATCH||LA89_0==KW_DAYOFWEEK||LA89_0==KW_HOLD_DDLTIME||LA89_0==KW_NO_DROP||LA89_0==KW_OFFLINE||LA89_0==KW_PROTECTION||LA89_0==KW_READONLY||LA89_0==KW_TIMESTAMPTZ) ) {
                        alt89=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 89, 0, input);

                        throw nvae;

                    }
                    switch (alt89) {
                        case 1 :
                            // HiveParser.g:1286:7: ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) (isExtended= KW_EXTENDED )?
                            {
                            // HiveParser.g:1286:34: ( KW_DATABASE | KW_SCHEMA )
                            int alt85=2;
                            int LA85_0 = input.LA(1);

                            if ( (LA85_0==KW_DATABASE) ) {
                                alt85=1;
                            }
                            else if ( (LA85_0==KW_SCHEMA) ) {
                                alt85=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 85, 0, input);

                                throw nvae;

                            }
                            switch (alt85) {
                                case 1 :
                                    // HiveParser.g:1286:35: KW_DATABASE
                                    {
                                    KW_DATABASE269=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_showStatement5060); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE269);


                                    }
                                    break;
                                case 2 :
                                    // HiveParser.g:1286:47: KW_SCHEMA
                                    {
                                    KW_SCHEMA270=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_showStatement5062); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA270);


                                    }
                                    break;

                            }


                            // HiveParser.g:1286:58: (dbName= identifier )
                            // HiveParser.g:1286:59: dbName= identifier
                            {
                            pushFollow(FOLLOW_identifier_in_showStatement5068);
                            dbName=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());

                            }


                            // HiveParser.g:1286:78: (isExtended= KW_EXTENDED )?
                            int alt86=2;
                            int LA86_0 = input.LA(1);

                            if ( (LA86_0==KW_EXTENDED) ) {
                                alt86=1;
                            }
                            switch (alt86) {
                                case 1 :
                                    // HiveParser.g:1286:79: isExtended= KW_EXTENDED
                                    {
                                    isExtended=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement5074); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_EXTENDED.add(isExtended);


                                    }
                                    break;

                            }


                            // AST REWRITE
                            // elements: dbName, isExtended
                            // token labels: isExtended
                            // rule labels: dbName, retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
                            RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.tree:null);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (ASTNode)adaptor.nil();
                            // 1286:104: -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? )
                            {
                                // HiveParser.g:1286:107: ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? )
                                {
                                ASTNode root_1 = (ASTNode)adaptor.nil();
                                root_1 = (ASTNode)adaptor.becomeRoot(
                                (ASTNode)adaptor.create(TOK_SHOWDBLOCKS, "TOK_SHOWDBLOCKS")
                                , root_1);

                                adaptor.addChild(root_1, stream_dbName.nextTree());

                                // HiveParser.g:1286:134: ( $isExtended)?
                                if ( stream_isExtended.hasNext() ) {
                                    adaptor.addChild(root_1, stream_isExtended.nextNode());

                                }
                                stream_isExtended.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 2 :
                            // HiveParser.g:1288:7: (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )?
                            {
                            // HiveParser.g:1288:7: (parttype= partTypeExpr )?
                            int alt87=2;
                            int LA87_0 = input.LA(1);

                            if ( (LA87_0==Identifier||(LA87_0 >= KW_ABORT && LA87_0 <= KW_AFTER)||LA87_0==KW_ALLOC_FRACTION||LA87_0==KW_ANALYZE||LA87_0==KW_ARCHIVE||(LA87_0 >= KW_ASC && LA87_0 <= KW_AT)||(LA87_0 >= KW_AUTOCOMMIT && LA87_0 <= KW_BEFORE)||(LA87_0 >= KW_BRANCH && LA87_0 <= KW_BUCKETS)||(LA87_0 >= KW_CACHE && LA87_0 <= KW_CASCADE)||(LA87_0 >= KW_CBO && LA87_0 <= KW_CHANGE)||LA87_0==KW_CHECK||(LA87_0 >= KW_CLUSTER && LA87_0 <= KW_COLLECTION)||(LA87_0 >= KW_COLUMNS && LA87_0 <= KW_COMMENT)||(LA87_0 >= KW_COMPACT && LA87_0 <= KW_COMPACTIONS)||(LA87_0 >= KW_COMPUTE && LA87_0 <= KW_CONCATENATE)||LA87_0==KW_CONTINUE||LA87_0==KW_COST||LA87_0==KW_CRON||LA87_0==KW_DATA||LA87_0==KW_DATABASES||(LA87_0 >= KW_DATETIME && LA87_0 <= KW_DCPROPERTIES)||LA87_0==KW_DEBUG||(LA87_0 >= KW_DEFAULT && LA87_0 <= KW_DEFINED)||(LA87_0 >= KW_DELIMITED && LA87_0 <= KW_DESC)||(LA87_0 >= KW_DETAIL && LA87_0 <= KW_DISABLE)||(LA87_0 >= KW_DISTRIBUTE && LA87_0 <= KW_DO)||LA87_0==KW_DOW||(LA87_0 >= KW_DUMP && LA87_0 <= KW_ELEM_TYPE)||LA87_0==KW_ENABLE||(LA87_0 >= KW_ENFORCED && LA87_0 <= KW_EVERY)||(LA87_0 >= KW_EXCLUSIVE && LA87_0 <= KW_EXECUTED)||(LA87_0 >= KW_EXPIRE_SNAPSHOTS && LA87_0 <= KW_EXPRESSION)||LA87_0==KW_FAST_FORWARD||(LA87_0 >= KW_FIELDS && LA87_0 <= KW_FIRST)||(LA87_0 >= KW_FORMAT && LA87_0 <= KW_FORMATTED)||LA87_0==KW_FUNCTIONS||(LA87_0 >= KW_HOUR && LA87_0 <= KW_IDXPROPERTIES)||LA87_0==KW_IGNORE||(LA87_0 >= KW_INDEX && LA87_0 <= KW_INDEXES)||(LA87_0 >= KW_INPATH && LA87_0 <= KW_INPUTFORMAT)||(LA87_0 >= KW_ISOLATION && LA87_0 <= KW_JAR)||(LA87_0 >= KW_JOINCOST && LA87_0 <= KW_LAST)||LA87_0==KW_LEVEL||(LA87_0 >= KW_LIMIT && LA87_0 <= KW_LOAD)||(LA87_0 >= KW_LOCATION && LA87_0 <= KW_LONG)||(LA87_0 >= KW_MANAGED && LA87_0 <= KW_MANAGEMENT)||(LA87_0 >= KW_MAPJOIN && LA87_0 <= KW_MATERIALIZED)||LA87_0==KW_METADATA||(LA87_0 >= KW_MINUTE && LA87_0 <= KW_MONTH)||(LA87_0 >= KW_MOVE && LA87_0 <= KW_MSCK)||(LA87_0 >= KW_NORELY && LA87_0 <= KW_NOSCAN)||LA87_0==KW_NOVALIDATE||LA87_0==KW_NULLS||LA87_0==KW_OFFSET||(LA87_0 >= KW_OPERATOR && LA87_0 <= KW_OPTION)||(LA87_0 >= KW_OUTPUTDRIVER && LA87_0 <= KW_OUTPUTFORMAT)||(LA87_0 >= KW_OVERWRITE && LA87_0 <= KW_OWNER)||(LA87_0 >= KW_PARTITIONED && LA87_0 <= KW_PATH)||(LA87_0 >= KW_PLAN && LA87_0 <= KW_POOL)||LA87_0==KW_PRINCIPALS||LA87_0==KW_PURGE||(LA87_0 >= KW_QUARTER && LA87_0 <= KW_QUERY_PARALLELISM)||LA87_0==KW_READ||(LA87_0 >= KW_REBUILD && LA87_0 <= KW_RECORDWRITER)||(LA87_0 >= KW_RELOAD && LA87_0 <= KW_RETENTION)||LA87_0==KW_REWRITE||(LA87_0 >= KW_ROLE && LA87_0 <= KW_ROLES)||(LA87_0 >= KW_SCHEDULED && LA87_0 <= KW_SECOND)||(LA87_0 >= KW_SEMI && LA87_0 <= KW_SERVER)||(LA87_0 >= KW_SETS && LA87_0 <= KW_SKEWED)||(LA87_0 >= KW_SNAPSHOT && LA87_0 <= KW_SNAPSHOTS)||(LA87_0 >= KW_SORT && LA87_0 <= KW_SSL)||(LA87_0 >= KW_STATISTICS && LA87_0 <= KW_SUMMARY)||(LA87_0 >= KW_SYSTEM_TIME && LA87_0 <= KW_SYSTEM_VERSION)||LA87_0==KW_TABLES||(LA87_0 >= KW_TAG && LA87_0 <= KW_TERMINATED)||LA87_0==KW_TINYINT||LA87_0==KW_TOUCH||(LA87_0 >= KW_TRANSACTION && LA87_0 <= KW_TRANSACTIONS)||LA87_0==KW_TRIM||(LA87_0 >= KW_TYPE && LA87_0 <= KW_UNARCHIVE)||LA87_0==KW_UNDO||LA87_0==KW_UNIONTYPE||(LA87_0 >= KW_UNKNOWN && LA87_0 <= KW_UNSIGNED)||(LA87_0 >= KW_URI && LA87_0 <= KW_USE)||(LA87_0 >= KW_UTC && LA87_0 <= KW_VALIDATE)||LA87_0==KW_VALUE_TYPE||(LA87_0 >= KW_VECTORIZATION && LA87_0 <= KW_WEEK)||LA87_0==KW_WHILE||(LA87_0 >= KW_WITHIN && LA87_0 <= KW_ZONE)||LA87_0==KW_BATCH||LA87_0==KW_DAYOFWEEK||LA87_0==KW_HOLD_DDLTIME||LA87_0==KW_NO_DROP||LA87_0==KW_OFFLINE||LA87_0==KW_PROTECTION||LA87_0==KW_READONLY||LA87_0==KW_TIMESTAMPTZ) ) {
                                alt87=1;
                            }
                            switch (alt87) {
                                case 1 :
                                    // HiveParser.g:1288:8: parttype= partTypeExpr
                                    {
                                    pushFollow(FOLLOW_partTypeExpr_in_showStatement5108);
                                    parttype=partTypeExpr();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_partTypeExpr.add(parttype.getTree());

                                    }
                                    break;

                            }


                            // HiveParser.g:1288:32: (isExtended= KW_EXTENDED )?
                            int alt88=2;
                            int LA88_0 = input.LA(1);

                            if ( (LA88_0==KW_EXTENDED) ) {
                                alt88=1;
                            }
                            switch (alt88) {
                                case 1 :
                                    // HiveParser.g:1288:33: isExtended= KW_EXTENDED
                                    {
                                    isExtended=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement5115); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_EXTENDED.add(isExtended);


                                    }
                                    break;

                            }


                            // AST REWRITE
                            // elements: parttype, isExtended
                            // token labels: isExtended
                            // rule labels: parttype, retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
                            RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.tree:null);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (ASTNode)adaptor.nil();
                            // 1288:58: -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
                            {
                                // HiveParser.g:1288:61: ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
                                {
                                ASTNode root_1 = (ASTNode)adaptor.nil();
                                root_1 = (ASTNode)adaptor.becomeRoot(
                                (ASTNode)adaptor.create(TOK_SHOWLOCKS, "TOK_SHOWLOCKS")
                                , root_1);

                                // HiveParser.g:1288:78: ( $parttype)?
                                if ( stream_parttype.hasNext() ) {
                                    adaptor.addChild(root_1, stream_parttype.nextTree());

                                }
                                stream_parttype.reset();

                                // HiveParser.g:1288:89: ( $isExtended)?
                                if ( stream_isExtended.hasNext() ) {
                                    adaptor.addChild(root_1, stream_isExtended.nextNode());

                                }
                                stream_isExtended.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 12 :
                    // HiveParser.g:1290:7: KW_SHOW KW_COMPACTIONS ( ( KW_COMPACT_ID )=> compactionId -> ^( TOK_SHOW_COMPACTIONS compactionId ) | ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? -> ^( TOK_SHOW_COMPACTIONS $dbName ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? ) | (parttype= partTypeExpr )? ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? -> ^( TOK_SHOW_COMPACTIONS ( $parttype)? ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? ) )
                    {
                    KW_SHOW271=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5147); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW271);


                    KW_COMPACTIONS272=(Token)match(input,KW_COMPACTIONS,FOLLOW_KW_COMPACTIONS_in_showStatement5149); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COMPACTIONS.add(KW_COMPACTIONS272);


                    // HiveParser.g:1291:7: ( ( KW_COMPACT_ID )=> compactionId -> ^( TOK_SHOW_COMPACTIONS compactionId ) | ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? -> ^( TOK_SHOW_COMPACTIONS $dbName ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? ) | (parttype= partTypeExpr )? ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? -> ^( TOK_SHOW_COMPACTIONS ( $parttype)? ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? ) )
                    int alt102=3;
                    alt102 = dfa102.predict(input);
                    switch (alt102) {
                        case 1 :
                            // HiveParser.g:1292:7: ( KW_COMPACT_ID )=> compactionId
                            {
                            pushFollow(FOLLOW_compactionId_in_showStatement5171);
                            compactionId273=compactionId();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_compactionId.add(compactionId273.getTree());

                            // AST REWRITE
                            // elements: compactionId
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (ASTNode)adaptor.nil();
                            // 1292:39: -> ^( TOK_SHOW_COMPACTIONS compactionId )
                            {
                                // HiveParser.g:1292:42: ^( TOK_SHOW_COMPACTIONS compactionId )
                                {
                                ASTNode root_1 = (ASTNode)adaptor.nil();
                                root_1 = (ASTNode)adaptor.becomeRoot(
                                (ASTNode)adaptor.create(TOK_SHOW_COMPACTIONS, "TOK_SHOW_COMPACTIONS")
                                , root_1);

                                adaptor.addChild(root_1, stream_compactionId.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 2 :
                            // HiveParser.g:1294:7: ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )?
                            {
                            // HiveParser.g:1294:34: ( KW_DATABASE | KW_SCHEMA )
                            int alt90=2;
                            int LA90_0 = input.LA(1);

                            if ( (LA90_0==KW_DATABASE) ) {
                                alt90=1;
                            }
                            else if ( (LA90_0==KW_SCHEMA) ) {
                                alt90=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 90, 0, input);

                                throw nvae;

                            }
                            switch (alt90) {
                                case 1 :
                                    // HiveParser.g:1294:35: KW_DATABASE
                                    {
                                    KW_DATABASE274=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_showStatement5204); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE274);


                                    }
                                    break;
                                case 2 :
                                    // HiveParser.g:1294:47: KW_SCHEMA
                                    {
                                    KW_SCHEMA275=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_showStatement5206); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA275);


                                    }
                                    break;

                            }


                            // HiveParser.g:1294:58: (dbName= identifier )
                            // HiveParser.g:1294:59: dbName= identifier
                            {
                            pushFollow(FOLLOW_identifier_in_showStatement5212);
                            dbName=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());

                            }


                            // HiveParser.g:1294:78: ( compactionPool )?
                            int alt91=2;
                            int LA91_0 = input.LA(1);

                            if ( (LA91_0==KW_POOL) ) {
                                alt91=1;
                            }
                            switch (alt91) {
                                case 1 :
                                    // HiveParser.g:1294:78: compactionPool
                                    {
                                    pushFollow(FOLLOW_compactionPool_in_showStatement5215);
                                    compactionPool276=compactionPool();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_compactionPool.add(compactionPool276.getTree());

                                    }
                                    break;

                            }


                            // HiveParser.g:1294:94: ( compactionType )?
                            int alt92=2;
                            int LA92_0 = input.LA(1);

                            if ( (LA92_0==KW_TYPE) ) {
                                alt92=1;
                            }
                            switch (alt92) {
                                case 1 :
                                    // HiveParser.g:1294:94: compactionType
                                    {
                                    pushFollow(FOLLOW_compactionType_in_showStatement5218);
                                    compactionType277=compactionType();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_compactionType.add(compactionType277.getTree());

                                    }
                                    break;

                            }


                            // HiveParser.g:1294:110: ( compactionStatus )?
                            int alt93=2;
                            int LA93_0 = input.LA(1);

                            if ( (LA93_0==KW_STATUS) ) {
                                alt93=1;
                            }
                            switch (alt93) {
                                case 1 :
                                    // HiveParser.g:1294:110: compactionStatus
                                    {
                                    pushFollow(FOLLOW_compactionStatus_in_showStatement5221);
                                    compactionStatus278=compactionStatus();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_compactionStatus.add(compactionStatus278.getTree());

                                    }
                                    break;

                            }


                            // HiveParser.g:1294:128: ( orderByClause )?
                            int alt94=2;
                            int LA94_0 = input.LA(1);

                            if ( (LA94_0==KW_ORDER) ) {
                                alt94=1;
                            }
                            switch (alt94) {
                                case 1 :
                                    // HiveParser.g:1294:128: orderByClause
                                    {
                                    pushFollow(FOLLOW_orderByClause_in_showStatement5224);
                                    orderByClause279=orderByClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_orderByClause.add(orderByClause279.getTree());

                                    }
                                    break;

                            }


                            // HiveParser.g:1294:143: ( limitClause )?
                            int alt95=2;
                            int LA95_0 = input.LA(1);

                            if ( (LA95_0==KW_LIMIT) ) {
                                alt95=1;
                            }
                            switch (alt95) {
                                case 1 :
                                    // HiveParser.g:1294:143: limitClause
                                    {
                                    pushFollow(FOLLOW_limitClause_in_showStatement5227);
                                    limitClause280=limitClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_limitClause.add(limitClause280.getTree());

                                    }
                                    break;

                            }


                            // AST REWRITE
                            // elements: compactionType, compactionPool, limitClause, orderByClause, dbName, compactionStatus
                            // token labels: 
                            // rule labels: dbName, retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.tree:null);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (ASTNode)adaptor.nil();
                            // 1294:156: -> ^( TOK_SHOW_COMPACTIONS $dbName ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? )
                            {
                                // HiveParser.g:1294:159: ^( TOK_SHOW_COMPACTIONS $dbName ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? )
                                {
                                ASTNode root_1 = (ASTNode)adaptor.nil();
                                root_1 = (ASTNode)adaptor.becomeRoot(
                                (ASTNode)adaptor.create(TOK_SHOW_COMPACTIONS, "TOK_SHOW_COMPACTIONS")
                                , root_1);

                                adaptor.addChild(root_1, stream_dbName.nextTree());

                                // HiveParser.g:1294:190: ( compactionPool )?
                                if ( stream_compactionPool.hasNext() ) {
                                    adaptor.addChild(root_1, stream_compactionPool.nextTree());

                                }
                                stream_compactionPool.reset();

                                // HiveParser.g:1294:206: ( compactionType )?
                                if ( stream_compactionType.hasNext() ) {
                                    adaptor.addChild(root_1, stream_compactionType.nextTree());

                                }
                                stream_compactionType.reset();

                                // HiveParser.g:1294:222: ( compactionStatus )?
                                if ( stream_compactionStatus.hasNext() ) {
                                    adaptor.addChild(root_1, stream_compactionStatus.nextTree());

                                }
                                stream_compactionStatus.reset();

                                // HiveParser.g:1294:240: ( orderByClause )?
                                if ( stream_orderByClause.hasNext() ) {
                                    adaptor.addChild(root_1, stream_orderByClause.nextTree());

                                }
                                stream_orderByClause.reset();

                                // HiveParser.g:1294:255: ( limitClause )?
                                if ( stream_limitClause.hasNext() ) {
                                    adaptor.addChild(root_1, stream_limitClause.nextTree());

                                }
                                stream_limitClause.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 3 :
                            // HiveParser.g:1296:7: (parttype= partTypeExpr )? ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )?
                            {
                            // HiveParser.g:1296:7: (parttype= partTypeExpr )?
                            int alt96=2;
                            switch ( input.LA(1) ) {
                                case Identifier:
                                case KW_ABORT:
                                case KW_ACTIVATE:
                                case KW_ACTIVE:
                                case KW_ADD:
                                case KW_ADMIN:
                                case KW_AFTER:
                                case KW_ALLOC_FRACTION:
                                case KW_ANALYZE:
                                case KW_ARCHIVE:
                                case KW_ASC:
                                case KW_AST:
                                case KW_AT:
                                case KW_AUTOCOMMIT:
                                case KW_BEFORE:
                                case KW_BRANCH:
                                case KW_BUCKET:
                                case KW_BUCKETS:
                                case KW_CACHE:
                                case KW_CASCADE:
                                case KW_CBO:
                                case KW_CHANGE:
                                case KW_CHECK:
                                case KW_CLUSTER:
                                case KW_CLUSTERED:
                                case KW_CLUSTERSTATUS:
                                case KW_COLLECTION:
                                case KW_COLUMNS:
                                case KW_COMMENT:
                                case KW_COMPACT:
                                case KW_COMPACTIONS:
                                case KW_COMPUTE:
                                case KW_CONCATENATE:
                                case KW_CONTINUE:
                                case KW_COST:
                                case KW_CRON:
                                case KW_DATA:
                                case KW_DATABASES:
                                case KW_DATETIME:
                                case KW_DAY:
                                case KW_DBPROPERTIES:
                                case KW_DCPROPERTIES:
                                case KW_DEBUG:
                                case KW_DEFAULT:
                                case KW_DEFERRED:
                                case KW_DEFINED:
                                case KW_DELIMITED:
                                case KW_DEPENDENCY:
                                case KW_DESC:
                                case KW_DETAIL:
                                case KW_DIRECTORIES:
                                case KW_DIRECTORY:
                                case KW_DISABLE:
                                case KW_DISTRIBUTE:
                                case KW_DISTRIBUTED:
                                case KW_DO:
                                case KW_DOW:
                                case KW_DUMP:
                                case KW_ELEM_TYPE:
                                case KW_ENABLE:
                                case KW_ENFORCED:
                                case KW_ESCAPED:
                                case KW_EVERY:
                                case KW_EXCLUSIVE:
                                case KW_EXECUTE:
                                case KW_EXECUTED:
                                case KW_EXPIRE_SNAPSHOTS:
                                case KW_EXPLAIN:
                                case KW_EXPORT:
                                case KW_EXPRESSION:
                                case KW_FAST_FORWARD:
                                case KW_FIELDS:
                                case KW_FILE:
                                case KW_FILEFORMAT:
                                case KW_FIRST:
                                case KW_FORMAT:
                                case KW_FORMATTED:
                                case KW_FUNCTIONS:
                                case KW_HOUR:
                                case KW_IDXPROPERTIES:
                                case KW_IGNORE:
                                case KW_INDEX:
                                case KW_INDEXES:
                                case KW_INPATH:
                                case KW_INPUTDRIVER:
                                case KW_INPUTFORMAT:
                                case KW_ISOLATION:
                                case KW_ITEMS:
                                case KW_JAR:
                                case KW_JOINCOST:
                                case KW_KEY:
                                case KW_KEYS:
                                case KW_KEY_TYPE:
                                case KW_KILL:
                                case KW_LAST:
                                case KW_LEVEL:
                                case KW_LINES:
                                case KW_LOAD:
                                case KW_LOCATION:
                                case KW_LOCK:
                                case KW_LOCKS:
                                case KW_LOGICAL:
                                case KW_LONG:
                                case KW_MANAGED:
                                case KW_MANAGEDLOCATION:
                                case KW_MANAGEMENT:
                                case KW_MAPJOIN:
                                case KW_MAPPING:
                                case KW_MATCHED:
                                case KW_MATERIALIZED:
                                case KW_METADATA:
                                case KW_MINUTE:
                                case KW_MONTH:
                                case KW_MOVE:
                                case KW_MSCK:
                                case KW_NORELY:
                                case KW_NOSCAN:
                                case KW_NOVALIDATE:
                                case KW_NULLS:
                                case KW_OFFSET:
                                case KW_OPERATOR:
                                case KW_OPTIMIZE:
                                case KW_OPTION:
                                case KW_OUTPUTDRIVER:
                                case KW_OUTPUTFORMAT:
                                case KW_OVERWRITE:
                                case KW_OWNER:
                                case KW_PARTITIONED:
                                case KW_PARTITIONS:
                                case KW_PATH:
                                case KW_PLAN:
                                case KW_PLANS:
                                case KW_PLUS:
                                case KW_PRINCIPALS:
                                case KW_PURGE:
                                case KW_QUARTER:
                                case KW_QUERY:
                                case KW_QUERY_PARALLELISM:
                                case KW_READ:
                                case KW_REBUILD:
                                case KW_RECORDREADER:
                                case KW_RECORDWRITER:
                                case KW_RELOAD:
                                case KW_RELY:
                                case KW_REMOTE:
                                case KW_RENAME:
                                case KW_REOPTIMIZATION:
                                case KW_REPAIR:
                                case KW_REPL:
                                case KW_REPLACE:
                                case KW_REPLICATION:
                                case KW_RESOURCE:
                                case KW_RESPECT:
                                case KW_RESTRICT:
                                case KW_RETAIN:
                                case KW_RETENTION:
                                case KW_REWRITE:
                                case KW_ROLE:
                                case KW_ROLES:
                                case KW_SCHEDULED:
                                case KW_SCHEDULING_POLICY:
                                case KW_SCHEMA:
                                case KW_SCHEMAS:
                                case KW_SECOND:
                                case KW_SEMI:
                                case KW_SERDE:
                                case KW_SERDEPROPERTIES:
                                case KW_SERVER:
                                case KW_SETS:
                                case KW_SET_CURRENT_SNAPSHOT:
                                case KW_SHARED:
                                case KW_SHOW:
                                case KW_SHOW_DATABASE:
                                case KW_SKEWED:
                                case KW_SNAPSHOT:
                                case KW_SNAPSHOTS:
                                case KW_SORT:
                                case KW_SORTED:
                                case KW_SPEC:
                                case KW_SSL:
                                case KW_STATISTICS:
                                case KW_STORED:
                                case KW_STREAMTABLE:
                                case KW_STRING:
                                case KW_STRUCT:
                                case KW_SUMMARY:
                                case KW_SYSTEM_TIME:
                                case KW_SYSTEM_VERSION:
                                case KW_TABLES:
                                case KW_TAG:
                                case KW_TBLPROPERTIES:
                                case KW_TEMPORARY:
                                case KW_TERMINATED:
                                case KW_TINYINT:
                                case KW_TOUCH:
                                case KW_TRANSACTION:
                                case KW_TRANSACTIONAL:
                                case KW_TRANSACTIONS:
                                case KW_TRIM:
                                case KW_UNARCHIVE:
                                case KW_UNDO:
                                case KW_UNIONTYPE:
                                case KW_UNKNOWN:
                                case KW_UNLOCK:
                                case KW_UNMANAGED:
                                case KW_UNSET:
                                case KW_UNSIGNED:
                                case KW_URI:
                                case KW_URL:
                                case KW_USE:
                                case KW_UTC:
                                case KW_UTCTIMESTAMP:
                                case KW_VALIDATE:
                                case KW_VALUE_TYPE:
                                case KW_VECTORIZATION:
                                case KW_VIEW:
                                case KW_VIEWS:
                                case KW_WAIT:
                                case KW_WEEK:
                                case KW_WHILE:
                                case KW_WITHIN:
                                case KW_WORK:
                                case KW_WORKLOAD:
                                case KW_WRITE:
                                case KW_YEAR:
                                case KW_ZONE:
                                case KW_BATCH:
                                case KW_DAYOFWEEK:
                                case KW_HOLD_DDLTIME:
                                case KW_NO_DROP:
                                case KW_OFFLINE:
                                case KW_PROTECTION:
                                case KW_READONLY:
                                case KW_TIMESTAMPTZ:
                                    {
                                    alt96=1;
                                    }
                                    break;
                                case KW_POOL:
                                    {
                                    int LA96_2 = input.LA(2);

                                    if ( (LA96_2==EOF||LA96_2==DOT||LA96_2==Identifier||(LA96_2 >= KW_ABORT && LA96_2 <= KW_AFTER)||LA96_2==KW_ALLOC_FRACTION||LA96_2==KW_ANALYZE||LA96_2==KW_ARCHIVE||(LA96_2 >= KW_ASC && LA96_2 <= KW_AT)||(LA96_2 >= KW_AUTOCOMMIT && LA96_2 <= KW_BEFORE)||(LA96_2 >= KW_BRANCH && LA96_2 <= KW_BUCKETS)||(LA96_2 >= KW_CACHE && LA96_2 <= KW_CASCADE)||(LA96_2 >= KW_CBO && LA96_2 <= KW_CHANGE)||LA96_2==KW_CHECK||(LA96_2 >= KW_CLUSTER && LA96_2 <= KW_COLLECTION)||(LA96_2 >= KW_COLUMNS && LA96_2 <= KW_COMMENT)||(LA96_2 >= KW_COMPACT && LA96_2 <= KW_COMPACTIONS)||(LA96_2 >= KW_COMPUTE && LA96_2 <= KW_CONCATENATE)||LA96_2==KW_CONTINUE||LA96_2==KW_COST||LA96_2==KW_CRON||LA96_2==KW_DATA||LA96_2==KW_DATABASES||(LA96_2 >= KW_DATETIME && LA96_2 <= KW_DCPROPERTIES)||LA96_2==KW_DEBUG||(LA96_2 >= KW_DEFAULT && LA96_2 <= KW_DEFINED)||(LA96_2 >= KW_DELIMITED && LA96_2 <= KW_DESC)||(LA96_2 >= KW_DETAIL && LA96_2 <= KW_DISABLE)||(LA96_2 >= KW_DISTRIBUTE && LA96_2 <= KW_DO)||LA96_2==KW_DOW||(LA96_2 >= KW_DUMP && LA96_2 <= KW_ELEM_TYPE)||LA96_2==KW_ENABLE||(LA96_2 >= KW_ENFORCED && LA96_2 <= KW_EVERY)||(LA96_2 >= KW_EXCLUSIVE && LA96_2 <= KW_EXECUTED)||(LA96_2 >= KW_EXPIRE_SNAPSHOTS && LA96_2 <= KW_EXPRESSION)||LA96_2==KW_FAST_FORWARD||(LA96_2 >= KW_FIELDS && LA96_2 <= KW_FIRST)||(LA96_2 >= KW_FORMAT && LA96_2 <= KW_FORMATTED)||LA96_2==KW_FUNCTIONS||(LA96_2 >= KW_HOUR && LA96_2 <= KW_IDXPROPERTIES)||LA96_2==KW_IGNORE||(LA96_2 >= KW_INDEX && LA96_2 <= KW_INDEXES)||(LA96_2 >= KW_INPATH && LA96_2 <= KW_INPUTFORMAT)||(LA96_2 >= KW_ISOLATION && LA96_2 <= KW_JAR)||(LA96_2 >= KW_JOINCOST && LA96_2 <= KW_LAST)||LA96_2==KW_LEVEL||(LA96_2 >= KW_LIMIT && LA96_2 <= KW_LOAD)||(LA96_2 >= KW_LOCATION && LA96_2 <= KW_LONG)||(LA96_2 >= KW_MANAGED && LA96_2 <= KW_MANAGEMENT)||(LA96_2 >= KW_MAPJOIN && LA96_2 <= KW_MATERIALIZED)||LA96_2==KW_METADATA||(LA96_2 >= KW_MINUTE && LA96_2 <= KW_MONTH)||(LA96_2 >= KW_MOVE && LA96_2 <= KW_MSCK)||(LA96_2 >= KW_NORELY && LA96_2 <= KW_NOSCAN)||LA96_2==KW_NOVALIDATE||LA96_2==KW_NULLS||LA96_2==KW_OFFSET||(LA96_2 >= KW_OPERATOR && LA96_2 <= KW_OPTION)||LA96_2==KW_ORDER||(LA96_2 >= KW_OUTPUTDRIVER && LA96_2 <= KW_OUTPUTFORMAT)||(LA96_2 >= KW_OVERWRITE && LA96_2 <= KW_PATH)||(LA96_2 >= KW_PLAN && LA96_2 <= KW_POOL)||LA96_2==KW_PRINCIPALS||LA96_2==KW_PURGE||(LA96_2 >= KW_QUARTER && LA96_2 <= KW_QUERY_PARALLELISM)||LA96_2==KW_READ||(LA96_2 >= KW_REBUILD && LA96_2 <= KW_RECORDWRITER)||(LA96_2 >= KW_RELOAD && LA96_2 <= KW_RETENTION)||LA96_2==KW_REWRITE||(LA96_2 >= KW_ROLE && LA96_2 <= KW_ROLES)||(LA96_2 >= KW_SCHEDULED && LA96_2 <= KW_SECOND)||(LA96_2 >= KW_SEMI && LA96_2 <= KW_SERVER)||(LA96_2 >= KW_SETS && LA96_2 <= KW_SKEWED)||(LA96_2 >= KW_SNAPSHOT && LA96_2 <= KW_SNAPSHOTS)||(LA96_2 >= KW_SORT && LA96_2 <= KW_SSL)||(LA96_2 >= KW_STATISTICS && LA96_2 <= KW_SUMMARY)||(LA96_2 >= KW_SYSTEM_TIME && LA96_2 <= KW_SYSTEM_VERSION)||LA96_2==KW_TABLES||(LA96_2 >= KW_TAG && LA96_2 <= KW_TERMINATED)||LA96_2==KW_TINYINT||LA96_2==KW_TOUCH||(LA96_2 >= KW_TRANSACTION && LA96_2 <= KW_TRANSACTIONS)||LA96_2==KW_TRIM||(LA96_2 >= KW_TYPE && LA96_2 <= KW_UNARCHIVE)||LA96_2==KW_UNDO||LA96_2==KW_UNIONTYPE||(LA96_2 >= KW_UNKNOWN && LA96_2 <= KW_UNSIGNED)||(LA96_2 >= KW_URI && LA96_2 <= KW_USE)||(LA96_2 >= KW_UTC && LA96_2 <= KW_VALIDATE)||LA96_2==KW_VALUE_TYPE||(LA96_2 >= KW_VECTORIZATION && LA96_2 <= KW_WEEK)||LA96_2==KW_WHILE||(LA96_2 >= KW_WITHIN && LA96_2 <= KW_ZONE)||LA96_2==KW_BATCH||LA96_2==KW_DAYOFWEEK||LA96_2==KW_HOLD_DDLTIME||LA96_2==KW_NO_DROP||LA96_2==KW_OFFLINE||LA96_2==KW_PROTECTION||LA96_2==KW_READONLY||LA96_2==KW_TIMESTAMPTZ) ) {
                                        alt96=1;
                                    }
                                    }
                                    break;
                                case KW_TYPE:
                                    {
                                    int LA96_3 = input.LA(2);

                                    if ( (LA96_3==EOF||LA96_3==DOT||LA96_3==Identifier||(LA96_3 >= KW_ABORT && LA96_3 <= KW_AFTER)||LA96_3==KW_ALLOC_FRACTION||LA96_3==KW_ANALYZE||LA96_3==KW_ARCHIVE||(LA96_3 >= KW_ASC && LA96_3 <= KW_AT)||(LA96_3 >= KW_AUTOCOMMIT && LA96_3 <= KW_BEFORE)||(LA96_3 >= KW_BRANCH && LA96_3 <= KW_BUCKETS)||(LA96_3 >= KW_CACHE && LA96_3 <= KW_CASCADE)||(LA96_3 >= KW_CBO && LA96_3 <= KW_CHANGE)||LA96_3==KW_CHECK||(LA96_3 >= KW_CLUSTER && LA96_3 <= KW_COLLECTION)||(LA96_3 >= KW_COLUMNS && LA96_3 <= KW_COMMENT)||(LA96_3 >= KW_COMPACT && LA96_3 <= KW_COMPACTIONS)||(LA96_3 >= KW_COMPUTE && LA96_3 <= KW_CONCATENATE)||LA96_3==KW_CONTINUE||LA96_3==KW_COST||LA96_3==KW_CRON||LA96_3==KW_DATA||LA96_3==KW_DATABASES||(LA96_3 >= KW_DATETIME && LA96_3 <= KW_DCPROPERTIES)||LA96_3==KW_DEBUG||(LA96_3 >= KW_DEFAULT && LA96_3 <= KW_DEFINED)||(LA96_3 >= KW_DELIMITED && LA96_3 <= KW_DESC)||(LA96_3 >= KW_DETAIL && LA96_3 <= KW_DISABLE)||(LA96_3 >= KW_DISTRIBUTE && LA96_3 <= KW_DO)||LA96_3==KW_DOW||(LA96_3 >= KW_DUMP && LA96_3 <= KW_ELEM_TYPE)||LA96_3==KW_ENABLE||(LA96_3 >= KW_ENFORCED && LA96_3 <= KW_EVERY)||(LA96_3 >= KW_EXCLUSIVE && LA96_3 <= KW_EXECUTED)||(LA96_3 >= KW_EXPIRE_SNAPSHOTS && LA96_3 <= KW_EXPRESSION)||LA96_3==KW_FAST_FORWARD||(LA96_3 >= KW_FIELDS && LA96_3 <= KW_FIRST)||(LA96_3 >= KW_FORMAT && LA96_3 <= KW_FORMATTED)||LA96_3==KW_FUNCTIONS||(LA96_3 >= KW_HOUR && LA96_3 <= KW_IDXPROPERTIES)||LA96_3==KW_IGNORE||(LA96_3 >= KW_INDEX && LA96_3 <= KW_INDEXES)||(LA96_3 >= KW_INPATH && LA96_3 <= KW_INPUTFORMAT)||(LA96_3 >= KW_ISOLATION && LA96_3 <= KW_JAR)||(LA96_3 >= KW_JOINCOST && LA96_3 <= KW_LAST)||LA96_3==KW_LEVEL||(LA96_3 >= KW_LIMIT && LA96_3 <= KW_LOAD)||(LA96_3 >= KW_LOCATION && LA96_3 <= KW_LONG)||(LA96_3 >= KW_MANAGED && LA96_3 <= KW_MANAGEMENT)||(LA96_3 >= KW_MAPJOIN && LA96_3 <= KW_MATERIALIZED)||LA96_3==KW_METADATA||(LA96_3 >= KW_MINUTE && LA96_3 <= KW_MONTH)||(LA96_3 >= KW_MOVE && LA96_3 <= KW_MSCK)||(LA96_3 >= KW_NORELY && LA96_3 <= KW_NOSCAN)||LA96_3==KW_NOVALIDATE||LA96_3==KW_NULLS||LA96_3==KW_OFFSET||(LA96_3 >= KW_OPERATOR && LA96_3 <= KW_OPTION)||LA96_3==KW_ORDER||(LA96_3 >= KW_OUTPUTDRIVER && LA96_3 <= KW_OUTPUTFORMAT)||(LA96_3 >= KW_OVERWRITE && LA96_3 <= KW_PATH)||(LA96_3 >= KW_PLAN && LA96_3 <= KW_POOL)||LA96_3==KW_PRINCIPALS||LA96_3==KW_PURGE||(LA96_3 >= KW_QUARTER && LA96_3 <= KW_QUERY_PARALLELISM)||LA96_3==KW_READ||(LA96_3 >= KW_REBUILD && LA96_3 <= KW_RECORDWRITER)||(LA96_3 >= KW_RELOAD && LA96_3 <= KW_RETENTION)||LA96_3==KW_REWRITE||(LA96_3 >= KW_ROLE && LA96_3 <= KW_ROLES)||(LA96_3 >= KW_SCHEDULED && LA96_3 <= KW_SECOND)||(LA96_3 >= KW_SEMI && LA96_3 <= KW_SERVER)||(LA96_3 >= KW_SETS && LA96_3 <= KW_SKEWED)||(LA96_3 >= KW_SNAPSHOT && LA96_3 <= KW_SNAPSHOTS)||(LA96_3 >= KW_SORT && LA96_3 <= KW_SSL)||(LA96_3 >= KW_STATISTICS && LA96_3 <= KW_SUMMARY)||(LA96_3 >= KW_SYSTEM_TIME && LA96_3 <= KW_SYSTEM_VERSION)||LA96_3==KW_TABLES||(LA96_3 >= KW_TAG && LA96_3 <= KW_TERMINATED)||LA96_3==KW_TINYINT||LA96_3==KW_TOUCH||(LA96_3 >= KW_TRANSACTION && LA96_3 <= KW_TRANSACTIONS)||LA96_3==KW_TRIM||(LA96_3 >= KW_TYPE && LA96_3 <= KW_UNARCHIVE)||LA96_3==KW_UNDO||LA96_3==KW_UNIONTYPE||(LA96_3 >= KW_UNKNOWN && LA96_3 <= KW_UNSIGNED)||(LA96_3 >= KW_URI && LA96_3 <= KW_USE)||(LA96_3 >= KW_UTC && LA96_3 <= KW_VALIDATE)||LA96_3==KW_VALUE_TYPE||(LA96_3 >= KW_VECTORIZATION && LA96_3 <= KW_WEEK)||LA96_3==KW_WHILE||(LA96_3 >= KW_WITHIN && LA96_3 <= KW_ZONE)||LA96_3==KW_BATCH||LA96_3==KW_DAYOFWEEK||LA96_3==KW_HOLD_DDLTIME||LA96_3==KW_NO_DROP||LA96_3==KW_OFFLINE||LA96_3==KW_PROTECTION||LA96_3==KW_READONLY||LA96_3==KW_TIMESTAMPTZ) ) {
                                        alt96=1;
                                    }
                                    }
                                    break;
                                case KW_STATUS:
                                    {
                                    int LA96_4 = input.LA(2);

                                    if ( (LA96_4==EOF||LA96_4==DOT||LA96_4==Identifier||(LA96_4 >= KW_ABORT && LA96_4 <= KW_AFTER)||LA96_4==KW_ALLOC_FRACTION||LA96_4==KW_ANALYZE||LA96_4==KW_ARCHIVE||(LA96_4 >= KW_ASC && LA96_4 <= KW_AT)||(LA96_4 >= KW_AUTOCOMMIT && LA96_4 <= KW_BEFORE)||(LA96_4 >= KW_BRANCH && LA96_4 <= KW_BUCKETS)||(LA96_4 >= KW_CACHE && LA96_4 <= KW_CASCADE)||(LA96_4 >= KW_CBO && LA96_4 <= KW_CHANGE)||LA96_4==KW_CHECK||(LA96_4 >= KW_CLUSTER && LA96_4 <= KW_COLLECTION)||(LA96_4 >= KW_COLUMNS && LA96_4 <= KW_COMMENT)||(LA96_4 >= KW_COMPACT && LA96_4 <= KW_COMPACTIONS)||(LA96_4 >= KW_COMPUTE && LA96_4 <= KW_CONCATENATE)||LA96_4==KW_CONTINUE||LA96_4==KW_COST||LA96_4==KW_CRON||LA96_4==KW_DATA||LA96_4==KW_DATABASES||(LA96_4 >= KW_DATETIME && LA96_4 <= KW_DCPROPERTIES)||LA96_4==KW_DEBUG||(LA96_4 >= KW_DEFAULT && LA96_4 <= KW_DEFINED)||(LA96_4 >= KW_DELIMITED && LA96_4 <= KW_DESC)||(LA96_4 >= KW_DETAIL && LA96_4 <= KW_DISABLE)||(LA96_4 >= KW_DISTRIBUTE && LA96_4 <= KW_DO)||LA96_4==KW_DOW||(LA96_4 >= KW_DUMP && LA96_4 <= KW_ELEM_TYPE)||LA96_4==KW_ENABLE||(LA96_4 >= KW_ENFORCED && LA96_4 <= KW_EVERY)||(LA96_4 >= KW_EXCLUSIVE && LA96_4 <= KW_EXECUTED)||(LA96_4 >= KW_EXPIRE_SNAPSHOTS && LA96_4 <= KW_EXPRESSION)||LA96_4==KW_FAST_FORWARD||(LA96_4 >= KW_FIELDS && LA96_4 <= KW_FIRST)||(LA96_4 >= KW_FORMAT && LA96_4 <= KW_FORMATTED)||LA96_4==KW_FUNCTIONS||(LA96_4 >= KW_HOUR && LA96_4 <= KW_IDXPROPERTIES)||LA96_4==KW_IGNORE||(LA96_4 >= KW_INDEX && LA96_4 <= KW_INDEXES)||(LA96_4 >= KW_INPATH && LA96_4 <= KW_INPUTFORMAT)||(LA96_4 >= KW_ISOLATION && LA96_4 <= KW_JAR)||(LA96_4 >= KW_JOINCOST && LA96_4 <= KW_LAST)||LA96_4==KW_LEVEL||(LA96_4 >= KW_LIMIT && LA96_4 <= KW_LOAD)||(LA96_4 >= KW_LOCATION && LA96_4 <= KW_LONG)||(LA96_4 >= KW_MANAGED && LA96_4 <= KW_MANAGEMENT)||(LA96_4 >= KW_MAPJOIN && LA96_4 <= KW_MATERIALIZED)||LA96_4==KW_METADATA||(LA96_4 >= KW_MINUTE && LA96_4 <= KW_MONTH)||(LA96_4 >= KW_MOVE && LA96_4 <= KW_MSCK)||(LA96_4 >= KW_NORELY && LA96_4 <= KW_NOSCAN)||LA96_4==KW_NOVALIDATE||LA96_4==KW_NULLS||LA96_4==KW_OFFSET||(LA96_4 >= KW_OPERATOR && LA96_4 <= KW_OPTION)||LA96_4==KW_ORDER||(LA96_4 >= KW_OUTPUTDRIVER && LA96_4 <= KW_OUTPUTFORMAT)||(LA96_4 >= KW_OVERWRITE && LA96_4 <= KW_PATH)||(LA96_4 >= KW_PLAN && LA96_4 <= KW_POOL)||LA96_4==KW_PRINCIPALS||LA96_4==KW_PURGE||(LA96_4 >= KW_QUARTER && LA96_4 <= KW_QUERY_PARALLELISM)||LA96_4==KW_READ||(LA96_4 >= KW_REBUILD && LA96_4 <= KW_RECORDWRITER)||(LA96_4 >= KW_RELOAD && LA96_4 <= KW_RETENTION)||LA96_4==KW_REWRITE||(LA96_4 >= KW_ROLE && LA96_4 <= KW_ROLES)||(LA96_4 >= KW_SCHEDULED && LA96_4 <= KW_SECOND)||(LA96_4 >= KW_SEMI && LA96_4 <= KW_SERVER)||(LA96_4 >= KW_SETS && LA96_4 <= KW_SKEWED)||(LA96_4 >= KW_SNAPSHOT && LA96_4 <= KW_SNAPSHOTS)||(LA96_4 >= KW_SORT && LA96_4 <= KW_SSL)||(LA96_4 >= KW_STATISTICS && LA96_4 <= KW_SUMMARY)||(LA96_4 >= KW_SYSTEM_TIME && LA96_4 <= KW_SYSTEM_VERSION)||LA96_4==KW_TABLES||(LA96_4 >= KW_TAG && LA96_4 <= KW_TERMINATED)||LA96_4==KW_TINYINT||LA96_4==KW_TOUCH||(LA96_4 >= KW_TRANSACTION && LA96_4 <= KW_TRANSACTIONS)||LA96_4==KW_TRIM||(LA96_4 >= KW_TYPE && LA96_4 <= KW_UNARCHIVE)||LA96_4==KW_UNDO||LA96_4==KW_UNIONTYPE||(LA96_4 >= KW_UNKNOWN && LA96_4 <= KW_UNSIGNED)||(LA96_4 >= KW_URI && LA96_4 <= KW_USE)||(LA96_4 >= KW_UTC && LA96_4 <= KW_VALIDATE)||LA96_4==KW_VALUE_TYPE||(LA96_4 >= KW_VECTORIZATION && LA96_4 <= KW_WEEK)||LA96_4==KW_WHILE||(LA96_4 >= KW_WITHIN && LA96_4 <= KW_ZONE)||LA96_4==KW_BATCH||LA96_4==KW_DAYOFWEEK||LA96_4==KW_HOLD_DDLTIME||LA96_4==KW_NO_DROP||LA96_4==KW_OFFLINE||LA96_4==KW_PROTECTION||LA96_4==KW_READONLY||LA96_4==KW_TIMESTAMPTZ) ) {
                                        alt96=1;
                                    }
                                    }
                                    break;
                                case KW_LIMIT:
                                    {
                                    int LA96_5 = input.LA(2);

                                    if ( (LA96_5==EOF||LA96_5==DOT||LA96_5==Identifier||(LA96_5 >= KW_ABORT && LA96_5 <= KW_AFTER)||LA96_5==KW_ALLOC_FRACTION||LA96_5==KW_ANALYZE||LA96_5==KW_ARCHIVE||(LA96_5 >= KW_ASC && LA96_5 <= KW_AT)||(LA96_5 >= KW_AUTOCOMMIT && LA96_5 <= KW_BEFORE)||(LA96_5 >= KW_BRANCH && LA96_5 <= KW_BUCKETS)||(LA96_5 >= KW_CACHE && LA96_5 <= KW_CASCADE)||(LA96_5 >= KW_CBO && LA96_5 <= KW_CHANGE)||LA96_5==KW_CHECK||(LA96_5 >= KW_CLUSTER && LA96_5 <= KW_COLLECTION)||(LA96_5 >= KW_COLUMNS && LA96_5 <= KW_COMMENT)||(LA96_5 >= KW_COMPACT && LA96_5 <= KW_COMPACTIONS)||(LA96_5 >= KW_COMPUTE && LA96_5 <= KW_CONCATENATE)||LA96_5==KW_CONTINUE||LA96_5==KW_COST||LA96_5==KW_CRON||LA96_5==KW_DATA||LA96_5==KW_DATABASES||(LA96_5 >= KW_DATETIME && LA96_5 <= KW_DCPROPERTIES)||LA96_5==KW_DEBUG||(LA96_5 >= KW_DEFAULT && LA96_5 <= KW_DEFINED)||(LA96_5 >= KW_DELIMITED && LA96_5 <= KW_DESC)||(LA96_5 >= KW_DETAIL && LA96_5 <= KW_DISABLE)||(LA96_5 >= KW_DISTRIBUTE && LA96_5 <= KW_DO)||LA96_5==KW_DOW||(LA96_5 >= KW_DUMP && LA96_5 <= KW_ELEM_TYPE)||LA96_5==KW_ENABLE||(LA96_5 >= KW_ENFORCED && LA96_5 <= KW_EVERY)||(LA96_5 >= KW_EXCLUSIVE && LA96_5 <= KW_EXECUTED)||(LA96_5 >= KW_EXPIRE_SNAPSHOTS && LA96_5 <= KW_EXPRESSION)||LA96_5==KW_FAST_FORWARD||(LA96_5 >= KW_FIELDS && LA96_5 <= KW_FIRST)||(LA96_5 >= KW_FORMAT && LA96_5 <= KW_FORMATTED)||LA96_5==KW_FUNCTIONS||(LA96_5 >= KW_HOUR && LA96_5 <= KW_IDXPROPERTIES)||LA96_5==KW_IGNORE||(LA96_5 >= KW_INDEX && LA96_5 <= KW_INDEXES)||(LA96_5 >= KW_INPATH && LA96_5 <= KW_INPUTFORMAT)||(LA96_5 >= KW_ISOLATION && LA96_5 <= KW_JAR)||(LA96_5 >= KW_JOINCOST && LA96_5 <= KW_LAST)||LA96_5==KW_LEVEL||(LA96_5 >= KW_LIMIT && LA96_5 <= KW_LOAD)||(LA96_5 >= KW_LOCATION && LA96_5 <= KW_LONG)||(LA96_5 >= KW_MANAGED && LA96_5 <= KW_MANAGEMENT)||(LA96_5 >= KW_MAPJOIN && LA96_5 <= KW_MATERIALIZED)||LA96_5==KW_METADATA||(LA96_5 >= KW_MINUTE && LA96_5 <= KW_MONTH)||(LA96_5 >= KW_MOVE && LA96_5 <= KW_MSCK)||(LA96_5 >= KW_NORELY && LA96_5 <= KW_NOSCAN)||LA96_5==KW_NOVALIDATE||LA96_5==KW_NULLS||LA96_5==KW_OFFSET||(LA96_5 >= KW_OPERATOR && LA96_5 <= KW_OPTION)||LA96_5==KW_ORDER||(LA96_5 >= KW_OUTPUTDRIVER && LA96_5 <= KW_OUTPUTFORMAT)||(LA96_5 >= KW_OVERWRITE && LA96_5 <= KW_PATH)||(LA96_5 >= KW_PLAN && LA96_5 <= KW_POOL)||LA96_5==KW_PRINCIPALS||LA96_5==KW_PURGE||(LA96_5 >= KW_QUARTER && LA96_5 <= KW_QUERY_PARALLELISM)||LA96_5==KW_READ||(LA96_5 >= KW_REBUILD && LA96_5 <= KW_RECORDWRITER)||(LA96_5 >= KW_RELOAD && LA96_5 <= KW_RETENTION)||LA96_5==KW_REWRITE||(LA96_5 >= KW_ROLE && LA96_5 <= KW_ROLES)||(LA96_5 >= KW_SCHEDULED && LA96_5 <= KW_SECOND)||(LA96_5 >= KW_SEMI && LA96_5 <= KW_SERVER)||(LA96_5 >= KW_SETS && LA96_5 <= KW_SKEWED)||(LA96_5 >= KW_SNAPSHOT && LA96_5 <= KW_SNAPSHOTS)||(LA96_5 >= KW_SORT && LA96_5 <= KW_SSL)||(LA96_5 >= KW_STATISTICS && LA96_5 <= KW_SUMMARY)||(LA96_5 >= KW_SYSTEM_TIME && LA96_5 <= KW_SYSTEM_VERSION)||LA96_5==KW_TABLES||(LA96_5 >= KW_TAG && LA96_5 <= KW_TERMINATED)||LA96_5==KW_TINYINT||LA96_5==KW_TOUCH||(LA96_5 >= KW_TRANSACTION && LA96_5 <= KW_TRANSACTIONS)||LA96_5==KW_TRIM||(LA96_5 >= KW_TYPE && LA96_5 <= KW_UNARCHIVE)||LA96_5==KW_UNDO||LA96_5==KW_UNIONTYPE||(LA96_5 >= KW_UNKNOWN && LA96_5 <= KW_UNSIGNED)||(LA96_5 >= KW_URI && LA96_5 <= KW_USE)||(LA96_5 >= KW_UTC && LA96_5 <= KW_VALIDATE)||LA96_5==KW_VALUE_TYPE||(LA96_5 >= KW_VECTORIZATION && LA96_5 <= KW_WEEK)||LA96_5==KW_WHILE||(LA96_5 >= KW_WITHIN && LA96_5 <= KW_ZONE)||LA96_5==KW_BATCH||LA96_5==KW_DAYOFWEEK||LA96_5==KW_HOLD_DDLTIME||LA96_5==KW_NO_DROP||LA96_5==KW_OFFLINE||LA96_5==KW_PROTECTION||LA96_5==KW_READONLY||LA96_5==KW_TIMESTAMPTZ) ) {
                                        alt96=1;
                                    }
                                    }
                                    break;
                            }

                            switch (alt96) {
                                case 1 :
                                    // HiveParser.g:1296:8: parttype= partTypeExpr
                                    {
                                    pushFollow(FOLLOW_partTypeExpr_in_showStatement5271);
                                    parttype=partTypeExpr();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_partTypeExpr.add(parttype.getTree());

                                    }
                                    break;

                            }


                            // HiveParser.g:1296:32: ( compactionPool )?
                            int alt97=2;
                            int LA97_0 = input.LA(1);

                            if ( (LA97_0==KW_POOL) ) {
                                alt97=1;
                            }
                            switch (alt97) {
                                case 1 :
                                    // HiveParser.g:1296:32: compactionPool
                                    {
                                    pushFollow(FOLLOW_compactionPool_in_showStatement5275);
                                    compactionPool281=compactionPool();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_compactionPool.add(compactionPool281.getTree());

                                    }
                                    break;

                            }


                            // HiveParser.g:1296:48: ( compactionType )?
                            int alt98=2;
                            int LA98_0 = input.LA(1);

                            if ( (LA98_0==KW_TYPE) ) {
                                alt98=1;
                            }
                            switch (alt98) {
                                case 1 :
                                    // HiveParser.g:1296:48: compactionType
                                    {
                                    pushFollow(FOLLOW_compactionType_in_showStatement5278);
                                    compactionType282=compactionType();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_compactionType.add(compactionType282.getTree());

                                    }
                                    break;

                            }


                            // HiveParser.g:1296:64: ( compactionStatus )?
                            int alt99=2;
                            int LA99_0 = input.LA(1);

                            if ( (LA99_0==KW_STATUS) ) {
                                alt99=1;
                            }
                            switch (alt99) {
                                case 1 :
                                    // HiveParser.g:1296:64: compactionStatus
                                    {
                                    pushFollow(FOLLOW_compactionStatus_in_showStatement5281);
                                    compactionStatus283=compactionStatus();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_compactionStatus.add(compactionStatus283.getTree());

                                    }
                                    break;

                            }


                            // HiveParser.g:1296:82: ( orderByClause )?
                            int alt100=2;
                            int LA100_0 = input.LA(1);

                            if ( (LA100_0==KW_ORDER) ) {
                                alt100=1;
                            }
                            switch (alt100) {
                                case 1 :
                                    // HiveParser.g:1296:82: orderByClause
                                    {
                                    pushFollow(FOLLOW_orderByClause_in_showStatement5284);
                                    orderByClause284=orderByClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_orderByClause.add(orderByClause284.getTree());

                                    }
                                    break;

                            }


                            // HiveParser.g:1296:97: ( limitClause )?
                            int alt101=2;
                            int LA101_0 = input.LA(1);

                            if ( (LA101_0==KW_LIMIT) ) {
                                alt101=1;
                            }
                            switch (alt101) {
                                case 1 :
                                    // HiveParser.g:1296:97: limitClause
                                    {
                                    pushFollow(FOLLOW_limitClause_in_showStatement5287);
                                    limitClause285=limitClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_limitClause.add(limitClause285.getTree());

                                    }
                                    break;

                            }


                            // AST REWRITE
                            // elements: parttype, compactionStatus, limitClause, compactionPool, orderByClause, compactionType
                            // token labels: 
                            // rule labels: parttype, retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.tree:null);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (ASTNode)adaptor.nil();
                            // 1296:110: -> ^( TOK_SHOW_COMPACTIONS ( $parttype)? ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? )
                            {
                                // HiveParser.g:1296:113: ^( TOK_SHOW_COMPACTIONS ( $parttype)? ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? )
                                {
                                ASTNode root_1 = (ASTNode)adaptor.nil();
                                root_1 = (ASTNode)adaptor.becomeRoot(
                                (ASTNode)adaptor.create(TOK_SHOW_COMPACTIONS, "TOK_SHOW_COMPACTIONS")
                                , root_1);

                                // HiveParser.g:1296:137: ( $parttype)?
                                if ( stream_parttype.hasNext() ) {
                                    adaptor.addChild(root_1, stream_parttype.nextTree());

                                }
                                stream_parttype.reset();

                                // HiveParser.g:1296:147: ( compactionPool )?
                                if ( stream_compactionPool.hasNext() ) {
                                    adaptor.addChild(root_1, stream_compactionPool.nextTree());

                                }
                                stream_compactionPool.reset();

                                // HiveParser.g:1296:163: ( compactionType )?
                                if ( stream_compactionType.hasNext() ) {
                                    adaptor.addChild(root_1, stream_compactionType.nextTree());

                                }
                                stream_compactionType.reset();

                                // HiveParser.g:1296:179: ( compactionStatus )?
                                if ( stream_compactionStatus.hasNext() ) {
                                    adaptor.addChild(root_1, stream_compactionStatus.nextTree());

                                }
                                stream_compactionStatus.reset();

                                // HiveParser.g:1296:197: ( orderByClause )?
                                if ( stream_orderByClause.hasNext() ) {
                                    adaptor.addChild(root_1, stream_orderByClause.nextTree());

                                }
                                stream_orderByClause.reset();

                                // HiveParser.g:1296:212: ( limitClause )?
                                if ( stream_limitClause.hasNext() ) {
                                    adaptor.addChild(root_1, stream_limitClause.nextTree());

                                }
                                stream_limitClause.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 13 :
                    // HiveParser.g:1298:7: KW_SHOW KW_TRANSACTIONS
                    {
                    KW_SHOW286=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5329); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW286);


                    KW_TRANSACTIONS287=(Token)match(input,KW_TRANSACTIONS,FOLLOW_KW_TRANSACTIONS_in_showStatement5331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TRANSACTIONS.add(KW_TRANSACTIONS287);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1298:31: -> ^( TOK_SHOW_TRANSACTIONS )
                    {
                        // HiveParser.g:1298:34: ^( TOK_SHOW_TRANSACTIONS )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SHOW_TRANSACTIONS, "TOK_SHOW_TRANSACTIONS")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 14 :
                    // HiveParser.g:1299:7: KW_SHOW KW_CONF StringLiteral
                    {
                    KW_SHOW288=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW288);


                    KW_CONF289=(Token)match(input,KW_CONF,FOLLOW_KW_CONF_in_showStatement5347); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CONF.add(KW_CONF289);


                    StringLiteral290=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStatement5349); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral290);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1299:37: -> ^( TOK_SHOWCONF StringLiteral )
                    {
                        // HiveParser.g:1299:40: ^( TOK_SHOWCONF StringLiteral )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SHOWCONF, "TOK_SHOWCONF")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_StringLiteral.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 15 :
                    // HiveParser.g:1300:7: KW_SHOW KW_RESOURCE ( ( KW_PLAN rp_name= identifier -> ^( TOK_SHOW_RP $rp_name) ) | ( KW_PLANS -> ^( TOK_SHOW_RP ) ) )
                    {
                    KW_SHOW291=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW291);


                    KW_RESOURCE292=(Token)match(input,KW_RESOURCE,FOLLOW_KW_RESOURCE_in_showStatement5367); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_RESOURCE.add(KW_RESOURCE292);


                    // HiveParser.g:1301:7: ( ( KW_PLAN rp_name= identifier -> ^( TOK_SHOW_RP $rp_name) ) | ( KW_PLANS -> ^( TOK_SHOW_RP ) ) )
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==KW_PLAN) ) {
                        alt103=1;
                    }
                    else if ( (LA103_0==KW_PLANS) ) {
                        alt103=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 103, 0, input);

                        throw nvae;

                    }
                    switch (alt103) {
                        case 1 :
                            // HiveParser.g:1302:9: ( KW_PLAN rp_name= identifier -> ^( TOK_SHOW_RP $rp_name) )
                            {
                            // HiveParser.g:1302:9: ( KW_PLAN rp_name= identifier -> ^( TOK_SHOW_RP $rp_name) )
                            // HiveParser.g:1302:10: KW_PLAN rp_name= identifier
                            {
                            KW_PLAN293=(Token)match(input,KW_PLAN,FOLLOW_KW_PLAN_in_showStatement5386); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_PLAN.add(KW_PLAN293);


                            pushFollow(FOLLOW_identifier_in_showStatement5390);
                            rp_name=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier.add(rp_name.getTree());

                            // AST REWRITE
                            // elements: rp_name
                            // token labels: 
                            // rule labels: retval, rp_name
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_rp_name=new RewriteRuleSubtreeStream(adaptor,"rule rp_name",rp_name!=null?rp_name.tree:null);

                            root_0 = (ASTNode)adaptor.nil();
                            // 1302:37: -> ^( TOK_SHOW_RP $rp_name)
                            {
                                // HiveParser.g:1302:40: ^( TOK_SHOW_RP $rp_name)
                                {
                                ASTNode root_1 = (ASTNode)adaptor.nil();
                                root_1 = (ASTNode)adaptor.becomeRoot(
                                (ASTNode)adaptor.create(TOK_SHOW_RP, "TOK_SHOW_RP")
                                , root_1);

                                adaptor.addChild(root_1, stream_rp_name.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1303:11: ( KW_PLANS -> ^( TOK_SHOW_RP ) )
                            {
                            // HiveParser.g:1303:11: ( KW_PLANS -> ^( TOK_SHOW_RP ) )
                            // HiveParser.g:1303:12: KW_PLANS
                            {
                            KW_PLANS294=(Token)match(input,KW_PLANS,FOLLOW_KW_PLANS_in_showStatement5413); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_PLANS.add(KW_PLANS294);


                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (ASTNode)adaptor.nil();
                            // 1303:21: -> ^( TOK_SHOW_RP )
                            {
                                // HiveParser.g:1303:24: ^( TOK_SHOW_RP )
                                {
                                ASTNode root_1 = (ASTNode)adaptor.nil();
                                root_1 = (ASTNode)adaptor.becomeRoot(
                                (ASTNode)adaptor.create(TOK_SHOW_RP, "TOK_SHOW_RP")
                                , root_1);

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 16 :
                    // HiveParser.g:1305:7: KW_SHOW ( KW_DATACONNECTORS )
                    {
                    KW_SHOW295=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW295);


                    // HiveParser.g:1305:15: ( KW_DATACONNECTORS )
                    // HiveParser.g:1305:16: KW_DATACONNECTORS
                    {
                    KW_DATACONNECTORS296=(Token)match(input,KW_DATACONNECTORS,FOLLOW_KW_DATACONNECTORS_in_showStatement5439); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DATACONNECTORS.add(KW_DATACONNECTORS296);


                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1305:35: -> ^( TOK_SHOWDATACONNECTORS )
                    {
                        // HiveParser.g:1305:38: ^( TOK_SHOWDATACONNECTORS )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SHOWDATACONNECTORS, "TOK_SHOWDATACONNECTORS")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showStatement"


    public static class showTablesFilterExpr_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showTablesFilterExpr"
    // HiveParser.g:1308:1: showTablesFilterExpr : ( KW_WHERE identifier EQUAL StringLiteral -> ^( TOK_TABLE_TYPE identifier StringLiteral ) | KW_LIKE showStmtIdentifier | showStmtIdentifier -> showStmtIdentifier );
    public final HiveParser.showTablesFilterExpr_return showTablesFilterExpr() throws RecognitionException {
        HiveParser.showTablesFilterExpr_return retval = new HiveParser.showTablesFilterExpr_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_WHERE297=null;
        Token EQUAL299=null;
        Token StringLiteral300=null;
        Token KW_LIKE301=null;
        HiveParser_IdentifiersParser.identifier_return identifier298 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier302 =null;

        HiveParser.showStmtIdentifier_return showStmtIdentifier303 =null;


        ASTNode KW_WHERE297_tree=null;
        ASTNode EQUAL299_tree=null;
        ASTNode StringLiteral300_tree=null;
        ASTNode KW_LIKE301_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleTokenStream stream_KW_WHERE=new RewriteRuleTokenStream(adaptor,"token KW_WHERE");
        RewriteRuleSubtreeStream stream_showStmtIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showStmtIdentifier");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
         pushMsg("show tables filter expr", state); 
        try {
            // HiveParser.g:1311:5: ( KW_WHERE identifier EQUAL StringLiteral -> ^( TOK_TABLE_TYPE identifier StringLiteral ) | KW_LIKE showStmtIdentifier | showStmtIdentifier -> showStmtIdentifier )
            int alt105=3;
            switch ( input.LA(1) ) {
            case KW_WHERE:
                {
                alt105=1;
                }
                break;
            case KW_LIKE:
                {
                alt105=2;
                }
                break;
            case Identifier:
            case KW_ABORT:
            case KW_ACTIVATE:
            case KW_ACTIVE:
            case KW_ADD:
            case KW_ADMIN:
            case KW_AFTER:
            case KW_ALLOC_FRACTION:
            case KW_ANALYZE:
            case KW_ARCHIVE:
            case KW_ASC:
            case KW_AST:
            case KW_AT:
            case KW_AUTOCOMMIT:
            case KW_BEFORE:
            case KW_BRANCH:
            case KW_BUCKET:
            case KW_BUCKETS:
            case KW_CACHE:
            case KW_CASCADE:
            case KW_CBO:
            case KW_CHANGE:
            case KW_CHECK:
            case KW_CLUSTER:
            case KW_CLUSTERED:
            case KW_CLUSTERSTATUS:
            case KW_COLLECTION:
            case KW_COLUMNS:
            case KW_COMMENT:
            case KW_COMPACT:
            case KW_COMPACTIONS:
            case KW_COMPUTE:
            case KW_CONCATENATE:
            case KW_CONTINUE:
            case KW_COST:
            case KW_CRON:
            case KW_DATA:
            case KW_DATABASES:
            case KW_DATETIME:
            case KW_DAY:
            case KW_DBPROPERTIES:
            case KW_DCPROPERTIES:
            case KW_DEBUG:
            case KW_DEFAULT:
            case KW_DEFERRED:
            case KW_DEFINED:
            case KW_DELIMITED:
            case KW_DEPENDENCY:
            case KW_DESC:
            case KW_DETAIL:
            case KW_DIRECTORIES:
            case KW_DIRECTORY:
            case KW_DISABLE:
            case KW_DISTRIBUTE:
            case KW_DISTRIBUTED:
            case KW_DO:
            case KW_DOW:
            case KW_DUMP:
            case KW_ELEM_TYPE:
            case KW_ENABLE:
            case KW_ENFORCED:
            case KW_ESCAPED:
            case KW_EVERY:
            case KW_EXCLUSIVE:
            case KW_EXECUTE:
            case KW_EXECUTED:
            case KW_EXPIRE_SNAPSHOTS:
            case KW_EXPLAIN:
            case KW_EXPORT:
            case KW_EXPRESSION:
            case KW_FAST_FORWARD:
            case KW_FIELDS:
            case KW_FILE:
            case KW_FILEFORMAT:
            case KW_FIRST:
            case KW_FORMAT:
            case KW_FORMATTED:
            case KW_FUNCTIONS:
            case KW_HOUR:
            case KW_IDXPROPERTIES:
            case KW_IGNORE:
            case KW_INDEX:
            case KW_INDEXES:
            case KW_INPATH:
            case KW_INPUTDRIVER:
            case KW_INPUTFORMAT:
            case KW_ISOLATION:
            case KW_ITEMS:
            case KW_JAR:
            case KW_JOINCOST:
            case KW_KEY:
            case KW_KEYS:
            case KW_KEY_TYPE:
            case KW_KILL:
            case KW_LAST:
            case KW_LEVEL:
            case KW_LIMIT:
            case KW_LINES:
            case KW_LOAD:
            case KW_LOCATION:
            case KW_LOCK:
            case KW_LOCKS:
            case KW_LOGICAL:
            case KW_LONG:
            case KW_MANAGED:
            case KW_MANAGEDLOCATION:
            case KW_MANAGEMENT:
            case KW_MAPJOIN:
            case KW_MAPPING:
            case KW_MATCHED:
            case KW_MATERIALIZED:
            case KW_METADATA:
            case KW_MINUTE:
            case KW_MONTH:
            case KW_MOVE:
            case KW_MSCK:
            case KW_NORELY:
            case KW_NOSCAN:
            case KW_NOVALIDATE:
            case KW_NULLS:
            case KW_OFFSET:
            case KW_OPERATOR:
            case KW_OPTIMIZE:
            case KW_OPTION:
            case KW_OUTPUTDRIVER:
            case KW_OUTPUTFORMAT:
            case KW_OVERWRITE:
            case KW_OWNER:
            case KW_PARTITIONED:
            case KW_PARTITIONS:
            case KW_PATH:
            case KW_PLAN:
            case KW_PLANS:
            case KW_PLUS:
            case KW_POOL:
            case KW_PRINCIPALS:
            case KW_PURGE:
            case KW_QUARTER:
            case KW_QUERY:
            case KW_QUERY_PARALLELISM:
            case KW_READ:
            case KW_REBUILD:
            case KW_RECORDREADER:
            case KW_RECORDWRITER:
            case KW_RELOAD:
            case KW_RELY:
            case KW_REMOTE:
            case KW_RENAME:
            case KW_REOPTIMIZATION:
            case KW_REPAIR:
            case KW_REPL:
            case KW_REPLACE:
            case KW_REPLICATION:
            case KW_RESOURCE:
            case KW_RESPECT:
            case KW_RESTRICT:
            case KW_RETAIN:
            case KW_RETENTION:
            case KW_REWRITE:
            case KW_ROLE:
            case KW_ROLES:
            case KW_SCHEDULED:
            case KW_SCHEDULING_POLICY:
            case KW_SCHEMA:
            case KW_SCHEMAS:
            case KW_SECOND:
            case KW_SEMI:
            case KW_SERDE:
            case KW_SERDEPROPERTIES:
            case KW_SERVER:
            case KW_SETS:
            case KW_SET_CURRENT_SNAPSHOT:
            case KW_SHARED:
            case KW_SHOW:
            case KW_SHOW_DATABASE:
            case KW_SKEWED:
            case KW_SNAPSHOT:
            case KW_SNAPSHOTS:
            case KW_SORT:
            case KW_SORTED:
            case KW_SPEC:
            case KW_SSL:
            case KW_STATISTICS:
            case KW_STATUS:
            case KW_STORED:
            case KW_STREAMTABLE:
            case KW_STRING:
            case KW_STRUCT:
            case KW_SUMMARY:
            case KW_SYSTEM_TIME:
            case KW_SYSTEM_VERSION:
            case KW_TABLES:
            case KW_TAG:
            case KW_TBLPROPERTIES:
            case KW_TEMPORARY:
            case KW_TERMINATED:
            case KW_TINYINT:
            case KW_TOUCH:
            case KW_TRANSACTION:
            case KW_TRANSACTIONAL:
            case KW_TRANSACTIONS:
            case KW_TRIM:
            case KW_TYPE:
            case KW_UNARCHIVE:
            case KW_UNDO:
            case KW_UNIONTYPE:
            case KW_UNKNOWN:
            case KW_UNLOCK:
            case KW_UNMANAGED:
            case KW_UNSET:
            case KW_UNSIGNED:
            case KW_URI:
            case KW_URL:
            case KW_USE:
            case KW_UTC:
            case KW_UTCTIMESTAMP:
            case KW_VALIDATE:
            case KW_VALUE_TYPE:
            case KW_VECTORIZATION:
            case KW_VIEW:
            case KW_VIEWS:
            case KW_WAIT:
            case KW_WEEK:
            case KW_WHILE:
            case KW_WITHIN:
            case KW_WORK:
            case KW_WORKLOAD:
            case KW_WRITE:
            case KW_YEAR:
            case KW_ZONE:
            case StringLiteral:
            case KW_BATCH:
            case KW_DAYOFWEEK:
            case KW_HOLD_DDLTIME:
            case KW_NO_DROP:
            case KW_OFFLINE:
            case KW_PROTECTION:
            case KW_READONLY:
            case KW_TIMESTAMPTZ:
                {
                alt105=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;

            }

            switch (alt105) {
                case 1 :
                    // HiveParser.g:1311:7: KW_WHERE identifier EQUAL StringLiteral
                    {
                    KW_WHERE297=(Token)match(input,KW_WHERE,FOLLOW_KW_WHERE_in_showTablesFilterExpr5473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_WHERE.add(KW_WHERE297);


                    pushFollow(FOLLOW_identifier_in_showTablesFilterExpr5475);
                    identifier298=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier298.getTree());

                    EQUAL299=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_showTablesFilterExpr5477); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL299);


                    StringLiteral300=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showTablesFilterExpr5479); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral300);


                    // AST REWRITE
                    // elements: StringLiteral, identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1312:5: -> ^( TOK_TABLE_TYPE identifier StringLiteral )
                    {
                        // HiveParser.g:1312:8: ^( TOK_TABLE_TYPE identifier StringLiteral )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_TABLE_TYPE, "TOK_TABLE_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_1, 
                        stream_StringLiteral.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1313:7: KW_LIKE showStmtIdentifier
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    KW_LIKE301=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showTablesFilterExpr5501); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    KW_LIKE301_tree = 
                    (ASTNode)adaptor.create(KW_LIKE301)
                    ;
                    adaptor.addChild(root_0, KW_LIKE301_tree);
                    }

                    pushFollow(FOLLOW_showStmtIdentifier_in_showTablesFilterExpr5503);
                    showStmtIdentifier302=showStmtIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, showStmtIdentifier302.getTree());

                    }
                    break;
                case 3 :
                    // HiveParser.g:1313:34: showStmtIdentifier
                    {
                    pushFollow(FOLLOW_showStmtIdentifier_in_showTablesFilterExpr5505);
                    showStmtIdentifier303=showStmtIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier303.getTree());

                    // AST REWRITE
                    // elements: showStmtIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1314:5: -> showStmtIdentifier
                    {
                        adaptor.addChild(root_0, stream_showStmtIdentifier.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showTablesFilterExpr"


    public static class lockStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lockStatement"
    // HiveParser.g:1317:1: lockStatement : KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) ;
    public final HiveParser.lockStatement_return lockStatement() throws RecognitionException {
        HiveParser.lockStatement_return retval = new HiveParser.lockStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_LOCK304=null;
        Token KW_TABLE305=null;
        HiveParser_FromClauseParser.tableName_return tableName306 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec307 =null;

        HiveParser.lockMode_return lockMode308 =null;


        ASTNode KW_LOCK304_tree=null;
        ASTNode KW_TABLE305_tree=null;
        RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_lockMode=new RewriteRuleSubtreeStream(adaptor,"rule lockMode");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("lock statement", state); 
        try {
            // HiveParser.g:1320:5: ( KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) )
            // HiveParser.g:1320:7: KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode
            {
            KW_LOCK304=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_lockStatement5540); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LOCK.add(KW_LOCK304);


            KW_TABLE305=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_lockStatement5542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE305);


            pushFollow(FOLLOW_tableName_in_lockStatement5544);
            tableName306=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tableName306.getTree());

            // HiveParser.g:1320:34: ( partitionSpec )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==KW_PARTITION) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // HiveParser.g:1320:34: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_lockStatement5546);
                    partitionSpec307=partitionSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec307.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_lockMode_in_lockStatement5549);
            lockMode308=lockMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lockMode.add(lockMode308.getTree());

            // AST REWRITE
            // elements: tableName, lockMode, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1320:58: -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
            {
                // HiveParser.g:1320:61: ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_LOCKTABLE, "TOK_LOCKTABLE")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                adaptor.addChild(root_1, stream_lockMode.nextTree());

                // HiveParser.g:1320:96: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lockStatement"


    public static class lockDatabase_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lockDatabase"
    // HiveParser.g:1323:1: lockDatabase : KW_LOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) lockMode -> ^( TOK_LOCKDB $dbName lockMode ) ;
    public final HiveParser.lockDatabase_return lockDatabase() throws RecognitionException {
        HiveParser.lockDatabase_return retval = new HiveParser.lockDatabase_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_LOCK309=null;
        Token KW_DATABASE310=null;
        Token KW_SCHEMA311=null;
        HiveParser_IdentifiersParser.identifier_return dbName =null;

        HiveParser.lockMode_return lockMode312 =null;


        ASTNode KW_LOCK309_tree=null;
        ASTNode KW_DATABASE310_tree=null;
        ASTNode KW_SCHEMA311_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_lockMode=new RewriteRuleSubtreeStream(adaptor,"rule lockMode");
         pushMsg("lock database statement", state); 
        try {
            // HiveParser.g:1326:5: ( KW_LOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) lockMode -> ^( TOK_LOCKDB $dbName lockMode ) )
            // HiveParser.g:1326:7: KW_LOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) lockMode
            {
            KW_LOCK309=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_lockDatabase5589); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LOCK.add(KW_LOCK309);


            // HiveParser.g:1326:15: ( KW_DATABASE | KW_SCHEMA )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==KW_DATABASE) ) {
                alt107=1;
            }
            else if ( (LA107_0==KW_SCHEMA) ) {
                alt107=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }
            switch (alt107) {
                case 1 :
                    // HiveParser.g:1326:16: KW_DATABASE
                    {
                    KW_DATABASE310=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_lockDatabase5592); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE310);


                    }
                    break;
                case 2 :
                    // HiveParser.g:1326:28: KW_SCHEMA
                    {
                    KW_SCHEMA311=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_lockDatabase5594); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA311);


                    }
                    break;

            }


            // HiveParser.g:1326:39: (dbName= identifier )
            // HiveParser.g:1326:40: dbName= identifier
            {
            pushFollow(FOLLOW_identifier_in_lockDatabase5600);
            dbName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());

            }


            pushFollow(FOLLOW_lockMode_in_lockDatabase5603);
            lockMode312=lockMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lockMode.add(lockMode312.getTree());

            // AST REWRITE
            // elements: lockMode, dbName
            // token labels: 
            // rule labels: dbName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1326:68: -> ^( TOK_LOCKDB $dbName lockMode )
            {
                // HiveParser.g:1326:71: ^( TOK_LOCKDB $dbName lockMode )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_LOCKDB, "TOK_LOCKDB")
                , root_1);

                adaptor.addChild(root_1, stream_dbName.nextTree());

                adaptor.addChild(root_1, stream_lockMode.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lockDatabase"


    public static class lockMode_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lockMode"
    // HiveParser.g:1329:1: lockMode : ( KW_SHARED | KW_EXCLUSIVE );
    public final HiveParser.lockMode_return lockMode() throws RecognitionException {
        HiveParser.lockMode_return retval = new HiveParser.lockMode_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token set313=null;

        ASTNode set313_tree=null;

         pushMsg("lock mode", state); 
        try {
            // HiveParser.g:1332:5: ( KW_SHARED | KW_EXCLUSIVE )
            // HiveParser.g:
            {
            root_0 = (ASTNode)adaptor.nil();


            set313=(Token)input.LT(1);

            if ( input.LA(1)==KW_EXCLUSIVE||input.LA(1)==KW_SHARED ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (ASTNode)adaptor.create(set313)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lockMode"


    public static class unlockStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unlockStatement"
    // HiveParser.g:1335:1: unlockStatement : KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) ;
    public final HiveParser.unlockStatement_return unlockStatement() throws RecognitionException {
        HiveParser.unlockStatement_return retval = new HiveParser.unlockStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_UNLOCK314=null;
        Token KW_TABLE315=null;
        HiveParser_FromClauseParser.tableName_return tableName316 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec317 =null;


        ASTNode KW_UNLOCK314_tree=null;
        ASTNode KW_TABLE315_tree=null;
        RewriteRuleTokenStream stream_KW_UNLOCK=new RewriteRuleTokenStream(adaptor,"token KW_UNLOCK");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("unlock statement", state); 
        try {
            // HiveParser.g:1338:5: ( KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) )
            // HiveParser.g:1338:7: KW_UNLOCK KW_TABLE tableName ( partitionSpec )?
            {
            KW_UNLOCK314=(Token)match(input,KW_UNLOCK,FOLLOW_KW_UNLOCK_in_unlockStatement5672); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_UNLOCK.add(KW_UNLOCK314);


            KW_TABLE315=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_unlockStatement5674); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE315);


            pushFollow(FOLLOW_tableName_in_unlockStatement5676);
            tableName316=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tableName316.getTree());

            // HiveParser.g:1338:36: ( partitionSpec )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==KW_PARTITION) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // HiveParser.g:1338:36: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_unlockStatement5678);
                    partitionSpec317=partitionSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec317.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: partitionSpec, tableName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1338:52: -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
            {
                // HiveParser.g:1338:55: ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_UNLOCKTABLE, "TOK_UNLOCKTABLE")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                // HiveParser.g:1338:83: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unlockStatement"


    public static class unlockDatabase_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unlockDatabase"
    // HiveParser.g:1341:1: unlockDatabase : KW_UNLOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) -> ^( TOK_UNLOCKDB $dbName) ;
    public final HiveParser.unlockDatabase_return unlockDatabase() throws RecognitionException {
        HiveParser.unlockDatabase_return retval = new HiveParser.unlockDatabase_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_UNLOCK318=null;
        Token KW_DATABASE319=null;
        Token KW_SCHEMA320=null;
        HiveParser_IdentifiersParser.identifier_return dbName =null;


        ASTNode KW_UNLOCK318_tree=null;
        ASTNode KW_DATABASE319_tree=null;
        ASTNode KW_SCHEMA320_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_UNLOCK=new RewriteRuleTokenStream(adaptor,"token KW_UNLOCK");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
         pushMsg("unlock database statement", state); 
        try {
            // HiveParser.g:1344:5: ( KW_UNLOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) -> ^( TOK_UNLOCKDB $dbName) )
            // HiveParser.g:1344:7: KW_UNLOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier )
            {
            KW_UNLOCK318=(Token)match(input,KW_UNLOCK,FOLLOW_KW_UNLOCK_in_unlockDatabase5718); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_UNLOCK.add(KW_UNLOCK318);


            // HiveParser.g:1344:17: ( KW_DATABASE | KW_SCHEMA )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==KW_DATABASE) ) {
                alt109=1;
            }
            else if ( (LA109_0==KW_SCHEMA) ) {
                alt109=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;

            }
            switch (alt109) {
                case 1 :
                    // HiveParser.g:1344:18: KW_DATABASE
                    {
                    KW_DATABASE319=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_unlockDatabase5721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE319);


                    }
                    break;
                case 2 :
                    // HiveParser.g:1344:30: KW_SCHEMA
                    {
                    KW_SCHEMA320=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_unlockDatabase5723); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA320);


                    }
                    break;

            }


            // HiveParser.g:1344:41: (dbName= identifier )
            // HiveParser.g:1344:42: dbName= identifier
            {
            pushFollow(FOLLOW_identifier_in_unlockDatabase5729);
            dbName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());

            }


            // AST REWRITE
            // elements: dbName
            // token labels: 
            // rule labels: dbName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1344:61: -> ^( TOK_UNLOCKDB $dbName)
            {
                // HiveParser.g:1344:64: ^( TOK_UNLOCKDB $dbName)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_UNLOCKDB, "TOK_UNLOCKDB")
                , root_1);

                adaptor.addChild(root_1, stream_dbName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unlockDatabase"


    public static class createRoleStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createRoleStatement"
    // HiveParser.g:1347:1: createRoleStatement : KW_CREATE KW_ROLE roleName= identifier -> ^( TOK_CREATEROLE $roleName) ;
    public final HiveParser.createRoleStatement_return createRoleStatement() throws RecognitionException {
        HiveParser.createRoleStatement_return retval = new HiveParser.createRoleStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_CREATE321=null;
        Token KW_ROLE322=null;
        HiveParser_IdentifiersParser.identifier_return roleName =null;


        ASTNode KW_CREATE321_tree=null;
        ASTNode KW_ROLE322_tree=null;
        RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
         pushMsg("create role", state); 
        try {
            // HiveParser.g:1350:5: ( KW_CREATE KW_ROLE roleName= identifier -> ^( TOK_CREATEROLE $roleName) )
            // HiveParser.g:1350:7: KW_CREATE KW_ROLE roleName= identifier
            {
            KW_CREATE321=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createRoleStatement5766); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE321);


            KW_ROLE322=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_createRoleStatement5768); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE322);


            pushFollow(FOLLOW_identifier_in_createRoleStatement5772);
            roleName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(roleName.getTree());

            // AST REWRITE
            // elements: roleName
            // token labels: 
            // rule labels: roleName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1351:5: -> ^( TOK_CREATEROLE $roleName)
            {
                // HiveParser.g:1351:8: ^( TOK_CREATEROLE $roleName)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CREATEROLE, "TOK_CREATEROLE")
                , root_1);

                adaptor.addChild(root_1, stream_roleName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createRoleStatement"


    public static class dropRoleStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropRoleStatement"
    // HiveParser.g:1354:1: dropRoleStatement : KW_DROP KW_ROLE roleName= identifier -> ^( TOK_DROPROLE $roleName) ;
    public final HiveParser.dropRoleStatement_return dropRoleStatement() throws RecognitionException {
        HiveParser.dropRoleStatement_return retval = new HiveParser.dropRoleStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_DROP323=null;
        Token KW_ROLE324=null;
        HiveParser_IdentifiersParser.identifier_return roleName =null;


        ASTNode KW_DROP323_tree=null;
        ASTNode KW_ROLE324_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        pushMsg("drop role", state);
        try {
            // HiveParser.g:1357:5: ( KW_DROP KW_ROLE roleName= identifier -> ^( TOK_DROPROLE $roleName) )
            // HiveParser.g:1357:7: KW_DROP KW_ROLE roleName= identifier
            {
            KW_DROP323=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropRoleStatement5812); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP323);


            KW_ROLE324=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_dropRoleStatement5814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE324);


            pushFollow(FOLLOW_identifier_in_dropRoleStatement5818);
            roleName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(roleName.getTree());

            // AST REWRITE
            // elements: roleName
            // token labels: 
            // rule labels: roleName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1358:5: -> ^( TOK_DROPROLE $roleName)
            {
                // HiveParser.g:1358:8: ^( TOK_DROPROLE $roleName)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DROPROLE, "TOK_DROPROLE")
                , root_1);

                adaptor.addChild(root_1, stream_roleName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropRoleStatement"


    public static class grantPrivileges_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grantPrivileges"
    // HiveParser.g:1361:1: grantPrivileges : KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? ) ;
    public final HiveParser.grantPrivileges_return grantPrivileges() throws RecognitionException {
        HiveParser.grantPrivileges_return retval = new HiveParser.grantPrivileges_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_GRANT325=null;
        Token KW_TO327=null;
        HiveParser.privilegeList_return privList =null;

        HiveParser.privilegeObject_return privilegeObject326 =null;

        HiveParser.principalSpecification_return principalSpecification328 =null;

        HiveParser.withGrantOption_return withGrantOption329 =null;


        ASTNode KW_GRANT325_tree=null;
        ASTNode KW_TO327_tree=null;
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleSubtreeStream stream_withGrantOption=new RewriteRuleSubtreeStream(adaptor,"rule withGrantOption");
        RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
        RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        pushMsg("grant privileges", state);
        try {
            // HiveParser.g:1364:5: ( KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? ) )
            // HiveParser.g:1364:7: KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )?
            {
            KW_GRANT325=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantPrivileges5858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT325);


            pushFollow(FOLLOW_privilegeList_in_grantPrivileges5862);
            privList=privilegeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_privilegeList.add(privList.getTree());

            // HiveParser.g:1365:7: ( privilegeObject )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==KW_ON) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // HiveParser.g:1365:7: privilegeObject
                    {
                    pushFollow(FOLLOW_privilegeObject_in_grantPrivileges5870);
                    privilegeObject326=privilegeObject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_privilegeObject.add(privilegeObject326.getTree());

                    }
                    break;

            }


            KW_TO327=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_grantPrivileges5879); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO327);


            pushFollow(FOLLOW_principalSpecification_in_grantPrivileges5881);
            principalSpecification328=principalSpecification();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification328.getTree());

            // HiveParser.g:1367:7: ( withGrantOption )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==KW_WITH) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // HiveParser.g:1367:7: withGrantOption
                    {
                    pushFollow(FOLLOW_withGrantOption_in_grantPrivileges5889);
                    withGrantOption329=withGrantOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_withGrantOption.add(withGrantOption329.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: privList, privilegeObject, principalSpecification, withGrantOption
            // token labels: 
            // rule labels: privList, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_privList=new RewriteRuleSubtreeStream(adaptor,"rule privList",privList!=null?privList.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1368:5: -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? )
            {
                // HiveParser.g:1368:8: ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_GRANT, "TOK_GRANT")
                , root_1);

                adaptor.addChild(root_1, stream_privList.nextTree());

                adaptor.addChild(root_1, stream_principalSpecification.nextTree());

                // HiveParser.g:1368:53: ( privilegeObject )?
                if ( stream_privilegeObject.hasNext() ) {
                    adaptor.addChild(root_1, stream_privilegeObject.nextTree());

                }
                stream_privilegeObject.reset();

                // HiveParser.g:1368:70: ( withGrantOption )?
                if ( stream_withGrantOption.hasNext() ) {
                    adaptor.addChild(root_1, stream_withGrantOption.nextTree());

                }
                stream_withGrantOption.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "grantPrivileges"


    public static class revokePrivileges_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "revokePrivileges"
    // HiveParser.g:1371:1: revokePrivileges : KW_REVOKE ( grantOptionFor )? privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? ) ;
    public final HiveParser.revokePrivileges_return revokePrivileges() throws RecognitionException {
        HiveParser.revokePrivileges_return retval = new HiveParser.revokePrivileges_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_REVOKE330=null;
        Token KW_FROM334=null;
        HiveParser.grantOptionFor_return grantOptionFor331 =null;

        HiveParser.privilegeList_return privilegeList332 =null;

        HiveParser.privilegeObject_return privilegeObject333 =null;

        HiveParser.principalSpecification_return principalSpecification335 =null;


        ASTNode KW_REVOKE330_tree=null;
        ASTNode KW_FROM334_tree=null;
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
        RewriteRuleSubtreeStream stream_grantOptionFor=new RewriteRuleSubtreeStream(adaptor,"rule grantOptionFor");
        RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
        RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        pushMsg("revoke privileges", state);
        try {
            // HiveParser.g:1374:5: ( KW_REVOKE ( grantOptionFor )? privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? ) )
            // HiveParser.g:1374:7: KW_REVOKE ( grantOptionFor )? privilegeList ( privilegeObject )? KW_FROM principalSpecification
            {
            KW_REVOKE330=(Token)match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokePrivileges5938); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_REVOKE.add(KW_REVOKE330);


            // HiveParser.g:1374:17: ( grantOptionFor )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==KW_GRANT) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // HiveParser.g:1374:17: grantOptionFor
                    {
                    pushFollow(FOLLOW_grantOptionFor_in_revokePrivileges5940);
                    grantOptionFor331=grantOptionFor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_grantOptionFor.add(grantOptionFor331.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_privilegeList_in_revokePrivileges5943);
            privilegeList332=privilegeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_privilegeList.add(privilegeList332.getTree());

            // HiveParser.g:1374:47: ( privilegeObject )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==KW_ON) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // HiveParser.g:1374:47: privilegeObject
                    {
                    pushFollow(FOLLOW_privilegeObject_in_revokePrivileges5945);
                    privilegeObject333=privilegeObject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_privilegeObject.add(privilegeObject333.getTree());

                    }
                    break;

            }


            KW_FROM334=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_revokePrivileges5948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM334);


            pushFollow(FOLLOW_principalSpecification_in_revokePrivileges5950);
            principalSpecification335=principalSpecification();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification335.getTree());

            // AST REWRITE
            // elements: principalSpecification, grantOptionFor, privilegeObject, privilegeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1375:5: -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? )
            {
                // HiveParser.g:1375:8: ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_REVOKE, "TOK_REVOKE")
                , root_1);

                adaptor.addChild(root_1, stream_privilegeList.nextTree());

                adaptor.addChild(root_1, stream_principalSpecification.nextTree());

                // HiveParser.g:1375:58: ( privilegeObject )?
                if ( stream_privilegeObject.hasNext() ) {
                    adaptor.addChild(root_1, stream_privilegeObject.nextTree());

                }
                stream_privilegeObject.reset();

                // HiveParser.g:1375:75: ( grantOptionFor )?
                if ( stream_grantOptionFor.hasNext() ) {
                    adaptor.addChild(root_1, stream_grantOptionFor.nextTree());

                }
                stream_grantOptionFor.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "revokePrivileges"


    public static class grantRole_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grantRole"
    // HiveParser.g:1378:1: grantRole : KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )? -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ ) ;
    public final HiveParser.grantRole_return grantRole() throws RecognitionException {
        HiveParser.grantRole_return retval = new HiveParser.grantRole_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_GRANT336=null;
        Token KW_ROLE337=null;
        Token COMMA339=null;
        Token KW_TO341=null;
        HiveParser_IdentifiersParser.identifier_return identifier338 =null;

        HiveParser_IdentifiersParser.identifier_return identifier340 =null;

        HiveParser.principalSpecification_return principalSpecification342 =null;

        HiveParser.withAdminOption_return withAdminOption343 =null;


        ASTNode KW_GRANT336_tree=null;
        ASTNode KW_ROLE337_tree=null;
        ASTNode COMMA339_tree=null;
        ASTNode KW_TO341_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_withAdminOption=new RewriteRuleSubtreeStream(adaptor,"rule withAdminOption");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        pushMsg("grant role", state);
        try {
            // HiveParser.g:1381:5: ( KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )? -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ ) )
            // HiveParser.g:1381:7: KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )?
            {
            KW_GRANT336=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantRole5997); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT336);


            // HiveParser.g:1381:16: ( KW_ROLE )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==KW_ROLE) ) {
                int LA114_1 = input.LA(2);

                if ( (LA114_1==Identifier||(LA114_1 >= KW_ABORT && LA114_1 <= KW_AFTER)||LA114_1==KW_ALLOC_FRACTION||LA114_1==KW_ANALYZE||LA114_1==KW_ARCHIVE||(LA114_1 >= KW_ASC && LA114_1 <= KW_AT)||(LA114_1 >= KW_AUTOCOMMIT && LA114_1 <= KW_BEFORE)||(LA114_1 >= KW_BRANCH && LA114_1 <= KW_BUCKETS)||(LA114_1 >= KW_CACHE && LA114_1 <= KW_CASCADE)||(LA114_1 >= KW_CBO && LA114_1 <= KW_CHANGE)||LA114_1==KW_CHECK||(LA114_1 >= KW_CLUSTER && LA114_1 <= KW_COLLECTION)||(LA114_1 >= KW_COLUMNS && LA114_1 <= KW_COMMENT)||(LA114_1 >= KW_COMPACT && LA114_1 <= KW_COMPACTIONS)||(LA114_1 >= KW_COMPUTE && LA114_1 <= KW_CONCATENATE)||LA114_1==KW_CONTINUE||LA114_1==KW_COST||LA114_1==KW_CRON||LA114_1==KW_DATA||LA114_1==KW_DATABASES||(LA114_1 >= KW_DATETIME && LA114_1 <= KW_DCPROPERTIES)||LA114_1==KW_DEBUG||(LA114_1 >= KW_DEFAULT && LA114_1 <= KW_DEFINED)||(LA114_1 >= KW_DELIMITED && LA114_1 <= KW_DESC)||(LA114_1 >= KW_DETAIL && LA114_1 <= KW_DISABLE)||(LA114_1 >= KW_DISTRIBUTE && LA114_1 <= KW_DO)||LA114_1==KW_DOW||(LA114_1 >= KW_DUMP && LA114_1 <= KW_ELEM_TYPE)||LA114_1==KW_ENABLE||(LA114_1 >= KW_ENFORCED && LA114_1 <= KW_EVERY)||(LA114_1 >= KW_EXCLUSIVE && LA114_1 <= KW_EXECUTED)||(LA114_1 >= KW_EXPIRE_SNAPSHOTS && LA114_1 <= KW_EXPRESSION)||LA114_1==KW_FAST_FORWARD||(LA114_1 >= KW_FIELDS && LA114_1 <= KW_FIRST)||(LA114_1 >= KW_FORMAT && LA114_1 <= KW_FORMATTED)||LA114_1==KW_FUNCTIONS||(LA114_1 >= KW_HOUR && LA114_1 <= KW_IDXPROPERTIES)||LA114_1==KW_IGNORE||(LA114_1 >= KW_INDEX && LA114_1 <= KW_INDEXES)||(LA114_1 >= KW_INPATH && LA114_1 <= KW_INPUTFORMAT)||(LA114_1 >= KW_ISOLATION && LA114_1 <= KW_JAR)||(LA114_1 >= KW_JOINCOST && LA114_1 <= KW_LAST)||LA114_1==KW_LEVEL||(LA114_1 >= KW_LIMIT && LA114_1 <= KW_LOAD)||(LA114_1 >= KW_LOCATION && LA114_1 <= KW_LONG)||(LA114_1 >= KW_MANAGED && LA114_1 <= KW_MANAGEMENT)||(LA114_1 >= KW_MAPJOIN && LA114_1 <= KW_MATERIALIZED)||LA114_1==KW_METADATA||(LA114_1 >= KW_MINUTE && LA114_1 <= KW_MONTH)||(LA114_1 >= KW_MOVE && LA114_1 <= KW_MSCK)||(LA114_1 >= KW_NORELY && LA114_1 <= KW_NOSCAN)||LA114_1==KW_NOVALIDATE||LA114_1==KW_NULLS||LA114_1==KW_OFFSET||(LA114_1 >= KW_OPERATOR && LA114_1 <= KW_OPTION)||(LA114_1 >= KW_OUTPUTDRIVER && LA114_1 <= KW_OUTPUTFORMAT)||(LA114_1 >= KW_OVERWRITE && LA114_1 <= KW_OWNER)||(LA114_1 >= KW_PARTITIONED && LA114_1 <= KW_PATH)||(LA114_1 >= KW_PLAN && LA114_1 <= KW_POOL)||LA114_1==KW_PRINCIPALS||LA114_1==KW_PURGE||(LA114_1 >= KW_QUARTER && LA114_1 <= KW_QUERY_PARALLELISM)||LA114_1==KW_READ||(LA114_1 >= KW_REBUILD && LA114_1 <= KW_RECORDWRITER)||(LA114_1 >= KW_RELOAD && LA114_1 <= KW_RETENTION)||LA114_1==KW_REWRITE||(LA114_1 >= KW_ROLE && LA114_1 <= KW_ROLES)||(LA114_1 >= KW_SCHEDULED && LA114_1 <= KW_SECOND)||(LA114_1 >= KW_SEMI && LA114_1 <= KW_SERVER)||(LA114_1 >= KW_SETS && LA114_1 <= KW_SKEWED)||(LA114_1 >= KW_SNAPSHOT && LA114_1 <= KW_SNAPSHOTS)||(LA114_1 >= KW_SORT && LA114_1 <= KW_SSL)||(LA114_1 >= KW_STATISTICS && LA114_1 <= KW_SUMMARY)||(LA114_1 >= KW_SYSTEM_TIME && LA114_1 <= KW_SYSTEM_VERSION)||LA114_1==KW_TABLES||(LA114_1 >= KW_TAG && LA114_1 <= KW_TERMINATED)||LA114_1==KW_TINYINT||LA114_1==KW_TOUCH||(LA114_1 >= KW_TRANSACTION && LA114_1 <= KW_TRANSACTIONS)||LA114_1==KW_TRIM||(LA114_1 >= KW_TYPE && LA114_1 <= KW_UNARCHIVE)||LA114_1==KW_UNDO||LA114_1==KW_UNIONTYPE||(LA114_1 >= KW_UNKNOWN && LA114_1 <= KW_UNSIGNED)||(LA114_1 >= KW_URI && LA114_1 <= KW_USE)||(LA114_1 >= KW_UTC && LA114_1 <= KW_VALIDATE)||LA114_1==KW_VALUE_TYPE||(LA114_1 >= KW_VECTORIZATION && LA114_1 <= KW_WEEK)||LA114_1==KW_WHILE||(LA114_1 >= KW_WITHIN && LA114_1 <= KW_ZONE)||LA114_1==KW_BATCH||LA114_1==KW_DAYOFWEEK||LA114_1==KW_HOLD_DDLTIME||LA114_1==KW_NO_DROP||LA114_1==KW_OFFLINE||LA114_1==KW_PROTECTION||LA114_1==KW_READONLY||LA114_1==KW_TIMESTAMPTZ) ) {
                    alt114=1;
                }
            }
            switch (alt114) {
                case 1 :
                    // HiveParser.g:1381:16: KW_ROLE
                    {
                    KW_ROLE337=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_grantRole5999); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE337);


                    }
                    break;

            }


            pushFollow(FOLLOW_identifier_in_grantRole6002);
            identifier338=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier338.getTree());

            // HiveParser.g:1381:36: ( COMMA identifier )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==COMMA) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // HiveParser.g:1381:37: COMMA identifier
            	    {
            	    COMMA339=(Token)match(input,COMMA,FOLLOW_COMMA_in_grantRole6005); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA339);


            	    pushFollow(FOLLOW_identifier_in_grantRole6007);
            	    identifier340=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_identifier.add(identifier340.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            KW_TO341=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_grantRole6011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO341);


            pushFollow(FOLLOW_principalSpecification_in_grantRole6013);
            principalSpecification342=principalSpecification();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification342.getTree());

            // HiveParser.g:1381:85: ( withAdminOption )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==KW_WITH) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // HiveParser.g:1381:85: withAdminOption
                    {
                    pushFollow(FOLLOW_withAdminOption_in_grantRole6015);
                    withAdminOption343=withAdminOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_withAdminOption.add(withAdminOption343.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: identifier, withAdminOption, principalSpecification
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1382:5: -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ )
            {
                // HiveParser.g:1382:8: ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_GRANT_ROLE, "TOK_GRANT_ROLE")
                , root_1);

                adaptor.addChild(root_1, stream_principalSpecification.nextTree());

                // HiveParser.g:1382:48: ( withAdminOption )?
                if ( stream_withAdminOption.hasNext() ) {
                    adaptor.addChild(root_1, stream_withAdminOption.nextTree());

                }
                stream_withAdminOption.reset();

                if ( !(stream_identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifier.nextTree());

                }
                stream_identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "grantRole"


    public static class revokeRole_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "revokeRole"
    // HiveParser.g:1385:1: revokeRole : KW_REVOKE ( adminOptionFor )? ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ ) ;
    public final HiveParser.revokeRole_return revokeRole() throws RecognitionException {
        HiveParser.revokeRole_return retval = new HiveParser.revokeRole_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_REVOKE344=null;
        Token KW_ROLE346=null;
        Token COMMA348=null;
        Token KW_FROM350=null;
        HiveParser.adminOptionFor_return adminOptionFor345 =null;

        HiveParser_IdentifiersParser.identifier_return identifier347 =null;

        HiveParser_IdentifiersParser.identifier_return identifier349 =null;

        HiveParser.principalSpecification_return principalSpecification351 =null;


        ASTNode KW_REVOKE344_tree=null;
        ASTNode KW_ROLE346_tree=null;
        ASTNode COMMA348_tree=null;
        ASTNode KW_FROM350_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_adminOptionFor=new RewriteRuleSubtreeStream(adaptor,"rule adminOptionFor");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        pushMsg("revoke role", state);
        try {
            // HiveParser.g:1388:5: ( KW_REVOKE ( adminOptionFor )? ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ ) )
            // HiveParser.g:1388:7: KW_REVOKE ( adminOptionFor )? ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification
            {
            KW_REVOKE344=(Token)match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokeRole6061); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_REVOKE.add(KW_REVOKE344);


            // HiveParser.g:1388:17: ( adminOptionFor )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==KW_ADMIN) ) {
                int LA117_1 = input.LA(2);

                if ( (LA117_1==KW_OPTION) ) {
                    alt117=1;
                }
            }
            switch (alt117) {
                case 1 :
                    // HiveParser.g:1388:17: adminOptionFor
                    {
                    pushFollow(FOLLOW_adminOptionFor_in_revokeRole6063);
                    adminOptionFor345=adminOptionFor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_adminOptionFor.add(adminOptionFor345.getTree());

                    }
                    break;

            }


            // HiveParser.g:1388:33: ( KW_ROLE )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==KW_ROLE) ) {
                int LA118_1 = input.LA(2);

                if ( (LA118_1==Identifier||(LA118_1 >= KW_ABORT && LA118_1 <= KW_AFTER)||LA118_1==KW_ALLOC_FRACTION||LA118_1==KW_ANALYZE||LA118_1==KW_ARCHIVE||(LA118_1 >= KW_ASC && LA118_1 <= KW_AT)||(LA118_1 >= KW_AUTOCOMMIT && LA118_1 <= KW_BEFORE)||(LA118_1 >= KW_BRANCH && LA118_1 <= KW_BUCKETS)||(LA118_1 >= KW_CACHE && LA118_1 <= KW_CASCADE)||(LA118_1 >= KW_CBO && LA118_1 <= KW_CHANGE)||LA118_1==KW_CHECK||(LA118_1 >= KW_CLUSTER && LA118_1 <= KW_COLLECTION)||(LA118_1 >= KW_COLUMNS && LA118_1 <= KW_COMMENT)||(LA118_1 >= KW_COMPACT && LA118_1 <= KW_COMPACTIONS)||(LA118_1 >= KW_COMPUTE && LA118_1 <= KW_CONCATENATE)||LA118_1==KW_CONTINUE||LA118_1==KW_COST||LA118_1==KW_CRON||LA118_1==KW_DATA||LA118_1==KW_DATABASES||(LA118_1 >= KW_DATETIME && LA118_1 <= KW_DCPROPERTIES)||LA118_1==KW_DEBUG||(LA118_1 >= KW_DEFAULT && LA118_1 <= KW_DEFINED)||(LA118_1 >= KW_DELIMITED && LA118_1 <= KW_DESC)||(LA118_1 >= KW_DETAIL && LA118_1 <= KW_DISABLE)||(LA118_1 >= KW_DISTRIBUTE && LA118_1 <= KW_DO)||LA118_1==KW_DOW||(LA118_1 >= KW_DUMP && LA118_1 <= KW_ELEM_TYPE)||LA118_1==KW_ENABLE||(LA118_1 >= KW_ENFORCED && LA118_1 <= KW_EVERY)||(LA118_1 >= KW_EXCLUSIVE && LA118_1 <= KW_EXECUTED)||(LA118_1 >= KW_EXPIRE_SNAPSHOTS && LA118_1 <= KW_EXPRESSION)||LA118_1==KW_FAST_FORWARD||(LA118_1 >= KW_FIELDS && LA118_1 <= KW_FIRST)||(LA118_1 >= KW_FORMAT && LA118_1 <= KW_FORMATTED)||LA118_1==KW_FUNCTIONS||(LA118_1 >= KW_HOUR && LA118_1 <= KW_IDXPROPERTIES)||LA118_1==KW_IGNORE||(LA118_1 >= KW_INDEX && LA118_1 <= KW_INDEXES)||(LA118_1 >= KW_INPATH && LA118_1 <= KW_INPUTFORMAT)||(LA118_1 >= KW_ISOLATION && LA118_1 <= KW_JAR)||(LA118_1 >= KW_JOINCOST && LA118_1 <= KW_LAST)||LA118_1==KW_LEVEL||(LA118_1 >= KW_LIMIT && LA118_1 <= KW_LOAD)||(LA118_1 >= KW_LOCATION && LA118_1 <= KW_LONG)||(LA118_1 >= KW_MANAGED && LA118_1 <= KW_MANAGEMENT)||(LA118_1 >= KW_MAPJOIN && LA118_1 <= KW_MATERIALIZED)||LA118_1==KW_METADATA||(LA118_1 >= KW_MINUTE && LA118_1 <= KW_MONTH)||(LA118_1 >= KW_MOVE && LA118_1 <= KW_MSCK)||(LA118_1 >= KW_NORELY && LA118_1 <= KW_NOSCAN)||LA118_1==KW_NOVALIDATE||LA118_1==KW_NULLS||LA118_1==KW_OFFSET||(LA118_1 >= KW_OPERATOR && LA118_1 <= KW_OPTION)||(LA118_1 >= KW_OUTPUTDRIVER && LA118_1 <= KW_OUTPUTFORMAT)||(LA118_1 >= KW_OVERWRITE && LA118_1 <= KW_OWNER)||(LA118_1 >= KW_PARTITIONED && LA118_1 <= KW_PATH)||(LA118_1 >= KW_PLAN && LA118_1 <= KW_POOL)||LA118_1==KW_PRINCIPALS||LA118_1==KW_PURGE||(LA118_1 >= KW_QUARTER && LA118_1 <= KW_QUERY_PARALLELISM)||LA118_1==KW_READ||(LA118_1 >= KW_REBUILD && LA118_1 <= KW_RECORDWRITER)||(LA118_1 >= KW_RELOAD && LA118_1 <= KW_RETENTION)||LA118_1==KW_REWRITE||(LA118_1 >= KW_ROLE && LA118_1 <= KW_ROLES)||(LA118_1 >= KW_SCHEDULED && LA118_1 <= KW_SECOND)||(LA118_1 >= KW_SEMI && LA118_1 <= KW_SERVER)||(LA118_1 >= KW_SETS && LA118_1 <= KW_SKEWED)||(LA118_1 >= KW_SNAPSHOT && LA118_1 <= KW_SNAPSHOTS)||(LA118_1 >= KW_SORT && LA118_1 <= KW_SSL)||(LA118_1 >= KW_STATISTICS && LA118_1 <= KW_SUMMARY)||(LA118_1 >= KW_SYSTEM_TIME && LA118_1 <= KW_SYSTEM_VERSION)||LA118_1==KW_TABLES||(LA118_1 >= KW_TAG && LA118_1 <= KW_TERMINATED)||LA118_1==KW_TINYINT||LA118_1==KW_TOUCH||(LA118_1 >= KW_TRANSACTION && LA118_1 <= KW_TRANSACTIONS)||LA118_1==KW_TRIM||(LA118_1 >= KW_TYPE && LA118_1 <= KW_UNARCHIVE)||LA118_1==KW_UNDO||LA118_1==KW_UNIONTYPE||(LA118_1 >= KW_UNKNOWN && LA118_1 <= KW_UNSIGNED)||(LA118_1 >= KW_URI && LA118_1 <= KW_USE)||(LA118_1 >= KW_UTC && LA118_1 <= KW_VALIDATE)||LA118_1==KW_VALUE_TYPE||(LA118_1 >= KW_VECTORIZATION && LA118_1 <= KW_WEEK)||LA118_1==KW_WHILE||(LA118_1 >= KW_WITHIN && LA118_1 <= KW_ZONE)||LA118_1==KW_BATCH||LA118_1==KW_DAYOFWEEK||LA118_1==KW_HOLD_DDLTIME||LA118_1==KW_NO_DROP||LA118_1==KW_OFFLINE||LA118_1==KW_PROTECTION||LA118_1==KW_READONLY||LA118_1==KW_TIMESTAMPTZ) ) {
                    alt118=1;
                }
            }
            switch (alt118) {
                case 1 :
                    // HiveParser.g:1388:33: KW_ROLE
                    {
                    KW_ROLE346=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_revokeRole6066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE346);


                    }
                    break;

            }


            pushFollow(FOLLOW_identifier_in_revokeRole6069);
            identifier347=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier347.getTree());

            // HiveParser.g:1388:53: ( COMMA identifier )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==COMMA) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // HiveParser.g:1388:54: COMMA identifier
            	    {
            	    COMMA348=(Token)match(input,COMMA,FOLLOW_COMMA_in_revokeRole6072); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA348);


            	    pushFollow(FOLLOW_identifier_in_revokeRole6074);
            	    identifier349=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_identifier.add(identifier349.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            KW_FROM350=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_revokeRole6078); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM350);


            pushFollow(FOLLOW_principalSpecification_in_revokeRole6080);
            principalSpecification351=principalSpecification();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification351.getTree());

            // AST REWRITE
            // elements: principalSpecification, identifier, adminOptionFor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1389:5: -> ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ )
            {
                // HiveParser.g:1389:8: ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_REVOKE_ROLE, "TOK_REVOKE_ROLE")
                , root_1);

                adaptor.addChild(root_1, stream_principalSpecification.nextTree());

                // HiveParser.g:1389:49: ( adminOptionFor )?
                if ( stream_adminOptionFor.hasNext() ) {
                    adaptor.addChild(root_1, stream_adminOptionFor.nextTree());

                }
                stream_adminOptionFor.reset();

                if ( !(stream_identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifier.nextTree());

                }
                stream_identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "revokeRole"


    public static class showRoleGrants_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showRoleGrants"
    // HiveParser.g:1392:1: showRoleGrants : KW_SHOW KW_ROLE KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) ;
    public final HiveParser.showRoleGrants_return showRoleGrants() throws RecognitionException {
        HiveParser.showRoleGrants_return retval = new HiveParser.showRoleGrants_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_SHOW352=null;
        Token KW_ROLE353=null;
        Token KW_GRANT354=null;
        HiveParser.principalName_return principalName355 =null;


        ASTNode KW_SHOW352_tree=null;
        ASTNode KW_ROLE353_tree=null;
        ASTNode KW_GRANT354_tree=null;
        RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
        pushMsg("show role grants", state);
        try {
            // HiveParser.g:1395:5: ( KW_SHOW KW_ROLE KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) )
            // HiveParser.g:1395:7: KW_SHOW KW_ROLE KW_GRANT principalName
            {
            KW_SHOW352=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRoleGrants6125); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW352);


            KW_ROLE353=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_showRoleGrants6127); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE353);


            KW_GRANT354=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showRoleGrants6129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT354);


            pushFollow(FOLLOW_principalName_in_showRoleGrants6131);
            principalName355=principalName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_principalName.add(principalName355.getTree());

            // AST REWRITE
            // elements: principalName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1396:5: -> ^( TOK_SHOW_ROLE_GRANT principalName )
            {
                // HiveParser.g:1396:8: ^( TOK_SHOW_ROLE_GRANT principalName )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SHOW_ROLE_GRANT, "TOK_SHOW_ROLE_GRANT")
                , root_1);

                adaptor.addChild(root_1, stream_principalName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showRoleGrants"


    public static class showRoles_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showRoles"
    // HiveParser.g:1400:1: showRoles : KW_SHOW KW_ROLES -> ^( TOK_SHOW_ROLES ) ;
    public final HiveParser.showRoles_return showRoles() throws RecognitionException {
        HiveParser.showRoles_return retval = new HiveParser.showRoles_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_SHOW356=null;
        Token KW_ROLES357=null;

        ASTNode KW_SHOW356_tree=null;
        ASTNode KW_ROLES357_tree=null;
        RewriteRuleTokenStream stream_KW_ROLES=new RewriteRuleTokenStream(adaptor,"token KW_ROLES");
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");

        pushMsg("show roles", state);
        try {
            // HiveParser.g:1403:5: ( KW_SHOW KW_ROLES -> ^( TOK_SHOW_ROLES ) )
            // HiveParser.g:1403:7: KW_SHOW KW_ROLES
            {
            KW_SHOW356=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRoles6171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW356);


            KW_ROLES357=(Token)match(input,KW_ROLES,FOLLOW_KW_ROLES_in_showRoles6173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROLES.add(KW_ROLES357);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1404:5: -> ^( TOK_SHOW_ROLES )
            {
                // HiveParser.g:1404:8: ^( TOK_SHOW_ROLES )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SHOW_ROLES, "TOK_SHOW_ROLES")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showRoles"


    public static class showCurrentRole_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showCurrentRole"
    // HiveParser.g:1407:1: showCurrentRole : KW_SHOW KW_CURRENT KW_ROLES -> ^( TOK_SHOW_CURRENT_ROLE ) ;
    public final HiveParser.showCurrentRole_return showCurrentRole() throws RecognitionException {
        HiveParser.showCurrentRole_return retval = new HiveParser.showCurrentRole_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_SHOW358=null;
        Token KW_CURRENT359=null;
        Token KW_ROLES360=null;

        ASTNode KW_SHOW358_tree=null;
        ASTNode KW_CURRENT359_tree=null;
        ASTNode KW_ROLES360_tree=null;
        RewriteRuleTokenStream stream_KW_ROLES=new RewriteRuleTokenStream(adaptor,"token KW_ROLES");
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_CURRENT=new RewriteRuleTokenStream(adaptor,"token KW_CURRENT");

        pushMsg("show current role", state);
        try {
            // HiveParser.g:1410:5: ( KW_SHOW KW_CURRENT KW_ROLES -> ^( TOK_SHOW_CURRENT_ROLE ) )
            // HiveParser.g:1410:7: KW_SHOW KW_CURRENT KW_ROLES
            {
            KW_SHOW358=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showCurrentRole6210); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW358);


            KW_CURRENT359=(Token)match(input,KW_CURRENT,FOLLOW_KW_CURRENT_in_showCurrentRole6212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CURRENT.add(KW_CURRENT359);


            KW_ROLES360=(Token)match(input,KW_ROLES,FOLLOW_KW_ROLES_in_showCurrentRole6214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROLES.add(KW_ROLES360);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1411:5: -> ^( TOK_SHOW_CURRENT_ROLE )
            {
                // HiveParser.g:1411:8: ^( TOK_SHOW_CURRENT_ROLE )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SHOW_CURRENT_ROLE, "TOK_SHOW_CURRENT_ROLE")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showCurrentRole"


    public static class setRole_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "setRole"
    // HiveParser.g:1414:1: setRole : KW_SET KW_ROLE ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SET_ROLE Identifier[$all.text] ) | ( KW_NONE )=> (none= KW_NONE ) -> ^( TOK_SET_ROLE Identifier[$none.text] ) | identifier -> ^( TOK_SET_ROLE identifier ) ) ;
    public final HiveParser.setRole_return setRole() throws RecognitionException {
        HiveParser.setRole_return retval = new HiveParser.setRole_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token all=null;
        Token none=null;
        Token KW_SET361=null;
        Token KW_ROLE362=null;
        HiveParser_IdentifiersParser.identifier_return identifier363 =null;


        ASTNode all_tree=null;
        ASTNode none_tree=null;
        ASTNode KW_SET361_tree=null;
        ASTNode KW_ROLE362_tree=null;
        RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
        RewriteRuleTokenStream stream_KW_NONE=new RewriteRuleTokenStream(adaptor,"token KW_NONE");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        pushMsg("set role", state);
        try {
            // HiveParser.g:1417:5: ( KW_SET KW_ROLE ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SET_ROLE Identifier[$all.text] ) | ( KW_NONE )=> (none= KW_NONE ) -> ^( TOK_SET_ROLE Identifier[$none.text] ) | identifier -> ^( TOK_SET_ROLE identifier ) ) )
            // HiveParser.g:1417:7: KW_SET KW_ROLE ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SET_ROLE Identifier[$all.text] ) | ( KW_NONE )=> (none= KW_NONE ) -> ^( TOK_SET_ROLE Identifier[$none.text] ) | identifier -> ^( TOK_SET_ROLE identifier ) )
            {
            KW_SET361=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_setRole6251); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET361);


            KW_ROLE362=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_setRole6253); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE362);


            // HiveParser.g:1418:5: ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SET_ROLE Identifier[$all.text] ) | ( KW_NONE )=> (none= KW_NONE ) -> ^( TOK_SET_ROLE Identifier[$none.text] ) | identifier -> ^( TOK_SET_ROLE identifier ) )
            int alt120=3;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==KW_ALL) && (synpred16_HiveParser())) {
                alt120=1;
            }
            else if ( (LA120_0==KW_NONE) && (synpred17_HiveParser())) {
                alt120=2;
            }
            else if ( (LA120_0==Identifier||(LA120_0 >= KW_ABORT && LA120_0 <= KW_AFTER)||LA120_0==KW_ALLOC_FRACTION||LA120_0==KW_ANALYZE||LA120_0==KW_ARCHIVE||(LA120_0 >= KW_ASC && LA120_0 <= KW_AT)||(LA120_0 >= KW_AUTOCOMMIT && LA120_0 <= KW_BEFORE)||(LA120_0 >= KW_BRANCH && LA120_0 <= KW_BUCKETS)||(LA120_0 >= KW_CACHE && LA120_0 <= KW_CASCADE)||(LA120_0 >= KW_CBO && LA120_0 <= KW_CHANGE)||LA120_0==KW_CHECK||(LA120_0 >= KW_CLUSTER && LA120_0 <= KW_COLLECTION)||(LA120_0 >= KW_COLUMNS && LA120_0 <= KW_COMMENT)||(LA120_0 >= KW_COMPACT && LA120_0 <= KW_COMPACTIONS)||(LA120_0 >= KW_COMPUTE && LA120_0 <= KW_CONCATENATE)||LA120_0==KW_CONTINUE||LA120_0==KW_COST||LA120_0==KW_CRON||LA120_0==KW_DATA||LA120_0==KW_DATABASES||(LA120_0 >= KW_DATETIME && LA120_0 <= KW_DCPROPERTIES)||LA120_0==KW_DEBUG||(LA120_0 >= KW_DEFAULT && LA120_0 <= KW_DEFINED)||(LA120_0 >= KW_DELIMITED && LA120_0 <= KW_DESC)||(LA120_0 >= KW_DETAIL && LA120_0 <= KW_DISABLE)||(LA120_0 >= KW_DISTRIBUTE && LA120_0 <= KW_DO)||LA120_0==KW_DOW||(LA120_0 >= KW_DUMP && LA120_0 <= KW_ELEM_TYPE)||LA120_0==KW_ENABLE||(LA120_0 >= KW_ENFORCED && LA120_0 <= KW_EVERY)||(LA120_0 >= KW_EXCLUSIVE && LA120_0 <= KW_EXECUTED)||(LA120_0 >= KW_EXPIRE_SNAPSHOTS && LA120_0 <= KW_EXPRESSION)||LA120_0==KW_FAST_FORWARD||(LA120_0 >= KW_FIELDS && LA120_0 <= KW_FIRST)||(LA120_0 >= KW_FORMAT && LA120_0 <= KW_FORMATTED)||LA120_0==KW_FUNCTIONS||(LA120_0 >= KW_HOUR && LA120_0 <= KW_IDXPROPERTIES)||LA120_0==KW_IGNORE||(LA120_0 >= KW_INDEX && LA120_0 <= KW_INDEXES)||(LA120_0 >= KW_INPATH && LA120_0 <= KW_INPUTFORMAT)||(LA120_0 >= KW_ISOLATION && LA120_0 <= KW_JAR)||(LA120_0 >= KW_JOINCOST && LA120_0 <= KW_LAST)||LA120_0==KW_LEVEL||(LA120_0 >= KW_LIMIT && LA120_0 <= KW_LOAD)||(LA120_0 >= KW_LOCATION && LA120_0 <= KW_LONG)||(LA120_0 >= KW_MANAGED && LA120_0 <= KW_MANAGEMENT)||(LA120_0 >= KW_MAPJOIN && LA120_0 <= KW_MATERIALIZED)||LA120_0==KW_METADATA||(LA120_0 >= KW_MINUTE && LA120_0 <= KW_MONTH)||(LA120_0 >= KW_MOVE && LA120_0 <= KW_MSCK)||(LA120_0 >= KW_NORELY && LA120_0 <= KW_NOSCAN)||LA120_0==KW_NOVALIDATE||LA120_0==KW_NULLS||LA120_0==KW_OFFSET||(LA120_0 >= KW_OPERATOR && LA120_0 <= KW_OPTION)||(LA120_0 >= KW_OUTPUTDRIVER && LA120_0 <= KW_OUTPUTFORMAT)||(LA120_0 >= KW_OVERWRITE && LA120_0 <= KW_OWNER)||(LA120_0 >= KW_PARTITIONED && LA120_0 <= KW_PATH)||(LA120_0 >= KW_PLAN && LA120_0 <= KW_POOL)||LA120_0==KW_PRINCIPALS||LA120_0==KW_PURGE||(LA120_0 >= KW_QUARTER && LA120_0 <= KW_QUERY_PARALLELISM)||LA120_0==KW_READ||(LA120_0 >= KW_REBUILD && LA120_0 <= KW_RECORDWRITER)||(LA120_0 >= KW_RELOAD && LA120_0 <= KW_RETENTION)||LA120_0==KW_REWRITE||(LA120_0 >= KW_ROLE && LA120_0 <= KW_ROLES)||(LA120_0 >= KW_SCHEDULED && LA120_0 <= KW_SECOND)||(LA120_0 >= KW_SEMI && LA120_0 <= KW_SERVER)||(LA120_0 >= KW_SETS && LA120_0 <= KW_SKEWED)||(LA120_0 >= KW_SNAPSHOT && LA120_0 <= KW_SNAPSHOTS)||(LA120_0 >= KW_SORT && LA120_0 <= KW_SSL)||(LA120_0 >= KW_STATISTICS && LA120_0 <= KW_SUMMARY)||(LA120_0 >= KW_SYSTEM_TIME && LA120_0 <= KW_SYSTEM_VERSION)||LA120_0==KW_TABLES||(LA120_0 >= KW_TAG && LA120_0 <= KW_TERMINATED)||LA120_0==KW_TINYINT||LA120_0==KW_TOUCH||(LA120_0 >= KW_TRANSACTION && LA120_0 <= KW_TRANSACTIONS)||LA120_0==KW_TRIM||(LA120_0 >= KW_TYPE && LA120_0 <= KW_UNARCHIVE)||LA120_0==KW_UNDO||LA120_0==KW_UNIONTYPE||(LA120_0 >= KW_UNKNOWN && LA120_0 <= KW_UNSIGNED)||(LA120_0 >= KW_URI && LA120_0 <= KW_USE)||(LA120_0 >= KW_UTC && LA120_0 <= KW_VALIDATE)||LA120_0==KW_VALUE_TYPE||(LA120_0 >= KW_VECTORIZATION && LA120_0 <= KW_WEEK)||LA120_0==KW_WHILE||(LA120_0 >= KW_WITHIN && LA120_0 <= KW_ZONE)||LA120_0==KW_BATCH||LA120_0==KW_DAYOFWEEK||LA120_0==KW_HOLD_DDLTIME||LA120_0==KW_NO_DROP||LA120_0==KW_OFFLINE||LA120_0==KW_PROTECTION||LA120_0==KW_READONLY||LA120_0==KW_TIMESTAMPTZ) ) {
                alt120=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;

            }
            switch (alt120) {
                case 1 :
                    // HiveParser.g:1419:5: ( KW_ALL )=> (all= KW_ALL )
                    {
                    // HiveParser.g:1419:17: (all= KW_ALL )
                    // HiveParser.g:1419:18: all= KW_ALL
                    {
                    all=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setRole6274); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALL.add(all);


                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1419:30: -> ^( TOK_SET_ROLE Identifier[$all.text] )
                    {
                        // HiveParser.g:1419:33: ^( TOK_SET_ROLE Identifier[$all.text] )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SET_ROLE, "TOK_SET_ROLE")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (ASTNode)adaptor.create(Identifier, (all!=null?all.getText():null))
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1421:5: ( KW_NONE )=> (none= KW_NONE )
                    {
                    // HiveParser.g:1421:18: (none= KW_NONE )
                    // HiveParser.g:1421:19: none= KW_NONE
                    {
                    none=(Token)match(input,KW_NONE,FOLLOW_KW_NONE_in_setRole6305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_NONE.add(none);


                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1421:33: -> ^( TOK_SET_ROLE Identifier[$none.text] )
                    {
                        // HiveParser.g:1421:36: ^( TOK_SET_ROLE Identifier[$none.text] )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SET_ROLE, "TOK_SET_ROLE")
                        , root_1);

                        adaptor.addChild(root_1, 
                        (ASTNode)adaptor.create(Identifier, (none!=null?none.getText():null))
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1423:5: identifier
                    {
                    pushFollow(FOLLOW_identifier_in_setRole6327);
                    identifier363=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier363.getTree());

                    // AST REWRITE
                    // elements: identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1423:16: -> ^( TOK_SET_ROLE identifier )
                    {
                        // HiveParser.g:1423:19: ^( TOK_SET_ROLE identifier )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SET_ROLE, "TOK_SET_ROLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "setRole"


    public static class showGrants_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showGrants"
    // HiveParser.g:1427:1: showGrants : KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? ) ;
    public final HiveParser.showGrants_return showGrants() throws RecognitionException {
        HiveParser.showGrants_return retval = new HiveParser.showGrants_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_SHOW364=null;
        Token KW_GRANT365=null;
        Token KW_ON367=null;
        HiveParser.principalName_return principalName366 =null;

        HiveParser.privilegeIncludeColObject_return privilegeIncludeColObject368 =null;


        ASTNode KW_SHOW364_tree=null;
        ASTNode KW_GRANT365_tree=null;
        ASTNode KW_ON367_tree=null;
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_privilegeIncludeColObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeIncludeColObject");
        RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
        pushMsg("show grants", state);
        try {
            // HiveParser.g:1430:5: ( KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? ) )
            // HiveParser.g:1430:7: KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )?
            {
            KW_SHOW364=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showGrants6368); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW364);


            KW_GRANT365=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showGrants6370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT365);


            // HiveParser.g:1430:24: ( principalName )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==KW_GROUP||LA121_0==KW_ROLE||LA121_0==KW_USER) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // HiveParser.g:1430:24: principalName
                    {
                    pushFollow(FOLLOW_principalName_in_showGrants6372);
                    principalName366=principalName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_principalName.add(principalName366.getTree());

                    }
                    break;

            }


            // HiveParser.g:1430:39: ( KW_ON privilegeIncludeColObject )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==KW_ON) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // HiveParser.g:1430:40: KW_ON privilegeIncludeColObject
                    {
                    KW_ON367=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_showGrants6376); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON367);


                    pushFollow(FOLLOW_privilegeIncludeColObject_in_showGrants6378);
                    privilegeIncludeColObject368=privilegeIncludeColObject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_privilegeIncludeColObject.add(privilegeIncludeColObject368.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: privilegeIncludeColObject, principalName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1431:5: -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? )
            {
                // HiveParser.g:1431:8: ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SHOW_GRANT, "TOK_SHOW_GRANT")
                , root_1);

                // HiveParser.g:1431:25: ( principalName )?
                if ( stream_principalName.hasNext() ) {
                    adaptor.addChild(root_1, stream_principalName.nextTree());

                }
                stream_principalName.reset();

                // HiveParser.g:1431:40: ( privilegeIncludeColObject )?
                if ( stream_privilegeIncludeColObject.hasNext() ) {
                    adaptor.addChild(root_1, stream_privilegeIncludeColObject.nextTree());

                }
                stream_privilegeIncludeColObject.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showGrants"


    public static class showRolePrincipals_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showRolePrincipals"
    // HiveParser.g:1434:1: showRolePrincipals : KW_SHOW KW_PRINCIPALS roleName= identifier -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName) ;
    public final HiveParser.showRolePrincipals_return showRolePrincipals() throws RecognitionException {
        HiveParser.showRolePrincipals_return retval = new HiveParser.showRolePrincipals_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_SHOW369=null;
        Token KW_PRINCIPALS370=null;
        HiveParser_IdentifiersParser.identifier_return roleName =null;


        ASTNode KW_SHOW369_tree=null;
        ASTNode KW_PRINCIPALS370_tree=null;
        RewriteRuleTokenStream stream_KW_PRINCIPALS=new RewriteRuleTokenStream(adaptor,"token KW_PRINCIPALS");
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        pushMsg("show role principals", state);
        try {
            // HiveParser.g:1437:5: ( KW_SHOW KW_PRINCIPALS roleName= identifier -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName) )
            // HiveParser.g:1437:7: KW_SHOW KW_PRINCIPALS roleName= identifier
            {
            KW_SHOW369=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRolePrincipals6423); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW369);


            KW_PRINCIPALS370=(Token)match(input,KW_PRINCIPALS,FOLLOW_KW_PRINCIPALS_in_showRolePrincipals6425); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_PRINCIPALS.add(KW_PRINCIPALS370);


            pushFollow(FOLLOW_identifier_in_showRolePrincipals6429);
            roleName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(roleName.getTree());

            // AST REWRITE
            // elements: roleName
            // token labels: 
            // rule labels: roleName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1438:5: -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName)
            {
                // HiveParser.g:1438:8: ^( TOK_SHOW_ROLE_PRINCIPALS $roleName)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SHOW_ROLE_PRINCIPALS, "TOK_SHOW_ROLE_PRINCIPALS")
                , root_1);

                adaptor.addChild(root_1, stream_roleName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showRolePrincipals"


    public static class privilegeIncludeColObject_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privilegeIncludeColObject"
    // HiveParser.g:1442:1: privilegeIncludeColObject : ( ( KW_ALL )=> KW_ALL -> ^( TOK_RESOURCE_ALL ) | privObjectCols -> ^( TOK_PRIV_OBJECT_COL privObjectCols ) );
    public final HiveParser.privilegeIncludeColObject_return privilegeIncludeColObject() throws RecognitionException {
        HiveParser.privilegeIncludeColObject_return retval = new HiveParser.privilegeIncludeColObject_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_ALL371=null;
        HiveParser.privObjectCols_return privObjectCols372 =null;


        ASTNode KW_ALL371_tree=null;
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleSubtreeStream stream_privObjectCols=new RewriteRuleSubtreeStream(adaptor,"rule privObjectCols");
        pushMsg("privilege object including columns", state);
        try {
            // HiveParser.g:1445:5: ( ( KW_ALL )=> KW_ALL -> ^( TOK_RESOURCE_ALL ) | privObjectCols -> ^( TOK_PRIV_OBJECT_COL privObjectCols ) )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==KW_ALL) && (synpred18_HiveParser())) {
                alt123=1;
            }
            else if ( (LA123_0==Identifier||(LA123_0 >= KW_ABORT && LA123_0 <= KW_AFTER)||LA123_0==KW_ALLOC_FRACTION||LA123_0==KW_ANALYZE||LA123_0==KW_ARCHIVE||(LA123_0 >= KW_ASC && LA123_0 <= KW_AT)||(LA123_0 >= KW_AUTOCOMMIT && LA123_0 <= KW_BEFORE)||(LA123_0 >= KW_BRANCH && LA123_0 <= KW_BUCKETS)||(LA123_0 >= KW_CACHE && LA123_0 <= KW_CASCADE)||(LA123_0 >= KW_CBO && LA123_0 <= KW_CHANGE)||LA123_0==KW_CHECK||(LA123_0 >= KW_CLUSTER && LA123_0 <= KW_COLLECTION)||(LA123_0 >= KW_COLUMNS && LA123_0 <= KW_COMMENT)||(LA123_0 >= KW_COMPACT && LA123_0 <= KW_COMPACTIONS)||(LA123_0 >= KW_COMPUTE && LA123_0 <= KW_CONCATENATE)||LA123_0==KW_CONTINUE||LA123_0==KW_COST||LA123_0==KW_CRON||(LA123_0 >= KW_DATA && LA123_0 <= KW_DATABASES)||(LA123_0 >= KW_DATETIME && LA123_0 <= KW_DCPROPERTIES)||LA123_0==KW_DEBUG||(LA123_0 >= KW_DEFAULT && LA123_0 <= KW_DEFINED)||(LA123_0 >= KW_DELIMITED && LA123_0 <= KW_DESC)||(LA123_0 >= KW_DETAIL && LA123_0 <= KW_DISABLE)||(LA123_0 >= KW_DISTRIBUTE && LA123_0 <= KW_DO)||LA123_0==KW_DOW||(LA123_0 >= KW_DUMP && LA123_0 <= KW_ELEM_TYPE)||LA123_0==KW_ENABLE||(LA123_0 >= KW_ENFORCED && LA123_0 <= KW_EVERY)||(LA123_0 >= KW_EXCLUSIVE && LA123_0 <= KW_EXECUTED)||(LA123_0 >= KW_EXPIRE_SNAPSHOTS && LA123_0 <= KW_EXPRESSION)||LA123_0==KW_FAST_FORWARD||(LA123_0 >= KW_FIELDS && LA123_0 <= KW_FIRST)||(LA123_0 >= KW_FORMAT && LA123_0 <= KW_FORMATTED)||LA123_0==KW_FUNCTIONS||(LA123_0 >= KW_HOUR && LA123_0 <= KW_IDXPROPERTIES)||LA123_0==KW_IGNORE||(LA123_0 >= KW_INDEX && LA123_0 <= KW_INDEXES)||(LA123_0 >= KW_INPATH && LA123_0 <= KW_INPUTFORMAT)||(LA123_0 >= KW_ISOLATION && LA123_0 <= KW_JAR)||(LA123_0 >= KW_JOINCOST && LA123_0 <= KW_LAST)||LA123_0==KW_LEVEL||(LA123_0 >= KW_LIMIT && LA123_0 <= KW_LOAD)||(LA123_0 >= KW_LOCATION && LA123_0 <= KW_LONG)||(LA123_0 >= KW_MANAGED && LA123_0 <= KW_MANAGEMENT)||(LA123_0 >= KW_MAPJOIN && LA123_0 <= KW_MATERIALIZED)||LA123_0==KW_METADATA||(LA123_0 >= KW_MINUTE && LA123_0 <= KW_MONTH)||(LA123_0 >= KW_MOVE && LA123_0 <= KW_MSCK)||(LA123_0 >= KW_NORELY && LA123_0 <= KW_NOSCAN)||LA123_0==KW_NOVALIDATE||LA123_0==KW_NULLS||LA123_0==KW_OFFSET||(LA123_0 >= KW_OPERATOR && LA123_0 <= KW_OPTION)||(LA123_0 >= KW_OUTPUTDRIVER && LA123_0 <= KW_OUTPUTFORMAT)||(LA123_0 >= KW_OVERWRITE && LA123_0 <= KW_OWNER)||(LA123_0 >= KW_PARTITIONED && LA123_0 <= KW_PATH)||(LA123_0 >= KW_PLAN && LA123_0 <= KW_POOL)||LA123_0==KW_PRINCIPALS||LA123_0==KW_PURGE||(LA123_0 >= KW_QUARTER && LA123_0 <= KW_QUERY_PARALLELISM)||LA123_0==KW_READ||(LA123_0 >= KW_REBUILD && LA123_0 <= KW_RECORDWRITER)||(LA123_0 >= KW_RELOAD && LA123_0 <= KW_RETENTION)||LA123_0==KW_REWRITE||(LA123_0 >= KW_ROLE && LA123_0 <= KW_ROLES)||(LA123_0 >= KW_SCHEDULED && LA123_0 <= KW_SECOND)||(LA123_0 >= KW_SEMI && LA123_0 <= KW_SERVER)||(LA123_0 >= KW_SETS && LA123_0 <= KW_SKEWED)||(LA123_0 >= KW_SNAPSHOT && LA123_0 <= KW_SNAPSHOTS)||(LA123_0 >= KW_SORT && LA123_0 <= KW_SSL)||(LA123_0 >= KW_STATISTICS && LA123_0 <= KW_SUMMARY)||(LA123_0 >= KW_SYSTEM_TIME && LA123_0 <= KW_TABLES)||(LA123_0 >= KW_TAG && LA123_0 <= KW_TERMINATED)||LA123_0==KW_TINYINT||LA123_0==KW_TOUCH||(LA123_0 >= KW_TRANSACTION && LA123_0 <= KW_TRANSACTIONS)||LA123_0==KW_TRIM||(LA123_0 >= KW_TYPE && LA123_0 <= KW_UNARCHIVE)||LA123_0==KW_UNDO||LA123_0==KW_UNIONTYPE||(LA123_0 >= KW_UNKNOWN && LA123_0 <= KW_UNSIGNED)||(LA123_0 >= KW_URI && LA123_0 <= KW_USE)||(LA123_0 >= KW_UTC && LA123_0 <= KW_VALIDATE)||LA123_0==KW_VALUE_TYPE||(LA123_0 >= KW_VECTORIZATION && LA123_0 <= KW_WEEK)||LA123_0==KW_WHILE||(LA123_0 >= KW_WITHIN && LA123_0 <= KW_ZONE)||LA123_0==KW_BATCH||LA123_0==KW_DAYOFWEEK||LA123_0==KW_HOLD_DDLTIME||LA123_0==KW_NO_DROP||LA123_0==KW_OFFLINE||LA123_0==KW_PROTECTION||LA123_0==KW_READONLY||LA123_0==KW_TIMESTAMPTZ) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;

            }
            switch (alt123) {
                case 1 :
                    // HiveParser.g:1445:7: ( KW_ALL )=> KW_ALL
                    {
                    KW_ALL371=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeIncludeColObject6476); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL371);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1445:26: -> ^( TOK_RESOURCE_ALL )
                    {
                        // HiveParser.g:1445:29: ^( TOK_RESOURCE_ALL )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_RESOURCE_ALL, "TOK_RESOURCE_ALL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1446:7: privObjectCols
                    {
                    pushFollow(FOLLOW_privObjectCols_in_privilegeIncludeColObject6490);
                    privObjectCols372=privObjectCols();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_privObjectCols.add(privObjectCols372.getTree());

                    // AST REWRITE
                    // elements: privObjectCols
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1446:22: -> ^( TOK_PRIV_OBJECT_COL privObjectCols )
                    {
                        // HiveParser.g:1446:25: ^( TOK_PRIV_OBJECT_COL privObjectCols )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_PRIV_OBJECT_COL, "TOK_PRIV_OBJECT_COL")
                        , root_1);

                        adaptor.addChild(root_1, stream_privObjectCols.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privilegeIncludeColObject"


    public static class privilegeObject_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privilegeObject"
    // HiveParser.g:1449:1: privilegeObject : KW_ON privObject -> ^( TOK_PRIV_OBJECT privObject ) ;
    public final HiveParser.privilegeObject_return privilegeObject() throws RecognitionException {
        HiveParser.privilegeObject_return retval = new HiveParser.privilegeObject_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_ON373=null;
        HiveParser.privObject_return privObject374 =null;


        ASTNode KW_ON373_tree=null;
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_privObject=new RewriteRuleSubtreeStream(adaptor,"rule privObject");
        pushMsg("privilege object", state);
        try {
            // HiveParser.g:1452:5: ( KW_ON privObject -> ^( TOK_PRIV_OBJECT privObject ) )
            // HiveParser.g:1452:7: KW_ON privObject
            {
            KW_ON373=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_privilegeObject6525); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON373);


            pushFollow(FOLLOW_privObject_in_privilegeObject6527);
            privObject374=privObject();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_privObject.add(privObject374.getTree());

            // AST REWRITE
            // elements: privObject
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1452:24: -> ^( TOK_PRIV_OBJECT privObject )
            {
                // HiveParser.g:1452:27: ^( TOK_PRIV_OBJECT privObject )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_PRIV_OBJECT, "TOK_PRIV_OBJECT")
                , root_1);

                adaptor.addChild(root_1, stream_privObject.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privilegeObject"


    public static class privObject_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privObject"
    // HiveParser.g:1456:1: privObject : ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) );
    public final HiveParser.privObject_return privObject() throws RecognitionException {
        HiveParser.privObject_return retval = new HiveParser.privObject_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token path=null;
        Token KW_DATABASE375=null;
        Token KW_SCHEMA376=null;
        Token KW_TABLE378=null;
        Token KW_URI381=null;
        Token KW_SERVER382=null;
        HiveParser_IdentifiersParser.identifier_return identifier377 =null;

        HiveParser_FromClauseParser.tableName_return tableName379 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec380 =null;

        HiveParser_IdentifiersParser.identifier_return identifier383 =null;


        ASTNode path_tree=null;
        ASTNode KW_DATABASE375_tree=null;
        ASTNode KW_SCHEMA376_tree=null;
        ASTNode KW_TABLE378_tree=null;
        ASTNode KW_URI381_tree=null;
        ASTNode KW_SERVER382_tree=null;
        RewriteRuleTokenStream stream_KW_SERVER=new RewriteRuleTokenStream(adaptor,"token KW_SERVER");
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_URI=new RewriteRuleTokenStream(adaptor,"token KW_URI");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        try {
            // HiveParser.g:1457:5: ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) )
            int alt127=4;
            switch ( input.LA(1) ) {
            case KW_DATABASE:
                {
                alt127=1;
                }
                break;
            case KW_SCHEMA:
                {
                int LA127_2 = input.LA(2);

                if ( (LA127_2==Identifier||(LA127_2 >= KW_ABORT && LA127_2 <= KW_AFTER)||LA127_2==KW_ALLOC_FRACTION||LA127_2==KW_ANALYZE||LA127_2==KW_ARCHIVE||(LA127_2 >= KW_ASC && LA127_2 <= KW_AT)||(LA127_2 >= KW_AUTOCOMMIT && LA127_2 <= KW_BEFORE)||(LA127_2 >= KW_BRANCH && LA127_2 <= KW_BUCKETS)||(LA127_2 >= KW_CACHE && LA127_2 <= KW_CASCADE)||(LA127_2 >= KW_CBO && LA127_2 <= KW_CHANGE)||LA127_2==KW_CHECK||(LA127_2 >= KW_CLUSTER && LA127_2 <= KW_COLLECTION)||(LA127_2 >= KW_COLUMNS && LA127_2 <= KW_COMMENT)||(LA127_2 >= KW_COMPACT && LA127_2 <= KW_COMPACTIONS)||(LA127_2 >= KW_COMPUTE && LA127_2 <= KW_CONCATENATE)||LA127_2==KW_CONTINUE||LA127_2==KW_COST||LA127_2==KW_CRON||LA127_2==KW_DATA||LA127_2==KW_DATABASES||(LA127_2 >= KW_DATETIME && LA127_2 <= KW_DCPROPERTIES)||LA127_2==KW_DEBUG||(LA127_2 >= KW_DEFAULT && LA127_2 <= KW_DEFINED)||(LA127_2 >= KW_DELIMITED && LA127_2 <= KW_DESC)||(LA127_2 >= KW_DETAIL && LA127_2 <= KW_DISABLE)||(LA127_2 >= KW_DISTRIBUTE && LA127_2 <= KW_DO)||LA127_2==KW_DOW||(LA127_2 >= KW_DUMP && LA127_2 <= KW_ELEM_TYPE)||LA127_2==KW_ENABLE||(LA127_2 >= KW_ENFORCED && LA127_2 <= KW_EVERY)||(LA127_2 >= KW_EXCLUSIVE && LA127_2 <= KW_EXECUTED)||(LA127_2 >= KW_EXPIRE_SNAPSHOTS && LA127_2 <= KW_EXPRESSION)||LA127_2==KW_FAST_FORWARD||(LA127_2 >= KW_FIELDS && LA127_2 <= KW_FIRST)||(LA127_2 >= KW_FORMAT && LA127_2 <= KW_FORMATTED)||LA127_2==KW_FUNCTIONS||(LA127_2 >= KW_HOUR && LA127_2 <= KW_IDXPROPERTIES)||LA127_2==KW_IGNORE||(LA127_2 >= KW_INDEX && LA127_2 <= KW_INDEXES)||(LA127_2 >= KW_INPATH && LA127_2 <= KW_INPUTFORMAT)||(LA127_2 >= KW_ISOLATION && LA127_2 <= KW_JAR)||(LA127_2 >= KW_JOINCOST && LA127_2 <= KW_LAST)||LA127_2==KW_LEVEL||(LA127_2 >= KW_LIMIT && LA127_2 <= KW_LOAD)||(LA127_2 >= KW_LOCATION && LA127_2 <= KW_LONG)||(LA127_2 >= KW_MANAGED && LA127_2 <= KW_MANAGEMENT)||(LA127_2 >= KW_MAPJOIN && LA127_2 <= KW_MATERIALIZED)||LA127_2==KW_METADATA||(LA127_2 >= KW_MINUTE && LA127_2 <= KW_MONTH)||(LA127_2 >= KW_MOVE && LA127_2 <= KW_MSCK)||(LA127_2 >= KW_NORELY && LA127_2 <= KW_NOSCAN)||LA127_2==KW_NOVALIDATE||LA127_2==KW_NULLS||LA127_2==KW_OFFSET||(LA127_2 >= KW_OPERATOR && LA127_2 <= KW_OPTION)||(LA127_2 >= KW_OUTPUTDRIVER && LA127_2 <= KW_OUTPUTFORMAT)||(LA127_2 >= KW_OVERWRITE && LA127_2 <= KW_OWNER)||(LA127_2 >= KW_PARTITIONED && LA127_2 <= KW_PATH)||(LA127_2 >= KW_PLAN && LA127_2 <= KW_POOL)||LA127_2==KW_PRINCIPALS||LA127_2==KW_PURGE||(LA127_2 >= KW_QUARTER && LA127_2 <= KW_QUERY_PARALLELISM)||LA127_2==KW_READ||(LA127_2 >= KW_REBUILD && LA127_2 <= KW_RECORDWRITER)||(LA127_2 >= KW_RELOAD && LA127_2 <= KW_RETENTION)||LA127_2==KW_REWRITE||(LA127_2 >= KW_ROLE && LA127_2 <= KW_ROLES)||(LA127_2 >= KW_SCHEDULED && LA127_2 <= KW_SECOND)||(LA127_2 >= KW_SEMI && LA127_2 <= KW_SERVER)||(LA127_2 >= KW_SETS && LA127_2 <= KW_SKEWED)||(LA127_2 >= KW_SNAPSHOT && LA127_2 <= KW_SNAPSHOTS)||(LA127_2 >= KW_SORT && LA127_2 <= KW_SSL)||(LA127_2 >= KW_STATISTICS && LA127_2 <= KW_SUMMARY)||(LA127_2 >= KW_SYSTEM_TIME && LA127_2 <= KW_SYSTEM_VERSION)||LA127_2==KW_TABLES||(LA127_2 >= KW_TAG && LA127_2 <= KW_TERMINATED)||LA127_2==KW_TINYINT||LA127_2==KW_TOUCH||(LA127_2 >= KW_TRANSACTION && LA127_2 <= KW_TRANSACTIONS)||LA127_2==KW_TRIM||(LA127_2 >= KW_TYPE && LA127_2 <= KW_UNARCHIVE)||LA127_2==KW_UNDO||LA127_2==KW_UNIONTYPE||(LA127_2 >= KW_UNKNOWN && LA127_2 <= KW_UNSIGNED)||(LA127_2 >= KW_URI && LA127_2 <= KW_USE)||(LA127_2 >= KW_UTC && LA127_2 <= KW_VALIDATE)||LA127_2==KW_VALUE_TYPE||(LA127_2 >= KW_VECTORIZATION && LA127_2 <= KW_WEEK)||LA127_2==KW_WHILE||(LA127_2 >= KW_WITHIN && LA127_2 <= KW_ZONE)||LA127_2==KW_BATCH||LA127_2==KW_DAYOFWEEK||LA127_2==KW_HOLD_DDLTIME||LA127_2==KW_NO_DROP||LA127_2==KW_OFFLINE||LA127_2==KW_PROTECTION||LA127_2==KW_READONLY||LA127_2==KW_TIMESTAMPTZ) ) {
                    alt127=1;
                }
                else if ( (LA127_2==DOT||LA127_2==KW_FROM||LA127_2==KW_PARTITION||LA127_2==KW_TO) ) {
                    alt127=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 2, input);

                    throw nvae;

                }
                }
                break;
            case Identifier:
            case KW_ABORT:
            case KW_ACTIVATE:
            case KW_ACTIVE:
            case KW_ADD:
            case KW_ADMIN:
            case KW_AFTER:
            case KW_ALLOC_FRACTION:
            case KW_ANALYZE:
            case KW_ARCHIVE:
            case KW_ASC:
            case KW_AST:
            case KW_AT:
            case KW_AUTOCOMMIT:
            case KW_BEFORE:
            case KW_BRANCH:
            case KW_BUCKET:
            case KW_BUCKETS:
            case KW_CACHE:
            case KW_CASCADE:
            case KW_CBO:
            case KW_CHANGE:
            case KW_CHECK:
            case KW_CLUSTER:
            case KW_CLUSTERED:
            case KW_CLUSTERSTATUS:
            case KW_COLLECTION:
            case KW_COLUMNS:
            case KW_COMMENT:
            case KW_COMPACT:
            case KW_COMPACTIONS:
            case KW_COMPUTE:
            case KW_CONCATENATE:
            case KW_CONTINUE:
            case KW_COST:
            case KW_CRON:
            case KW_DATA:
            case KW_DATABASES:
            case KW_DATETIME:
            case KW_DAY:
            case KW_DBPROPERTIES:
            case KW_DCPROPERTIES:
            case KW_DEBUG:
            case KW_DEFAULT:
            case KW_DEFERRED:
            case KW_DEFINED:
            case KW_DELIMITED:
            case KW_DEPENDENCY:
            case KW_DESC:
            case KW_DETAIL:
            case KW_DIRECTORIES:
            case KW_DIRECTORY:
            case KW_DISABLE:
            case KW_DISTRIBUTE:
            case KW_DISTRIBUTED:
            case KW_DO:
            case KW_DOW:
            case KW_DUMP:
            case KW_ELEM_TYPE:
            case KW_ENABLE:
            case KW_ENFORCED:
            case KW_ESCAPED:
            case KW_EVERY:
            case KW_EXCLUSIVE:
            case KW_EXECUTE:
            case KW_EXECUTED:
            case KW_EXPIRE_SNAPSHOTS:
            case KW_EXPLAIN:
            case KW_EXPORT:
            case KW_EXPRESSION:
            case KW_FAST_FORWARD:
            case KW_FIELDS:
            case KW_FILE:
            case KW_FILEFORMAT:
            case KW_FIRST:
            case KW_FORMAT:
            case KW_FORMATTED:
            case KW_FUNCTIONS:
            case KW_HOUR:
            case KW_IDXPROPERTIES:
            case KW_IGNORE:
            case KW_INDEX:
            case KW_INDEXES:
            case KW_INPATH:
            case KW_INPUTDRIVER:
            case KW_INPUTFORMAT:
            case KW_ISOLATION:
            case KW_ITEMS:
            case KW_JAR:
            case KW_JOINCOST:
            case KW_KEY:
            case KW_KEYS:
            case KW_KEY_TYPE:
            case KW_KILL:
            case KW_LAST:
            case KW_LEVEL:
            case KW_LIMIT:
            case KW_LINES:
            case KW_LOAD:
            case KW_LOCATION:
            case KW_LOCK:
            case KW_LOCKS:
            case KW_LOGICAL:
            case KW_LONG:
            case KW_MANAGED:
            case KW_MANAGEDLOCATION:
            case KW_MANAGEMENT:
            case KW_MAPJOIN:
            case KW_MAPPING:
            case KW_MATCHED:
            case KW_MATERIALIZED:
            case KW_METADATA:
            case KW_MINUTE:
            case KW_MONTH:
            case KW_MOVE:
            case KW_MSCK:
            case KW_NORELY:
            case KW_NOSCAN:
            case KW_NOVALIDATE:
            case KW_NULLS:
            case KW_OFFSET:
            case KW_OPERATOR:
            case KW_OPTIMIZE:
            case KW_OPTION:
            case KW_OUTPUTDRIVER:
            case KW_OUTPUTFORMAT:
            case KW_OVERWRITE:
            case KW_OWNER:
            case KW_PARTITIONED:
            case KW_PARTITIONS:
            case KW_PATH:
            case KW_PLAN:
            case KW_PLANS:
            case KW_PLUS:
            case KW_POOL:
            case KW_PRINCIPALS:
            case KW_PURGE:
            case KW_QUARTER:
            case KW_QUERY:
            case KW_QUERY_PARALLELISM:
            case KW_READ:
            case KW_REBUILD:
            case KW_RECORDREADER:
            case KW_RECORDWRITER:
            case KW_RELOAD:
            case KW_RELY:
            case KW_REMOTE:
            case KW_RENAME:
            case KW_REOPTIMIZATION:
            case KW_REPAIR:
            case KW_REPL:
            case KW_REPLACE:
            case KW_REPLICATION:
            case KW_RESOURCE:
            case KW_RESPECT:
            case KW_RESTRICT:
            case KW_RETAIN:
            case KW_RETENTION:
            case KW_REWRITE:
            case KW_ROLE:
            case KW_ROLES:
            case KW_SCHEDULED:
            case KW_SCHEDULING_POLICY:
            case KW_SCHEMAS:
            case KW_SECOND:
            case KW_SEMI:
            case KW_SERDE:
            case KW_SERDEPROPERTIES:
            case KW_SETS:
            case KW_SET_CURRENT_SNAPSHOT:
            case KW_SHARED:
            case KW_SHOW:
            case KW_SHOW_DATABASE:
            case KW_SKEWED:
            case KW_SNAPSHOT:
            case KW_SNAPSHOTS:
            case KW_SORT:
            case KW_SORTED:
            case KW_SPEC:
            case KW_SSL:
            case KW_STATISTICS:
            case KW_STATUS:
            case KW_STORED:
            case KW_STREAMTABLE:
            case KW_STRING:
            case KW_STRUCT:
            case KW_SUMMARY:
            case KW_SYSTEM_TIME:
            case KW_SYSTEM_VERSION:
            case KW_TABLE:
            case KW_TABLES:
            case KW_TAG:
            case KW_TBLPROPERTIES:
            case KW_TEMPORARY:
            case KW_TERMINATED:
            case KW_TINYINT:
            case KW_TOUCH:
            case KW_TRANSACTION:
            case KW_TRANSACTIONAL:
            case KW_TRANSACTIONS:
            case KW_TRIM:
            case KW_TYPE:
            case KW_UNARCHIVE:
            case KW_UNDO:
            case KW_UNIONTYPE:
            case KW_UNKNOWN:
            case KW_UNLOCK:
            case KW_UNMANAGED:
            case KW_UNSET:
            case KW_UNSIGNED:
            case KW_URL:
            case KW_USE:
            case KW_UTC:
            case KW_UTCTIMESTAMP:
            case KW_VALIDATE:
            case KW_VALUE_TYPE:
            case KW_VECTORIZATION:
            case KW_VIEW:
            case KW_VIEWS:
            case KW_WAIT:
            case KW_WEEK:
            case KW_WHILE:
            case KW_WITHIN:
            case KW_WORK:
            case KW_WORKLOAD:
            case KW_WRITE:
            case KW_YEAR:
            case KW_ZONE:
            case KW_BATCH:
            case KW_DAYOFWEEK:
            case KW_HOLD_DDLTIME:
            case KW_NO_DROP:
            case KW_OFFLINE:
            case KW_PROTECTION:
            case KW_READONLY:
            case KW_TIMESTAMPTZ:
                {
                alt127=2;
                }
                break;
            case KW_URI:
                {
                int LA127_5 = input.LA(2);

                if ( (LA127_5==DOT||LA127_5==KW_FROM||LA127_5==KW_PARTITION||LA127_5==KW_TO) ) {
                    alt127=2;
                }
                else if ( (LA127_5==StringLiteral) ) {
                    alt127=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 5, input);

                    throw nvae;

                }
                }
                break;
            case KW_SERVER:
                {
                int LA127_6 = input.LA(2);

                if ( (LA127_6==DOT||LA127_6==KW_FROM||LA127_6==KW_PARTITION||LA127_6==KW_TO) ) {
                    alt127=2;
                }
                else if ( (LA127_6==Identifier||(LA127_6 >= KW_ABORT && LA127_6 <= KW_AFTER)||LA127_6==KW_ALLOC_FRACTION||LA127_6==KW_ANALYZE||LA127_6==KW_ARCHIVE||(LA127_6 >= KW_ASC && LA127_6 <= KW_AT)||(LA127_6 >= KW_AUTOCOMMIT && LA127_6 <= KW_BEFORE)||(LA127_6 >= KW_BRANCH && LA127_6 <= KW_BUCKETS)||(LA127_6 >= KW_CACHE && LA127_6 <= KW_CASCADE)||(LA127_6 >= KW_CBO && LA127_6 <= KW_CHANGE)||LA127_6==KW_CHECK||(LA127_6 >= KW_CLUSTER && LA127_6 <= KW_COLLECTION)||(LA127_6 >= KW_COLUMNS && LA127_6 <= KW_COMMENT)||(LA127_6 >= KW_COMPACT && LA127_6 <= KW_COMPACTIONS)||(LA127_6 >= KW_COMPUTE && LA127_6 <= KW_CONCATENATE)||LA127_6==KW_CONTINUE||LA127_6==KW_COST||LA127_6==KW_CRON||LA127_6==KW_DATA||LA127_6==KW_DATABASES||(LA127_6 >= KW_DATETIME && LA127_6 <= KW_DCPROPERTIES)||LA127_6==KW_DEBUG||(LA127_6 >= KW_DEFAULT && LA127_6 <= KW_DEFINED)||(LA127_6 >= KW_DELIMITED && LA127_6 <= KW_DESC)||(LA127_6 >= KW_DETAIL && LA127_6 <= KW_DISABLE)||(LA127_6 >= KW_DISTRIBUTE && LA127_6 <= KW_DO)||LA127_6==KW_DOW||(LA127_6 >= KW_DUMP && LA127_6 <= KW_ELEM_TYPE)||LA127_6==KW_ENABLE||(LA127_6 >= KW_ENFORCED && LA127_6 <= KW_EVERY)||(LA127_6 >= KW_EXCLUSIVE && LA127_6 <= KW_EXECUTED)||(LA127_6 >= KW_EXPIRE_SNAPSHOTS && LA127_6 <= KW_EXPRESSION)||LA127_6==KW_FAST_FORWARD||(LA127_6 >= KW_FIELDS && LA127_6 <= KW_FIRST)||(LA127_6 >= KW_FORMAT && LA127_6 <= KW_FORMATTED)||LA127_6==KW_FUNCTIONS||(LA127_6 >= KW_HOUR && LA127_6 <= KW_IDXPROPERTIES)||LA127_6==KW_IGNORE||(LA127_6 >= KW_INDEX && LA127_6 <= KW_INDEXES)||(LA127_6 >= KW_INPATH && LA127_6 <= KW_INPUTFORMAT)||(LA127_6 >= KW_ISOLATION && LA127_6 <= KW_JAR)||(LA127_6 >= KW_JOINCOST && LA127_6 <= KW_LAST)||LA127_6==KW_LEVEL||(LA127_6 >= KW_LIMIT && LA127_6 <= KW_LOAD)||(LA127_6 >= KW_LOCATION && LA127_6 <= KW_LONG)||(LA127_6 >= KW_MANAGED && LA127_6 <= KW_MANAGEMENT)||(LA127_6 >= KW_MAPJOIN && LA127_6 <= KW_MATERIALIZED)||LA127_6==KW_METADATA||(LA127_6 >= KW_MINUTE && LA127_6 <= KW_MONTH)||(LA127_6 >= KW_MOVE && LA127_6 <= KW_MSCK)||(LA127_6 >= KW_NORELY && LA127_6 <= KW_NOSCAN)||LA127_6==KW_NOVALIDATE||LA127_6==KW_NULLS||LA127_6==KW_OFFSET||(LA127_6 >= KW_OPERATOR && LA127_6 <= KW_OPTION)||(LA127_6 >= KW_OUTPUTDRIVER && LA127_6 <= KW_OUTPUTFORMAT)||(LA127_6 >= KW_OVERWRITE && LA127_6 <= KW_OWNER)||(LA127_6 >= KW_PARTITIONED && LA127_6 <= KW_PATH)||(LA127_6 >= KW_PLAN && LA127_6 <= KW_POOL)||LA127_6==KW_PRINCIPALS||LA127_6==KW_PURGE||(LA127_6 >= KW_QUARTER && LA127_6 <= KW_QUERY_PARALLELISM)||LA127_6==KW_READ||(LA127_6 >= KW_REBUILD && LA127_6 <= KW_RECORDWRITER)||(LA127_6 >= KW_RELOAD && LA127_6 <= KW_RETENTION)||LA127_6==KW_REWRITE||(LA127_6 >= KW_ROLE && LA127_6 <= KW_ROLES)||(LA127_6 >= KW_SCHEDULED && LA127_6 <= KW_SECOND)||(LA127_6 >= KW_SEMI && LA127_6 <= KW_SERVER)||(LA127_6 >= KW_SETS && LA127_6 <= KW_SKEWED)||(LA127_6 >= KW_SNAPSHOT && LA127_6 <= KW_SNAPSHOTS)||(LA127_6 >= KW_SORT && LA127_6 <= KW_SSL)||(LA127_6 >= KW_STATISTICS && LA127_6 <= KW_SUMMARY)||(LA127_6 >= KW_SYSTEM_TIME && LA127_6 <= KW_SYSTEM_VERSION)||LA127_6==KW_TABLES||(LA127_6 >= KW_TAG && LA127_6 <= KW_TERMINATED)||LA127_6==KW_TINYINT||LA127_6==KW_TOUCH||(LA127_6 >= KW_TRANSACTION && LA127_6 <= KW_TRANSACTIONS)||LA127_6==KW_TRIM||(LA127_6 >= KW_TYPE && LA127_6 <= KW_UNARCHIVE)||LA127_6==KW_UNDO||LA127_6==KW_UNIONTYPE||(LA127_6 >= KW_UNKNOWN && LA127_6 <= KW_UNSIGNED)||(LA127_6 >= KW_URI && LA127_6 <= KW_USE)||(LA127_6 >= KW_UTC && LA127_6 <= KW_VALIDATE)||LA127_6==KW_VALUE_TYPE||(LA127_6 >= KW_VECTORIZATION && LA127_6 <= KW_WEEK)||LA127_6==KW_WHILE||(LA127_6 >= KW_WITHIN && LA127_6 <= KW_ZONE)||LA127_6==KW_BATCH||LA127_6==KW_DAYOFWEEK||LA127_6==KW_HOLD_DDLTIME||LA127_6==KW_NO_DROP||LA127_6==KW_OFFLINE||LA127_6==KW_PROTECTION||LA127_6==KW_READONLY||LA127_6==KW_TIMESTAMPTZ) ) {
                    alt127=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 6, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;

            }

            switch (alt127) {
                case 1 :
                    // HiveParser.g:1457:7: ( KW_DATABASE | KW_SCHEMA ) identifier
                    {
                    // HiveParser.g:1457:7: ( KW_DATABASE | KW_SCHEMA )
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==KW_DATABASE) ) {
                        alt124=1;
                    }
                    else if ( (LA124_0==KW_SCHEMA) ) {
                        alt124=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 124, 0, input);

                        throw nvae;

                    }
                    switch (alt124) {
                        case 1 :
                            // HiveParser.g:1457:8: KW_DATABASE
                            {
                            KW_DATABASE375=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privObject6554); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE375);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1457:20: KW_SCHEMA
                            {
                            KW_SCHEMA376=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_privObject6556); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA376);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_identifier_in_privObject6559);
                    identifier377=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier377.getTree());

                    // AST REWRITE
                    // elements: identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1457:42: -> ^( TOK_DB_TYPE identifier )
                    {
                        // HiveParser.g:1457:45: ^( TOK_DB_TYPE identifier )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DB_TYPE, "TOK_DB_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1458:7: ( KW_TABLE )? tableName ( partitionSpec )?
                    {
                    // HiveParser.g:1458:7: ( KW_TABLE )?
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==KW_TABLE) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            // HiveParser.g:1458:7: KW_TABLE
                            {
                            KW_TABLE378=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privObject6575); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE378);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_tableName_in_privObject6578);
                    tableName379=tableName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableName.add(tableName379.getTree());

                    // HiveParser.g:1458:27: ( partitionSpec )?
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==KW_PARTITION) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // HiveParser.g:1458:27: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_privObject6580);
                            partitionSpec380=partitionSpec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec380.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: tableName, partitionSpec
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1458:42: -> ^( TOK_TABLE_TYPE tableName ( partitionSpec )? )
                    {
                        // HiveParser.g:1458:45: ^( TOK_TABLE_TYPE tableName ( partitionSpec )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_TABLE_TYPE, "TOK_TABLE_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableName.nextTree());

                        // HiveParser.g:1458:72: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1459:7: KW_URI (path= StringLiteral )
                    {
                    KW_URI381=(Token)match(input,KW_URI,FOLLOW_KW_URI_in_privObject6600); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_URI.add(KW_URI381);


                    // HiveParser.g:1459:14: (path= StringLiteral )
                    // HiveParser.g:1459:15: path= StringLiteral
                    {
                    path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_privObject6605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(path);


                    }


                    // AST REWRITE
                    // elements: path
                    // token labels: path
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1459:35: -> ^( TOK_URI_TYPE $path)
                    {
                        // HiveParser.g:1459:39: ^( TOK_URI_TYPE $path)
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_URI_TYPE, "TOK_URI_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_path.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:1460:7: KW_SERVER identifier
                    {
                    KW_SERVER382=(Token)match(input,KW_SERVER,FOLLOW_KW_SERVER_in_privObject6624); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SERVER.add(KW_SERVER382);


                    pushFollow(FOLLOW_identifier_in_privObject6626);
                    identifier383=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier383.getTree());

                    // AST REWRITE
                    // elements: identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1460:28: -> ^( TOK_SERVER_TYPE identifier )
                    {
                        // HiveParser.g:1460:31: ^( TOK_SERVER_TYPE identifier )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SERVER_TYPE, "TOK_SERVER_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privObject"


    public static class privObjectCols_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privObjectCols"
    // HiveParser.g:1463:1: privObjectCols : ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) );
    public final HiveParser.privObjectCols_return privObjectCols() throws RecognitionException {
        HiveParser.privObjectCols_return retval = new HiveParser.privObjectCols_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token path=null;
        Token KW_DATABASE384=null;
        Token KW_SCHEMA385=null;
        Token KW_TABLE387=null;
        Token LPAREN389=null;
        Token RPAREN390=null;
        Token KW_URI392=null;
        Token KW_SERVER393=null;
        HiveParser.columnNameList_return cols =null;

        HiveParser_IdentifiersParser.identifier_return identifier386 =null;

        HiveParser_FromClauseParser.tableName_return tableName388 =null;

        HiveParser_IdentifiersParser.partitionSpec_return partitionSpec391 =null;

        HiveParser_IdentifiersParser.identifier_return identifier394 =null;


        ASTNode path_tree=null;
        ASTNode KW_DATABASE384_tree=null;
        ASTNode KW_SCHEMA385_tree=null;
        ASTNode KW_TABLE387_tree=null;
        ASTNode LPAREN389_tree=null;
        ASTNode RPAREN390_tree=null;
        ASTNode KW_URI392_tree=null;
        ASTNode KW_SERVER393_tree=null;
        RewriteRuleTokenStream stream_KW_SERVER=new RewriteRuleTokenStream(adaptor,"token KW_SERVER");
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_URI=new RewriteRuleTokenStream(adaptor,"token KW_URI");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        try {
            // HiveParser.g:1464:5: ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) )
            int alt132=4;
            switch ( input.LA(1) ) {
            case KW_DATABASE:
                {
                alt132=1;
                }
                break;
            case KW_SCHEMA:
                {
                int LA132_2 = input.LA(2);

                if ( (LA132_2==Identifier||(LA132_2 >= KW_ABORT && LA132_2 <= KW_AFTER)||LA132_2==KW_ALLOC_FRACTION||LA132_2==KW_ANALYZE||LA132_2==KW_ARCHIVE||(LA132_2 >= KW_ASC && LA132_2 <= KW_AT)||(LA132_2 >= KW_AUTOCOMMIT && LA132_2 <= KW_BEFORE)||(LA132_2 >= KW_BRANCH && LA132_2 <= KW_BUCKETS)||(LA132_2 >= KW_CACHE && LA132_2 <= KW_CASCADE)||(LA132_2 >= KW_CBO && LA132_2 <= KW_CHANGE)||LA132_2==KW_CHECK||(LA132_2 >= KW_CLUSTER && LA132_2 <= KW_COLLECTION)||(LA132_2 >= KW_COLUMNS && LA132_2 <= KW_COMMENT)||(LA132_2 >= KW_COMPACT && LA132_2 <= KW_COMPACTIONS)||(LA132_2 >= KW_COMPUTE && LA132_2 <= KW_CONCATENATE)||LA132_2==KW_CONTINUE||LA132_2==KW_COST||LA132_2==KW_CRON||LA132_2==KW_DATA||LA132_2==KW_DATABASES||(LA132_2 >= KW_DATETIME && LA132_2 <= KW_DCPROPERTIES)||LA132_2==KW_DEBUG||(LA132_2 >= KW_DEFAULT && LA132_2 <= KW_DEFINED)||(LA132_2 >= KW_DELIMITED && LA132_2 <= KW_DESC)||(LA132_2 >= KW_DETAIL && LA132_2 <= KW_DISABLE)||(LA132_2 >= KW_DISTRIBUTE && LA132_2 <= KW_DO)||LA132_2==KW_DOW||(LA132_2 >= KW_DUMP && LA132_2 <= KW_ELEM_TYPE)||LA132_2==KW_ENABLE||(LA132_2 >= KW_ENFORCED && LA132_2 <= KW_EVERY)||(LA132_2 >= KW_EXCLUSIVE && LA132_2 <= KW_EXECUTED)||(LA132_2 >= KW_EXPIRE_SNAPSHOTS && LA132_2 <= KW_EXPRESSION)||LA132_2==KW_FAST_FORWARD||(LA132_2 >= KW_FIELDS && LA132_2 <= KW_FIRST)||(LA132_2 >= KW_FORMAT && LA132_2 <= KW_FORMATTED)||LA132_2==KW_FUNCTIONS||(LA132_2 >= KW_HOUR && LA132_2 <= KW_IDXPROPERTIES)||LA132_2==KW_IGNORE||(LA132_2 >= KW_INDEX && LA132_2 <= KW_INDEXES)||(LA132_2 >= KW_INPATH && LA132_2 <= KW_INPUTFORMAT)||(LA132_2 >= KW_ISOLATION && LA132_2 <= KW_JAR)||(LA132_2 >= KW_JOINCOST && LA132_2 <= KW_LAST)||LA132_2==KW_LEVEL||(LA132_2 >= KW_LIMIT && LA132_2 <= KW_LOAD)||(LA132_2 >= KW_LOCATION && LA132_2 <= KW_LONG)||(LA132_2 >= KW_MANAGED && LA132_2 <= KW_MANAGEMENT)||(LA132_2 >= KW_MAPJOIN && LA132_2 <= KW_MATERIALIZED)||LA132_2==KW_METADATA||(LA132_2 >= KW_MINUTE && LA132_2 <= KW_MONTH)||(LA132_2 >= KW_MOVE && LA132_2 <= KW_MSCK)||(LA132_2 >= KW_NORELY && LA132_2 <= KW_NOSCAN)||LA132_2==KW_NOVALIDATE||LA132_2==KW_NULLS||LA132_2==KW_OFFSET||(LA132_2 >= KW_OPERATOR && LA132_2 <= KW_OPTION)||(LA132_2 >= KW_OUTPUTDRIVER && LA132_2 <= KW_OUTPUTFORMAT)||(LA132_2 >= KW_OVERWRITE && LA132_2 <= KW_OWNER)||(LA132_2 >= KW_PARTITIONED && LA132_2 <= KW_PATH)||(LA132_2 >= KW_PLAN && LA132_2 <= KW_POOL)||LA132_2==KW_PRINCIPALS||LA132_2==KW_PURGE||(LA132_2 >= KW_QUARTER && LA132_2 <= KW_QUERY_PARALLELISM)||LA132_2==KW_READ||(LA132_2 >= KW_REBUILD && LA132_2 <= KW_RECORDWRITER)||(LA132_2 >= KW_RELOAD && LA132_2 <= KW_RETENTION)||LA132_2==KW_REWRITE||(LA132_2 >= KW_ROLE && LA132_2 <= KW_ROLES)||(LA132_2 >= KW_SCHEDULED && LA132_2 <= KW_SECOND)||(LA132_2 >= KW_SEMI && LA132_2 <= KW_SERVER)||(LA132_2 >= KW_SETS && LA132_2 <= KW_SKEWED)||(LA132_2 >= KW_SNAPSHOT && LA132_2 <= KW_SNAPSHOTS)||(LA132_2 >= KW_SORT && LA132_2 <= KW_SSL)||(LA132_2 >= KW_STATISTICS && LA132_2 <= KW_SUMMARY)||(LA132_2 >= KW_SYSTEM_TIME && LA132_2 <= KW_SYSTEM_VERSION)||LA132_2==KW_TABLES||(LA132_2 >= KW_TAG && LA132_2 <= KW_TERMINATED)||LA132_2==KW_TINYINT||LA132_2==KW_TOUCH||(LA132_2 >= KW_TRANSACTION && LA132_2 <= KW_TRANSACTIONS)||LA132_2==KW_TRIM||(LA132_2 >= KW_TYPE && LA132_2 <= KW_UNARCHIVE)||LA132_2==KW_UNDO||LA132_2==KW_UNIONTYPE||(LA132_2 >= KW_UNKNOWN && LA132_2 <= KW_UNSIGNED)||(LA132_2 >= KW_URI && LA132_2 <= KW_USE)||(LA132_2 >= KW_UTC && LA132_2 <= KW_VALIDATE)||LA132_2==KW_VALUE_TYPE||(LA132_2 >= KW_VECTORIZATION && LA132_2 <= KW_WEEK)||LA132_2==KW_WHILE||(LA132_2 >= KW_WITHIN && LA132_2 <= KW_ZONE)||LA132_2==KW_BATCH||LA132_2==KW_DAYOFWEEK||LA132_2==KW_HOLD_DDLTIME||LA132_2==KW_NO_DROP||LA132_2==KW_OFFLINE||LA132_2==KW_PROTECTION||LA132_2==KW_READONLY||LA132_2==KW_TIMESTAMPTZ) ) {
                    alt132=1;
                }
                else if ( (LA132_2==EOF||LA132_2==DOT||LA132_2==KW_PARTITION||LA132_2==LPAREN) ) {
                    alt132=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 132, 2, input);

                    throw nvae;

                }
                }
                break;
            case Identifier:
            case KW_ABORT:
            case KW_ACTIVATE:
            case KW_ACTIVE:
            case KW_ADD:
            case KW_ADMIN:
            case KW_AFTER:
            case KW_ALLOC_FRACTION:
            case KW_ANALYZE:
            case KW_ARCHIVE:
            case KW_ASC:
            case KW_AST:
            case KW_AT:
            case KW_AUTOCOMMIT:
            case KW_BEFORE:
            case KW_BRANCH:
            case KW_BUCKET:
            case KW_BUCKETS:
            case KW_CACHE:
            case KW_CASCADE:
            case KW_CBO:
            case KW_CHANGE:
            case KW_CHECK:
            case KW_CLUSTER:
            case KW_CLUSTERED:
            case KW_CLUSTERSTATUS:
            case KW_COLLECTION:
            case KW_COLUMNS:
            case KW_COMMENT:
            case KW_COMPACT:
            case KW_COMPACTIONS:
            case KW_COMPUTE:
            case KW_CONCATENATE:
            case KW_CONTINUE:
            case KW_COST:
            case KW_CRON:
            case KW_DATA:
            case KW_DATABASES:
            case KW_DATETIME:
            case KW_DAY:
            case KW_DBPROPERTIES:
            case KW_DCPROPERTIES:
            case KW_DEBUG:
            case KW_DEFAULT:
            case KW_DEFERRED:
            case KW_DEFINED:
            case KW_DELIMITED:
            case KW_DEPENDENCY:
            case KW_DESC:
            case KW_DETAIL:
            case KW_DIRECTORIES:
            case KW_DIRECTORY:
            case KW_DISABLE:
            case KW_DISTRIBUTE:
            case KW_DISTRIBUTED:
            case KW_DO:
            case KW_DOW:
            case KW_DUMP:
            case KW_ELEM_TYPE:
            case KW_ENABLE:
            case KW_ENFORCED:
            case KW_ESCAPED:
            case KW_EVERY:
            case KW_EXCLUSIVE:
            case KW_EXECUTE:
            case KW_EXECUTED:
            case KW_EXPIRE_SNAPSHOTS:
            case KW_EXPLAIN:
            case KW_EXPORT:
            case KW_EXPRESSION:
            case KW_FAST_FORWARD:
            case KW_FIELDS:
            case KW_FILE:
            case KW_FILEFORMAT:
            case KW_FIRST:
            case KW_FORMAT:
            case KW_FORMATTED:
            case KW_FUNCTIONS:
            case KW_HOUR:
            case KW_IDXPROPERTIES:
            case KW_IGNORE:
            case KW_INDEX:
            case KW_INDEXES:
            case KW_INPATH:
            case KW_INPUTDRIVER:
            case KW_INPUTFORMAT:
            case KW_ISOLATION:
            case KW_ITEMS:
            case KW_JAR:
            case KW_JOINCOST:
            case KW_KEY:
            case KW_KEYS:
            case KW_KEY_TYPE:
            case KW_KILL:
            case KW_LAST:
            case KW_LEVEL:
            case KW_LIMIT:
            case KW_LINES:
            case KW_LOAD:
            case KW_LOCATION:
            case KW_LOCK:
            case KW_LOCKS:
            case KW_LOGICAL:
            case KW_LONG:
            case KW_MANAGED:
            case KW_MANAGEDLOCATION:
            case KW_MANAGEMENT:
            case KW_MAPJOIN:
            case KW_MAPPING:
            case KW_MATCHED:
            case KW_MATERIALIZED:
            case KW_METADATA:
            case KW_MINUTE:
            case KW_MONTH:
            case KW_MOVE:
            case KW_MSCK:
            case KW_NORELY:
            case KW_NOSCAN:
            case KW_NOVALIDATE:
            case KW_NULLS:
            case KW_OFFSET:
            case KW_OPERATOR:
            case KW_OPTIMIZE:
            case KW_OPTION:
            case KW_OUTPUTDRIVER:
            case KW_OUTPUTFORMAT:
            case KW_OVERWRITE:
            case KW_OWNER:
            case KW_PARTITIONED:
            case KW_PARTITIONS:
            case KW_PATH:
            case KW_PLAN:
            case KW_PLANS:
            case KW_PLUS:
            case KW_POOL:
            case KW_PRINCIPALS:
            case KW_PURGE:
            case KW_QUARTER:
            case KW_QUERY:
            case KW_QUERY_PARALLELISM:
            case KW_READ:
            case KW_REBUILD:
            case KW_RECORDREADER:
            case KW_RECORDWRITER:
            case KW_RELOAD:
            case KW_RELY:
            case KW_REMOTE:
            case KW_RENAME:
            case KW_REOPTIMIZATION:
            case KW_REPAIR:
            case KW_REPL:
            case KW_REPLACE:
            case KW_REPLICATION:
            case KW_RESOURCE:
            case KW_RESPECT:
            case KW_RESTRICT:
            case KW_RETAIN:
            case KW_RETENTION:
            case KW_REWRITE:
            case KW_ROLE:
            case KW_ROLES:
            case KW_SCHEDULED:
            case KW_SCHEDULING_POLICY:
            case KW_SCHEMAS:
            case KW_SECOND:
            case KW_SEMI:
            case KW_SERDE:
            case KW_SERDEPROPERTIES:
            case KW_SETS:
            case KW_SET_CURRENT_SNAPSHOT:
            case KW_SHARED:
            case KW_SHOW:
            case KW_SHOW_DATABASE:
            case KW_SKEWED:
            case KW_SNAPSHOT:
            case KW_SNAPSHOTS:
            case KW_SORT:
            case KW_SORTED:
            case KW_SPEC:
            case KW_SSL:
            case KW_STATISTICS:
            case KW_STATUS:
            case KW_STORED:
            case KW_STREAMTABLE:
            case KW_STRING:
            case KW_STRUCT:
            case KW_SUMMARY:
            case KW_SYSTEM_TIME:
            case KW_SYSTEM_VERSION:
            case KW_TABLE:
            case KW_TABLES:
            case KW_TAG:
            case KW_TBLPROPERTIES:
            case KW_TEMPORARY:
            case KW_TERMINATED:
            case KW_TINYINT:
            case KW_TOUCH:
            case KW_TRANSACTION:
            case KW_TRANSACTIONAL:
            case KW_TRANSACTIONS:
            case KW_TRIM:
            case KW_TYPE:
            case KW_UNARCHIVE:
            case KW_UNDO:
            case KW_UNIONTYPE:
            case KW_UNKNOWN:
            case KW_UNLOCK:
            case KW_UNMANAGED:
            case KW_UNSET:
            case KW_UNSIGNED:
            case KW_URL:
            case KW_USE:
            case KW_UTC:
            case KW_UTCTIMESTAMP:
            case KW_VALIDATE:
            case KW_VALUE_TYPE:
            case KW_VECTORIZATION:
            case KW_VIEW:
            case KW_VIEWS:
            case KW_WAIT:
            case KW_WEEK:
            case KW_WHILE:
            case KW_WITHIN:
            case KW_WORK:
            case KW_WORKLOAD:
            case KW_WRITE:
            case KW_YEAR:
            case KW_ZONE:
            case KW_BATCH:
            case KW_DAYOFWEEK:
            case KW_HOLD_DDLTIME:
            case KW_NO_DROP:
            case KW_OFFLINE:
            case KW_PROTECTION:
            case KW_READONLY:
            case KW_TIMESTAMPTZ:
                {
                alt132=2;
                }
                break;
            case KW_URI:
                {
                int LA132_5 = input.LA(2);

                if ( (LA132_5==EOF||LA132_5==DOT||LA132_5==KW_PARTITION||LA132_5==LPAREN) ) {
                    alt132=2;
                }
                else if ( (LA132_5==StringLiteral) ) {
                    alt132=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 132, 5, input);

                    throw nvae;

                }
                }
                break;
            case KW_SERVER:
                {
                int LA132_6 = input.LA(2);

                if ( (LA132_6==EOF||LA132_6==DOT||LA132_6==KW_PARTITION||LA132_6==LPAREN) ) {
                    alt132=2;
                }
                else if ( (LA132_6==Identifier||(LA132_6 >= KW_ABORT && LA132_6 <= KW_AFTER)||LA132_6==KW_ALLOC_FRACTION||LA132_6==KW_ANALYZE||LA132_6==KW_ARCHIVE||(LA132_6 >= KW_ASC && LA132_6 <= KW_AT)||(LA132_6 >= KW_AUTOCOMMIT && LA132_6 <= KW_BEFORE)||(LA132_6 >= KW_BRANCH && LA132_6 <= KW_BUCKETS)||(LA132_6 >= KW_CACHE && LA132_6 <= KW_CASCADE)||(LA132_6 >= KW_CBO && LA132_6 <= KW_CHANGE)||LA132_6==KW_CHECK||(LA132_6 >= KW_CLUSTER && LA132_6 <= KW_COLLECTION)||(LA132_6 >= KW_COLUMNS && LA132_6 <= KW_COMMENT)||(LA132_6 >= KW_COMPACT && LA132_6 <= KW_COMPACTIONS)||(LA132_6 >= KW_COMPUTE && LA132_6 <= KW_CONCATENATE)||LA132_6==KW_CONTINUE||LA132_6==KW_COST||LA132_6==KW_CRON||LA132_6==KW_DATA||LA132_6==KW_DATABASES||(LA132_6 >= KW_DATETIME && LA132_6 <= KW_DCPROPERTIES)||LA132_6==KW_DEBUG||(LA132_6 >= KW_DEFAULT && LA132_6 <= KW_DEFINED)||(LA132_6 >= KW_DELIMITED && LA132_6 <= KW_DESC)||(LA132_6 >= KW_DETAIL && LA132_6 <= KW_DISABLE)||(LA132_6 >= KW_DISTRIBUTE && LA132_6 <= KW_DO)||LA132_6==KW_DOW||(LA132_6 >= KW_DUMP && LA132_6 <= KW_ELEM_TYPE)||LA132_6==KW_ENABLE||(LA132_6 >= KW_ENFORCED && LA132_6 <= KW_EVERY)||(LA132_6 >= KW_EXCLUSIVE && LA132_6 <= KW_EXECUTED)||(LA132_6 >= KW_EXPIRE_SNAPSHOTS && LA132_6 <= KW_EXPRESSION)||LA132_6==KW_FAST_FORWARD||(LA132_6 >= KW_FIELDS && LA132_6 <= KW_FIRST)||(LA132_6 >= KW_FORMAT && LA132_6 <= KW_FORMATTED)||LA132_6==KW_FUNCTIONS||(LA132_6 >= KW_HOUR && LA132_6 <= KW_IDXPROPERTIES)||LA132_6==KW_IGNORE||(LA132_6 >= KW_INDEX && LA132_6 <= KW_INDEXES)||(LA132_6 >= KW_INPATH && LA132_6 <= KW_INPUTFORMAT)||(LA132_6 >= KW_ISOLATION && LA132_6 <= KW_JAR)||(LA132_6 >= KW_JOINCOST && LA132_6 <= KW_LAST)||LA132_6==KW_LEVEL||(LA132_6 >= KW_LIMIT && LA132_6 <= KW_LOAD)||(LA132_6 >= KW_LOCATION && LA132_6 <= KW_LONG)||(LA132_6 >= KW_MANAGED && LA132_6 <= KW_MANAGEMENT)||(LA132_6 >= KW_MAPJOIN && LA132_6 <= KW_MATERIALIZED)||LA132_6==KW_METADATA||(LA132_6 >= KW_MINUTE && LA132_6 <= KW_MONTH)||(LA132_6 >= KW_MOVE && LA132_6 <= KW_MSCK)||(LA132_6 >= KW_NORELY && LA132_6 <= KW_NOSCAN)||LA132_6==KW_NOVALIDATE||LA132_6==KW_NULLS||LA132_6==KW_OFFSET||(LA132_6 >= KW_OPERATOR && LA132_6 <= KW_OPTION)||(LA132_6 >= KW_OUTPUTDRIVER && LA132_6 <= KW_OUTPUTFORMAT)||(LA132_6 >= KW_OVERWRITE && LA132_6 <= KW_OWNER)||(LA132_6 >= KW_PARTITIONED && LA132_6 <= KW_PATH)||(LA132_6 >= KW_PLAN && LA132_6 <= KW_POOL)||LA132_6==KW_PRINCIPALS||LA132_6==KW_PURGE||(LA132_6 >= KW_QUARTER && LA132_6 <= KW_QUERY_PARALLELISM)||LA132_6==KW_READ||(LA132_6 >= KW_REBUILD && LA132_6 <= KW_RECORDWRITER)||(LA132_6 >= KW_RELOAD && LA132_6 <= KW_RETENTION)||LA132_6==KW_REWRITE||(LA132_6 >= KW_ROLE && LA132_6 <= KW_ROLES)||(LA132_6 >= KW_SCHEDULED && LA132_6 <= KW_SECOND)||(LA132_6 >= KW_SEMI && LA132_6 <= KW_SERVER)||(LA132_6 >= KW_SETS && LA132_6 <= KW_SKEWED)||(LA132_6 >= KW_SNAPSHOT && LA132_6 <= KW_SNAPSHOTS)||(LA132_6 >= KW_SORT && LA132_6 <= KW_SSL)||(LA132_6 >= KW_STATISTICS && LA132_6 <= KW_SUMMARY)||(LA132_6 >= KW_SYSTEM_TIME && LA132_6 <= KW_SYSTEM_VERSION)||LA132_6==KW_TABLES||(LA132_6 >= KW_TAG && LA132_6 <= KW_TERMINATED)||LA132_6==KW_TINYINT||LA132_6==KW_TOUCH||(LA132_6 >= KW_TRANSACTION && LA132_6 <= KW_TRANSACTIONS)||LA132_6==KW_TRIM||(LA132_6 >= KW_TYPE && LA132_6 <= KW_UNARCHIVE)||LA132_6==KW_UNDO||LA132_6==KW_UNIONTYPE||(LA132_6 >= KW_UNKNOWN && LA132_6 <= KW_UNSIGNED)||(LA132_6 >= KW_URI && LA132_6 <= KW_USE)||(LA132_6 >= KW_UTC && LA132_6 <= KW_VALIDATE)||LA132_6==KW_VALUE_TYPE||(LA132_6 >= KW_VECTORIZATION && LA132_6 <= KW_WEEK)||LA132_6==KW_WHILE||(LA132_6 >= KW_WITHIN && LA132_6 <= KW_ZONE)||LA132_6==KW_BATCH||LA132_6==KW_DAYOFWEEK||LA132_6==KW_HOLD_DDLTIME||LA132_6==KW_NO_DROP||LA132_6==KW_OFFLINE||LA132_6==KW_PROTECTION||LA132_6==KW_READONLY||LA132_6==KW_TIMESTAMPTZ) ) {
                    alt132=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 132, 6, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;

            }

            switch (alt132) {
                case 1 :
                    // HiveParser.g:1464:7: ( KW_DATABASE | KW_SCHEMA ) identifier
                    {
                    // HiveParser.g:1464:7: ( KW_DATABASE | KW_SCHEMA )
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==KW_DATABASE) ) {
                        alt128=1;
                    }
                    else if ( (LA128_0==KW_SCHEMA) ) {
                        alt128=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 128, 0, input);

                        throw nvae;

                    }
                    switch (alt128) {
                        case 1 :
                            // HiveParser.g:1464:8: KW_DATABASE
                            {
                            KW_DATABASE384=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privObjectCols6652); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE384);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1464:20: KW_SCHEMA
                            {
                            KW_SCHEMA385=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_privObjectCols6654); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA385);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_identifier_in_privObjectCols6657);
                    identifier386=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier386.getTree());

                    // AST REWRITE
                    // elements: identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1464:42: -> ^( TOK_DB_TYPE identifier )
                    {
                        // HiveParser.g:1464:45: ^( TOK_DB_TYPE identifier )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DB_TYPE, "TOK_DB_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1465:7: ( KW_TABLE )? tableName ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )?
                    {
                    // HiveParser.g:1465:7: ( KW_TABLE )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==KW_TABLE) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // HiveParser.g:1465:7: KW_TABLE
                            {
                            KW_TABLE387=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privObjectCols6673); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE387);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_tableName_in_privObjectCols6676);
                    tableName388=tableName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableName.add(tableName388.getTree());

                    // HiveParser.g:1465:27: ( LPAREN cols= columnNameList RPAREN )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==LPAREN) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // HiveParser.g:1465:28: LPAREN cols= columnNameList RPAREN
                            {
                            LPAREN389=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_privObjectCols6679); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN389);


                            pushFollow(FOLLOW_columnNameList_in_privObjectCols6683);
                            cols=columnNameList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnNameList.add(cols.getTree());

                            RPAREN390=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_privObjectCols6685); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN390);


                            }
                            break;

                    }


                    // HiveParser.g:1465:64: ( partitionSpec )?
                    int alt131=2;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==KW_PARTITION) ) {
                        alt131=1;
                    }
                    switch (alt131) {
                        case 1 :
                            // HiveParser.g:1465:64: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_privObjectCols6689);
                            partitionSpec391=partitionSpec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec391.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: tableName, cols, partitionSpec
                    // token labels: 
                    // rule labels: cols, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"rule cols",cols!=null?cols.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1465:79: -> ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? )
                    {
                        // HiveParser.g:1465:82: ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_TABLE_TYPE, "TOK_TABLE_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableName.nextTree());

                        // HiveParser.g:1465:110: ( $cols)?
                        if ( stream_cols.hasNext() ) {
                            adaptor.addChild(root_1, stream_cols.nextTree());

                        }
                        stream_cols.reset();

                        // HiveParser.g:1465:116: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.nextTree());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1466:7: KW_URI (path= StringLiteral )
                    {
                    KW_URI392=(Token)match(input,KW_URI,FOLLOW_KW_URI_in_privObjectCols6713); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_URI.add(KW_URI392);


                    // HiveParser.g:1466:14: (path= StringLiteral )
                    // HiveParser.g:1466:15: path= StringLiteral
                    {
                    path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_privObjectCols6718); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(path);


                    }


                    // AST REWRITE
                    // elements: path
                    // token labels: path
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1466:35: -> ^( TOK_URI_TYPE $path)
                    {
                        // HiveParser.g:1466:39: ^( TOK_URI_TYPE $path)
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_URI_TYPE, "TOK_URI_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_path.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:1467:7: KW_SERVER identifier
                    {
                    KW_SERVER393=(Token)match(input,KW_SERVER,FOLLOW_KW_SERVER_in_privObjectCols6737); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SERVER.add(KW_SERVER393);


                    pushFollow(FOLLOW_identifier_in_privObjectCols6739);
                    identifier394=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier394.getTree());

                    // AST REWRITE
                    // elements: identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1467:28: -> ^( TOK_SERVER_TYPE identifier )
                    {
                        // HiveParser.g:1467:31: ^( TOK_SERVER_TYPE identifier )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SERVER_TYPE, "TOK_SERVER_TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privObjectCols"


    public static class privilegeList_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privilegeList"
    // HiveParser.g:1470:1: privilegeList : privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) ;
    public final HiveParser.privilegeList_return privilegeList() throws RecognitionException {
        HiveParser.privilegeList_return retval = new HiveParser.privilegeList_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA396=null;
        HiveParser.privlegeDef_return privlegeDef395 =null;

        HiveParser.privlegeDef_return privlegeDef397 =null;


        ASTNode COMMA396_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_privlegeDef=new RewriteRuleSubtreeStream(adaptor,"rule privlegeDef");
        pushMsg("grant privilege list", state);
        try {
            // HiveParser.g:1473:5: ( privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) )
            // HiveParser.g:1473:7: privlegeDef ( COMMA privlegeDef )*
            {
            pushFollow(FOLLOW_privlegeDef_in_privilegeList6774);
            privlegeDef395=privlegeDef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_privlegeDef.add(privlegeDef395.getTree());

            // HiveParser.g:1473:19: ( COMMA privlegeDef )*
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==COMMA) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // HiveParser.g:1473:20: COMMA privlegeDef
            	    {
            	    COMMA396=(Token)match(input,COMMA,FOLLOW_COMMA_in_privilegeList6777); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA396);


            	    pushFollow(FOLLOW_privlegeDef_in_privilegeList6779);
            	    privlegeDef397=privlegeDef();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_privlegeDef.add(privlegeDef397.getTree());

            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);


            // AST REWRITE
            // elements: privlegeDef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1474:5: -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
            {
                // HiveParser.g:1474:8: ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_PRIVILEGE_LIST, "TOK_PRIVILEGE_LIST")
                , root_1);

                if ( !(stream_privlegeDef.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_privlegeDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_privlegeDef.nextTree());

                }
                stream_privlegeDef.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privilegeList"


    public static class privlegeDef_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privlegeDef"
    // HiveParser.g:1477:1: privlegeDef : privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) ;
    public final HiveParser.privlegeDef_return privlegeDef() throws RecognitionException {
        HiveParser.privlegeDef_return retval = new HiveParser.privlegeDef_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token LPAREN399=null;
        Token RPAREN400=null;
        HiveParser.columnNameList_return cols =null;

        HiveParser.privilegeType_return privilegeType398 =null;


        ASTNode LPAREN399_tree=null;
        ASTNode RPAREN400_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_privilegeType=new RewriteRuleSubtreeStream(adaptor,"rule privilegeType");
        pushMsg("grant privilege", state);
        try {
            // HiveParser.g:1480:5: ( privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) )
            // HiveParser.g:1480:7: privilegeType ( LPAREN cols= columnNameList RPAREN )?
            {
            pushFollow(FOLLOW_privilegeType_in_privlegeDef6821);
            privilegeType398=privilegeType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_privilegeType.add(privilegeType398.getTree());

            // HiveParser.g:1480:21: ( LPAREN cols= columnNameList RPAREN )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==LPAREN) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // HiveParser.g:1480:22: LPAREN cols= columnNameList RPAREN
                    {
                    LPAREN399=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_privlegeDef6824); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN399);


                    pushFollow(FOLLOW_columnNameList_in_privlegeDef6828);
                    cols=columnNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnNameList.add(cols.getTree());

                    RPAREN400=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_privlegeDef6830); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN400);


                    }
                    break;

            }


            // AST REWRITE
            // elements: cols, privilegeType
            // token labels: 
            // rule labels: cols, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"rule cols",cols!=null?cols.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1481:5: -> ^( TOK_PRIVILEGE privilegeType ( $cols)? )
            {
                // HiveParser.g:1481:8: ^( TOK_PRIVILEGE privilegeType ( $cols)? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_PRIVILEGE, "TOK_PRIVILEGE")
                , root_1);

                adaptor.addChild(root_1, stream_privilegeType.nextTree());

                // HiveParser.g:1481:39: ( $cols)?
                if ( stream_cols.hasNext() ) {
                    adaptor.addChild(root_1, stream_cols.nextTree());

                }
                stream_cols.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privlegeDef"


    public static class privilegeType_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "privilegeType"
    // HiveParser.g:1484:1: privilegeType : ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) | KW_INSERT -> ^( TOK_PRIV_INSERT ) | KW_DELETE -> ^( TOK_PRIV_DELETE ) );
    public final HiveParser.privilegeType_return privilegeType() throws RecognitionException {
        HiveParser.privilegeType_return retval = new HiveParser.privilegeType_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_ALL401=null;
        Token KW_ALTER402=null;
        Token KW_UPDATE403=null;
        Token KW_CREATE404=null;
        Token KW_DROP405=null;
        Token KW_LOCK406=null;
        Token KW_SELECT407=null;
        Token KW_SHOW_DATABASE408=null;
        Token KW_INSERT409=null;
        Token KW_DELETE410=null;

        ASTNode KW_ALL401_tree=null;
        ASTNode KW_ALTER402_tree=null;
        ASTNode KW_UPDATE403_tree=null;
        ASTNode KW_CREATE404_tree=null;
        ASTNode KW_DROP405_tree=null;
        ASTNode KW_LOCK406_tree=null;
        ASTNode KW_SELECT407_tree=null;
        ASTNode KW_SHOW_DATABASE408_tree=null;
        ASTNode KW_INSERT409_tree=null;
        ASTNode KW_DELETE410_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_DELETE=new RewriteRuleTokenStream(adaptor,"token KW_DELETE");
        RewriteRuleTokenStream stream_KW_SHOW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_SHOW_DATABASE");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
        RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
        RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
        RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
        RewriteRuleTokenStream stream_KW_SELECT=new RewriteRuleTokenStream(adaptor,"token KW_SELECT");
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");

        pushMsg("privilege type", state);
        try {
            // HiveParser.g:1487:5: ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) | KW_INSERT -> ^( TOK_PRIV_INSERT ) | KW_DELETE -> ^( TOK_PRIV_DELETE ) )
            int alt135=10;
            switch ( input.LA(1) ) {
            case KW_ALL:
                {
                alt135=1;
                }
                break;
            case KW_ALTER:
                {
                alt135=2;
                }
                break;
            case KW_UPDATE:
                {
                alt135=3;
                }
                break;
            case KW_CREATE:
                {
                alt135=4;
                }
                break;
            case KW_DROP:
                {
                alt135=5;
                }
                break;
            case KW_LOCK:
                {
                alt135=6;
                }
                break;
            case KW_SELECT:
                {
                alt135=7;
                }
                break;
            case KW_SHOW_DATABASE:
                {
                alt135=8;
                }
                break;
            case KW_INSERT:
                {
                alt135=9;
                }
                break;
            case KW_DELETE:
                {
                alt135=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;

            }

            switch (alt135) {
                case 1 :
                    // HiveParser.g:1487:7: KW_ALL
                    {
                    KW_ALL401=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeType6875); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL401);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1487:14: -> ^( TOK_PRIV_ALL )
                    {
                        // HiveParser.g:1487:17: ^( TOK_PRIV_ALL )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_PRIV_ALL, "TOK_PRIV_ALL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1488:7: KW_ALTER
                    {
                    KW_ALTER402=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_privilegeType6889); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER402);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1488:16: -> ^( TOK_PRIV_ALTER_METADATA )
                    {
                        // HiveParser.g:1488:19: ^( TOK_PRIV_ALTER_METADATA )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_PRIV_ALTER_METADATA, "TOK_PRIV_ALTER_METADATA")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1489:7: KW_UPDATE
                    {
                    KW_UPDATE403=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_privilegeType6903); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE403);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1489:17: -> ^( TOK_PRIV_ALTER_DATA )
                    {
                        // HiveParser.g:1489:20: ^( TOK_PRIV_ALTER_DATA )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_PRIV_ALTER_DATA, "TOK_PRIV_ALTER_DATA")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:1490:7: KW_CREATE
                    {
                    KW_CREATE404=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_privilegeType6917); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE404);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1490:17: -> ^( TOK_PRIV_CREATE )
                    {
                        // HiveParser.g:1490:20: ^( TOK_PRIV_CREATE )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_PRIV_CREATE, "TOK_PRIV_CREATE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // HiveParser.g:1491:7: KW_DROP
                    {
                    KW_DROP405=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_privilegeType6931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP405);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1491:15: -> ^( TOK_PRIV_DROP )
                    {
                        // HiveParser.g:1491:18: ^( TOK_PRIV_DROP )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_PRIV_DROP, "TOK_PRIV_DROP")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // HiveParser.g:1492:7: KW_LOCK
                    {
                    KW_LOCK406=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_privilegeType6945); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_LOCK.add(KW_LOCK406);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1492:15: -> ^( TOK_PRIV_LOCK )
                    {
                        // HiveParser.g:1492:18: ^( TOK_PRIV_LOCK )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_PRIV_LOCK, "TOK_PRIV_LOCK")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // HiveParser.g:1493:7: KW_SELECT
                    {
                    KW_SELECT407=(Token)match(input,KW_SELECT,FOLLOW_KW_SELECT_in_privilegeType6959); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SELECT.add(KW_SELECT407);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1493:17: -> ^( TOK_PRIV_SELECT )
                    {
                        // HiveParser.g:1493:20: ^( TOK_PRIV_SELECT )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_PRIV_SELECT, "TOK_PRIV_SELECT")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // HiveParser.g:1494:7: KW_SHOW_DATABASE
                    {
                    KW_SHOW_DATABASE408=(Token)match(input,KW_SHOW_DATABASE,FOLLOW_KW_SHOW_DATABASE_in_privilegeType6973); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SHOW_DATABASE.add(KW_SHOW_DATABASE408);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1494:24: -> ^( TOK_PRIV_SHOW_DATABASE )
                    {
                        // HiveParser.g:1494:27: ^( TOK_PRIV_SHOW_DATABASE )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_PRIV_SHOW_DATABASE, "TOK_PRIV_SHOW_DATABASE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 9 :
                    // HiveParser.g:1495:7: KW_INSERT
                    {
                    KW_INSERT409=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_privilegeType6987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT409);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1495:17: -> ^( TOK_PRIV_INSERT )
                    {
                        // HiveParser.g:1495:20: ^( TOK_PRIV_INSERT )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_PRIV_INSERT, "TOK_PRIV_INSERT")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 10 :
                    // HiveParser.g:1496:7: KW_DELETE
                    {
                    KW_DELETE410=(Token)match(input,KW_DELETE,FOLLOW_KW_DELETE_in_privilegeType7001); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DELETE.add(KW_DELETE410);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1496:17: -> ^( TOK_PRIV_DELETE )
                    {
                        // HiveParser.g:1496:20: ^( TOK_PRIV_DELETE )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_PRIV_DELETE, "TOK_PRIV_DELETE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "privilegeType"


    public static class principalSpecification_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "principalSpecification"
    // HiveParser.g:1499:1: principalSpecification : principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) ;
    public final HiveParser.principalSpecification_return principalSpecification() throws RecognitionException {
        HiveParser.principalSpecification_return retval = new HiveParser.principalSpecification_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA412=null;
        HiveParser.principalName_return principalName411 =null;

        HiveParser.principalName_return principalName413 =null;


        ASTNode COMMA412_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
         pushMsg("user/group/role name list", state); 
        try {
            // HiveParser.g:1502:5: ( principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) )
            // HiveParser.g:1502:7: principalName ( COMMA principalName )*
            {
            pushFollow(FOLLOW_principalName_in_principalSpecification7034);
            principalName411=principalName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_principalName.add(principalName411.getTree());

            // HiveParser.g:1502:21: ( COMMA principalName )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==COMMA) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // HiveParser.g:1502:22: COMMA principalName
            	    {
            	    COMMA412=(Token)match(input,COMMA,FOLLOW_COMMA_in_principalSpecification7037); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA412);


            	    pushFollow(FOLLOW_principalName_in_principalSpecification7039);
            	    principalName413=principalName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_principalName.add(principalName413.getTree());

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);


            // AST REWRITE
            // elements: principalName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1502:44: -> ^( TOK_PRINCIPAL_NAME ( principalName )+ )
            {
                // HiveParser.g:1502:47: ^( TOK_PRINCIPAL_NAME ( principalName )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_PRINCIPAL_NAME, "TOK_PRINCIPAL_NAME")
                , root_1);

                if ( !(stream_principalName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_principalName.hasNext() ) {
                    adaptor.addChild(root_1, stream_principalName.nextTree());

                }
                stream_principalName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "principalSpecification"


    public static class principalName_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "principalName"
    // HiveParser.g:1505:1: principalName : ( KW_USER principalIdentifier -> ^( TOK_USER principalIdentifier ) | KW_GROUP principalIdentifier -> ^( TOK_GROUP principalIdentifier ) | KW_ROLE identifier -> ^( TOK_ROLE identifier ) );
    public final HiveParser.principalName_return principalName() throws RecognitionException {
        HiveParser.principalName_return retval = new HiveParser.principalName_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_USER414=null;
        Token KW_GROUP416=null;
        Token KW_ROLE418=null;
        HiveParser_IdentifiersParser.principalIdentifier_return principalIdentifier415 =null;

        HiveParser_IdentifiersParser.principalIdentifier_return principalIdentifier417 =null;

        HiveParser_IdentifiersParser.identifier_return identifier419 =null;


        ASTNode KW_USER414_tree=null;
        ASTNode KW_GROUP416_tree=null;
        ASTNode KW_ROLE418_tree=null;
        RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
        RewriteRuleTokenStream stream_KW_USER=new RewriteRuleTokenStream(adaptor,"token KW_USER");
        RewriteRuleTokenStream stream_KW_GROUP=new RewriteRuleTokenStream(adaptor,"token KW_GROUP");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_principalIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule principalIdentifier");
        pushMsg("user|group|role name", state);
        try {
            // HiveParser.g:1508:5: ( KW_USER principalIdentifier -> ^( TOK_USER principalIdentifier ) | KW_GROUP principalIdentifier -> ^( TOK_GROUP principalIdentifier ) | KW_ROLE identifier -> ^( TOK_ROLE identifier ) )
            int alt137=3;
            switch ( input.LA(1) ) {
            case KW_USER:
                {
                alt137=1;
                }
                break;
            case KW_GROUP:
                {
                alt137=2;
                }
                break;
            case KW_ROLE:
                {
                alt137=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;

            }

            switch (alt137) {
                case 1 :
                    // HiveParser.g:1508:7: KW_USER principalIdentifier
                    {
                    KW_USER414=(Token)match(input,KW_USER,FOLLOW_KW_USER_in_principalName7077); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_USER.add(KW_USER414);


                    pushFollow(FOLLOW_principalIdentifier_in_principalName7079);
                    principalIdentifier415=principalIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_principalIdentifier.add(principalIdentifier415.getTree());

                    // AST REWRITE
                    // elements: principalIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1508:35: -> ^( TOK_USER principalIdentifier )
                    {
                        // HiveParser.g:1508:38: ^( TOK_USER principalIdentifier )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_USER, "TOK_USER")
                        , root_1);

                        adaptor.addChild(root_1, stream_principalIdentifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1509:7: KW_GROUP principalIdentifier
                    {
                    KW_GROUP416=(Token)match(input,KW_GROUP,FOLLOW_KW_GROUP_in_principalName7095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_GROUP.add(KW_GROUP416);


                    pushFollow(FOLLOW_principalIdentifier_in_principalName7097);
                    principalIdentifier417=principalIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_principalIdentifier.add(principalIdentifier417.getTree());

                    // AST REWRITE
                    // elements: principalIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1509:36: -> ^( TOK_GROUP principalIdentifier )
                    {
                        // HiveParser.g:1509:39: ^( TOK_GROUP principalIdentifier )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_GROUP, "TOK_GROUP")
                        , root_1);

                        adaptor.addChild(root_1, stream_principalIdentifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1510:7: KW_ROLE identifier
                    {
                    KW_ROLE418=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_principalName7113); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE418);


                    pushFollow(FOLLOW_identifier_in_principalName7115);
                    identifier419=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier419.getTree());

                    // AST REWRITE
                    // elements: identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1510:26: -> ^( TOK_ROLE identifier )
                    {
                        // HiveParser.g:1510:29: ^( TOK_ROLE identifier )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_ROLE, "TOK_ROLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_identifier.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "principalName"


    public static class withGrantOption_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "withGrantOption"
    // HiveParser.g:1513:1: withGrantOption : KW_WITH KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) ;
    public final HiveParser.withGrantOption_return withGrantOption() throws RecognitionException {
        HiveParser.withGrantOption_return retval = new HiveParser.withGrantOption_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_WITH420=null;
        Token KW_GRANT421=null;
        Token KW_OPTION422=null;

        ASTNode KW_WITH420_tree=null;
        ASTNode KW_GRANT421_tree=null;
        ASTNode KW_OPTION422_tree=null;
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");

        pushMsg("with grant option", state);
        try {
            // HiveParser.g:1516:5: ( KW_WITH KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) )
            // HiveParser.g:1516:7: KW_WITH KW_GRANT KW_OPTION
            {
            KW_WITH420=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withGrantOption7150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH420);


            KW_GRANT421=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_withGrantOption7152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT421);


            KW_OPTION422=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withGrantOption7154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION422);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1517:5: -> ^( TOK_GRANT_WITH_OPTION )
            {
                // HiveParser.g:1517:8: ^( TOK_GRANT_WITH_OPTION )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_GRANT_WITH_OPTION, "TOK_GRANT_WITH_OPTION")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "withGrantOption"


    public static class grantOptionFor_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grantOptionFor"
    // HiveParser.g:1520:1: grantOptionFor : KW_GRANT KW_OPTION KW_FOR -> ^( TOK_GRANT_OPTION_FOR ) ;
    public final HiveParser.grantOptionFor_return grantOptionFor() throws RecognitionException {
        HiveParser.grantOptionFor_return retval = new HiveParser.grantOptionFor_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_GRANT423=null;
        Token KW_OPTION424=null;
        Token KW_FOR425=null;

        ASTNode KW_GRANT423_tree=null;
        ASTNode KW_OPTION424_tree=null;
        ASTNode KW_FOR425_tree=null;
        RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");

        pushMsg("grant option for", state);
        try {
            // HiveParser.g:1523:5: ( KW_GRANT KW_OPTION KW_FOR -> ^( TOK_GRANT_OPTION_FOR ) )
            // HiveParser.g:1523:7: KW_GRANT KW_OPTION KW_FOR
            {
            KW_GRANT423=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantOptionFor7191); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT423);


            KW_OPTION424=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_grantOptionFor7193); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION424);


            KW_FOR425=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_grantOptionFor7195); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR425);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1524:5: -> ^( TOK_GRANT_OPTION_FOR )
            {
                // HiveParser.g:1524:8: ^( TOK_GRANT_OPTION_FOR )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_GRANT_OPTION_FOR, "TOK_GRANT_OPTION_FOR")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "grantOptionFor"


    public static class adminOptionFor_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "adminOptionFor"
    // HiveParser.g:1527:1: adminOptionFor : KW_ADMIN KW_OPTION KW_FOR -> ^( TOK_ADMIN_OPTION_FOR ) ;
    public final HiveParser.adminOptionFor_return adminOptionFor() throws RecognitionException {
        HiveParser.adminOptionFor_return retval = new HiveParser.adminOptionFor_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_ADMIN426=null;
        Token KW_OPTION427=null;
        Token KW_FOR428=null;

        ASTNode KW_ADMIN426_tree=null;
        ASTNode KW_OPTION427_tree=null;
        ASTNode KW_FOR428_tree=null;
        RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
        RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
        RewriteRuleTokenStream stream_KW_ADMIN=new RewriteRuleTokenStream(adaptor,"token KW_ADMIN");

        pushMsg("admin option for", state);
        try {
            // HiveParser.g:1530:5: ( KW_ADMIN KW_OPTION KW_FOR -> ^( TOK_ADMIN_OPTION_FOR ) )
            // HiveParser.g:1530:7: KW_ADMIN KW_OPTION KW_FOR
            {
            KW_ADMIN426=(Token)match(input,KW_ADMIN,FOLLOW_KW_ADMIN_in_adminOptionFor7228); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ADMIN.add(KW_ADMIN426);


            KW_OPTION427=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_adminOptionFor7230); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION427);


            KW_FOR428=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_adminOptionFor7232); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR428);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1531:5: -> ^( TOK_ADMIN_OPTION_FOR )
            {
                // HiveParser.g:1531:8: ^( TOK_ADMIN_OPTION_FOR )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_ADMIN_OPTION_FOR, "TOK_ADMIN_OPTION_FOR")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "adminOptionFor"


    public static class withAdminOption_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "withAdminOption"
    // HiveParser.g:1534:1: withAdminOption : KW_WITH KW_ADMIN KW_OPTION -> ^( TOK_GRANT_WITH_ADMIN_OPTION ) ;
    public final HiveParser.withAdminOption_return withAdminOption() throws RecognitionException {
        HiveParser.withAdminOption_return retval = new HiveParser.withAdminOption_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_WITH429=null;
        Token KW_ADMIN430=null;
        Token KW_OPTION431=null;

        ASTNode KW_WITH429_tree=null;
        ASTNode KW_ADMIN430_tree=null;
        ASTNode KW_OPTION431_tree=null;
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
        RewriteRuleTokenStream stream_KW_ADMIN=new RewriteRuleTokenStream(adaptor,"token KW_ADMIN");

        pushMsg("with admin option", state);
        try {
            // HiveParser.g:1537:5: ( KW_WITH KW_ADMIN KW_OPTION -> ^( TOK_GRANT_WITH_ADMIN_OPTION ) )
            // HiveParser.g:1537:7: KW_WITH KW_ADMIN KW_OPTION
            {
            KW_WITH429=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withAdminOption7265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH429);


            KW_ADMIN430=(Token)match(input,KW_ADMIN,FOLLOW_KW_ADMIN_in_withAdminOption7267); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ADMIN.add(KW_ADMIN430);


            KW_OPTION431=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withAdminOption7269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION431);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1538:5: -> ^( TOK_GRANT_WITH_ADMIN_OPTION )
            {
                // HiveParser.g:1538:8: ^( TOK_GRANT_WITH_ADMIN_OPTION )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_GRANT_WITH_ADMIN_OPTION, "TOK_GRANT_WITH_ADMIN_OPTION")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {popMsg(state);}
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "withAdminOption"


    public static class metastoreCheck_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "metastoreCheck"
    // HiveParser.g:1541:1: metastoreCheck : KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE tableName (opt= ( KW_ADD | KW_DROP | KW_SYNC ) (parts= KW_PARTITIONS ) ( partitionSelectorSpec )? )? ) -> ^( TOK_MSCK ( $repair)? ( tableName )? ( $opt)? ( partitionSelectorSpec )? ) ;
    public final HiveParser.metastoreCheck_return metastoreCheck() throws RecognitionException {
        HiveParser.metastoreCheck_return retval = new HiveParser.metastoreCheck_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token repair=null;
        Token opt=null;
        Token parts=null;
        Token KW_MSCK432=null;
        Token KW_TABLE433=null;
        Token KW_ADD435=null;
        Token KW_DROP436=null;
        Token KW_SYNC437=null;
        HiveParser_FromClauseParser.tableName_return tableName434 =null;

        HiveParser_IdentifiersParser.partitionSelectorSpec_return partitionSelectorSpec438 =null;


        ASTNode repair_tree=null;
        ASTNode opt_tree=null;
        ASTNode parts_tree=null;
        ASTNode KW_MSCK432_tree=null;
        ASTNode KW_TABLE433_tree=null;
        ASTNode KW_ADD435_tree=null;
        ASTNode KW_DROP436_tree=null;
        ASTNode KW_SYNC437_tree=null;
        RewriteRuleTokenStream stream_KW_REPAIR=new RewriteRuleTokenStream(adaptor,"token KW_REPAIR");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_SYNC=new RewriteRuleTokenStream(adaptor,"token KW_SYNC");
        RewriteRuleTokenStream stream_KW_MSCK=new RewriteRuleTokenStream(adaptor,"token KW_MSCK");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
        RewriteRuleTokenStream stream_KW_PARTITIONS=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONS");
        RewriteRuleSubtreeStream stream_partitionSelectorSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSelectorSpec");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("metastore check statement", state); 
        try {
            // HiveParser.g:1544:5: ( KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE tableName (opt= ( KW_ADD | KW_DROP | KW_SYNC ) (parts= KW_PARTITIONS ) ( partitionSelectorSpec )? )? ) -> ^( TOK_MSCK ( $repair)? ( tableName )? ( $opt)? ( partitionSelectorSpec )? ) )
            // HiveParser.g:1544:7: KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE tableName (opt= ( KW_ADD | KW_DROP | KW_SYNC ) (parts= KW_PARTITIONS ) ( partitionSelectorSpec )? )? )
            {
            KW_MSCK432=(Token)match(input,KW_MSCK,FOLLOW_KW_MSCK_in_metastoreCheck7306); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MSCK.add(KW_MSCK432);


            // HiveParser.g:1544:15: (repair= KW_REPAIR )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==KW_REPAIR) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // HiveParser.g:1544:16: repair= KW_REPAIR
                    {
                    repair=(Token)match(input,KW_REPAIR,FOLLOW_KW_REPAIR_in_metastoreCheck7311); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_REPAIR.add(repair);


                    }
                    break;

            }


            // HiveParser.g:1545:7: ( KW_TABLE tableName (opt= ( KW_ADD | KW_DROP | KW_SYNC ) (parts= KW_PARTITIONS ) ( partitionSelectorSpec )? )? )
            // HiveParser.g:1545:8: KW_TABLE tableName (opt= ( KW_ADD | KW_DROP | KW_SYNC ) (parts= KW_PARTITIONS ) ( partitionSelectorSpec )? )?
            {
            KW_TABLE433=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_metastoreCheck7322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE433);


            pushFollow(FOLLOW_tableName_in_metastoreCheck7324);
            tableName434=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tableName434.getTree());

            // HiveParser.g:1546:9: (opt= ( KW_ADD | KW_DROP | KW_SYNC ) (parts= KW_PARTITIONS ) ( partitionSelectorSpec )? )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==KW_ADD||LA141_0==KW_DROP||LA141_0==KW_SYNC) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // HiveParser.g:1546:10: opt= ( KW_ADD | KW_DROP | KW_SYNC ) (parts= KW_PARTITIONS ) ( partitionSelectorSpec )?
                    {
                    // HiveParser.g:1546:14: ( KW_ADD | KW_DROP | KW_SYNC )
                    int alt139=3;
                    switch ( input.LA(1) ) {
                    case KW_ADD:
                        {
                        alt139=1;
                        }
                        break;
                    case KW_DROP:
                        {
                        alt139=2;
                        }
                        break;
                    case KW_SYNC:
                        {
                        alt139=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 139, 0, input);

                        throw nvae;

                    }

                    switch (alt139) {
                        case 1 :
                            // HiveParser.g:1546:15: KW_ADD
                            {
                            KW_ADD435=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_metastoreCheck7338); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_ADD.add(KW_ADD435);


                            }
                            break;
                        case 2 :
                            // HiveParser.g:1546:22: KW_DROP
                            {
                            KW_DROP436=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_metastoreCheck7340); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP436);


                            }
                            break;
                        case 3 :
                            // HiveParser.g:1546:30: KW_SYNC
                            {
                            KW_SYNC437=(Token)match(input,KW_SYNC,FOLLOW_KW_SYNC_in_metastoreCheck7342); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SYNC.add(KW_SYNC437);


                            }
                            break;

                    }


                    // HiveParser.g:1546:39: (parts= KW_PARTITIONS )
                    // HiveParser.g:1546:40: parts= KW_PARTITIONS
                    {
                    parts=(Token)match(input,KW_PARTITIONS,FOLLOW_KW_PARTITIONS_in_metastoreCheck7348); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_PARTITIONS.add(parts);


                    }


                    // HiveParser.g:1546:61: ( partitionSelectorSpec )?
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==LPAREN) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            // HiveParser.g:1546:62: partitionSelectorSpec
                            {
                            pushFollow(FOLLOW_partitionSelectorSpec_in_metastoreCheck7352);
                            partitionSelectorSpec438=partitionSelectorSpec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_partitionSelectorSpec.add(partitionSelectorSpec438.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }


            // AST REWRITE
            // elements: tableName, partitionSelectorSpec, opt, repair
            // token labels: repair, opt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_repair=new RewriteRuleTokenStream(adaptor,"token repair",repair);
            RewriteRuleTokenStream stream_opt=new RewriteRuleTokenStream(adaptor,"token opt",opt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1547:5: -> ^( TOK_MSCK ( $repair)? ( tableName )? ( $opt)? ( partitionSelectorSpec )? )
            {
                // HiveParser.g:1547:8: ^( TOK_MSCK ( $repair)? ( tableName )? ( $opt)? ( partitionSelectorSpec )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_MSCK, "TOK_MSCK")
                , root_1);

                // HiveParser.g:1547:20: ( $repair)?
                if ( stream_repair.hasNext() ) {
                    adaptor.addChild(root_1, stream_repair.nextNode());

                }
                stream_repair.reset();

                // HiveParser.g:1547:28: ( tableName )?
                if ( stream_tableName.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableName.nextTree());

                }
                stream_tableName.reset();

                // HiveParser.g:1547:40: ( $opt)?
                if ( stream_opt.hasNext() ) {
                    adaptor.addChild(root_1, stream_opt.nextNode());

                }
                stream_opt.reset();

                // HiveParser.g:1547:45: ( partitionSelectorSpec )?
                if ( stream_partitionSelectorSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSelectorSpec.nextTree());

                }
                stream_partitionSelectorSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "metastoreCheck"


    public static class resourceList_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "resourceList"
    // HiveParser.g:1550:1: resourceList : resource ( COMMA resource )* -> ^( TOK_RESOURCE_LIST ( resource )+ ) ;
    public final HiveParser.resourceList_return resourceList() throws RecognitionException {
        HiveParser.resourceList_return retval = new HiveParser.resourceList_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA440=null;
        HiveParser.resource_return resource439 =null;

        HiveParser.resource_return resource441 =null;


        ASTNode COMMA440_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_resource=new RewriteRuleSubtreeStream(adaptor,"rule resource");
         pushMsg("resource list", state); 
        try {
            // HiveParser.g:1553:3: ( resource ( COMMA resource )* -> ^( TOK_RESOURCE_LIST ( resource )+ ) )
            // HiveParser.g:1554:3: resource ( COMMA resource )*
            {
            pushFollow(FOLLOW_resource_in_resourceList7410);
            resource439=resource();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_resource.add(resource439.getTree());

            // HiveParser.g:1554:12: ( COMMA resource )*
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==COMMA) ) {
                    alt142=1;
                }


                switch (alt142) {
            	case 1 :
            	    // HiveParser.g:1554:13: COMMA resource
            	    {
            	    COMMA440=(Token)match(input,COMMA,FOLLOW_COMMA_in_resourceList7413); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA440);


            	    pushFollow(FOLLOW_resource_in_resourceList7415);
            	    resource441=resource();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_resource.add(resource441.getTree());

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);


            // AST REWRITE
            // elements: resource
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1554:30: -> ^( TOK_RESOURCE_LIST ( resource )+ )
            {
                // HiveParser.g:1554:33: ^( TOK_RESOURCE_LIST ( resource )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_RESOURCE_LIST, "TOK_RESOURCE_LIST")
                , root_1);

                if ( !(stream_resource.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_resource.hasNext() ) {
                    adaptor.addChild(root_1, stream_resource.nextTree());

                }
                stream_resource.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "resourceList"


    public static class resource_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "resource"
    // HiveParser.g:1557:1: resource : resType= resourceType resPath= StringLiteral -> ^( TOK_RESOURCE_URI $resType $resPath) ;
    public final HiveParser.resource_return resource() throws RecognitionException {
        HiveParser.resource_return retval = new HiveParser.resource_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token resPath=null;
        HiveParser.resourceType_return resType =null;


        ASTNode resPath_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleSubtreeStream stream_resourceType=new RewriteRuleSubtreeStream(adaptor,"rule resourceType");
         pushMsg("resource", state); 
        try {
            // HiveParser.g:1560:3: (resType= resourceType resPath= StringLiteral -> ^( TOK_RESOURCE_URI $resType $resPath) )
            // HiveParser.g:1561:3: resType= resourceType resPath= StringLiteral
            {
            pushFollow(FOLLOW_resourceType_in_resource7453);
            resType=resourceType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_resourceType.add(resType.getTree());

            resPath=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_resource7457); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(resPath);


            // AST REWRITE
            // elements: resType, resPath
            // token labels: resPath
            // rule labels: resType, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_resPath=new RewriteRuleTokenStream(adaptor,"token resPath",resPath);
            RewriteRuleSubtreeStream stream_resType=new RewriteRuleSubtreeStream(adaptor,"rule resType",resType!=null?resType.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1561:46: -> ^( TOK_RESOURCE_URI $resType $resPath)
            {
                // HiveParser.g:1561:49: ^( TOK_RESOURCE_URI $resType $resPath)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_RESOURCE_URI, "TOK_RESOURCE_URI")
                , root_1);

                adaptor.addChild(root_1, stream_resType.nextTree());

                adaptor.addChild(root_1, stream_resPath.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "resource"


    public static class resourceType_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "resourceType"
    // HiveParser.g:1564:1: resourceType : ( KW_JAR -> ^( TOK_JAR ) | KW_FILE -> ^( TOK_FILE ) | KW_ARCHIVE -> ^( TOK_ARCHIVE ) );
    public final HiveParser.resourceType_return resourceType() throws RecognitionException {
        HiveParser.resourceType_return retval = new HiveParser.resourceType_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_JAR442=null;
        Token KW_FILE443=null;
        Token KW_ARCHIVE444=null;

        ASTNode KW_JAR442_tree=null;
        ASTNode KW_FILE443_tree=null;
        ASTNode KW_ARCHIVE444_tree=null;
        RewriteRuleTokenStream stream_KW_ARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_ARCHIVE");
        RewriteRuleTokenStream stream_KW_JAR=new RewriteRuleTokenStream(adaptor,"token KW_JAR");
        RewriteRuleTokenStream stream_KW_FILE=new RewriteRuleTokenStream(adaptor,"token KW_FILE");

         pushMsg("resource type", state); 
        try {
            // HiveParser.g:1567:3: ( KW_JAR -> ^( TOK_JAR ) | KW_FILE -> ^( TOK_FILE ) | KW_ARCHIVE -> ^( TOK_ARCHIVE ) )
            int alt143=3;
            switch ( input.LA(1) ) {
            case KW_JAR:
                {
                alt143=1;
                }
                break;
            case KW_FILE:
                {
                alt143=2;
                }
                break;
            case KW_ARCHIVE:
                {
                alt143=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;

            }

            switch (alt143) {
                case 1 :
                    // HiveParser.g:1568:3: KW_JAR
                    {
                    KW_JAR442=(Token)match(input,KW_JAR,FOLLOW_KW_JAR_in_resourceType7494); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_JAR.add(KW_JAR442);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1568:10: -> ^( TOK_JAR )
                    {
                        // HiveParser.g:1568:13: ^( TOK_JAR )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_JAR, "TOK_JAR")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1570:3: KW_FILE
                    {
                    KW_FILE443=(Token)match(input,KW_FILE,FOLLOW_KW_FILE_in_resourceType7508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_FILE.add(KW_FILE443);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1570:11: -> ^( TOK_FILE )
                    {
                        // HiveParser.g:1570:14: ^( TOK_FILE )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_FILE, "TOK_FILE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1572:3: KW_ARCHIVE
                    {
                    KW_ARCHIVE444=(Token)match(input,KW_ARCHIVE,FOLLOW_KW_ARCHIVE_in_resourceType7522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ARCHIVE.add(KW_ARCHIVE444);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1572:14: -> ^( TOK_ARCHIVE )
                    {
                        // HiveParser.g:1572:17: ^( TOK_ARCHIVE )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_ARCHIVE, "TOK_ARCHIVE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "resourceType"


    public static class createFunctionStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createFunctionStatement"
    // HiveParser.g:1575:1: createFunctionStatement : KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )? -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY ) -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? ) ;
    public final HiveParser.createFunctionStatement_return createFunctionStatement() throws RecognitionException {
        HiveParser.createFunctionStatement_return retval = new HiveParser.createFunctionStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token temp=null;
        Token KW_CREATE445=null;
        Token KW_FUNCTION446=null;
        Token KW_AS448=null;
        Token StringLiteral449=null;
        Token KW_USING450=null;
        HiveParser.resourceList_return rList =null;

        HiveParser_IdentifiersParser.functionIdentifier_return functionIdentifier447 =null;


        ASTNode temp_tree=null;
        ASTNode KW_CREATE445_tree=null;
        ASTNode KW_FUNCTION446_tree=null;
        ASTNode KW_AS448_tree=null;
        ASTNode StringLiteral449_tree=null;
        ASTNode KW_USING450_tree=null;
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleSubtreeStream stream_functionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule functionIdentifier");
        RewriteRuleSubtreeStream stream_resourceList=new RewriteRuleSubtreeStream(adaptor,"rule resourceList");
         pushMsg("create function statement", state); 
        try {
            // HiveParser.g:1578:5: ( KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )? -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY ) -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? ) )
            // HiveParser.g:1578:7: KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )?
            {
            KW_CREATE445=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createFunctionStatement7553); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE445);


            // HiveParser.g:1578:17: (temp= KW_TEMPORARY )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==KW_TEMPORARY) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // HiveParser.g:1578:18: temp= KW_TEMPORARY
                    {
                    temp=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createFunctionStatement7558); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(temp);


                    }
                    break;

            }


            KW_FUNCTION446=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_createFunctionStatement7562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION446);


            pushFollow(FOLLOW_functionIdentifier_in_createFunctionStatement7564);
            functionIdentifier447=functionIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_functionIdentifier.add(functionIdentifier447.getTree());

            KW_AS448=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createFunctionStatement7566); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS448);


            StringLiteral449=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_createFunctionStatement7568); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral449);


            // HiveParser.g:1579:7: ( KW_USING rList= resourceList )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==KW_USING) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // HiveParser.g:1579:8: KW_USING rList= resourceList
                    {
                    KW_USING450=(Token)match(input,KW_USING,FOLLOW_KW_USING_in_createFunctionStatement7577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_USING.add(KW_USING450);


                    pushFollow(FOLLOW_resourceList_in_createFunctionStatement7581);
                    rList=resourceList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_resourceList.add(rList.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: functionIdentifier, StringLiteral, rList, rList, functionIdentifier, StringLiteral
            // token labels: 
            // rule labels: rList, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_rList=new RewriteRuleSubtreeStream(adaptor,"rule rList",rList!=null?rList.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1580:5: -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY )
            if (temp != null) {
                // HiveParser.g:1580:25: ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_functionIdentifier.nextTree());

                adaptor.addChild(root_1, 
                stream_StringLiteral.nextNode()
                );

                // HiveParser.g:1580:80: ( $rList)?
                if ( stream_rList.hasNext() ) {
                    adaptor.addChild(root_1, stream_rList.nextTree());

                }
                stream_rList.reset();

                adaptor.addChild(root_1, 
                (ASTNode)adaptor.create(TOK_TEMPORARY, "TOK_TEMPORARY")
                );

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1581:5: -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? )
            {
                // HiveParser.g:1581:25: ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_functionIdentifier.nextTree());

                adaptor.addChild(root_1, 
                stream_StringLiteral.nextNode()
                );

                // HiveParser.g:1581:80: ( $rList)?
                if ( stream_rList.hasNext() ) {
                    adaptor.addChild(root_1, stream_rList.nextTree());

                }
                stream_rList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createFunctionStatement"


    public static class dropFunctionStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropFunctionStatement"
    // HiveParser.g:1584:1: dropFunctionStatement : KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY ) -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? ) ;
    public final HiveParser.dropFunctionStatement_return dropFunctionStatement() throws RecognitionException {
        HiveParser.dropFunctionStatement_return retval = new HiveParser.dropFunctionStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token temp=null;
        Token KW_DROP451=null;
        Token KW_FUNCTION452=null;
        HiveParser.ifExists_return ifExists453 =null;

        HiveParser_IdentifiersParser.functionIdentifier_return functionIdentifier454 =null;


        ASTNode temp_tree=null;
        ASTNode KW_DROP451_tree=null;
        ASTNode KW_FUNCTION452_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
        RewriteRuleSubtreeStream stream_functionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule functionIdentifier");
         pushMsg("drop function statement", state); 
        try {
            // HiveParser.g:1587:5: ( KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY ) -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? ) )
            // HiveParser.g:1587:7: KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier
            {
            KW_DROP451=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropFunctionStatement7667); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP451);


            // HiveParser.g:1587:15: (temp= KW_TEMPORARY )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==KW_TEMPORARY) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // HiveParser.g:1587:16: temp= KW_TEMPORARY
                    {
                    temp=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropFunctionStatement7672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(temp);


                    }
                    break;

            }


            KW_FUNCTION452=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_dropFunctionStatement7676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION452);


            // HiveParser.g:1587:48: ( ifExists )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==KW_IF) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // HiveParser.g:1587:48: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropFunctionStatement7678);
                    ifExists453=ifExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifExists.add(ifExists453.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_functionIdentifier_in_dropFunctionStatement7681);
            functionIdentifier454=functionIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_functionIdentifier.add(functionIdentifier454.getTree());

            // AST REWRITE
            // elements: ifExists, functionIdentifier, ifExists, functionIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1588:5: -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY )
            if (temp != null) {
                // HiveParser.g:1588:25: ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_functionIdentifier.nextTree());

                // HiveParser.g:1588:63: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_1, 
                (ASTNode)adaptor.create(TOK_TEMPORARY, "TOK_TEMPORARY")
                );

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1589:5: -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? )
            {
                // HiveParser.g:1589:25: ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_functionIdentifier.nextTree());

                // HiveParser.g:1589:63: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropFunctionStatement"


    public static class reloadFunctionsStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "reloadFunctionsStatement"
    // HiveParser.g:1592:1: reloadFunctionsStatement : KW_RELOAD ( KW_FUNCTIONS | KW_FUNCTION ) -> ^( TOK_RELOADFUNCTIONS ) ;
    public final HiveParser.reloadFunctionsStatement_return reloadFunctionsStatement() throws RecognitionException {
        HiveParser.reloadFunctionsStatement_return retval = new HiveParser.reloadFunctionsStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_RELOAD455=null;
        Token KW_FUNCTIONS456=null;
        Token KW_FUNCTION457=null;

        ASTNode KW_RELOAD455_tree=null;
        ASTNode KW_FUNCTIONS456_tree=null;
        ASTNode KW_FUNCTION457_tree=null;
        RewriteRuleTokenStream stream_KW_FUNCTIONS=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTIONS");
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_RELOAD=new RewriteRuleTokenStream(adaptor,"token KW_RELOAD");

         pushMsg("reload functions statement", state); 
        try {
            // HiveParser.g:1595:5: ( KW_RELOAD ( KW_FUNCTIONS | KW_FUNCTION ) -> ^( TOK_RELOADFUNCTIONS ) )
            // HiveParser.g:1595:7: KW_RELOAD ( KW_FUNCTIONS | KW_FUNCTION )
            {
            KW_RELOAD455=(Token)match(input,KW_RELOAD,FOLLOW_KW_RELOAD_in_reloadFunctionsStatement7759); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_RELOAD.add(KW_RELOAD455);


            // HiveParser.g:1595:17: ( KW_FUNCTIONS | KW_FUNCTION )
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==KW_FUNCTIONS) ) {
                alt148=1;
            }
            else if ( (LA148_0==KW_FUNCTION) ) {
                alt148=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;

            }
            switch (alt148) {
                case 1 :
                    // HiveParser.g:1595:18: KW_FUNCTIONS
                    {
                    KW_FUNCTIONS456=(Token)match(input,KW_FUNCTIONS,FOLLOW_KW_FUNCTIONS_in_reloadFunctionsStatement7762); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_FUNCTIONS.add(KW_FUNCTIONS456);


                    }
                    break;
                case 2 :
                    // HiveParser.g:1595:31: KW_FUNCTION
                    {
                    KW_FUNCTION457=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_reloadFunctionsStatement7764); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION457);


                    }
                    break;

            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1595:44: -> ^( TOK_RELOADFUNCTIONS )
            {
                // HiveParser.g:1595:47: ^( TOK_RELOADFUNCTIONS )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_RELOADFUNCTIONS, "TOK_RELOADFUNCTIONS")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "reloadFunctionsStatement"


    public static class createMacroStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createMacroStatement"
    // HiveParser.g:1597:1: createMacroStatement : KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression ) ;
    public final HiveParser.createMacroStatement_return createMacroStatement() throws RecognitionException {
        HiveParser.createMacroStatement_return retval = new HiveParser.createMacroStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_CREATE458=null;
        Token KW_TEMPORARY459=null;
        Token KW_MACRO460=null;
        Token Identifier461=null;
        Token LPAREN462=null;
        Token RPAREN464=null;
        HiveParser.columnNameTypeList_return columnNameTypeList463 =null;

        HiveParser_IdentifiersParser.expression_return expression465 =null;


        ASTNode KW_CREATE458_tree=null;
        ASTNode KW_TEMPORARY459_tree=null;
        ASTNode KW_MACRO460_tree=null;
        ASTNode Identifier461_tree=null;
        ASTNode LPAREN462_tree=null;
        ASTNode RPAREN464_tree=null;
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_MACRO=new RewriteRuleTokenStream(adaptor,"token KW_MACRO");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
         pushMsg("create macro statement", state); 
        try {
            // HiveParser.g:1600:5: ( KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression ) )
            // HiveParser.g:1600:7: KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression
            {
            KW_CREATE458=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createMacroStatement7793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE458);


            KW_TEMPORARY459=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createMacroStatement7795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(KW_TEMPORARY459);


            KW_MACRO460=(Token)match(input,KW_MACRO,FOLLOW_KW_MACRO_in_createMacroStatement7797); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MACRO.add(KW_MACRO460);


            Identifier461=(Token)match(input,Identifier,FOLLOW_Identifier_in_createMacroStatement7799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier461);


            LPAREN462=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createMacroStatement7807); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN462);


            // HiveParser.g:1601:14: ( columnNameTypeList )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==Identifier||(LA149_0 >= KW_ABORT && LA149_0 <= KW_AFTER)||LA149_0==KW_ALLOC_FRACTION||LA149_0==KW_ANALYZE||LA149_0==KW_ARCHIVE||(LA149_0 >= KW_ASC && LA149_0 <= KW_AT)||(LA149_0 >= KW_AUTOCOMMIT && LA149_0 <= KW_BEFORE)||(LA149_0 >= KW_BRANCH && LA149_0 <= KW_BUCKETS)||(LA149_0 >= KW_CACHE && LA149_0 <= KW_CASCADE)||(LA149_0 >= KW_CBO && LA149_0 <= KW_CHANGE)||LA149_0==KW_CHECK||(LA149_0 >= KW_CLUSTER && LA149_0 <= KW_COLLECTION)||(LA149_0 >= KW_COLUMNS && LA149_0 <= KW_COMMENT)||(LA149_0 >= KW_COMPACT && LA149_0 <= KW_COMPACTIONS)||(LA149_0 >= KW_COMPUTE && LA149_0 <= KW_CONCATENATE)||LA149_0==KW_CONTINUE||LA149_0==KW_COST||LA149_0==KW_CRON||LA149_0==KW_DATA||LA149_0==KW_DATABASES||(LA149_0 >= KW_DATETIME && LA149_0 <= KW_DCPROPERTIES)||LA149_0==KW_DEBUG||(LA149_0 >= KW_DEFAULT && LA149_0 <= KW_DEFINED)||(LA149_0 >= KW_DELIMITED && LA149_0 <= KW_DESC)||(LA149_0 >= KW_DETAIL && LA149_0 <= KW_DISABLE)||(LA149_0 >= KW_DISTRIBUTE && LA149_0 <= KW_DO)||LA149_0==KW_DOW||(LA149_0 >= KW_DUMP && LA149_0 <= KW_ELEM_TYPE)||LA149_0==KW_ENABLE||(LA149_0 >= KW_ENFORCED && LA149_0 <= KW_EVERY)||(LA149_0 >= KW_EXCLUSIVE && LA149_0 <= KW_EXECUTED)||(LA149_0 >= KW_EXPIRE_SNAPSHOTS && LA149_0 <= KW_EXPRESSION)||LA149_0==KW_FAST_FORWARD||(LA149_0 >= KW_FIELDS && LA149_0 <= KW_FIRST)||(LA149_0 >= KW_FORMAT && LA149_0 <= KW_FORMATTED)||LA149_0==KW_FUNCTIONS||(LA149_0 >= KW_HOUR && LA149_0 <= KW_IDXPROPERTIES)||LA149_0==KW_IGNORE||(LA149_0 >= KW_INDEX && LA149_0 <= KW_INDEXES)||(LA149_0 >= KW_INPATH && LA149_0 <= KW_INPUTFORMAT)||(LA149_0 >= KW_ISOLATION && LA149_0 <= KW_JAR)||(LA149_0 >= KW_JOINCOST && LA149_0 <= KW_LAST)||LA149_0==KW_LEVEL||(LA149_0 >= KW_LIMIT && LA149_0 <= KW_LOAD)||(LA149_0 >= KW_LOCATION && LA149_0 <= KW_LONG)||(LA149_0 >= KW_MANAGED && LA149_0 <= KW_MANAGEMENT)||(LA149_0 >= KW_MAPJOIN && LA149_0 <= KW_MATERIALIZED)||LA149_0==KW_METADATA||(LA149_0 >= KW_MINUTE && LA149_0 <= KW_MONTH)||(LA149_0 >= KW_MOVE && LA149_0 <= KW_MSCK)||(LA149_0 >= KW_NORELY && LA149_0 <= KW_NOSCAN)||LA149_0==KW_NOVALIDATE||LA149_0==KW_NULLS||LA149_0==KW_OFFSET||(LA149_0 >= KW_OPERATOR && LA149_0 <= KW_OPTION)||(LA149_0 >= KW_OUTPUTDRIVER && LA149_0 <= KW_OUTPUTFORMAT)||(LA149_0 >= KW_OVERWRITE && LA149_0 <= KW_OWNER)||(LA149_0 >= KW_PARTITIONED && LA149_0 <= KW_PATH)||(LA149_0 >= KW_PLAN && LA149_0 <= KW_POOL)||LA149_0==KW_PRINCIPALS||LA149_0==KW_PURGE||(LA149_0 >= KW_QUARTER && LA149_0 <= KW_QUERY_PARALLELISM)||LA149_0==KW_READ||(LA149_0 >= KW_REBUILD && LA149_0 <= KW_RECORDWRITER)||(LA149_0 >= KW_RELOAD && LA149_0 <= KW_RETENTION)||LA149_0==KW_REWRITE||(LA149_0 >= KW_ROLE && LA149_0 <= KW_ROLES)||(LA149_0 >= KW_SCHEDULED && LA149_0 <= KW_SECOND)||(LA149_0 >= KW_SEMI && LA149_0 <= KW_SERVER)||(LA149_0 >= KW_SETS && LA149_0 <= KW_SKEWED)||(LA149_0 >= KW_SNAPSHOT && LA149_0 <= KW_SNAPSHOTS)||(LA149_0 >= KW_SORT && LA149_0 <= KW_SSL)||(LA149_0 >= KW_STATISTICS && LA149_0 <= KW_SUMMARY)||(LA149_0 >= KW_SYSTEM_TIME && LA149_0 <= KW_SYSTEM_VERSION)||LA149_0==KW_TABLES||(LA149_0 >= KW_TAG && LA149_0 <= KW_TERMINATED)||LA149_0==KW_TINYINT||LA149_0==KW_TOUCH||(LA149_0 >= KW_TRANSACTION && LA149_0 <= KW_TRANSACTIONS)||LA149_0==KW_TRIM||(LA149_0 >= KW_TYPE && LA149_0 <= KW_UNARCHIVE)||LA149_0==KW_UNDO||LA149_0==KW_UNIONTYPE||(LA149_0 >= KW_UNKNOWN && LA149_0 <= KW_UNSIGNED)||(LA149_0 >= KW_URI && LA149_0 <= KW_USE)||(LA149_0 >= KW_UTC && LA149_0 <= KW_VALIDATE)||LA149_0==KW_VALUE_TYPE||(LA149_0 >= KW_VECTORIZATION && LA149_0 <= KW_WEEK)||LA149_0==KW_WHILE||(LA149_0 >= KW_WITHIN && LA149_0 <= KW_ZONE)||LA149_0==KW_BATCH||LA149_0==KW_DAYOFWEEK||LA149_0==KW_HOLD_DDLTIME||LA149_0==KW_NO_DROP||LA149_0==KW_OFFLINE||LA149_0==KW_PROTECTION||LA149_0==KW_READONLY||LA149_0==KW_TIMESTAMPTZ) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // HiveParser.g:1601:14: columnNameTypeList
                    {
                    pushFollow(FOLLOW_columnNameTypeList_in_createMacroStatement7809);
                    columnNameTypeList463=columnNameTypeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnNameTypeList.add(columnNameTypeList463.getTree());

                    }
                    break;

            }


            RPAREN464=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createMacroStatement7812); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN464);


            pushFollow(FOLLOW_expression_in_createMacroStatement7814);
            expression465=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression465.getTree());

            // AST REWRITE
            // elements: columnNameTypeList, expression, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1602:5: -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression )
            {
                // HiveParser.g:1602:8: ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CREATEMACRO, "TOK_CREATEMACRO")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                // HiveParser.g:1602:37: ( columnNameTypeList )?
                if ( stream_columnNameTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());

                }
                stream_columnNameTypeList.reset();

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createMacroStatement"


    public static class dropMacroStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropMacroStatement"
    // HiveParser.g:1605:1: dropMacroStatement : KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier -> ^( TOK_DROPMACRO Identifier ( ifExists )? ) ;
    public final HiveParser.dropMacroStatement_return dropMacroStatement() throws RecognitionException {
        HiveParser.dropMacroStatement_return retval = new HiveParser.dropMacroStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_DROP466=null;
        Token KW_TEMPORARY467=null;
        Token KW_MACRO468=null;
        Token Identifier470=null;
        HiveParser.ifExists_return ifExists469 =null;


        ASTNode KW_DROP466_tree=null;
        ASTNode KW_TEMPORARY467_tree=null;
        ASTNode KW_MACRO468_tree=null;
        ASTNode Identifier470_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_MACRO=new RewriteRuleTokenStream(adaptor,"token KW_MACRO");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         pushMsg("drop macro statement", state); 
        try {
            // HiveParser.g:1608:5: ( KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier -> ^( TOK_DROPMACRO Identifier ( ifExists )? ) )
            // HiveParser.g:1608:7: KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier
            {
            KW_DROP466=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropMacroStatement7858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP466);


            KW_TEMPORARY467=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropMacroStatement7860); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(KW_TEMPORARY467);


            KW_MACRO468=(Token)match(input,KW_MACRO,FOLLOW_KW_MACRO_in_dropMacroStatement7862); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MACRO.add(KW_MACRO468);


            // HiveParser.g:1608:37: ( ifExists )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==KW_IF) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // HiveParser.g:1608:37: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropMacroStatement7864);
                    ifExists469=ifExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifExists.add(ifExists469.getTree());

                    }
                    break;

            }


            Identifier470=(Token)match(input,Identifier,FOLLOW_Identifier_in_dropMacroStatement7867); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier470);


            // AST REWRITE
            // elements: ifExists, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1609:5: -> ^( TOK_DROPMACRO Identifier ( ifExists )? )
            {
                // HiveParser.g:1609:8: ^( TOK_DROPMACRO Identifier ( ifExists )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DROPMACRO, "TOK_DROPMACRO")
                , root_1);

                adaptor.addChild(root_1, 
                stream_Identifier.nextNode()
                );

                // HiveParser.g:1609:35: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropMacroStatement"


    public static class createViewStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createViewStatement"
    // HiveParser.g:1612:1: createViewStatement : KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) ;
    public final HiveParser.createViewStatement_return createViewStatement() throws RecognitionException {
        HiveParser.createViewStatement_return retval = new HiveParser.createViewStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_CREATE471=null;
        Token KW_VIEW473=null;
        Token LPAREN475=null;
        Token RPAREN477=null;
        Token KW_AS481=null;
        HiveParser_FromClauseParser.tableName_return name =null;

        HiveParser.orReplace_return orReplace472 =null;

        HiveParser.ifNotExists_return ifNotExists474 =null;

        HiveParser.columnNameCommentList_return columnNameCommentList476 =null;

        HiveParser.tableComment_return tableComment478 =null;

        HiveParser.viewPartition_return viewPartition479 =null;

        HiveParser.tablePropertiesPrefixed_return tablePropertiesPrefixed480 =null;

        HiveParser.selectStatementWithCTE_return selectStatementWithCTE482 =null;


        ASTNode KW_CREATE471_tree=null;
        ASTNode KW_VIEW473_tree=null;
        ASTNode LPAREN475_tree=null;
        ASTNode RPAREN477_tree=null;
        ASTNode KW_AS481_tree=null;
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleSubtreeStream stream_columnNameCommentList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameCommentList");
        RewriteRuleSubtreeStream stream_selectStatementWithCTE=new RewriteRuleSubtreeStream(adaptor,"rule selectStatementWithCTE");
        RewriteRuleSubtreeStream stream_orReplace=new RewriteRuleSubtreeStream(adaptor,"rule orReplace");
        RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
        RewriteRuleSubtreeStream stream_viewPartition=new RewriteRuleSubtreeStream(adaptor,"rule viewPartition");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

            pushMsg("create view statement", state);

        try {
            // HiveParser.g:1617:5: ( KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) )
            // HiveParser.g:1617:7: KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE
            {
            KW_CREATE471=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createViewStatement7909); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE471);


            // HiveParser.g:1617:17: ( orReplace )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==KW_OR) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // HiveParser.g:1617:18: orReplace
                    {
                    pushFollow(FOLLOW_orReplace_in_createViewStatement7912);
                    orReplace472=orReplace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orReplace.add(orReplace472.getTree());

                    }
                    break;

            }


            KW_VIEW473=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_createViewStatement7916); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW473);


            // HiveParser.g:1617:38: ( ifNotExists )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==KW_IF) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // HiveParser.g:1617:39: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createViewStatement7919);
                    ifNotExists474=ifNotExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists474.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_tableName_in_createViewStatement7925);
            name=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(name.getTree());

            // HiveParser.g:1618:9: ( LPAREN columnNameCommentList RPAREN )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==LPAREN) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // HiveParser.g:1618:10: LPAREN columnNameCommentList RPAREN
                    {
                    LPAREN475=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createViewStatement7936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN475);


                    pushFollow(FOLLOW_columnNameCommentList_in_createViewStatement7938);
                    columnNameCommentList476=columnNameCommentList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnNameCommentList.add(columnNameCommentList476.getTree());

                    RPAREN477=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createViewStatement7940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN477);


                    }
                    break;

            }


            // HiveParser.g:1618:48: ( tableComment )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==KW_COMMENT) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // HiveParser.g:1618:48: tableComment
                    {
                    pushFollow(FOLLOW_tableComment_in_createViewStatement7944);
                    tableComment478=tableComment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableComment.add(tableComment478.getTree());

                    }
                    break;

            }


            // HiveParser.g:1618:62: ( viewPartition )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==KW_PARTITIONED) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // HiveParser.g:1618:62: viewPartition
                    {
                    pushFollow(FOLLOW_viewPartition_in_createViewStatement7947);
                    viewPartition479=viewPartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewPartition.add(viewPartition479.getTree());

                    }
                    break;

            }


            // HiveParser.g:1619:9: ( tablePropertiesPrefixed )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==KW_TBLPROPERTIES) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // HiveParser.g:1619:9: tablePropertiesPrefixed
                    {
                    pushFollow(FOLLOW_tablePropertiesPrefixed_in_createViewStatement7958);
                    tablePropertiesPrefixed480=tablePropertiesPrefixed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed480.getTree());

                    }
                    break;

            }


            KW_AS481=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createViewStatement7969); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS481);


            pushFollow(FOLLOW_selectStatementWithCTE_in_createViewStatement7979);
            selectStatementWithCTE482=selectStatementWithCTE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectStatementWithCTE.add(selectStatementWithCTE482.getTree());

            // AST REWRITE
            // elements: selectStatementWithCTE, tableComment, columnNameCommentList, tablePropertiesPrefixed, viewPartition, ifNotExists, orReplace, name
            // token labels: 
            // rule labels: name, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1622:5: -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
            {
                // HiveParser.g:1622:8: ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CREATEVIEW, "TOK_CREATEVIEW")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                // HiveParser.g:1622:31: ( orReplace )?
                if ( stream_orReplace.hasNext() ) {
                    adaptor.addChild(root_1, stream_orReplace.nextTree());

                }
                stream_orReplace.reset();

                // HiveParser.g:1623:10: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.nextTree());

                }
                stream_ifNotExists.reset();

                // HiveParser.g:1624:10: ( columnNameCommentList )?
                if ( stream_columnNameCommentList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameCommentList.nextTree());

                }
                stream_columnNameCommentList.reset();

                // HiveParser.g:1625:10: ( tableComment )?
                if ( stream_tableComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableComment.nextTree());

                }
                stream_tableComment.reset();

                // HiveParser.g:1626:10: ( viewPartition )?
                if ( stream_viewPartition.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewPartition.nextTree());

                }
                stream_viewPartition.reset();

                // HiveParser.g:1627:10: ( tablePropertiesPrefixed )?
                if ( stream_tablePropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());

                }
                stream_tablePropertiesPrefixed.reset();

                adaptor.addChild(root_1, stream_selectStatementWithCTE.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createViewStatement"


    public static class viewPartition_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "viewPartition"
    // HiveParser.g:1632:1: viewPartition : ( KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) | KW_PARTITIONED KW_ON KW_SPEC LPAREN (spec= partitionTransformSpec ) RPAREN -> ^( TOK_TABLEPARTCOLSBYSPEC $spec) );
    public final HiveParser.viewPartition_return viewPartition() throws RecognitionException {
        HiveParser.viewPartition_return retval = new HiveParser.viewPartition_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_PARTITIONED483=null;
        Token KW_ON484=null;
        Token LPAREN485=null;
        Token RPAREN487=null;
        Token KW_PARTITIONED488=null;
        Token KW_ON489=null;
        Token KW_SPEC490=null;
        Token LPAREN491=null;
        Token RPAREN492=null;
        HiveParser.partitionTransformSpec_return spec =null;

        HiveParser.columnNameList_return columnNameList486 =null;


        ASTNode KW_PARTITIONED483_tree=null;
        ASTNode KW_ON484_tree=null;
        ASTNode LPAREN485_tree=null;
        ASTNode RPAREN487_tree=null;
        ASTNode KW_PARTITIONED488_tree=null;
        ASTNode KW_ON489_tree=null;
        ASTNode KW_SPEC490_tree=null;
        ASTNode LPAREN491_tree=null;
        ASTNode RPAREN492_tree=null;
        RewriteRuleTokenStream stream_KW_SPEC=new RewriteRuleTokenStream(adaptor,"token KW_SPEC");
        RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_partitionTransformSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionTransformSpec");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         pushMsg("view partition specification", state); 
        try {
            // HiveParser.g:1635:5: ( KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) | KW_PARTITIONED KW_ON KW_SPEC LPAREN (spec= partitionTransformSpec ) RPAREN -> ^( TOK_TABLEPARTCOLSBYSPEC $spec) )
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==KW_PARTITIONED) ) {
                int LA157_1 = input.LA(2);

                if ( (LA157_1==KW_ON) ) {
                    int LA157_2 = input.LA(3);

                    if ( (LA157_2==LPAREN) ) {
                        alt157=1;
                    }
                    else if ( (LA157_2==KW_SPEC) ) {
                        alt157=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 157, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 157, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;

            }
            switch (alt157) {
                case 1 :
                    // HiveParser.g:1635:7: KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN
                    {
                    KW_PARTITIONED483=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_viewPartition8102); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_PARTITIONED.add(KW_PARTITIONED483);


                    KW_ON484=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_viewPartition8104); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON484);


                    LPAREN485=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewPartition8106); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN485);


                    pushFollow(FOLLOW_columnNameList_in_viewPartition8108);
                    columnNameList486=columnNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnNameList.add(columnNameList486.getTree());

                    RPAREN487=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewPartition8110); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN487);


                    // AST REWRITE
                    // elements: columnNameList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1636:5: -> ^( TOK_VIEWPARTCOLS columnNameList )
                    {
                        // HiveParser.g:1636:8: ^( TOK_VIEWPARTCOLS columnNameList )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_VIEWPARTCOLS, "TOK_VIEWPARTCOLS")
                        , root_1);

                        adaptor.addChild(root_1, stream_columnNameList.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1637:7: KW_PARTITIONED KW_ON KW_SPEC LPAREN (spec= partitionTransformSpec ) RPAREN
                    {
                    KW_PARTITIONED488=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_viewPartition8130); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_PARTITIONED.add(KW_PARTITIONED488);


                    KW_ON489=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_viewPartition8132); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON489);


                    KW_SPEC490=(Token)match(input,KW_SPEC,FOLLOW_KW_SPEC_in_viewPartition8134); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SPEC.add(KW_SPEC490);


                    LPAREN491=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewPartition8136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN491);


                    // HiveParser.g:1637:43: (spec= partitionTransformSpec )
                    // HiveParser.g:1637:44: spec= partitionTransformSpec
                    {
                    pushFollow(FOLLOW_partitionTransformSpec_in_viewPartition8143);
                    spec=partitionTransformSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_partitionTransformSpec.add(spec.getTree());

                    }


                    RPAREN492=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewPartition8146); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN492);


                    // AST REWRITE
                    // elements: spec
                    // token labels: 
                    // rule labels: spec, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_spec=new RewriteRuleSubtreeStream(adaptor,"rule spec",spec!=null?spec.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1638:5: -> ^( TOK_TABLEPARTCOLSBYSPEC $spec)
                    {
                        // HiveParser.g:1638:8: ^( TOK_TABLEPARTCOLSBYSPEC $spec)
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_TABLEPARTCOLSBYSPEC, "TOK_TABLEPARTCOLSBYSPEC")
                        , root_1);

                        adaptor.addChild(root_1, stream_spec.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "viewPartition"


    public static class viewOrganization_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "viewOrganization"
    // HiveParser.g:1641:1: viewOrganization : ( viewClusterSpec | viewComplexSpec );
    public final HiveParser.viewOrganization_return viewOrganization() throws RecognitionException {
        HiveParser.viewOrganization_return retval = new HiveParser.viewOrganization_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.viewClusterSpec_return viewClusterSpec493 =null;

        HiveParser.viewComplexSpec_return viewComplexSpec494 =null;



         pushMsg("view organization specification", state); 
        try {
            // HiveParser.g:1644:5: ( viewClusterSpec | viewComplexSpec )
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==KW_CLUSTERED) ) {
                alt158=1;
            }
            else if ( (LA158_0==KW_DISTRIBUTED) ) {
                alt158=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;

            }
            switch (alt158) {
                case 1 :
                    // HiveParser.g:1644:7: viewClusterSpec
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_viewClusterSpec_in_viewOrganization8186);
                    viewClusterSpec493=viewClusterSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, viewClusterSpec493.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:1645:7: viewComplexSpec
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_viewComplexSpec_in_viewOrganization8194);
                    viewComplexSpec494=viewComplexSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, viewComplexSpec494.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "viewOrganization"


    public static class viewClusterSpec_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "viewClusterSpec"
    // HiveParser.g:1648:1: viewClusterSpec : KW_CLUSTERED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWCLUSTERCOLS columnNameList ) ;
    public final HiveParser.viewClusterSpec_return viewClusterSpec() throws RecognitionException {
        HiveParser.viewClusterSpec_return retval = new HiveParser.viewClusterSpec_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_CLUSTERED495=null;
        Token KW_ON496=null;
        Token LPAREN497=null;
        Token RPAREN499=null;
        HiveParser.columnNameList_return columnNameList498 =null;


        ASTNode KW_CLUSTERED495_tree=null;
        ASTNode KW_ON496_tree=null;
        ASTNode LPAREN497_tree=null;
        ASTNode RPAREN499_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         pushMsg("view cluster specification", state); 
        try {
            // HiveParser.g:1651:5: ( KW_CLUSTERED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWCLUSTERCOLS columnNameList ) )
            // HiveParser.g:1651:7: KW_CLUSTERED KW_ON LPAREN columnNameList RPAREN
            {
            KW_CLUSTERED495=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_viewClusterSpec8221); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CLUSTERED.add(KW_CLUSTERED495);


            KW_ON496=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_viewClusterSpec8223); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON496);


            LPAREN497=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewClusterSpec8225); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN497);


            pushFollow(FOLLOW_columnNameList_in_viewClusterSpec8227);
            columnNameList498=columnNameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameList.add(columnNameList498.getTree());

            RPAREN499=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewClusterSpec8229); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN499);


            // AST REWRITE
            // elements: columnNameList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1652:5: -> ^( TOK_VIEWCLUSTERCOLS columnNameList )
            {
                // HiveParser.g:1652:8: ^( TOK_VIEWCLUSTERCOLS columnNameList )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_VIEWCLUSTERCOLS, "TOK_VIEWCLUSTERCOLS")
                , root_1);

                adaptor.addChild(root_1, stream_columnNameList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "viewClusterSpec"


    public static class viewComplexSpec_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "viewComplexSpec"
    // HiveParser.g:1655:1: viewComplexSpec : viewDistSpec viewSortSpec ;
    public final HiveParser.viewComplexSpec_return viewComplexSpec() throws RecognitionException {
        HiveParser.viewComplexSpec_return retval = new HiveParser.viewComplexSpec_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.viewDistSpec_return viewDistSpec500 =null;

        HiveParser.viewSortSpec_return viewSortSpec501 =null;



         pushMsg("view complex specification", state); 
        try {
            // HiveParser.g:1658:5: ( viewDistSpec viewSortSpec )
            // HiveParser.g:1658:7: viewDistSpec viewSortSpec
            {
            root_0 = (ASTNode)adaptor.nil();


            pushFollow(FOLLOW_viewDistSpec_in_viewComplexSpec8268);
            viewDistSpec500=viewDistSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, viewDistSpec500.getTree());

            pushFollow(FOLLOW_viewSortSpec_in_viewComplexSpec8270);
            viewSortSpec501=viewSortSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, viewSortSpec501.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "viewComplexSpec"


    public static class viewDistSpec_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "viewDistSpec"
    // HiveParser.g:1661:1: viewDistSpec : KW_DISTRIBUTED KW_ON LPAREN colList= columnNameList RPAREN -> ^( TOK_VIEWDISTRIBUTECOLS $colList) ;
    public final HiveParser.viewDistSpec_return viewDistSpec() throws RecognitionException {
        HiveParser.viewDistSpec_return retval = new HiveParser.viewDistSpec_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_DISTRIBUTED502=null;
        Token KW_ON503=null;
        Token LPAREN504=null;
        Token RPAREN505=null;
        HiveParser.columnNameList_return colList =null;


        ASTNode KW_DISTRIBUTED502_tree=null;
        ASTNode KW_ON503_tree=null;
        ASTNode LPAREN504_tree=null;
        ASTNode RPAREN505_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_DISTRIBUTED=new RewriteRuleTokenStream(adaptor,"token KW_DISTRIBUTED");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         pushMsg("view distribute specification", state); 
        try {
            // HiveParser.g:1664:5: ( KW_DISTRIBUTED KW_ON LPAREN colList= columnNameList RPAREN -> ^( TOK_VIEWDISTRIBUTECOLS $colList) )
            // HiveParser.g:1664:7: KW_DISTRIBUTED KW_ON LPAREN colList= columnNameList RPAREN
            {
            KW_DISTRIBUTED502=(Token)match(input,KW_DISTRIBUTED,FOLLOW_KW_DISTRIBUTED_in_viewDistSpec8297); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DISTRIBUTED.add(KW_DISTRIBUTED502);


            KW_ON503=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_viewDistSpec8299); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON503);


            LPAREN504=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewDistSpec8301); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN504);


            pushFollow(FOLLOW_columnNameList_in_viewDistSpec8305);
            colList=columnNameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameList.add(colList.getTree());

            RPAREN505=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewDistSpec8307); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN505);


            // AST REWRITE
            // elements: colList
            // token labels: 
            // rule labels: colList, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_colList=new RewriteRuleSubtreeStream(adaptor,"rule colList",colList!=null?colList.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1665:5: -> ^( TOK_VIEWDISTRIBUTECOLS $colList)
            {
                // HiveParser.g:1665:8: ^( TOK_VIEWDISTRIBUTECOLS $colList)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_VIEWDISTRIBUTECOLS, "TOK_VIEWDISTRIBUTECOLS")
                , root_1);

                adaptor.addChild(root_1, stream_colList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "viewDistSpec"


    public static class viewSortSpec_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "viewSortSpec"
    // HiveParser.g:1668:1: viewSortSpec : KW_SORTED KW_ON LPAREN colList= columnNameList RPAREN -> ^( TOK_VIEWSORTCOLS $colList) ;
    public final HiveParser.viewSortSpec_return viewSortSpec() throws RecognitionException {
        HiveParser.viewSortSpec_return retval = new HiveParser.viewSortSpec_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_SORTED506=null;
        Token KW_ON507=null;
        Token LPAREN508=null;
        Token RPAREN509=null;
        HiveParser.columnNameList_return colList =null;


        ASTNode KW_SORTED506_tree=null;
        ASTNode KW_ON507_tree=null;
        ASTNode LPAREN508_tree=null;
        ASTNode RPAREN509_tree=null;
        RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         pushMsg("view sort specification", state); 
        try {
            // HiveParser.g:1671:5: ( KW_SORTED KW_ON LPAREN colList= columnNameList RPAREN -> ^( TOK_VIEWSORTCOLS $colList) )
            // HiveParser.g:1671:7: KW_SORTED KW_ON LPAREN colList= columnNameList RPAREN
            {
            KW_SORTED506=(Token)match(input,KW_SORTED,FOLLOW_KW_SORTED_in_viewSortSpec8347); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SORTED.add(KW_SORTED506);


            KW_ON507=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_viewSortSpec8349); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON507);


            LPAREN508=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewSortSpec8351); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN508);


            pushFollow(FOLLOW_columnNameList_in_viewSortSpec8355);
            colList=columnNameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameList.add(colList.getTree());

            RPAREN509=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewSortSpec8357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN509);


            // AST REWRITE
            // elements: colList
            // token labels: 
            // rule labels: colList, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_colList=new RewriteRuleSubtreeStream(adaptor,"rule colList",colList!=null?colList.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1672:5: -> ^( TOK_VIEWSORTCOLS $colList)
            {
                // HiveParser.g:1672:8: ^( TOK_VIEWSORTCOLS $colList)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_VIEWSORTCOLS, "TOK_VIEWSORTCOLS")
                , root_1);

                adaptor.addChild(root_1, stream_colList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "viewSortSpec"


    public static class dropViewStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropViewStatement"
    // HiveParser.g:1675:1: dropViewStatement : KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) ;
    public final HiveParser.dropViewStatement_return dropViewStatement() throws RecognitionException {
        HiveParser.dropViewStatement_return retval = new HiveParser.dropViewStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_DROP510=null;
        Token KW_VIEW511=null;
        HiveParser.ifExists_return ifExists512 =null;

        HiveParser_FromClauseParser.viewName_return viewName513 =null;


        ASTNode KW_DROP510_tree=null;
        ASTNode KW_VIEW511_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleSubtreeStream stream_viewName=new RewriteRuleSubtreeStream(adaptor,"rule viewName");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         pushMsg("drop view statement", state); 
        try {
            // HiveParser.g:1678:5: ( KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) )
            // HiveParser.g:1678:7: KW_DROP KW_VIEW ( ifExists )? viewName
            {
            KW_DROP510=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropViewStatement8397); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP510);


            KW_VIEW511=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_dropViewStatement8399); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW511);


            // HiveParser.g:1678:23: ( ifExists )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==KW_IF) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // HiveParser.g:1678:23: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropViewStatement8401);
                    ifExists512=ifExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifExists.add(ifExists512.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_viewName_in_dropViewStatement8404);
            viewName513=viewName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_viewName.add(viewName513.getTree());

            // AST REWRITE
            // elements: ifExists, viewName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1678:42: -> ^( TOK_DROPVIEW viewName ( ifExists )? )
            {
                // HiveParser.g:1678:45: ^( TOK_DROPVIEW viewName ( ifExists )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DROPVIEW, "TOK_DROPVIEW")
                , root_1);

                adaptor.addChild(root_1, stream_viewName.nextTree());

                // HiveParser.g:1678:69: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropViewStatement"


    public static class createMaterializedViewStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createMaterializedViewStatement"
    // HiveParser.g:1681:1: createMaterializedViewStatement : KW_CREATE KW_MATERIALIZED KW_VIEW ( ifNotExists )? name= tableName ( rewriteDisabled )? ( tableComment )? ( viewPartition )? ( viewOrganization )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATE_MATERIALIZED_VIEW $name ( ifNotExists )? ( rewriteDisabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( viewPartition )? ( viewOrganization )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) ;
    public final HiveParser.createMaterializedViewStatement_return createMaterializedViewStatement() throws RecognitionException {
        HiveParser.createMaterializedViewStatement_return retval = new HiveParser.createMaterializedViewStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_CREATE514=null;
        Token KW_MATERIALIZED515=null;
        Token KW_VIEW516=null;
        Token KW_AS526=null;
        HiveParser_FromClauseParser.tableName_return name =null;

        HiveParser.ifNotExists_return ifNotExists517 =null;

        HiveParser.rewriteDisabled_return rewriteDisabled518 =null;

        HiveParser.tableComment_return tableComment519 =null;

        HiveParser.viewPartition_return viewPartition520 =null;

        HiveParser.viewOrganization_return viewOrganization521 =null;

        HiveParser.tableRowFormat_return tableRowFormat522 =null;

        HiveParser.tableFileFormat_return tableFileFormat523 =null;

        HiveParser.tableLocation_return tableLocation524 =null;

        HiveParser.tablePropertiesPrefixed_return tablePropertiesPrefixed525 =null;

        HiveParser.selectStatementWithCTE_return selectStatementWithCTE527 =null;


        ASTNode KW_CREATE514_tree=null;
        ASTNode KW_MATERIALIZED515_tree=null;
        ASTNode KW_VIEW516_tree=null;
        ASTNode KW_AS526_tree=null;
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_MATERIALIZED=new RewriteRuleTokenStream(adaptor,"token KW_MATERIALIZED");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
        RewriteRuleSubtreeStream stream_selectStatementWithCTE=new RewriteRuleSubtreeStream(adaptor,"rule selectStatementWithCTE");
        RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
        RewriteRuleSubtreeStream stream_rewriteDisabled=new RewriteRuleSubtreeStream(adaptor,"rule rewriteDisabled");
        RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
        RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
        RewriteRuleSubtreeStream stream_viewOrganization=new RewriteRuleSubtreeStream(adaptor,"rule viewOrganization");
        RewriteRuleSubtreeStream stream_viewPartition=new RewriteRuleSubtreeStream(adaptor,"rule viewPartition");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

            pushMsg("create materialized view statement", state);

        try {
            // HiveParser.g:1686:5: ( KW_CREATE KW_MATERIALIZED KW_VIEW ( ifNotExists )? name= tableName ( rewriteDisabled )? ( tableComment )? ( viewPartition )? ( viewOrganization )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATE_MATERIALIZED_VIEW $name ( ifNotExists )? ( rewriteDisabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( viewPartition )? ( viewOrganization )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) )
            // HiveParser.g:1686:7: KW_CREATE KW_MATERIALIZED KW_VIEW ( ifNotExists )? name= tableName ( rewriteDisabled )? ( tableComment )? ( viewPartition )? ( viewOrganization )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE
            {
            KW_CREATE514=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createMaterializedViewStatement8442); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE514);


            KW_MATERIALIZED515=(Token)match(input,KW_MATERIALIZED,FOLLOW_KW_MATERIALIZED_in_createMaterializedViewStatement8444); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MATERIALIZED.add(KW_MATERIALIZED515);


            KW_VIEW516=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_createMaterializedViewStatement8446); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW516);


            // HiveParser.g:1686:41: ( ifNotExists )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==KW_IF) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // HiveParser.g:1686:42: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createMaterializedViewStatement8449);
                    ifNotExists517=ifNotExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists517.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_tableName_in_createMaterializedViewStatement8455);
            name=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(name.getTree());

            // HiveParser.g:1687:9: ( rewriteDisabled )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==KW_DISABLE) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // HiveParser.g:1687:9: rewriteDisabled
                    {
                    pushFollow(FOLLOW_rewriteDisabled_in_createMaterializedViewStatement8465);
                    rewriteDisabled518=rewriteDisabled();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rewriteDisabled.add(rewriteDisabled518.getTree());

                    }
                    break;

            }


            // HiveParser.g:1687:26: ( tableComment )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==KW_COMMENT) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // HiveParser.g:1687:26: tableComment
                    {
                    pushFollow(FOLLOW_tableComment_in_createMaterializedViewStatement8468);
                    tableComment519=tableComment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableComment.add(tableComment519.getTree());

                    }
                    break;

            }


            // HiveParser.g:1687:40: ( viewPartition )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==KW_PARTITIONED) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // HiveParser.g:1687:40: viewPartition
                    {
                    pushFollow(FOLLOW_viewPartition_in_createMaterializedViewStatement8471);
                    viewPartition520=viewPartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewPartition.add(viewPartition520.getTree());

                    }
                    break;

            }


            // HiveParser.g:1687:55: ( viewOrganization )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==KW_CLUSTERED||LA164_0==KW_DISTRIBUTED) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // HiveParser.g:1687:55: viewOrganization
                    {
                    pushFollow(FOLLOW_viewOrganization_in_createMaterializedViewStatement8474);
                    viewOrganization521=viewOrganization();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewOrganization.add(viewOrganization521.getTree());

                    }
                    break;

            }


            // HiveParser.g:1688:9: ( tableRowFormat )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==KW_ROW) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // HiveParser.g:1688:9: tableRowFormat
                    {
                    pushFollow(FOLLOW_tableRowFormat_in_createMaterializedViewStatement8485);
                    tableRowFormat522=tableRowFormat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat522.getTree());

                    }
                    break;

            }


            // HiveParser.g:1688:25: ( tableFileFormat )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==KW_STORED) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // HiveParser.g:1688:25: tableFileFormat
                    {
                    pushFollow(FOLLOW_tableFileFormat_in_createMaterializedViewStatement8488);
                    tableFileFormat523=tableFileFormat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat523.getTree());

                    }
                    break;

            }


            // HiveParser.g:1688:42: ( tableLocation )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==KW_LOCATION) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // HiveParser.g:1688:42: tableLocation
                    {
                    pushFollow(FOLLOW_tableLocation_in_createMaterializedViewStatement8491);
                    tableLocation524=tableLocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation524.getTree());

                    }
                    break;

            }


            // HiveParser.g:1689:9: ( tablePropertiesPrefixed )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==KW_TBLPROPERTIES) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // HiveParser.g:1689:9: tablePropertiesPrefixed
                    {
                    pushFollow(FOLLOW_tablePropertiesPrefixed_in_createMaterializedViewStatement8502);
                    tablePropertiesPrefixed525=tablePropertiesPrefixed();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed525.getTree());

                    }
                    break;

            }


            KW_AS526=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createMaterializedViewStatement8505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS526);


            pushFollow(FOLLOW_selectStatementWithCTE_in_createMaterializedViewStatement8507);
            selectStatementWithCTE527=selectStatementWithCTE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectStatementWithCTE.add(selectStatementWithCTE527.getTree());

            // AST REWRITE
            // elements: tableLocation, selectStatementWithCTE, tableFileFormat, viewPartition, ifNotExists, rewriteDisabled, tablePropertiesPrefixed, tableRowFormat, viewOrganization, tableComment, name
            // token labels: 
            // rule labels: name, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1690:5: -> ^( TOK_CREATE_MATERIALIZED_VIEW $name ( ifNotExists )? ( rewriteDisabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( viewPartition )? ( viewOrganization )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
            {
                // HiveParser.g:1690:8: ^( TOK_CREATE_MATERIALIZED_VIEW $name ( ifNotExists )? ( rewriteDisabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( viewPartition )? ( viewOrganization )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CREATE_MATERIALIZED_VIEW, "TOK_CREATE_MATERIALIZED_VIEW")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                // HiveParser.g:1691:10: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.nextTree());

                }
                stream_ifNotExists.reset();

                // HiveParser.g:1692:10: ( rewriteDisabled )?
                if ( stream_rewriteDisabled.hasNext() ) {
                    adaptor.addChild(root_1, stream_rewriteDisabled.nextTree());

                }
                stream_rewriteDisabled.reset();

                // HiveParser.g:1693:10: ( tableComment )?
                if ( stream_tableComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableComment.nextTree());

                }
                stream_tableComment.reset();

                // HiveParser.g:1694:10: ( tableRowFormat )?
                if ( stream_tableRowFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormat.nextTree());

                }
                stream_tableRowFormat.reset();

                // HiveParser.g:1695:10: ( tableFileFormat )?
                if ( stream_tableFileFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableFileFormat.nextTree());

                }
                stream_tableFileFormat.reset();

                // HiveParser.g:1696:10: ( tableLocation )?
                if ( stream_tableLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableLocation.nextTree());

                }
                stream_tableLocation.reset();

                // HiveParser.g:1697:10: ( viewPartition )?
                if ( stream_viewPartition.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewPartition.nextTree());

                }
                stream_viewPartition.reset();

                // HiveParser.g:1698:10: ( viewOrganization )?
                if ( stream_viewOrganization.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewOrganization.nextTree());

                }
                stream_viewOrganization.reset();

                // HiveParser.g:1699:10: ( tablePropertiesPrefixed )?
                if ( stream_tablePropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());

                }
                stream_tablePropertiesPrefixed.reset();

                adaptor.addChild(root_1, stream_selectStatementWithCTE.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createMaterializedViewStatement"


    public static class dropMaterializedViewStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropMaterializedViewStatement"
    // HiveParser.g:1704:1: dropMaterializedViewStatement : KW_DROP KW_MATERIALIZED KW_VIEW ( ifExists )? viewName -> ^( TOK_DROP_MATERIALIZED_VIEW viewName ( ifExists )? ) ;
    public final HiveParser.dropMaterializedViewStatement_return dropMaterializedViewStatement() throws RecognitionException {
        HiveParser.dropMaterializedViewStatement_return retval = new HiveParser.dropMaterializedViewStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_DROP528=null;
        Token KW_MATERIALIZED529=null;
        Token KW_VIEW530=null;
        HiveParser.ifExists_return ifExists531 =null;

        HiveParser_FromClauseParser.viewName_return viewName532 =null;


        ASTNode KW_DROP528_tree=null;
        ASTNode KW_MATERIALIZED529_tree=null;
        ASTNode KW_VIEW530_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleTokenStream stream_KW_MATERIALIZED=new RewriteRuleTokenStream(adaptor,"token KW_MATERIALIZED");
        RewriteRuleSubtreeStream stream_viewName=new RewriteRuleSubtreeStream(adaptor,"rule viewName");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         pushMsg("drop materialized view statement", state); 
        try {
            // HiveParser.g:1707:5: ( KW_DROP KW_MATERIALIZED KW_VIEW ( ifExists )? viewName -> ^( TOK_DROP_MATERIALIZED_VIEW viewName ( ifExists )? ) )
            // HiveParser.g:1707:7: KW_DROP KW_MATERIALIZED KW_VIEW ( ifExists )? viewName
            {
            KW_DROP528=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropMaterializedViewStatement8675); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP528);


            KW_MATERIALIZED529=(Token)match(input,KW_MATERIALIZED,FOLLOW_KW_MATERIALIZED_in_dropMaterializedViewStatement8677); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MATERIALIZED.add(KW_MATERIALIZED529);


            KW_VIEW530=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_dropMaterializedViewStatement8679); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW530);


            // HiveParser.g:1707:39: ( ifExists )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==KW_IF) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // HiveParser.g:1707:39: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropMaterializedViewStatement8681);
                    ifExists531=ifExists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ifExists.add(ifExists531.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_viewName_in_dropMaterializedViewStatement8684);
            viewName532=viewName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_viewName.add(viewName532.getTree());

            // AST REWRITE
            // elements: ifExists, viewName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1707:58: -> ^( TOK_DROP_MATERIALIZED_VIEW viewName ( ifExists )? )
            {
                // HiveParser.g:1707:61: ^( TOK_DROP_MATERIALIZED_VIEW viewName ( ifExists )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DROP_MATERIALIZED_VIEW, "TOK_DROP_MATERIALIZED_VIEW")
                , root_1);

                adaptor.addChild(root_1, stream_viewName.nextTree());

                // HiveParser.g:1707:99: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.nextTree());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropMaterializedViewStatement"


    public static class createScheduledQueryStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createScheduledQueryStatement"
    // HiveParser.g:1710:1: createScheduledQueryStatement : KW_CREATE KW_SCHEDULED KW_QUERY name= identifier scheduleSpec ( executedAsSpec )? ( enableSpecification )? definedAsSpec -> ^( TOK_CREATE_SCHEDULED_QUERY $name scheduleSpec ( executedAsSpec )? ( enableSpecification )? definedAsSpec ) ;
    public final HiveParser.createScheduledQueryStatement_return createScheduledQueryStatement() throws RecognitionException {
        HiveParser.createScheduledQueryStatement_return retval = new HiveParser.createScheduledQueryStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_CREATE533=null;
        Token KW_SCHEDULED534=null;
        Token KW_QUERY535=null;
        HiveParser_IdentifiersParser.identifier_return name =null;

        HiveParser.scheduleSpec_return scheduleSpec536 =null;

        HiveParser.executedAsSpec_return executedAsSpec537 =null;

        HiveParser.enableSpecification_return enableSpecification538 =null;

        HiveParser.definedAsSpec_return definedAsSpec539 =null;


        ASTNode KW_CREATE533_tree=null;
        ASTNode KW_SCHEDULED534_tree=null;
        ASTNode KW_QUERY535_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEDULED=new RewriteRuleTokenStream(adaptor,"token KW_SCHEDULED");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_QUERY=new RewriteRuleTokenStream(adaptor,"token KW_QUERY");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_definedAsSpec=new RewriteRuleSubtreeStream(adaptor,"rule definedAsSpec");
        RewriteRuleSubtreeStream stream_scheduleSpec=new RewriteRuleSubtreeStream(adaptor,"rule scheduleSpec");
        RewriteRuleSubtreeStream stream_enableSpecification=new RewriteRuleSubtreeStream(adaptor,"rule enableSpecification");
        RewriteRuleSubtreeStream stream_executedAsSpec=new RewriteRuleSubtreeStream(adaptor,"rule executedAsSpec");
         pushMsg("create scheduled query statement", state); 
        try {
            // HiveParser.g:1713:5: ( KW_CREATE KW_SCHEDULED KW_QUERY name= identifier scheduleSpec ( executedAsSpec )? ( enableSpecification )? definedAsSpec -> ^( TOK_CREATE_SCHEDULED_QUERY $name scheduleSpec ( executedAsSpec )? ( enableSpecification )? definedAsSpec ) )
            // HiveParser.g:1713:7: KW_CREATE KW_SCHEDULED KW_QUERY name= identifier scheduleSpec ( executedAsSpec )? ( enableSpecification )? definedAsSpec
            {
            KW_CREATE533=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createScheduledQueryStatement8722); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE533);


            KW_SCHEDULED534=(Token)match(input,KW_SCHEDULED,FOLLOW_KW_SCHEDULED_in_createScheduledQueryStatement8724); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SCHEDULED.add(KW_SCHEDULED534);


            KW_QUERY535=(Token)match(input,KW_QUERY,FOLLOW_KW_QUERY_in_createScheduledQueryStatement8726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_QUERY.add(KW_QUERY535);


            pushFollow(FOLLOW_identifier_in_createScheduledQueryStatement8730);
            name=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(name.getTree());

            pushFollow(FOLLOW_scheduleSpec_in_createScheduledQueryStatement8740);
            scheduleSpec536=scheduleSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_scheduleSpec.add(scheduleSpec536.getTree());

            // HiveParser.g:1715:9: ( executedAsSpec )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==KW_EXECUTED) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // HiveParser.g:1715:9: executedAsSpec
                    {
                    pushFollow(FOLLOW_executedAsSpec_in_createScheduledQueryStatement8750);
                    executedAsSpec537=executedAsSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_executedAsSpec.add(executedAsSpec537.getTree());

                    }
                    break;

            }


            // HiveParser.g:1716:9: ( enableSpecification )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==KW_DISABLE||LA171_0==KW_ENABLE) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // HiveParser.g:1716:9: enableSpecification
                    {
                    pushFollow(FOLLOW_enableSpecification_in_createScheduledQueryStatement8761);
                    enableSpecification538=enableSpecification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enableSpecification.add(enableSpecification538.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_definedAsSpec_in_createScheduledQueryStatement8772);
            definedAsSpec539=definedAsSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_definedAsSpec.add(definedAsSpec539.getTree());

            // AST REWRITE
            // elements: enableSpecification, name, definedAsSpec, scheduleSpec, executedAsSpec
            // token labels: 
            // rule labels: name, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1718:5: -> ^( TOK_CREATE_SCHEDULED_QUERY $name scheduleSpec ( executedAsSpec )? ( enableSpecification )? definedAsSpec )
            {
                // HiveParser.g:1718:8: ^( TOK_CREATE_SCHEDULED_QUERY $name scheduleSpec ( executedAsSpec )? ( enableSpecification )? definedAsSpec )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CREATE_SCHEDULED_QUERY, "TOK_CREATE_SCHEDULED_QUERY")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_scheduleSpec.nextTree());

                // HiveParser.g:1721:13: ( executedAsSpec )?
                if ( stream_executedAsSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_executedAsSpec.nextTree());

                }
                stream_executedAsSpec.reset();

                // HiveParser.g:1722:13: ( enableSpecification )?
                if ( stream_enableSpecification.hasNext() ) {
                    adaptor.addChild(root_1, stream_enableSpecification.nextTree());

                }
                stream_enableSpecification.reset();

                adaptor.addChild(root_1, stream_definedAsSpec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createScheduledQueryStatement"


    public static class dropScheduledQueryStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dropScheduledQueryStatement"
    // HiveParser.g:1727:1: dropScheduledQueryStatement : KW_DROP KW_SCHEDULED KW_QUERY name= identifier -> ^( TOK_DROP_SCHEDULED_QUERY $name) ;
    public final HiveParser.dropScheduledQueryStatement_return dropScheduledQueryStatement() throws RecognitionException {
        HiveParser.dropScheduledQueryStatement_return retval = new HiveParser.dropScheduledQueryStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_DROP540=null;
        Token KW_SCHEDULED541=null;
        Token KW_QUERY542=null;
        HiveParser_IdentifiersParser.identifier_return name =null;


        ASTNode KW_DROP540_tree=null;
        ASTNode KW_SCHEDULED541_tree=null;
        ASTNode KW_QUERY542_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_SCHEDULED=new RewriteRuleTokenStream(adaptor,"token KW_SCHEDULED");
        RewriteRuleTokenStream stream_KW_QUERY=new RewriteRuleTokenStream(adaptor,"token KW_QUERY");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
         pushMsg("drop scheduled query statement", state); 
        try {
            // HiveParser.g:1730:5: ( KW_DROP KW_SCHEDULED KW_QUERY name= identifier -> ^( TOK_DROP_SCHEDULED_QUERY $name) )
            // HiveParser.g:1730:7: KW_DROP KW_SCHEDULED KW_QUERY name= identifier
            {
            KW_DROP540=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropScheduledQueryStatement8891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP540);


            KW_SCHEDULED541=(Token)match(input,KW_SCHEDULED,FOLLOW_KW_SCHEDULED_in_dropScheduledQueryStatement8893); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SCHEDULED.add(KW_SCHEDULED541);


            KW_QUERY542=(Token)match(input,KW_QUERY,FOLLOW_KW_QUERY_in_dropScheduledQueryStatement8895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_QUERY.add(KW_QUERY542);


            pushFollow(FOLLOW_identifier_in_dropScheduledQueryStatement8899);
            name=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(name.getTree());

            // AST REWRITE
            // elements: name
            // token labels: 
            // rule labels: name, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1731:5: -> ^( TOK_DROP_SCHEDULED_QUERY $name)
            {
                // HiveParser.g:1731:8: ^( TOK_DROP_SCHEDULED_QUERY $name)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DROP_SCHEDULED_QUERY, "TOK_DROP_SCHEDULED_QUERY")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dropScheduledQueryStatement"


    public static class alterScheduledQueryStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterScheduledQueryStatement"
    // HiveParser.g:1737:1: alterScheduledQueryStatement : KW_ALTER KW_SCHEDULED KW_QUERY name= identifier mod= alterScheduledQueryChange -> ^( TOK_ALTER_SCHEDULED_QUERY $name $mod) ;
    public final HiveParser.alterScheduledQueryStatement_return alterScheduledQueryStatement() throws RecognitionException {
        HiveParser.alterScheduledQueryStatement_return retval = new HiveParser.alterScheduledQueryStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_ALTER543=null;
        Token KW_SCHEDULED544=null;
        Token KW_QUERY545=null;
        HiveParser_IdentifiersParser.identifier_return name =null;

        HiveParser.alterScheduledQueryChange_return mod =null;


        ASTNode KW_ALTER543_tree=null;
        ASTNode KW_SCHEDULED544_tree=null;
        ASTNode KW_QUERY545_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEDULED=new RewriteRuleTokenStream(adaptor,"token KW_SCHEDULED");
        RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
        RewriteRuleTokenStream stream_KW_QUERY=new RewriteRuleTokenStream(adaptor,"token KW_QUERY");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_alterScheduledQueryChange=new RewriteRuleSubtreeStream(adaptor,"rule alterScheduledQueryChange");
         pushMsg("alter scheduled query statement", state); 
        try {
            // HiveParser.g:1740:5: ( KW_ALTER KW_SCHEDULED KW_QUERY name= identifier mod= alterScheduledQueryChange -> ^( TOK_ALTER_SCHEDULED_QUERY $name $mod) )
            // HiveParser.g:1740:7: KW_ALTER KW_SCHEDULED KW_QUERY name= identifier mod= alterScheduledQueryChange
            {
            KW_ALTER543=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterScheduledQueryStatement8961); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER543);


            KW_SCHEDULED544=(Token)match(input,KW_SCHEDULED,FOLLOW_KW_SCHEDULED_in_alterScheduledQueryStatement8963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SCHEDULED.add(KW_SCHEDULED544);


            KW_QUERY545=(Token)match(input,KW_QUERY,FOLLOW_KW_QUERY_in_alterScheduledQueryStatement8965); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_QUERY.add(KW_QUERY545);


            pushFollow(FOLLOW_identifier_in_alterScheduledQueryStatement8969);
            name=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(name.getTree());

            pushFollow(FOLLOW_alterScheduledQueryChange_in_alterScheduledQueryStatement8985);
            mod=alterScheduledQueryChange();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alterScheduledQueryChange.add(mod.getTree());

            // AST REWRITE
            // elements: mod, name
            // token labels: 
            // rule labels: mod, name, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_mod=new RewriteRuleSubtreeStream(adaptor,"rule mod",mod!=null?mod.tree:null);
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1742:5: -> ^( TOK_ALTER_SCHEDULED_QUERY $name $mod)
            {
                // HiveParser.g:1742:8: ^( TOK_ALTER_SCHEDULED_QUERY $name $mod)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_ALTER_SCHEDULED_QUERY, "TOK_ALTER_SCHEDULED_QUERY")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_mod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterScheduledQueryStatement"


    public static class alterScheduledQueryChange_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterScheduledQueryChange"
    // HiveParser.g:1748:1: alterScheduledQueryChange : ( scheduleSpec | executedAsSpec | enableSpecification | definedAsSpec | KW_EXECUTE -> ^( TOK_EXECUTE ) );
    public final HiveParser.alterScheduledQueryChange_return alterScheduledQueryChange() throws RecognitionException {
        HiveParser.alterScheduledQueryChange_return retval = new HiveParser.alterScheduledQueryChange_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_EXECUTE550=null;
        HiveParser.scheduleSpec_return scheduleSpec546 =null;

        HiveParser.executedAsSpec_return executedAsSpec547 =null;

        HiveParser.enableSpecification_return enableSpecification548 =null;

        HiveParser.definedAsSpec_return definedAsSpec549 =null;


        ASTNode KW_EXECUTE550_tree=null;
        RewriteRuleTokenStream stream_KW_EXECUTE=new RewriteRuleTokenStream(adaptor,"token KW_EXECUTE");

         pushMsg("alter scheduled query change", state); 
        try {
            // HiveParser.g:1751:5: ( scheduleSpec | executedAsSpec | enableSpecification | definedAsSpec | KW_EXECUTE -> ^( TOK_EXECUTE ) )
            int alt172=5;
            switch ( input.LA(1) ) {
            case KW_CRON:
            case KW_EVERY:
                {
                alt172=1;
                }
                break;
            case KW_EXECUTED:
                {
                alt172=2;
                }
                break;
            case KW_DISABLE:
            case KW_ENABLE:
                {
                alt172=3;
                }
                break;
            case KW_AS:
            case KW_DEFINED:
                {
                alt172=4;
                }
                break;
            case KW_EXECUTE:
                {
                alt172=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;

            }

            switch (alt172) {
                case 1 :
                    // HiveParser.g:1751:7: scheduleSpec
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_scheduleSpec_in_alterScheduledQueryChange9061);
                    scheduleSpec546=scheduleSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, scheduleSpec546.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:1752:7: executedAsSpec
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_executedAsSpec_in_alterScheduledQueryChange9069);
                    executedAsSpec547=executedAsSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, executedAsSpec547.getTree());

                    }
                    break;
                case 3 :
                    // HiveParser.g:1753:7: enableSpecification
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_enableSpecification_in_alterScheduledQueryChange9077);
                    enableSpecification548=enableSpecification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enableSpecification548.getTree());

                    }
                    break;
                case 4 :
                    // HiveParser.g:1754:7: definedAsSpec
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_definedAsSpec_in_alterScheduledQueryChange9085);
                    definedAsSpec549=definedAsSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, definedAsSpec549.getTree());

                    }
                    break;
                case 5 :
                    // HiveParser.g:1755:7: KW_EXECUTE
                    {
                    KW_EXECUTE550=(Token)match(input,KW_EXECUTE,FOLLOW_KW_EXECUTE_in_alterScheduledQueryChange9093); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_EXECUTE.add(KW_EXECUTE550);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1755:18: -> ^( TOK_EXECUTE )
                    {
                        // HiveParser.g:1755:21: ^( TOK_EXECUTE )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_EXECUTE, "TOK_EXECUTE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterScheduledQueryChange"


    public static class scheduleSpec_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scheduleSpec"
    // HiveParser.g:1758:1: scheduleSpec : ( KW_CRON cronString= StringLiteral -> ^( TOK_CRON $cronString) | KW_EVERY (value= Number )? qualifier= intervalQualifiers ( ( KW_AT | KW_OFFSET KW_BY ) offsetTs= StringLiteral )? -> ^( TOK_SCHEDULE ^( TOK_EVERY ( $value)? ) $qualifier ( $offsetTs)? ) );
    public final HiveParser.scheduleSpec_return scheduleSpec() throws RecognitionException {
        HiveParser.scheduleSpec_return retval = new HiveParser.scheduleSpec_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token cronString=null;
        Token value=null;
        Token offsetTs=null;
        Token KW_CRON551=null;
        Token KW_EVERY552=null;
        Token KW_AT553=null;
        Token KW_OFFSET554=null;
        Token KW_BY555=null;
        HiveParser_IdentifiersParser.intervalQualifiers_return qualifier =null;


        ASTNode cronString_tree=null;
        ASTNode value_tree=null;
        ASTNode offsetTs_tree=null;
        ASTNode KW_CRON551_tree=null;
        ASTNode KW_EVERY552_tree=null;
        ASTNode KW_AT553_tree=null;
        ASTNode KW_OFFSET554_tree=null;
        ASTNode KW_BY555_tree=null;
        RewriteRuleTokenStream stream_KW_CRON=new RewriteRuleTokenStream(adaptor,"token KW_CRON");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_OFFSET=new RewriteRuleTokenStream(adaptor,"token KW_OFFSET");
        RewriteRuleTokenStream stream_KW_EVERY=new RewriteRuleTokenStream(adaptor,"token KW_EVERY");
        RewriteRuleTokenStream stream_KW_AT=new RewriteRuleTokenStream(adaptor,"token KW_AT");
        RewriteRuleSubtreeStream stream_intervalQualifiers=new RewriteRuleSubtreeStream(adaptor,"rule intervalQualifiers");
         pushMsg("schedule specification", state); 
        try {
            // HiveParser.g:1761:9: ( KW_CRON cronString= StringLiteral -> ^( TOK_CRON $cronString) | KW_EVERY (value= Number )? qualifier= intervalQualifiers ( ( KW_AT | KW_OFFSET KW_BY ) offsetTs= StringLiteral )? -> ^( TOK_SCHEDULE ^( TOK_EVERY ( $value)? ) $qualifier ( $offsetTs)? ) )
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==KW_CRON) ) {
                alt176=1;
            }
            else if ( (LA176_0==KW_EVERY) ) {
                alt176=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;

            }
            switch (alt176) {
                case 1 :
                    // HiveParser.g:1761:11: KW_CRON cronString= StringLiteral
                    {
                    KW_CRON551=(Token)match(input,KW_CRON,FOLLOW_KW_CRON_in_scheduleSpec9130); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CRON.add(KW_CRON551);


                    cronString=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_scheduleSpec9134); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(cronString);


                    // AST REWRITE
                    // elements: cronString
                    // token labels: cronString
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_cronString=new RewriteRuleTokenStream(adaptor,"token cronString",cronString);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1761:44: -> ^( TOK_CRON $cronString)
                    {
                        // HiveParser.g:1761:47: ^( TOK_CRON $cronString)
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_CRON, "TOK_CRON")
                        , root_1);

                        adaptor.addChild(root_1, stream_cronString.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1762:11: KW_EVERY (value= Number )? qualifier= intervalQualifiers ( ( KW_AT | KW_OFFSET KW_BY ) offsetTs= StringLiteral )?
                    {
                    KW_EVERY552=(Token)match(input,KW_EVERY,FOLLOW_KW_EVERY_in_scheduleSpec9155); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_EVERY.add(KW_EVERY552);


                    // HiveParser.g:1762:25: (value= Number )?
                    int alt173=2;
                    int LA173_0 = input.LA(1);

                    if ( (LA173_0==Number) ) {
                        alt173=1;
                    }
                    switch (alt173) {
                        case 1 :
                            // HiveParser.g:1762:25: value= Number
                            {
                            value=(Token)match(input,Number,FOLLOW_Number_in_scheduleSpec9159); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Number.add(value);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_intervalQualifiers_in_scheduleSpec9164);
                    qualifier=intervalQualifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_intervalQualifiers.add(qualifier.getTree());

                    // HiveParser.g:1763:9: ( ( KW_AT | KW_OFFSET KW_BY ) offsetTs= StringLiteral )?
                    int alt175=2;
                    int LA175_0 = input.LA(1);

                    if ( (LA175_0==KW_AT||LA175_0==KW_OFFSET) ) {
                        alt175=1;
                    }
                    switch (alt175) {
                        case 1 :
                            // HiveParser.g:1763:10: ( KW_AT | KW_OFFSET KW_BY ) offsetTs= StringLiteral
                            {
                            // HiveParser.g:1763:10: ( KW_AT | KW_OFFSET KW_BY )
                            int alt174=2;
                            int LA174_0 = input.LA(1);

                            if ( (LA174_0==KW_AT) ) {
                                alt174=1;
                            }
                            else if ( (LA174_0==KW_OFFSET) ) {
                                alt174=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 174, 0, input);

                                throw nvae;

                            }
                            switch (alt174) {
                                case 1 :
                                    // HiveParser.g:1763:11: KW_AT
                                    {
                                    KW_AT553=(Token)match(input,KW_AT,FOLLOW_KW_AT_in_scheduleSpec9176); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_AT.add(KW_AT553);


                                    }
                                    break;
                                case 2 :
                                    // HiveParser.g:1763:17: KW_OFFSET KW_BY
                                    {
                                    KW_OFFSET554=(Token)match(input,KW_OFFSET,FOLLOW_KW_OFFSET_in_scheduleSpec9178); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_OFFSET.add(KW_OFFSET554);


                                    KW_BY555=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_scheduleSpec9180); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY555);


                                    }
                                    break;

                            }


                            offsetTs=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_scheduleSpec9185); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_StringLiteral.add(offsetTs);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: offsetTs, value, qualifier
                    // token labels: offsetTs, value
                    // rule labels: qualifier, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_offsetTs=new RewriteRuleTokenStream(adaptor,"token offsetTs",offsetTs);
                    RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
                    RewriteRuleSubtreeStream stream_qualifier=new RewriteRuleSubtreeStream(adaptor,"rule qualifier",qualifier!=null?qualifier.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1763:59: -> ^( TOK_SCHEDULE ^( TOK_EVERY ( $value)? ) $qualifier ( $offsetTs)? )
                    {
                        // HiveParser.g:1763:62: ^( TOK_SCHEDULE ^( TOK_EVERY ( $value)? ) $qualifier ( $offsetTs)? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SCHEDULE, "TOK_SCHEDULE")
                        , root_1);

                        // HiveParser.g:1763:77: ^( TOK_EVERY ( $value)? )
                        {
                        ASTNode root_2 = (ASTNode)adaptor.nil();
                        root_2 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_EVERY, "TOK_EVERY")
                        , root_2);

                        // HiveParser.g:1763:90: ( $value)?
                        if ( stream_value.hasNext() ) {
                            adaptor.addChild(root_2, stream_value.nextNode());

                        }
                        stream_value.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_qualifier.nextTree());

                        // HiveParser.g:1763:110: ( $offsetTs)?
                        if ( stream_offsetTs.hasNext() ) {
                            adaptor.addChild(root_1, stream_offsetTs.nextNode());

                        }
                        stream_offsetTs.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "scheduleSpec"


    public static class executedAsSpec_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "executedAsSpec"
    // HiveParser.g:1766:1: executedAsSpec : KW_EXECUTED KW_AS executedAs= StringLiteral -> ^( TOK_EXECUTED_AS $executedAs) ;
    public final HiveParser.executedAsSpec_return executedAsSpec() throws RecognitionException {
        HiveParser.executedAsSpec_return retval = new HiveParser.executedAsSpec_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token executedAs=null;
        Token KW_EXECUTED556=null;
        Token KW_AS557=null;

        ASTNode executedAs_tree=null;
        ASTNode KW_EXECUTED556_tree=null;
        ASTNode KW_AS557_tree=null;
        RewriteRuleTokenStream stream_KW_EXECUTED=new RewriteRuleTokenStream(adaptor,"token KW_EXECUTED");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");

         pushMsg("executedAs specification", state); 
        try {
            // HiveParser.g:1769:9: ( KW_EXECUTED KW_AS executedAs= StringLiteral -> ^( TOK_EXECUTED_AS $executedAs) )
            // HiveParser.g:1769:11: KW_EXECUTED KW_AS executedAs= StringLiteral
            {
            KW_EXECUTED556=(Token)match(input,KW_EXECUTED,FOLLOW_KW_EXECUTED_in_executedAsSpec9243); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_EXECUTED.add(KW_EXECUTED556);


            KW_AS557=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_executedAsSpec9245); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS557);


            executedAs=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_executedAsSpec9249); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(executedAs);


            // AST REWRITE
            // elements: executedAs
            // token labels: executedAs
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_executedAs=new RewriteRuleTokenStream(adaptor,"token executedAs",executedAs);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1769:54: -> ^( TOK_EXECUTED_AS $executedAs)
            {
                // HiveParser.g:1769:57: ^( TOK_EXECUTED_AS $executedAs)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_EXECUTED_AS, "TOK_EXECUTED_AS")
                , root_1);

                adaptor.addChild(root_1, stream_executedAs.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "executedAsSpec"


    public static class definedAsSpec_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "definedAsSpec"
    // HiveParser.g:1772:1: definedAsSpec : ( KW_DEFINED )? KW_AS statement -> ^( TOK_QUERY statement ) ;
    public final HiveParser.definedAsSpec_return definedAsSpec() throws RecognitionException {
        HiveParser.definedAsSpec_return retval = new HiveParser.definedAsSpec_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_DEFINED558=null;
        Token KW_AS559=null;
        HiveParser.statement_return statement560 =null;


        ASTNode KW_DEFINED558_tree=null;
        ASTNode KW_AS559_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_DEFINED=new RewriteRuleTokenStream(adaptor,"token KW_DEFINED");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
         pushMsg("definedAs specification", state); 
        try {
            // HiveParser.g:1775:9: ( ( KW_DEFINED )? KW_AS statement -> ^( TOK_QUERY statement ) )
            // HiveParser.g:1775:11: ( KW_DEFINED )? KW_AS statement
            {
            // HiveParser.g:1775:11: ( KW_DEFINED )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==KW_DEFINED) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // HiveParser.g:1775:11: KW_DEFINED
                    {
                    KW_DEFINED558=(Token)match(input,KW_DEFINED,FOLLOW_KW_DEFINED_in_definedAsSpec9293); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DEFINED.add(KW_DEFINED558);


                    }
                    break;

            }


            KW_AS559=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_definedAsSpec9296); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS559);


            pushFollow(FOLLOW_statement_in_definedAsSpec9298);
            statement560=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement.add(statement560.getTree());

            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1775:39: -> ^( TOK_QUERY statement )
            {
                // HiveParser.g:1775:42: ^( TOK_QUERY statement )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY")
                , root_1);

                adaptor.addChild(root_1, stream_statement.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "definedAsSpec"


    public static class showFunctionIdentifier_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showFunctionIdentifier"
    // HiveParser.g:1778:1: showFunctionIdentifier : ( functionIdentifier | StringLiteral );
    public final HiveParser.showFunctionIdentifier_return showFunctionIdentifier() throws RecognitionException {
        HiveParser.showFunctionIdentifier_return retval = new HiveParser.showFunctionIdentifier_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token StringLiteral562=null;
        HiveParser_IdentifiersParser.functionIdentifier_return functionIdentifier561 =null;


        ASTNode StringLiteral562_tree=null;

         pushMsg("identifier for show function statement", state); 
        try {
            // HiveParser.g:1781:5: ( functionIdentifier | StringLiteral )
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==Identifier||(LA178_0 >= KW_ABORT && LA178_0 <= KW_AFTER)||LA178_0==KW_ALLOC_FRACTION||LA178_0==KW_ANALYZE||LA178_0==KW_ARCHIVE||(LA178_0 >= KW_ASC && LA178_0 <= KW_AT)||(LA178_0 >= KW_AUTOCOMMIT && LA178_0 <= KW_BEFORE)||(LA178_0 >= KW_BRANCH && LA178_0 <= KW_BUCKETS)||(LA178_0 >= KW_CACHE && LA178_0 <= KW_CASCADE)||(LA178_0 >= KW_CBO && LA178_0 <= KW_CHANGE)||LA178_0==KW_CHECK||(LA178_0 >= KW_CLUSTER && LA178_0 <= KW_COLLECTION)||(LA178_0 >= KW_COLUMNS && LA178_0 <= KW_COMMENT)||(LA178_0 >= KW_COMPACT && LA178_0 <= KW_COMPACTIONS)||(LA178_0 >= KW_COMPUTE && LA178_0 <= KW_CONCATENATE)||LA178_0==KW_CONTINUE||LA178_0==KW_COST||LA178_0==KW_CRON||LA178_0==KW_DATA||LA178_0==KW_DATABASES||(LA178_0 >= KW_DATETIME && LA178_0 <= KW_DCPROPERTIES)||LA178_0==KW_DEBUG||(LA178_0 >= KW_DEFAULT && LA178_0 <= KW_DEFINED)||(LA178_0 >= KW_DELIMITED && LA178_0 <= KW_DESC)||(LA178_0 >= KW_DETAIL && LA178_0 <= KW_DISABLE)||(LA178_0 >= KW_DISTRIBUTE && LA178_0 <= KW_DO)||LA178_0==KW_DOW||(LA178_0 >= KW_DUMP && LA178_0 <= KW_ELEM_TYPE)||LA178_0==KW_ENABLE||(LA178_0 >= KW_ENFORCED && LA178_0 <= KW_EVERY)||(LA178_0 >= KW_EXCLUSIVE && LA178_0 <= KW_EXECUTED)||(LA178_0 >= KW_EXPIRE_SNAPSHOTS && LA178_0 <= KW_EXPRESSION)||LA178_0==KW_FAST_FORWARD||(LA178_0 >= KW_FIELDS && LA178_0 <= KW_FIRST)||(LA178_0 >= KW_FORMAT && LA178_0 <= KW_FORMATTED)||LA178_0==KW_FUNCTIONS||(LA178_0 >= KW_HOUR && LA178_0 <= KW_IDXPROPERTIES)||LA178_0==KW_IGNORE||(LA178_0 >= KW_INDEX && LA178_0 <= KW_INDEXES)||(LA178_0 >= KW_INPATH && LA178_0 <= KW_INPUTFORMAT)||(LA178_0 >= KW_ISOLATION && LA178_0 <= KW_JAR)||(LA178_0 >= KW_JOINCOST && LA178_0 <= KW_LAST)||LA178_0==KW_LEVEL||(LA178_0 >= KW_LIMIT && LA178_0 <= KW_LOAD)||(LA178_0 >= KW_LOCATION && LA178_0 <= KW_LONG)||(LA178_0 >= KW_MANAGED && LA178_0 <= KW_MANAGEMENT)||(LA178_0 >= KW_MAPJOIN && LA178_0 <= KW_MATERIALIZED)||LA178_0==KW_METADATA||(LA178_0 >= KW_MINUTE && LA178_0 <= KW_MONTH)||(LA178_0 >= KW_MOVE && LA178_0 <= KW_MSCK)||(LA178_0 >= KW_NORELY && LA178_0 <= KW_NOSCAN)||LA178_0==KW_NOVALIDATE||LA178_0==KW_NULLS||LA178_0==KW_OFFSET||(LA178_0 >= KW_OPERATOR && LA178_0 <= KW_OPTION)||(LA178_0 >= KW_OUTPUTDRIVER && LA178_0 <= KW_OUTPUTFORMAT)||(LA178_0 >= KW_OVERWRITE && LA178_0 <= KW_OWNER)||(LA178_0 >= KW_PARTITIONED && LA178_0 <= KW_PATH)||(LA178_0 >= KW_PLAN && LA178_0 <= KW_POOL)||LA178_0==KW_PRINCIPALS||LA178_0==KW_PURGE||(LA178_0 >= KW_QUARTER && LA178_0 <= KW_QUERY_PARALLELISM)||LA178_0==KW_READ||(LA178_0 >= KW_REBUILD && LA178_0 <= KW_RECORDWRITER)||(LA178_0 >= KW_RELOAD && LA178_0 <= KW_RETENTION)||LA178_0==KW_REWRITE||(LA178_0 >= KW_ROLE && LA178_0 <= KW_ROLES)||(LA178_0 >= KW_SCHEDULED && LA178_0 <= KW_SECOND)||(LA178_0 >= KW_SEMI && LA178_0 <= KW_SERVER)||(LA178_0 >= KW_SETS && LA178_0 <= KW_SKEWED)||(LA178_0 >= KW_SNAPSHOT && LA178_0 <= KW_SNAPSHOTS)||(LA178_0 >= KW_SORT && LA178_0 <= KW_SSL)||(LA178_0 >= KW_STATISTICS && LA178_0 <= KW_SUMMARY)||(LA178_0 >= KW_SYSTEM_TIME && LA178_0 <= KW_SYSTEM_VERSION)||LA178_0==KW_TABLES||(LA178_0 >= KW_TAG && LA178_0 <= KW_TERMINATED)||LA178_0==KW_TINYINT||LA178_0==KW_TOUCH||(LA178_0 >= KW_TRANSACTION && LA178_0 <= KW_TRANSACTIONS)||LA178_0==KW_TRIM||(LA178_0 >= KW_TYPE && LA178_0 <= KW_UNARCHIVE)||LA178_0==KW_UNDO||LA178_0==KW_UNIONTYPE||(LA178_0 >= KW_UNKNOWN && LA178_0 <= KW_UNSIGNED)||(LA178_0 >= KW_URI && LA178_0 <= KW_USE)||(LA178_0 >= KW_UTC && LA178_0 <= KW_VALIDATE)||LA178_0==KW_VALUE_TYPE||(LA178_0 >= KW_VECTORIZATION && LA178_0 <= KW_WEEK)||LA178_0==KW_WHILE||(LA178_0 >= KW_WITHIN && LA178_0 <= KW_ZONE)||LA178_0==KW_BATCH||LA178_0==KW_DAYOFWEEK||LA178_0==KW_HOLD_DDLTIME||LA178_0==KW_NO_DROP||LA178_0==KW_OFFLINE||LA178_0==KW_PROTECTION||LA178_0==KW_READONLY||LA178_0==KW_TIMESTAMPTZ) ) {
                alt178=1;
            }
            else if ( (LA178_0==StringLiteral) ) {
                alt178=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);

                throw nvae;

            }
            switch (alt178) {
                case 1 :
                    // HiveParser.g:1781:7: functionIdentifier
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_functionIdentifier_in_showFunctionIdentifier9337);
                    functionIdentifier561=functionIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionIdentifier561.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:1782:7: StringLiteral
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    StringLiteral562=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showFunctionIdentifier9345); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    StringLiteral562_tree = 
                    (ASTNode)adaptor.create(StringLiteral562)
                    ;
                    adaptor.addChild(root_0, StringLiteral562_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showFunctionIdentifier"


    public static class showStmtIdentifier_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "showStmtIdentifier"
    // HiveParser.g:1785:1: showStmtIdentifier : ( identifier | StringLiteral );
    public final HiveParser.showStmtIdentifier_return showStmtIdentifier() throws RecognitionException {
        HiveParser.showStmtIdentifier_return retval = new HiveParser.showStmtIdentifier_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token StringLiteral564=null;
        HiveParser_IdentifiersParser.identifier_return identifier563 =null;


        ASTNode StringLiteral564_tree=null;

         pushMsg("identifier for show statement", state); 
        try {
            // HiveParser.g:1788:5: ( identifier | StringLiteral )
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==Identifier||(LA179_0 >= KW_ABORT && LA179_0 <= KW_AFTER)||LA179_0==KW_ALLOC_FRACTION||LA179_0==KW_ANALYZE||LA179_0==KW_ARCHIVE||(LA179_0 >= KW_ASC && LA179_0 <= KW_AT)||(LA179_0 >= KW_AUTOCOMMIT && LA179_0 <= KW_BEFORE)||(LA179_0 >= KW_BRANCH && LA179_0 <= KW_BUCKETS)||(LA179_0 >= KW_CACHE && LA179_0 <= KW_CASCADE)||(LA179_0 >= KW_CBO && LA179_0 <= KW_CHANGE)||LA179_0==KW_CHECK||(LA179_0 >= KW_CLUSTER && LA179_0 <= KW_COLLECTION)||(LA179_0 >= KW_COLUMNS && LA179_0 <= KW_COMMENT)||(LA179_0 >= KW_COMPACT && LA179_0 <= KW_COMPACTIONS)||(LA179_0 >= KW_COMPUTE && LA179_0 <= KW_CONCATENATE)||LA179_0==KW_CONTINUE||LA179_0==KW_COST||LA179_0==KW_CRON||LA179_0==KW_DATA||LA179_0==KW_DATABASES||(LA179_0 >= KW_DATETIME && LA179_0 <= KW_DCPROPERTIES)||LA179_0==KW_DEBUG||(LA179_0 >= KW_DEFAULT && LA179_0 <= KW_DEFINED)||(LA179_0 >= KW_DELIMITED && LA179_0 <= KW_DESC)||(LA179_0 >= KW_DETAIL && LA179_0 <= KW_DISABLE)||(LA179_0 >= KW_DISTRIBUTE && LA179_0 <= KW_DO)||LA179_0==KW_DOW||(LA179_0 >= KW_DUMP && LA179_0 <= KW_ELEM_TYPE)||LA179_0==KW_ENABLE||(LA179_0 >= KW_ENFORCED && LA179_0 <= KW_EVERY)||(LA179_0 >= KW_EXCLUSIVE && LA179_0 <= KW_EXECUTED)||(LA179_0 >= KW_EXPIRE_SNAPSHOTS && LA179_0 <= KW_EXPRESSION)||LA179_0==KW_FAST_FORWARD||(LA179_0 >= KW_FIELDS && LA179_0 <= KW_FIRST)||(LA179_0 >= KW_FORMAT && LA179_0 <= KW_FORMATTED)||LA179_0==KW_FUNCTIONS||(LA179_0 >= KW_HOUR && LA179_0 <= KW_IDXPROPERTIES)||LA179_0==KW_IGNORE||(LA179_0 >= KW_INDEX && LA179_0 <= KW_INDEXES)||(LA179_0 >= KW_INPATH && LA179_0 <= KW_INPUTFORMAT)||(LA179_0 >= KW_ISOLATION && LA179_0 <= KW_JAR)||(LA179_0 >= KW_JOINCOST && LA179_0 <= KW_LAST)||LA179_0==KW_LEVEL||(LA179_0 >= KW_LIMIT && LA179_0 <= KW_LOAD)||(LA179_0 >= KW_LOCATION && LA179_0 <= KW_LONG)||(LA179_0 >= KW_MANAGED && LA179_0 <= KW_MANAGEMENT)||(LA179_0 >= KW_MAPJOIN && LA179_0 <= KW_MATERIALIZED)||LA179_0==KW_METADATA||(LA179_0 >= KW_MINUTE && LA179_0 <= KW_MONTH)||(LA179_0 >= KW_MOVE && LA179_0 <= KW_MSCK)||(LA179_0 >= KW_NORELY && LA179_0 <= KW_NOSCAN)||LA179_0==KW_NOVALIDATE||LA179_0==KW_NULLS||LA179_0==KW_OFFSET||(LA179_0 >= KW_OPERATOR && LA179_0 <= KW_OPTION)||(LA179_0 >= KW_OUTPUTDRIVER && LA179_0 <= KW_OUTPUTFORMAT)||(LA179_0 >= KW_OVERWRITE && LA179_0 <= KW_OWNER)||(LA179_0 >= KW_PARTITIONED && LA179_0 <= KW_PATH)||(LA179_0 >= KW_PLAN && LA179_0 <= KW_POOL)||LA179_0==KW_PRINCIPALS||LA179_0==KW_PURGE||(LA179_0 >= KW_QUARTER && LA179_0 <= KW_QUERY_PARALLELISM)||LA179_0==KW_READ||(LA179_0 >= KW_REBUILD && LA179_0 <= KW_RECORDWRITER)||(LA179_0 >= KW_RELOAD && LA179_0 <= KW_RETENTION)||LA179_0==KW_REWRITE||(LA179_0 >= KW_ROLE && LA179_0 <= KW_ROLES)||(LA179_0 >= KW_SCHEDULED && LA179_0 <= KW_SECOND)||(LA179_0 >= KW_SEMI && LA179_0 <= KW_SERVER)||(LA179_0 >= KW_SETS && LA179_0 <= KW_SKEWED)||(LA179_0 >= KW_SNAPSHOT && LA179_0 <= KW_SNAPSHOTS)||(LA179_0 >= KW_SORT && LA179_0 <= KW_SSL)||(LA179_0 >= KW_STATISTICS && LA179_0 <= KW_SUMMARY)||(LA179_0 >= KW_SYSTEM_TIME && LA179_0 <= KW_SYSTEM_VERSION)||LA179_0==KW_TABLES||(LA179_0 >= KW_TAG && LA179_0 <= KW_TERMINATED)||LA179_0==KW_TINYINT||LA179_0==KW_TOUCH||(LA179_0 >= KW_TRANSACTION && LA179_0 <= KW_TRANSACTIONS)||LA179_0==KW_TRIM||(LA179_0 >= KW_TYPE && LA179_0 <= KW_UNARCHIVE)||LA179_0==KW_UNDO||LA179_0==KW_UNIONTYPE||(LA179_0 >= KW_UNKNOWN && LA179_0 <= KW_UNSIGNED)||(LA179_0 >= KW_URI && LA179_0 <= KW_USE)||(LA179_0 >= KW_UTC && LA179_0 <= KW_VALIDATE)||LA179_0==KW_VALUE_TYPE||(LA179_0 >= KW_VECTORIZATION && LA179_0 <= KW_WEEK)||LA179_0==KW_WHILE||(LA179_0 >= KW_WITHIN && LA179_0 <= KW_ZONE)||LA179_0==KW_BATCH||LA179_0==KW_DAYOFWEEK||LA179_0==KW_HOLD_DDLTIME||LA179_0==KW_NO_DROP||LA179_0==KW_OFFLINE||LA179_0==KW_PROTECTION||LA179_0==KW_READONLY||LA179_0==KW_TIMESTAMPTZ) ) {
                alt179=1;
            }
            else if ( (LA179_0==StringLiteral) ) {
                alt179=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;

            }
            switch (alt179) {
                case 1 :
                    // HiveParser.g:1788:7: identifier
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_identifier_in_showStmtIdentifier9372);
                    identifier563=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier563.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:1789:7: StringLiteral
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    StringLiteral564=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStmtIdentifier9380); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    StringLiteral564_tree = 
                    (ASTNode)adaptor.create(StringLiteral564)
                    ;
                    adaptor.addChild(root_0, StringLiteral564_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "showStmtIdentifier"


    public static class tableComment_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableComment"
    // HiveParser.g:1792:1: tableComment : KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) ;
    public final HiveParser.tableComment_return tableComment() throws RecognitionException {
        HiveParser.tableComment_return retval = new HiveParser.tableComment_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token comment=null;
        Token KW_COMMENT565=null;

        ASTNode comment_tree=null;
        ASTNode KW_COMMENT565_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

         pushMsg("table's comment", state); 
        try {
            // HiveParser.g:1795:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) )
            // HiveParser.g:1796:7: KW_COMMENT comment= StringLiteral
            {
            KW_COMMENT565=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_tableComment9413); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT565);


            comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableComment9417); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(comment);


            // AST REWRITE
            // elements: comment
            // token labels: comment
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1796:41: -> ^( TOK_TABLECOMMENT $comment)
            {
                // HiveParser.g:1796:44: ^( TOK_TABLECOMMENT $comment)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABLECOMMENT, "TOK_TABLECOMMENT")
                , root_1);

                adaptor.addChild(root_1, stream_comment.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableComment"


    public static class createTablePartitionSpec_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createTablePartitionSpec"
    // HiveParser.g:1799:1: createTablePartitionSpec : ( KW_PARTITIONED KW_BY LPAREN (opt1= createTablePartitionColumnTypeSpec |opt2= createTablePartitionColumnSpec ) RPAREN -> {$opt1.tree != null}? $opt1 -> $opt2| KW_PARTITIONED KW_BY KW_SPEC LPAREN (spec= partitionTransformSpec ) RPAREN -> ^( TOK_TABLEPARTCOLSBYSPEC $spec) );
    public final HiveParser.createTablePartitionSpec_return createTablePartitionSpec() throws RecognitionException {
        HiveParser.createTablePartitionSpec_return retval = new HiveParser.createTablePartitionSpec_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_PARTITIONED566=null;
        Token KW_BY567=null;
        Token LPAREN568=null;
        Token RPAREN569=null;
        Token KW_PARTITIONED570=null;
        Token KW_BY571=null;
        Token KW_SPEC572=null;
        Token LPAREN573=null;
        Token RPAREN574=null;
        HiveParser.createTablePartitionColumnTypeSpec_return opt1 =null;

        HiveParser.createTablePartitionColumnSpec_return opt2 =null;

        HiveParser.partitionTransformSpec_return spec =null;


        ASTNode KW_PARTITIONED566_tree=null;
        ASTNode KW_BY567_tree=null;
        ASTNode LPAREN568_tree=null;
        ASTNode RPAREN569_tree=null;
        ASTNode KW_PARTITIONED570_tree=null;
        ASTNode KW_BY571_tree=null;
        ASTNode KW_SPEC572_tree=null;
        ASTNode LPAREN573_tree=null;
        ASTNode RPAREN574_tree=null;
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_KW_SPEC=new RewriteRuleTokenStream(adaptor,"token KW_SPEC");
        RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_createTablePartitionColumnSpec=new RewriteRuleSubtreeStream(adaptor,"rule createTablePartitionColumnSpec");
        RewriteRuleSubtreeStream stream_partitionTransformSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionTransformSpec");
        RewriteRuleSubtreeStream stream_createTablePartitionColumnTypeSpec=new RewriteRuleSubtreeStream(adaptor,"rule createTablePartitionColumnTypeSpec");
         pushMsg("create table partition specification", state); 
        try {
            // HiveParser.g:1802:5: ( KW_PARTITIONED KW_BY LPAREN (opt1= createTablePartitionColumnTypeSpec |opt2= createTablePartitionColumnSpec ) RPAREN -> {$opt1.tree != null}? $opt1 -> $opt2| KW_PARTITIONED KW_BY KW_SPEC LPAREN (spec= partitionTransformSpec ) RPAREN -> ^( TOK_TABLEPARTCOLSBYSPEC $spec) )
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==KW_PARTITIONED) ) {
                int LA181_1 = input.LA(2);

                if ( (LA181_1==KW_BY) ) {
                    int LA181_2 = input.LA(3);

                    if ( (LA181_2==LPAREN) ) {
                        alt181=1;
                    }
                    else if ( (LA181_2==KW_SPEC) ) {
                        alt181=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 181, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 181, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;

            }
            switch (alt181) {
                case 1 :
                    // HiveParser.g:1802:7: KW_PARTITIONED KW_BY LPAREN (opt1= createTablePartitionColumnTypeSpec |opt2= createTablePartitionColumnSpec ) RPAREN
                    {
                    KW_PARTITIONED566=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_createTablePartitionSpec9454); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_PARTITIONED.add(KW_PARTITIONED566);


                    KW_BY567=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_createTablePartitionSpec9456); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY567);


                    LPAREN568=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createTablePartitionSpec9458); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN568);


                    // HiveParser.g:1802:35: (opt1= createTablePartitionColumnTypeSpec |opt2= createTablePartitionColumnSpec )
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==Identifier) ) {
                        int LA180_1 = input.LA(2);

                        if ( (LA180_1==KW_ARRAY||(LA180_1 >= KW_BIGINT && LA180_1 <= KW_BOOLEAN)||LA180_1==KW_CHAR||(LA180_1 >= KW_DATE && LA180_1 <= KW_DATETIME)||LA180_1==KW_DECIMAL||LA180_1==KW_DOUBLE||LA180_1==KW_FLOAT||LA180_1==KW_INT||LA180_1==KW_MAP||LA180_1==KW_REAL||LA180_1==KW_SMALLINT||(LA180_1 >= KW_STRING && LA180_1 <= KW_STRUCT)||(LA180_1 >= KW_TIMESTAMP && LA180_1 <= KW_TINYINT)||LA180_1==KW_UNIONTYPE||LA180_1==KW_VARCHAR) ) {
                            alt180=1;
                        }
                        else if ( (LA180_1==COMMA||LA180_1==RPAREN) ) {
                            alt180=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 180, 1, input);

                            throw nvae;

                        }
                    }
                    else if ( ((LA180_0 >= KW_ABORT && LA180_0 <= KW_AFTER)||LA180_0==KW_ALLOC_FRACTION||LA180_0==KW_ANALYZE||LA180_0==KW_ARCHIVE||(LA180_0 >= KW_ASC && LA180_0 <= KW_AT)||(LA180_0 >= KW_AUTOCOMMIT && LA180_0 <= KW_BEFORE)||(LA180_0 >= KW_BRANCH && LA180_0 <= KW_BUCKETS)||(LA180_0 >= KW_CACHE && LA180_0 <= KW_CASCADE)||(LA180_0 >= KW_CBO && LA180_0 <= KW_CHANGE)||LA180_0==KW_CHECK||(LA180_0 >= KW_CLUSTER && LA180_0 <= KW_COLLECTION)||(LA180_0 >= KW_COLUMNS && LA180_0 <= KW_COMMENT)||(LA180_0 >= KW_COMPACT && LA180_0 <= KW_COMPACTIONS)||(LA180_0 >= KW_COMPUTE && LA180_0 <= KW_CONCATENATE)||LA180_0==KW_CONTINUE||LA180_0==KW_COST||LA180_0==KW_CRON||LA180_0==KW_DATA||LA180_0==KW_DATABASES||(LA180_0 >= KW_DATETIME && LA180_0 <= KW_DCPROPERTIES)||LA180_0==KW_DEBUG||(LA180_0 >= KW_DEFAULT && LA180_0 <= KW_DEFINED)||(LA180_0 >= KW_DELIMITED && LA180_0 <= KW_DESC)||(LA180_0 >= KW_DETAIL && LA180_0 <= KW_DISABLE)||(LA180_0 >= KW_DISTRIBUTE && LA180_0 <= KW_DO)||LA180_0==KW_DOW||(LA180_0 >= KW_DUMP && LA180_0 <= KW_ELEM_TYPE)||LA180_0==KW_ENABLE||(LA180_0 >= KW_ENFORCED && LA180_0 <= KW_EVERY)||(LA180_0 >= KW_EXCLUSIVE && LA180_0 <= KW_EXECUTED)||(LA180_0 >= KW_EXPIRE_SNAPSHOTS && LA180_0 <= KW_EXPRESSION)||LA180_0==KW_FAST_FORWARD||(LA180_0 >= KW_FIELDS && LA180_0 <= KW_FIRST)||(LA180_0 >= KW_FORMAT && LA180_0 <= KW_FORMATTED)||LA180_0==KW_FUNCTIONS||(LA180_0 >= KW_HOUR && LA180_0 <= KW_IDXPROPERTIES)||LA180_0==KW_IGNORE||(LA180_0 >= KW_INDEX && LA180_0 <= KW_INDEXES)||(LA180_0 >= KW_INPATH && LA180_0 <= KW_INPUTFORMAT)||(LA180_0 >= KW_ISOLATION && LA180_0 <= KW_JAR)||(LA180_0 >= KW_JOINCOST && LA180_0 <= KW_LAST)||LA180_0==KW_LEVEL||(LA180_0 >= KW_LIMIT && LA180_0 <= KW_LOAD)||(LA180_0 >= KW_LOCATION && LA180_0 <= KW_LONG)||(LA180_0 >= KW_MANAGED && LA180_0 <= KW_MANAGEMENT)||(LA180_0 >= KW_MAPJOIN && LA180_0 <= KW_MATERIALIZED)||LA180_0==KW_METADATA||(LA180_0 >= KW_MINUTE && LA180_0 <= KW_MONTH)||(LA180_0 >= KW_MOVE && LA180_0 <= KW_MSCK)||(LA180_0 >= KW_NORELY && LA180_0 <= KW_NOSCAN)||LA180_0==KW_NOVALIDATE||LA180_0==KW_NULLS||LA180_0==KW_OFFSET||(LA180_0 >= KW_OPERATOR && LA180_0 <= KW_OPTION)||(LA180_0 >= KW_OUTPUTDRIVER && LA180_0 <= KW_OUTPUTFORMAT)||(LA180_0 >= KW_OVERWRITE && LA180_0 <= KW_OWNER)||(LA180_0 >= KW_PARTITIONED && LA180_0 <= KW_PATH)||(LA180_0 >= KW_PLAN && LA180_0 <= KW_POOL)||LA180_0==KW_PRINCIPALS||LA180_0==KW_PURGE||(LA180_0 >= KW_QUARTER && LA180_0 <= KW_QUERY_PARALLELISM)||LA180_0==KW_READ||(LA180_0 >= KW_REBUILD && LA180_0 <= KW_RECORDWRITER)||(LA180_0 >= KW_RELOAD && LA180_0 <= KW_RETENTION)||LA180_0==KW_REWRITE||(LA180_0 >= KW_ROLE && LA180_0 <= KW_ROLES)||(LA180_0 >= KW_SCHEDULED && LA180_0 <= KW_SECOND)||(LA180_0 >= KW_SEMI && LA180_0 <= KW_SERVER)||(LA180_0 >= KW_SETS && LA180_0 <= KW_SKEWED)||(LA180_0 >= KW_SNAPSHOT && LA180_0 <= KW_SNAPSHOTS)||(LA180_0 >= KW_SORT && LA180_0 <= KW_SSL)||(LA180_0 >= KW_STATISTICS && LA180_0 <= KW_SUMMARY)||(LA180_0 >= KW_SYSTEM_TIME && LA180_0 <= KW_SYSTEM_VERSION)||LA180_0==KW_TABLES||(LA180_0 >= KW_TAG && LA180_0 <= KW_TERMINATED)||LA180_0==KW_TINYINT||LA180_0==KW_TOUCH||(LA180_0 >= KW_TRANSACTION && LA180_0 <= KW_TRANSACTIONS)||LA180_0==KW_TRIM||(LA180_0 >= KW_TYPE && LA180_0 <= KW_UNARCHIVE)||LA180_0==KW_UNDO||LA180_0==KW_UNIONTYPE||(LA180_0 >= KW_UNKNOWN && LA180_0 <= KW_UNSIGNED)||(LA180_0 >= KW_URI && LA180_0 <= KW_USE)||(LA180_0 >= KW_UTC && LA180_0 <= KW_VALIDATE)||LA180_0==KW_VALUE_TYPE||(LA180_0 >= KW_VECTORIZATION && LA180_0 <= KW_WEEK)||LA180_0==KW_WHILE||(LA180_0 >= KW_WITHIN && LA180_0 <= KW_ZONE)||LA180_0==KW_BATCH||LA180_0==KW_DAYOFWEEK||LA180_0==KW_HOLD_DDLTIME||LA180_0==KW_NO_DROP||LA180_0==KW_OFFLINE||LA180_0==KW_PROTECTION||LA180_0==KW_READONLY||LA180_0==KW_TIMESTAMPTZ) ) {
                        int LA180_2 = input.LA(2);

                        if ( (LA180_2==KW_ARRAY||(LA180_2 >= KW_BIGINT && LA180_2 <= KW_BOOLEAN)||LA180_2==KW_CHAR||(LA180_2 >= KW_DATE && LA180_2 <= KW_DATETIME)||LA180_2==KW_DECIMAL||LA180_2==KW_DOUBLE||LA180_2==KW_FLOAT||LA180_2==KW_INT||LA180_2==KW_MAP||LA180_2==KW_REAL||LA180_2==KW_SMALLINT||(LA180_2 >= KW_STRING && LA180_2 <= KW_STRUCT)||(LA180_2 >= KW_TIMESTAMP && LA180_2 <= KW_TINYINT)||LA180_2==KW_UNIONTYPE||LA180_2==KW_VARCHAR) ) {
                            alt180=1;
                        }
                        else if ( (LA180_2==COMMA||LA180_2==RPAREN) ) {
                            alt180=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 180, 2, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 180, 0, input);

                        throw nvae;

                    }
                    switch (alt180) {
                        case 1 :
                            // HiveParser.g:1802:36: opt1= createTablePartitionColumnTypeSpec
                            {
                            pushFollow(FOLLOW_createTablePartitionColumnTypeSpec_in_createTablePartitionSpec9465);
                            opt1=createTablePartitionColumnTypeSpec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createTablePartitionColumnTypeSpec.add(opt1.getTree());

                            }
                            break;
                        case 2 :
                            // HiveParser.g:1802:80: opt2= createTablePartitionColumnSpec
                            {
                            pushFollow(FOLLOW_createTablePartitionColumnSpec_in_createTablePartitionSpec9473);
                            opt2=createTablePartitionColumnSpec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createTablePartitionColumnSpec.add(opt2.getTree());

                            }
                            break;

                    }


                    RPAREN569=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createTablePartitionSpec9476); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN569);


                    // AST REWRITE
                    // elements: opt2, opt1
                    // token labels: 
                    // rule labels: opt1, opt2, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_opt1=new RewriteRuleSubtreeStream(adaptor,"rule opt1",opt1!=null?opt1.tree:null);
                    RewriteRuleSubtreeStream stream_opt2=new RewriteRuleSubtreeStream(adaptor,"rule opt2",opt2!=null?opt2.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1803:5: -> {$opt1.tree != null}? $opt1
                    if ((opt1!=null?((ASTNode)opt1.tree):null) != null) {
                        adaptor.addChild(root_0, stream_opt1.nextTree());

                    }

                    else // 1804:5: -> $opt2
                    {
                        adaptor.addChild(root_0, stream_opt2.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1805:7: KW_PARTITIONED KW_BY KW_SPEC LPAREN (spec= partitionTransformSpec ) RPAREN
                    {
                    KW_PARTITIONED570=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_createTablePartitionSpec9504); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_PARTITIONED.add(KW_PARTITIONED570);


                    KW_BY571=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_createTablePartitionSpec9506); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY571);


                    KW_SPEC572=(Token)match(input,KW_SPEC,FOLLOW_KW_SPEC_in_createTablePartitionSpec9508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SPEC.add(KW_SPEC572);


                    LPAREN573=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createTablePartitionSpec9510); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN573);


                    // HiveParser.g:1805:43: (spec= partitionTransformSpec )
                    // HiveParser.g:1805:44: spec= partitionTransformSpec
                    {
                    pushFollow(FOLLOW_partitionTransformSpec_in_createTablePartitionSpec9517);
                    spec=partitionTransformSpec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_partitionTransformSpec.add(spec.getTree());

                    }


                    RPAREN574=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createTablePartitionSpec9520); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN574);


                    // AST REWRITE
                    // elements: spec
                    // token labels: 
                    // rule labels: spec, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_spec=new RewriteRuleSubtreeStream(adaptor,"rule spec",spec!=null?spec.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1806:5: -> ^( TOK_TABLEPARTCOLSBYSPEC $spec)
                    {
                        // HiveParser.g:1806:8: ^( TOK_TABLEPARTCOLSBYSPEC $spec)
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_TABLEPARTCOLSBYSPEC, "TOK_TABLEPARTCOLSBYSPEC")
                        , root_1);

                        adaptor.addChild(root_1, stream_spec.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createTablePartitionSpec"


    public static class createTablePartitionColumnTypeSpec_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createTablePartitionColumnTypeSpec"
    // HiveParser.g:1809:1: createTablePartitionColumnTypeSpec : columnNameTypeConstraint ( COMMA columnNameTypeConstraint )* -> ^( TOK_TABLEPARTCOLS ( columnNameTypeConstraint )+ ) ;
    public final HiveParser.createTablePartitionColumnTypeSpec_return createTablePartitionColumnTypeSpec() throws RecognitionException {
        HiveParser.createTablePartitionColumnTypeSpec_return retval = new HiveParser.createTablePartitionColumnTypeSpec_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA576=null;
        HiveParser.columnNameTypeConstraint_return columnNameTypeConstraint575 =null;

        HiveParser.columnNameTypeConstraint_return columnNameTypeConstraint577 =null;


        ASTNode COMMA576_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameTypeConstraint=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeConstraint");
         pushMsg("create table partition specification", state); 
        try {
            // HiveParser.g:1812:5: ( columnNameTypeConstraint ( COMMA columnNameTypeConstraint )* -> ^( TOK_TABLEPARTCOLS ( columnNameTypeConstraint )+ ) )
            // HiveParser.g:1812:7: columnNameTypeConstraint ( COMMA columnNameTypeConstraint )*
            {
            pushFollow(FOLLOW_columnNameTypeConstraint_in_createTablePartitionColumnTypeSpec9560);
            columnNameTypeConstraint575=columnNameTypeConstraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameTypeConstraint.add(columnNameTypeConstraint575.getTree());

            // HiveParser.g:1812:32: ( COMMA columnNameTypeConstraint )*
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==COMMA) ) {
                    alt182=1;
                }


                switch (alt182) {
            	case 1 :
            	    // HiveParser.g:1812:33: COMMA columnNameTypeConstraint
            	    {
            	    COMMA576=(Token)match(input,COMMA,FOLLOW_COMMA_in_createTablePartitionColumnTypeSpec9563); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA576);


            	    pushFollow(FOLLOW_columnNameTypeConstraint_in_createTablePartitionColumnTypeSpec9565);
            	    columnNameTypeConstraint577=columnNameTypeConstraint();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_columnNameTypeConstraint.add(columnNameTypeConstraint577.getTree());

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameTypeConstraint
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1813:5: -> ^( TOK_TABLEPARTCOLS ( columnNameTypeConstraint )+ )
            {
                // HiveParser.g:1813:8: ^( TOK_TABLEPARTCOLS ( columnNameTypeConstraint )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABLEPARTCOLS, "TOK_TABLEPARTCOLS")
                , root_1);

                if ( !(stream_columnNameTypeConstraint.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameTypeConstraint.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeConstraint.nextTree());

                }
                stream_columnNameTypeConstraint.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createTablePartitionColumnTypeSpec"


    public static class createTablePartitionColumnSpec_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createTablePartitionColumnSpec"
    // HiveParser.g:1816:1: createTablePartitionColumnSpec : columnName ( COMMA columnName )* -> ^( TOK_TABLEPARTCOLNAMES ( columnName )+ ) ;
    public final HiveParser.createTablePartitionColumnSpec_return createTablePartitionColumnSpec() throws RecognitionException {
        HiveParser.createTablePartitionColumnSpec_return retval = new HiveParser.createTablePartitionColumnSpec_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA579=null;
        HiveParser.columnName_return columnName578 =null;

        HiveParser.columnName_return columnName580 =null;


        ASTNode COMMA579_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");
         pushMsg("create table partition specification", state); 
        try {
            // HiveParser.g:1819:5: ( columnName ( COMMA columnName )* -> ^( TOK_TABLEPARTCOLNAMES ( columnName )+ ) )
            // HiveParser.g:1819:7: columnName ( COMMA columnName )*
            {
            pushFollow(FOLLOW_columnName_in_createTablePartitionColumnSpec9607);
            columnName578=columnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnName.add(columnName578.getTree());

            // HiveParser.g:1819:18: ( COMMA columnName )*
            loop183:
            do {
                int alt183=2;
                int LA183_0 = input.LA(1);

                if ( (LA183_0==COMMA) ) {
                    alt183=1;
                }


                switch (alt183) {
            	case 1 :
            	    // HiveParser.g:1819:19: COMMA columnName
            	    {
            	    COMMA579=(Token)match(input,COMMA,FOLLOW_COMMA_in_createTablePartitionColumnSpec9610); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA579);


            	    pushFollow(FOLLOW_columnName_in_createTablePartitionColumnSpec9612);
            	    columnName580=columnName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_columnName.add(columnName580.getTree());

            	    }
            	    break;

            	default :
            	    break loop183;
                }
            } while (true);


            // AST REWRITE
            // elements: columnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1820:5: -> ^( TOK_TABLEPARTCOLNAMES ( columnName )+ )
            {
                // HiveParser.g:1820:8: ^( TOK_TABLEPARTCOLNAMES ( columnName )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABLEPARTCOLNAMES, "TOK_TABLEPARTCOLNAMES")
                , root_1);

                if ( !(stream_columnName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnName.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnName.nextTree());

                }
                stream_columnName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createTablePartitionColumnSpec"


    public static class partitionTransformSpec_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partitionTransformSpec"
    // HiveParser.g:1823:1: partitionTransformSpec : columnNameTransformConstraint ( COMMA columnNameTransformConstraint )* -> ( columnNameTransformConstraint )+ ;
    public final HiveParser.partitionTransformSpec_return partitionTransformSpec() throws RecognitionException {
        HiveParser.partitionTransformSpec_return retval = new HiveParser.partitionTransformSpec_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA582=null;
        HiveParser.columnNameTransformConstraint_return columnNameTransformConstraint581 =null;

        HiveParser.columnNameTransformConstraint_return columnNameTransformConstraint583 =null;


        ASTNode COMMA582_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameTransformConstraint=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTransformConstraint");
         pushMsg("create table partition by specification", state); 
        try {
            // HiveParser.g:1826:5: ( columnNameTransformConstraint ( COMMA columnNameTransformConstraint )* -> ( columnNameTransformConstraint )+ )
            // HiveParser.g:1826:7: columnNameTransformConstraint ( COMMA columnNameTransformConstraint )*
            {
            pushFollow(FOLLOW_columnNameTransformConstraint_in_partitionTransformSpec9654);
            columnNameTransformConstraint581=columnNameTransformConstraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameTransformConstraint.add(columnNameTransformConstraint581.getTree());

            // HiveParser.g:1826:37: ( COMMA columnNameTransformConstraint )*
            loop184:
            do {
                int alt184=2;
                int LA184_0 = input.LA(1);

                if ( (LA184_0==COMMA) ) {
                    alt184=1;
                }


                switch (alt184) {
            	case 1 :
            	    // HiveParser.g:1826:38: COMMA columnNameTransformConstraint
            	    {
            	    COMMA582=(Token)match(input,COMMA,FOLLOW_COMMA_in_partitionTransformSpec9657); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA582);


            	    pushFollow(FOLLOW_columnNameTransformConstraint_in_partitionTransformSpec9659);
            	    columnNameTransformConstraint583=columnNameTransformConstraint();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_columnNameTransformConstraint.add(columnNameTransformConstraint583.getTree());

            	    }
            	    break;

            	default :
            	    break loop184;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameTransformConstraint
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1827:5: -> ( columnNameTransformConstraint )+
            {
                if ( !(stream_columnNameTransformConstraint.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameTransformConstraint.hasNext() ) {
                    adaptor.addChild(root_0, stream_columnNameTransformConstraint.nextTree());

                }
                stream_columnNameTransformConstraint.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partitionTransformSpec"


    public static class columnNameTransformConstraint_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameTransformConstraint"
    // HiveParser.g:1830:1: columnNameTransformConstraint : partitionTransformType -> ^( TOK_TABCOL partitionTransformType ) ;
    public final HiveParser.columnNameTransformConstraint_return columnNameTransformConstraint() throws RecognitionException {
        HiveParser.columnNameTransformConstraint_return retval = new HiveParser.columnNameTransformConstraint_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.partitionTransformType_return partitionTransformType584 =null;


        RewriteRuleSubtreeStream stream_partitionTransformType=new RewriteRuleSubtreeStream(adaptor,"rule partitionTransformType");
         pushMsg("column transform specification", state); 
        try {
            // HiveParser.g:1833:5: ( partitionTransformType -> ^( TOK_TABCOL partitionTransformType ) )
            // HiveParser.g:1833:7: partitionTransformType
            {
            pushFollow(FOLLOW_partitionTransformType_in_columnNameTransformConstraint9697);
            partitionTransformType584=partitionTransformType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_partitionTransformType.add(partitionTransformType584.getTree());

            // AST REWRITE
            // elements: partitionTransformType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1834:5: -> ^( TOK_TABCOL partitionTransformType )
            {
                // HiveParser.g:1834:8: ^( TOK_TABCOL partitionTransformType )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_partitionTransformType.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameTransformConstraint"


    public static class partitionTransformType_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partitionTransformType"
    // HiveParser.g:1837:1: partitionTransformType : ( columnName -> {containExcludedCharForCreateTableColumnName($columnName.text)}? -> ^( TOK_IDENTITY columnName ) | KW_YEAR LPAREN columnName RPAREN -> {containExcludedCharForCreateTableColumnName($columnName.text)}? -> ^( TOK_YEAR columnName ) | KW_MONTH LPAREN columnName RPAREN -> {containExcludedCharForCreateTableColumnName($columnName.text)}? -> ^( TOK_MONTH columnName ) | KW_DAY LPAREN columnName RPAREN -> {containExcludedCharForCreateTableColumnName($columnName.text)}? -> ^( TOK_DAY columnName ) | KW_HOUR LPAREN columnName RPAREN -> {containExcludedCharForCreateTableColumnName($columnName.text)}? -> ^( TOK_HOUR columnName ) | KW_TRUNCATE LPAREN value= Number COMMA columnName RPAREN -> {containExcludedCharForCreateTableColumnName($columnName.text)}? -> ^( TOK_TRUNCATE $value columnName ) | KW_BUCKET LPAREN value= Number COMMA columnName RPAREN -> {containExcludedCharForCreateTableColumnName($columnName.text)}? -> ^( TOK_BUCKET $value columnName ) );
    public final HiveParser.partitionTransformType_return partitionTransformType() throws RecognitionException {
        HiveParser.partitionTransformType_return retval = new HiveParser.partitionTransformType_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token value=null;
        Token KW_YEAR586=null;
        Token LPAREN587=null;
        Token RPAREN589=null;
        Token KW_MONTH590=null;
        Token LPAREN591=null;
        Token RPAREN593=null;
        Token KW_DAY594=null;
        Token LPAREN595=null;
        Token RPAREN597=null;
        Token KW_HOUR598=null;
        Token LPAREN599=null;
        Token RPAREN601=null;
        Token KW_TRUNCATE602=null;
        Token LPAREN603=null;
        Token COMMA604=null;
        Token RPAREN606=null;
        Token KW_BUCKET607=null;
        Token LPAREN608=null;
        Token COMMA609=null;
        Token RPAREN611=null;
        HiveParser.columnName_return columnName585 =null;

        HiveParser.columnName_return columnName588 =null;

        HiveParser.columnName_return columnName592 =null;

        HiveParser.columnName_return columnName596 =null;

        HiveParser.columnName_return columnName600 =null;

        HiveParser.columnName_return columnName605 =null;

        HiveParser.columnName_return columnName610 =null;


        ASTNode value_tree=null;
        ASTNode KW_YEAR586_tree=null;
        ASTNode LPAREN587_tree=null;
        ASTNode RPAREN589_tree=null;
        ASTNode KW_MONTH590_tree=null;
        ASTNode LPAREN591_tree=null;
        ASTNode RPAREN593_tree=null;
        ASTNode KW_DAY594_tree=null;
        ASTNode LPAREN595_tree=null;
        ASTNode RPAREN597_tree=null;
        ASTNode KW_HOUR598_tree=null;
        ASTNode LPAREN599_tree=null;
        ASTNode RPAREN601_tree=null;
        ASTNode KW_TRUNCATE602_tree=null;
        ASTNode LPAREN603_tree=null;
        ASTNode COMMA604_tree=null;
        ASTNode RPAREN606_tree=null;
        ASTNode KW_BUCKET607_tree=null;
        ASTNode LPAREN608_tree=null;
        ASTNode COMMA609_tree=null;
        ASTNode RPAREN611_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_HOUR=new RewriteRuleTokenStream(adaptor,"token KW_HOUR");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_DAY=new RewriteRuleTokenStream(adaptor,"token KW_DAY");
        RewriteRuleTokenStream stream_KW_MONTH=new RewriteRuleTokenStream(adaptor,"token KW_MONTH");
        RewriteRuleTokenStream stream_KW_TRUNCATE=new RewriteRuleTokenStream(adaptor,"token KW_TRUNCATE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_YEAR=new RewriteRuleTokenStream(adaptor,"token KW_YEAR");
        RewriteRuleTokenStream stream_KW_BUCKET=new RewriteRuleTokenStream(adaptor,"token KW_BUCKET");
        RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");
        pushMsg("partitition transform type specification", state); 
        try {
            // HiveParser.g:1840:5: ( columnName -> {containExcludedCharForCreateTableColumnName($columnName.text)}? -> ^( TOK_IDENTITY columnName ) | KW_YEAR LPAREN columnName RPAREN -> {containExcludedCharForCreateTableColumnName($columnName.text)}? -> ^( TOK_YEAR columnName ) | KW_MONTH LPAREN columnName RPAREN -> {containExcludedCharForCreateTableColumnName($columnName.text)}? -> ^( TOK_MONTH columnName ) | KW_DAY LPAREN columnName RPAREN -> {containExcludedCharForCreateTableColumnName($columnName.text)}? -> ^( TOK_DAY columnName ) | KW_HOUR LPAREN columnName RPAREN -> {containExcludedCharForCreateTableColumnName($columnName.text)}? -> ^( TOK_HOUR columnName ) | KW_TRUNCATE LPAREN value= Number COMMA columnName RPAREN -> {containExcludedCharForCreateTableColumnName($columnName.text)}? -> ^( TOK_TRUNCATE $value columnName ) | KW_BUCKET LPAREN value= Number COMMA columnName RPAREN -> {containExcludedCharForCreateTableColumnName($columnName.text)}? -> ^( TOK_BUCKET $value columnName ) )
            int alt185=7;
            switch ( input.LA(1) ) {
            case Identifier:
            case KW_ABORT:
            case KW_ACTIVATE:
            case KW_ACTIVE:
            case KW_ADD:
            case KW_ADMIN:
            case KW_AFTER:
            case KW_ALLOC_FRACTION:
            case KW_ANALYZE:
            case KW_ARCHIVE:
            case KW_ASC:
            case KW_AST:
            case KW_AT:
            case KW_AUTOCOMMIT:
            case KW_BEFORE:
            case KW_BRANCH:
            case KW_BUCKETS:
            case KW_CACHE:
            case KW_CASCADE:
            case KW_CBO:
            case KW_CHANGE:
            case KW_CHECK:
            case KW_CLUSTER:
            case KW_CLUSTERED:
            case KW_CLUSTERSTATUS:
            case KW_COLLECTION:
            case KW_COLUMNS:
            case KW_COMMENT:
            case KW_COMPACT:
            case KW_COMPACTIONS:
            case KW_COMPUTE:
            case KW_CONCATENATE:
            case KW_CONTINUE:
            case KW_COST:
            case KW_CRON:
            case KW_DATA:
            case KW_DATABASES:
            case KW_DATETIME:
            case KW_DBPROPERTIES:
            case KW_DCPROPERTIES:
            case KW_DEBUG:
            case KW_DEFAULT:
            case KW_DEFERRED:
            case KW_DEFINED:
            case KW_DELIMITED:
            case KW_DEPENDENCY:
            case KW_DESC:
            case KW_DETAIL:
            case KW_DIRECTORIES:
            case KW_DIRECTORY:
            case KW_DISABLE:
            case KW_DISTRIBUTE:
            case KW_DISTRIBUTED:
            case KW_DO:
            case KW_DOW:
            case KW_DUMP:
            case KW_ELEM_TYPE:
            case KW_ENABLE:
            case KW_ENFORCED:
            case KW_ESCAPED:
            case KW_EVERY:
            case KW_EXCLUSIVE:
            case KW_EXECUTE:
            case KW_EXECUTED:
            case KW_EXPIRE_SNAPSHOTS:
            case KW_EXPLAIN:
            case KW_EXPORT:
            case KW_EXPRESSION:
            case KW_FAST_FORWARD:
            case KW_FIELDS:
            case KW_FILE:
            case KW_FILEFORMAT:
            case KW_FIRST:
            case KW_FORMAT:
            case KW_FORMATTED:
            case KW_FUNCTIONS:
            case KW_IDXPROPERTIES:
            case KW_IGNORE:
            case KW_INDEX:
            case KW_INDEXES:
            case KW_INPATH:
            case KW_INPUTDRIVER:
            case KW_INPUTFORMAT:
            case KW_ISOLATION:
            case KW_ITEMS:
            case KW_JAR:
            case KW_JOINCOST:
            case KW_KEY:
            case KW_KEYS:
            case KW_KEY_TYPE:
            case KW_KILL:
            case KW_LAST:
            case KW_LEVEL:
            case KW_LIMIT:
            case KW_LINES:
            case KW_LOAD:
            case KW_LOCATION:
            case KW_LOCK:
            case KW_LOCKS:
            case KW_LOGICAL:
            case KW_LONG:
            case KW_MANAGED:
            case KW_MANAGEDLOCATION:
            case KW_MANAGEMENT:
            case KW_MAPJOIN:
            case KW_MAPPING:
            case KW_MATCHED:
            case KW_MATERIALIZED:
            case KW_METADATA:
            case KW_MINUTE:
            case KW_MOVE:
            case KW_MSCK:
            case KW_NORELY:
            case KW_NOSCAN:
            case KW_NOVALIDATE:
            case KW_NULLS:
            case KW_OFFSET:
            case KW_OPERATOR:
            case KW_OPTIMIZE:
            case KW_OPTION:
            case KW_OUTPUTDRIVER:
            case KW_OUTPUTFORMAT:
            case KW_OVERWRITE:
            case KW_OWNER:
            case KW_PARTITIONED:
            case KW_PARTITIONS:
            case KW_PATH:
            case KW_PLAN:
            case KW_PLANS:
            case KW_PLUS:
            case KW_POOL:
            case KW_PRINCIPALS:
            case KW_PURGE:
            case KW_QUARTER:
            case KW_QUERY:
            case KW_QUERY_PARALLELISM:
            case KW_READ:
            case KW_REBUILD:
            case KW_RECORDREADER:
            case KW_RECORDWRITER:
            case KW_RELOAD:
            case KW_RELY:
            case KW_REMOTE:
            case KW_RENAME:
            case KW_REOPTIMIZATION:
            case KW_REPAIR:
            case KW_REPL:
            case KW_REPLACE:
            case KW_REPLICATION:
            case KW_RESOURCE:
            case KW_RESPECT:
            case KW_RESTRICT:
            case KW_RETAIN:
            case KW_RETENTION:
            case KW_REWRITE:
            case KW_ROLE:
            case KW_ROLES:
            case KW_SCHEDULED:
            case KW_SCHEDULING_POLICY:
            case KW_SCHEMA:
            case KW_SCHEMAS:
            case KW_SECOND:
            case KW_SEMI:
            case KW_SERDE:
            case KW_SERDEPROPERTIES:
            case KW_SERVER:
            case KW_SETS:
            case KW_SET_CURRENT_SNAPSHOT:
            case KW_SHARED:
            case KW_SHOW:
            case KW_SHOW_DATABASE:
            case KW_SKEWED:
            case KW_SNAPSHOT:
            case KW_SNAPSHOTS:
            case KW_SORT:
            case KW_SORTED:
            case KW_SPEC:
            case KW_SSL:
            case KW_STATISTICS:
            case KW_STATUS:
            case KW_STORED:
            case KW_STREAMTABLE:
            case KW_STRING:
            case KW_STRUCT:
            case KW_SUMMARY:
            case KW_SYSTEM_TIME:
            case KW_SYSTEM_VERSION:
            case KW_TABLES:
            case KW_TAG:
            case KW_TBLPROPERTIES:
            case KW_TEMPORARY:
            case KW_TERMINATED:
            case KW_TINYINT:
            case KW_TOUCH:
            case KW_TRANSACTION:
            case KW_TRANSACTIONAL:
            case KW_TRANSACTIONS:
            case KW_TRIM:
            case KW_TYPE:
            case KW_UNARCHIVE:
            case KW_UNDO:
            case KW_UNIONTYPE:
            case KW_UNKNOWN:
            case KW_UNLOCK:
            case KW_UNMANAGED:
            case KW_UNSET:
            case KW_UNSIGNED:
            case KW_URI:
            case KW_URL:
            case KW_USE:
            case KW_UTC:
            case KW_UTCTIMESTAMP:
            case KW_VALIDATE:
            case KW_VALUE_TYPE:
            case KW_VECTORIZATION:
            case KW_VIEW:
            case KW_VIEWS:
            case KW_WAIT:
            case KW_WEEK:
            case KW_WHILE:
            case KW_WITHIN:
            case KW_WORK:
            case KW_WORKLOAD:
            case KW_WRITE:
            case KW_ZONE:
            case KW_BATCH:
            case KW_DAYOFWEEK:
            case KW_HOLD_DDLTIME:
            case KW_NO_DROP:
            case KW_OFFLINE:
            case KW_PROTECTION:
            case KW_READONLY:
            case KW_TIMESTAMPTZ:
                {
                alt185=1;
                }
                break;
            case KW_YEAR:
                {
                int LA185_2 = input.LA(2);

                if ( (LA185_2==LPAREN) ) {
                    alt185=2;
                }
                else if ( (LA185_2==COMMA||LA185_2==RPAREN) ) {
                    alt185=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 185, 2, input);

                    throw nvae;

                }
                }
                break;
            case KW_MONTH:
                {
                int LA185_3 = input.LA(2);

                if ( (LA185_3==LPAREN) ) {
                    alt185=3;
                }
                else if ( (LA185_3==COMMA||LA185_3==RPAREN) ) {
                    alt185=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 185, 3, input);

                    throw nvae;

                }
                }
                break;
            case KW_DAY:
                {
                int LA185_4 = input.LA(2);

                if ( (LA185_4==LPAREN) ) {
                    alt185=4;
                }
                else if ( (LA185_4==COMMA||LA185_4==RPAREN) ) {
                    alt185=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 185, 4, input);

                    throw nvae;

                }
                }
                break;
            case KW_HOUR:
                {
                int LA185_5 = input.LA(2);

                if ( (LA185_5==LPAREN) ) {
                    alt185=5;
                }
                else if ( (LA185_5==COMMA||LA185_5==RPAREN) ) {
                    alt185=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 185, 5, input);

                    throw nvae;

                }
                }
                break;
            case KW_BUCKET:
                {
                int LA185_6 = input.LA(2);

                if ( (LA185_6==LPAREN) ) {
                    alt185=7;
                }
                else if ( (LA185_6==COMMA||LA185_6==RPAREN) ) {
                    alt185=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 185, 6, input);

                    throw nvae;

                }
                }
                break;
            case KW_TRUNCATE:
                {
                alt185=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;

            }

            switch (alt185) {
                case 1 :
                    // HiveParser.g:1840:7: columnName
                    {
                    pushFollow(FOLLOW_columnName_in_partitionTransformType9736);
                    columnName585=columnName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnName.add(columnName585.getTree());

                    // AST REWRITE
                    // elements: columnName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1841:5: -> {containExcludedCharForCreateTableColumnName($columnName.text)}?
                    if (containExcludedCharForCreateTableColumnName((columnName585!=null?input.toString(columnName585.start,columnName585.stop):null))) {
                        adaptor.addChild(root_0, throwColumnNameException());

                    }

                    else // 1842:5: -> ^( TOK_IDENTITY columnName )
                    {
                        // HiveParser.g:1842:9: ^( TOK_IDENTITY columnName )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_IDENTITY, "TOK_IDENTITY")
                        , root_1);

                        adaptor.addChild(root_1, stream_columnName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1843:7: KW_YEAR LPAREN columnName RPAREN
                    {
                    KW_YEAR586=(Token)match(input,KW_YEAR,FOLLOW_KW_YEAR_in_partitionTransformType9767); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_YEAR.add(KW_YEAR586);


                    LPAREN587=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partitionTransformType9769); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN587);


                    pushFollow(FOLLOW_columnName_in_partitionTransformType9771);
                    columnName588=columnName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnName.add(columnName588.getTree());

                    RPAREN589=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partitionTransformType9773); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN589);


                    // AST REWRITE
                    // elements: columnName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1844:5: -> {containExcludedCharForCreateTableColumnName($columnName.text)}?
                    if (containExcludedCharForCreateTableColumnName((columnName588!=null?input.toString(columnName588.start,columnName588.stop):null))) {
                        adaptor.addChild(root_0, throwColumnNameException());

                    }

                    else // 1845:5: -> ^( TOK_YEAR columnName )
                    {
                        // HiveParser.g:1845:9: ^( TOK_YEAR columnName )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_YEAR, "TOK_YEAR")
                        , root_1);

                        adaptor.addChild(root_1, stream_columnName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1846:7: KW_MONTH LPAREN columnName RPAREN
                    {
                    KW_MONTH590=(Token)match(input,KW_MONTH,FOLLOW_KW_MONTH_in_partitionTransformType9804); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_MONTH.add(KW_MONTH590);


                    LPAREN591=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partitionTransformType9806); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN591);


                    pushFollow(FOLLOW_columnName_in_partitionTransformType9808);
                    columnName592=columnName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnName.add(columnName592.getTree());

                    RPAREN593=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partitionTransformType9810); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN593);


                    // AST REWRITE
                    // elements: columnName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1847:5: -> {containExcludedCharForCreateTableColumnName($columnName.text)}?
                    if (containExcludedCharForCreateTableColumnName((columnName592!=null?input.toString(columnName592.start,columnName592.stop):null))) {
                        adaptor.addChild(root_0, throwColumnNameException());

                    }

                    else // 1848:5: -> ^( TOK_MONTH columnName )
                    {
                        // HiveParser.g:1848:9: ^( TOK_MONTH columnName )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_MONTH, "TOK_MONTH")
                        , root_1);

                        adaptor.addChild(root_1, stream_columnName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:1849:7: KW_DAY LPAREN columnName RPAREN
                    {
                    KW_DAY594=(Token)match(input,KW_DAY,FOLLOW_KW_DAY_in_partitionTransformType9841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DAY.add(KW_DAY594);


                    LPAREN595=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partitionTransformType9843); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN595);


                    pushFollow(FOLLOW_columnName_in_partitionTransformType9845);
                    columnName596=columnName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnName.add(columnName596.getTree());

                    RPAREN597=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partitionTransformType9847); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN597);


                    // AST REWRITE
                    // elements: columnName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1850:5: -> {containExcludedCharForCreateTableColumnName($columnName.text)}?
                    if (containExcludedCharForCreateTableColumnName((columnName596!=null?input.toString(columnName596.start,columnName596.stop):null))) {
                        adaptor.addChild(root_0, throwColumnNameException());

                    }

                    else // 1851:5: -> ^( TOK_DAY columnName )
                    {
                        // HiveParser.g:1851:9: ^( TOK_DAY columnName )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DAY, "TOK_DAY")
                        , root_1);

                        adaptor.addChild(root_1, stream_columnName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // HiveParser.g:1852:7: KW_HOUR LPAREN columnName RPAREN
                    {
                    KW_HOUR598=(Token)match(input,KW_HOUR,FOLLOW_KW_HOUR_in_partitionTransformType9878); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_HOUR.add(KW_HOUR598);


                    LPAREN599=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partitionTransformType9880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN599);


                    pushFollow(FOLLOW_columnName_in_partitionTransformType9882);
                    columnName600=columnName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnName.add(columnName600.getTree());

                    RPAREN601=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partitionTransformType9884); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN601);


                    // AST REWRITE
                    // elements: columnName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1853:5: -> {containExcludedCharForCreateTableColumnName($columnName.text)}?
                    if (containExcludedCharForCreateTableColumnName((columnName600!=null?input.toString(columnName600.start,columnName600.stop):null))) {
                        adaptor.addChild(root_0, throwColumnNameException());

                    }

                    else // 1854:5: -> ^( TOK_HOUR columnName )
                    {
                        // HiveParser.g:1854:9: ^( TOK_HOUR columnName )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_HOUR, "TOK_HOUR")
                        , root_1);

                        adaptor.addChild(root_1, stream_columnName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // HiveParser.g:1855:7: KW_TRUNCATE LPAREN value= Number COMMA columnName RPAREN
                    {
                    KW_TRUNCATE602=(Token)match(input,KW_TRUNCATE,FOLLOW_KW_TRUNCATE_in_partitionTransformType9915); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TRUNCATE.add(KW_TRUNCATE602);


                    LPAREN603=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partitionTransformType9917); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN603);


                    value=(Token)match(input,Number,FOLLOW_Number_in_partitionTransformType9923); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Number.add(value);


                    COMMA604=(Token)match(input,COMMA,FOLLOW_COMMA_in_partitionTransformType9925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA604);


                    pushFollow(FOLLOW_columnName_in_partitionTransformType9927);
                    columnName605=columnName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnName.add(columnName605.getTree());

                    RPAREN606=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partitionTransformType9929); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN606);


                    // AST REWRITE
                    // elements: columnName, value
                    // token labels: value
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1856:5: -> {containExcludedCharForCreateTableColumnName($columnName.text)}?
                    if (containExcludedCharForCreateTableColumnName((columnName605!=null?input.toString(columnName605.start,columnName605.stop):null))) {
                        adaptor.addChild(root_0, throwColumnNameException());

                    }

                    else // 1857:5: -> ^( TOK_TRUNCATE $value columnName )
                    {
                        // HiveParser.g:1857:9: ^( TOK_TRUNCATE $value columnName )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_TRUNCATE, "TOK_TRUNCATE")
                        , root_1);

                        adaptor.addChild(root_1, stream_value.nextNode());

                        adaptor.addChild(root_1, stream_columnName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // HiveParser.g:1858:7: KW_BUCKET LPAREN value= Number COMMA columnName RPAREN
                    {
                    KW_BUCKET607=(Token)match(input,KW_BUCKET,FOLLOW_KW_BUCKET_in_partitionTransformType9963); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_BUCKET.add(KW_BUCKET607);


                    LPAREN608=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partitionTransformType9965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN608);


                    value=(Token)match(input,Number,FOLLOW_Number_in_partitionTransformType9971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Number.add(value);


                    COMMA609=(Token)match(input,COMMA,FOLLOW_COMMA_in_partitionTransformType9973); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA609);


                    pushFollow(FOLLOW_columnName_in_partitionTransformType9975);
                    columnName610=columnName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnName.add(columnName610.getTree());

                    RPAREN611=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partitionTransformType9977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN611);


                    // AST REWRITE
                    // elements: value, columnName
                    // token labels: value
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1859:5: -> {containExcludedCharForCreateTableColumnName($columnName.text)}?
                    if (containExcludedCharForCreateTableColumnName((columnName610!=null?input.toString(columnName610.start,columnName610.stop):null))) {
                        adaptor.addChild(root_0, throwColumnNameException());

                    }

                    else // 1860:5: -> ^( TOK_BUCKET $value columnName )
                    {
                        // HiveParser.g:1860:9: ^( TOK_BUCKET $value columnName )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_BUCKET, "TOK_BUCKET")
                        , root_1);

                        adaptor.addChild(root_1, stream_value.nextNode());

                        adaptor.addChild(root_1, stream_columnName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partitionTransformType"


    public static class tableBuckets_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableBuckets"
    // HiveParser.g:1863:1: tableBuckets : KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num) ;
    public final HiveParser.tableBuckets_return tableBuckets() throws RecognitionException {
        HiveParser.tableBuckets_return retval = new HiveParser.tableBuckets_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token num=null;
        Token KW_CLUSTERED612=null;
        Token KW_BY613=null;
        Token LPAREN614=null;
        Token RPAREN615=null;
        Token KW_SORTED616=null;
        Token KW_BY617=null;
        Token LPAREN618=null;
        Token RPAREN619=null;
        Token KW_INTO620=null;
        Token KW_BUCKETS621=null;
        HiveParser.columnNameList_return bucketCols =null;

        HiveParser.columnNameOrderList_return sortCols =null;


        ASTNode num_tree=null;
        ASTNode KW_CLUSTERED612_tree=null;
        ASTNode KW_BY613_tree=null;
        ASTNode LPAREN614_tree=null;
        ASTNode RPAREN615_tree=null;
        ASTNode KW_SORTED616_tree=null;
        ASTNode KW_BY617_tree=null;
        ASTNode LPAREN618_tree=null;
        ASTNode RPAREN619_tree=null;
        ASTNode KW_INTO620_tree=null;
        ASTNode KW_BUCKETS621_tree=null;
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
        RewriteRuleSubtreeStream stream_columnNameOrderList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrderList");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         pushMsg("table buckets specification", state); 
        try {
            // HiveParser.g:1866:5: ( KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num) )
            // HiveParser.g:1867:7: KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS
            {
            KW_CLUSTERED612=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_tableBuckets10036); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CLUSTERED.add(KW_CLUSTERED612);


            KW_BY613=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets10038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY613);


            LPAREN614=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets10040); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN614);


            pushFollow(FOLLOW_columnNameList_in_tableBuckets10044);
            bucketCols=columnNameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameList.add(bucketCols.getTree());

            RPAREN615=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets10046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN615);


            // HiveParser.g:1867:66: ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==KW_SORTED) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // HiveParser.g:1867:67: KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN
                    {
                    KW_SORTED616=(Token)match(input,KW_SORTED,FOLLOW_KW_SORTED_in_tableBuckets10049); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SORTED.add(KW_SORTED616);


                    KW_BY617=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets10051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY617);


                    LPAREN618=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets10053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN618);


                    pushFollow(FOLLOW_columnNameOrderList_in_tableBuckets10057);
                    sortCols=columnNameOrderList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnNameOrderList.add(sortCols.getTree());

                    RPAREN619=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets10059); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN619);


                    }
                    break;

            }


            KW_INTO620=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_tableBuckets10063); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO620);


            num=(Token)match(input,Number,FOLLOW_Number_in_tableBuckets10067); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Number.add(num);


            KW_BUCKETS621=(Token)match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_tableBuckets10069); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BUCKETS.add(KW_BUCKETS621);


            // AST REWRITE
            // elements: num, bucketCols, sortCols
            // token labels: num
            // rule labels: bucketCols, sortCols, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
            RewriteRuleSubtreeStream stream_bucketCols=new RewriteRuleSubtreeStream(adaptor,"rule bucketCols",bucketCols!=null?bucketCols.tree:null);
            RewriteRuleSubtreeStream stream_sortCols=new RewriteRuleSubtreeStream(adaptor,"rule sortCols",sortCols!=null?sortCols.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1868:5: -> ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num)
            {
                // HiveParser.g:1868:8: ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_ALTERTABLE_BUCKETS, "TOK_ALTERTABLE_BUCKETS")
                , root_1);

                adaptor.addChild(root_1, stream_bucketCols.nextTree());

                // HiveParser.g:1868:46: ( $sortCols)?
                if ( stream_sortCols.hasNext() ) {
                    adaptor.addChild(root_1, stream_sortCols.nextTree());

                }
                stream_sortCols.reset();

                adaptor.addChild(root_1, stream_num.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableBuckets"


    public static class tableImplBuckets_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableImplBuckets"
    // HiveParser.g:1871:1: tableImplBuckets : KW_CLUSTERED KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $num) ;
    public final HiveParser.tableImplBuckets_return tableImplBuckets() throws RecognitionException {
        HiveParser.tableImplBuckets_return retval = new HiveParser.tableImplBuckets_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token num=null;
        Token KW_CLUSTERED622=null;
        Token KW_INTO623=null;
        Token KW_BUCKETS624=null;

        ASTNode num_tree=null;
        ASTNode KW_CLUSTERED622_tree=null;
        ASTNode KW_INTO623_tree=null;
        ASTNode KW_BUCKETS624_tree=null;
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");
        RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");

         pushMsg("implicit table buckets specification", state); 
        try {
            // HiveParser.g:1874:5: ( KW_CLUSTERED KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $num) )
            // HiveParser.g:1875:7: KW_CLUSTERED KW_INTO num= Number KW_BUCKETS
            {
            KW_CLUSTERED622=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_tableImplBuckets10122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CLUSTERED.add(KW_CLUSTERED622);


            KW_INTO623=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_tableImplBuckets10124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO623);


            num=(Token)match(input,Number,FOLLOW_Number_in_tableImplBuckets10128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Number.add(num);


            KW_BUCKETS624=(Token)match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_tableImplBuckets10130); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BUCKETS.add(KW_BUCKETS624);


            // AST REWRITE
            // elements: num
            // token labels: num
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1876:5: -> ^( TOK_ALTERTABLE_BUCKETS $num)
            {
                // HiveParser.g:1876:8: ^( TOK_ALTERTABLE_BUCKETS $num)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_ALTERTABLE_BUCKETS, "TOK_ALTERTABLE_BUCKETS")
                , root_1);

                adaptor.addChild(root_1, stream_num.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableImplBuckets"


    public static class tableSkewed_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableSkewed"
    // HiveParser.g:1879:1: tableSkewed : KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( ( storedAsDirs )=> storedAsDirs )? -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? ) ;
    public final HiveParser.tableSkewed_return tableSkewed() throws RecognitionException {
        HiveParser.tableSkewed_return retval = new HiveParser.tableSkewed_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_SKEWED625=null;
        Token KW_BY626=null;
        Token LPAREN627=null;
        Token RPAREN628=null;
        Token KW_ON629=null;
        Token LPAREN630=null;
        Token RPAREN631=null;
        HiveParser.columnNameList_return skewedCols =null;

        HiveParser.skewedValueElement_return skewedValues =null;

        HiveParser.storedAsDirs_return storedAsDirs632 =null;


        ASTNode KW_SKEWED625_tree=null;
        ASTNode KW_BY626_tree=null;
        ASTNode LPAREN627_tree=null;
        ASTNode RPAREN628_tree=null;
        ASTNode KW_ON629_tree=null;
        ASTNode LPAREN630_tree=null;
        ASTNode RPAREN631_tree=null;
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_skewedValueElement=new RewriteRuleSubtreeStream(adaptor,"rule skewedValueElement");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_storedAsDirs=new RewriteRuleSubtreeStream(adaptor,"rule storedAsDirs");
         pushMsg("table skewed specification", state); 
        try {
            // HiveParser.g:1882:5: ( KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( ( storedAsDirs )=> storedAsDirs )? -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? ) )
            // HiveParser.g:1883:6: KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( ( storedAsDirs )=> storedAsDirs )?
            {
            KW_SKEWED625=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_tableSkewed10175); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SKEWED.add(KW_SKEWED625);


            KW_BY626=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableSkewed10177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY626);


            LPAREN627=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableSkewed10179); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN627);


            pushFollow(FOLLOW_columnNameList_in_tableSkewed10183);
            skewedCols=columnNameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameList.add(skewedCols.getTree());

            RPAREN628=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableSkewed10185); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN628);


            KW_ON629=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_tableSkewed10187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON629);


            LPAREN630=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableSkewed10189); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN630);


            // HiveParser.g:1883:75: (skewedValues= skewedValueElement )
            // HiveParser.g:1883:76: skewedValues= skewedValueElement
            {
            pushFollow(FOLLOW_skewedValueElement_in_tableSkewed10194);
            skewedValues=skewedValueElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_skewedValueElement.add(skewedValues.getTree());

            }


            RPAREN631=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableSkewed10197); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN631);


            // HiveParser.g:1883:116: ( ( storedAsDirs )=> storedAsDirs )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==KW_STORED) ) {
                int LA187_1 = input.LA(2);

                if ( (LA187_1==KW_AS) ) {
                    int LA187_7 = input.LA(3);

                    if ( (LA187_7==KW_DIRECTORIES) ) {
                        int LA187_9 = input.LA(4);

                        if ( (synpred19_HiveParser()) ) {
                            alt187=1;
                        }
                    }
                }
            }
            switch (alt187) {
                case 1 :
                    // HiveParser.g:1883:117: ( storedAsDirs )=> storedAsDirs
                    {
                    pushFollow(FOLLOW_storedAsDirs_in_tableSkewed10206);
                    storedAsDirs632=storedAsDirs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_storedAsDirs.add(storedAsDirs632.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: storedAsDirs, skewedValues, skewedCols
            // token labels: 
            // rule labels: skewedCols, skewedValues, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_skewedCols=new RewriteRuleSubtreeStream(adaptor,"rule skewedCols",skewedCols!=null?skewedCols.tree:null);
            RewriteRuleSubtreeStream stream_skewedValues=new RewriteRuleSubtreeStream(adaptor,"rule skewedValues",skewedValues!=null?skewedValues.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1884:5: -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? )
            {
                // HiveParser.g:1884:8: ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABLESKEWED, "TOK_TABLESKEWED")
                , root_1);

                adaptor.addChild(root_1, stream_skewedCols.nextTree());

                adaptor.addChild(root_1, stream_skewedValues.nextTree());

                // HiveParser.g:1884:52: ( storedAsDirs )?
                if ( stream_storedAsDirs.hasNext() ) {
                    adaptor.addChild(root_1, stream_storedAsDirs.nextTree());

                }
                stream_storedAsDirs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableSkewed"


    public static class rowFormat_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rowFormat"
    // HiveParser.g:1887:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );
    public final HiveParser.rowFormat_return rowFormat() throws RecognitionException {
        HiveParser.rowFormat_return retval = new HiveParser.rowFormat_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.rowFormatSerde_return rowFormatSerde633 =null;

        HiveParser.rowFormatDelimited_return rowFormatDelimited634 =null;


        RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
        RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");
         pushMsg("serde specification", state); 
        try {
            // HiveParser.g:1890:5: ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) )
            int alt188=3;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==KW_ROW) ) {
                int LA188_1 = input.LA(2);

                if ( (LA188_1==KW_FORMAT) ) {
                    int LA188_28 = input.LA(3);

                    if ( (LA188_28==KW_SERDE) ) {
                        alt188=1;
                    }
                    else if ( (LA188_28==KW_DELIMITED) ) {
                        alt188=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 188, 28, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 188, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA188_0==EOF||LA188_0==COMMA||LA188_0==KW_CLUSTER||LA188_0==KW_DISTRIBUTE||LA188_0==KW_EXCEPT||LA188_0==KW_FROM||LA188_0==KW_GROUP||LA188_0==KW_HAVING||LA188_0==KW_INSERT||LA188_0==KW_INTERSECT||LA188_0==KW_LATERAL||LA188_0==KW_LIMIT||LA188_0==KW_MAP||LA188_0==KW_MINUS||LA188_0==KW_ORDER||LA188_0==KW_QUALIFY||(LA188_0 >= KW_RECORDREADER && LA188_0 <= KW_REDUCE)||LA188_0==KW_SELECT||LA188_0==KW_SORT||LA188_0==KW_UNION||LA188_0==KW_USING||LA188_0==KW_WHERE||LA188_0==KW_WINDOW||LA188_0==RPAREN) ) {
                alt188=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;

            }
            switch (alt188) {
                case 1 :
                    // HiveParser.g:1890:7: rowFormatSerde
                    {
                    pushFollow(FOLLOW_rowFormatSerde_in_rowFormat10254);
                    rowFormatSerde633=rowFormatSerde();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowFormatSerde.add(rowFormatSerde633.getTree());

                    // AST REWRITE
                    // elements: rowFormatSerde
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1890:22: -> ^( TOK_SERDE rowFormatSerde )
                    {
                        // HiveParser.g:1890:25: ^( TOK_SERDE rowFormatSerde )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SERDE, "TOK_SERDE")
                        , root_1);

                        adaptor.addChild(root_1, stream_rowFormatSerde.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1891:7: rowFormatDelimited
                    {
                    pushFollow(FOLLOW_rowFormatDelimited_in_rowFormat10270);
                    rowFormatDelimited634=rowFormatDelimited();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowFormatDelimited.add(rowFormatDelimited634.getTree());

                    // AST REWRITE
                    // elements: rowFormatDelimited
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1891:26: -> ^( TOK_SERDE rowFormatDelimited )
                    {
                        // HiveParser.g:1891:29: ^( TOK_SERDE rowFormatDelimited )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SERDE, "TOK_SERDE")
                        , root_1);

                        adaptor.addChild(root_1, stream_rowFormatDelimited.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:1892:9: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1892:9: -> ^( TOK_SERDE )
                    {
                        // HiveParser.g:1892:12: ^( TOK_SERDE )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_SERDE, "TOK_SERDE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rowFormat"


    public static class recordReader_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "recordReader"
    // HiveParser.g:1895:1: recordReader : ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) );
    public final HiveParser.recordReader_return recordReader() throws RecognitionException {
        HiveParser.recordReader_return retval = new HiveParser.recordReader_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_RECORDREADER635=null;
        Token StringLiteral636=null;

        ASTNode KW_RECORDREADER635_tree=null;
        ASTNode StringLiteral636_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_RECORDREADER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDREADER");

         pushMsg("record reader specification", state); 
        try {
            // HiveParser.g:1898:5: ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) )
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==KW_RECORDREADER) ) {
                alt189=1;
            }
            else if ( (LA189_0==EOF||LA189_0==COMMA||LA189_0==KW_CLUSTER||LA189_0==KW_DISTRIBUTE||LA189_0==KW_EXCEPT||LA189_0==KW_FROM||LA189_0==KW_GROUP||LA189_0==KW_HAVING||LA189_0==KW_INSERT||LA189_0==KW_INTERSECT||LA189_0==KW_LATERAL||LA189_0==KW_LIMIT||LA189_0==KW_MAP||LA189_0==KW_MINUS||LA189_0==KW_ORDER||LA189_0==KW_QUALIFY||LA189_0==KW_REDUCE||LA189_0==KW_SELECT||LA189_0==KW_SORT||LA189_0==KW_UNION||LA189_0==KW_WHERE||LA189_0==KW_WINDOW||LA189_0==RPAREN) ) {
                alt189=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;

            }
            switch (alt189) {
                case 1 :
                    // HiveParser.g:1898:7: KW_RECORDREADER StringLiteral
                    {
                    KW_RECORDREADER635=(Token)match(input,KW_RECORDREADER,FOLLOW_KW_RECORDREADER_in_recordReader10319); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_RECORDREADER.add(KW_RECORDREADER635);


                    StringLiteral636=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_recordReader10321); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral636);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1898:37: -> ^( TOK_RECORDREADER StringLiteral )
                    {
                        // HiveParser.g:1898:40: ^( TOK_RECORDREADER StringLiteral )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_StringLiteral.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1899:9: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1899:9: -> ^( TOK_RECORDREADER )
                    {
                        // HiveParser.g:1899:12: ^( TOK_RECORDREADER )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "recordReader"


    public static class recordWriter_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "recordWriter"
    // HiveParser.g:1902:1: recordWriter : ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) );
    public final HiveParser.recordWriter_return recordWriter() throws RecognitionException {
        HiveParser.recordWriter_return retval = new HiveParser.recordWriter_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_RECORDWRITER637=null;
        Token StringLiteral638=null;

        ASTNode KW_RECORDWRITER637_tree=null;
        ASTNode StringLiteral638_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_RECORDWRITER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDWRITER");

         pushMsg("record writer specification", state); 
        try {
            // HiveParser.g:1905:5: ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) )
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==KW_RECORDWRITER) ) {
                alt190=1;
            }
            else if ( (LA190_0==KW_USING) ) {
                alt190=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;

            }
            switch (alt190) {
                case 1 :
                    // HiveParser.g:1905:7: KW_RECORDWRITER StringLiteral
                    {
                    KW_RECORDWRITER637=(Token)match(input,KW_RECORDWRITER,FOLLOW_KW_RECORDWRITER_in_recordWriter10370); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_RECORDWRITER.add(KW_RECORDWRITER637);


                    StringLiteral638=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_recordWriter10372); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral638);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1905:37: -> ^( TOK_RECORDWRITER StringLiteral )
                    {
                        // HiveParser.g:1905:40: ^( TOK_RECORDWRITER StringLiteral )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_StringLiteral.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1906:9: 
                    {
                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1906:9: -> ^( TOK_RECORDWRITER )
                    {
                        // HiveParser.g:1906:12: ^( TOK_RECORDWRITER )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "recordWriter"


    public static class rowFormatSerde_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rowFormatSerde"
    // HiveParser.g:1909:1: rowFormatSerde : KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) ;
    public final HiveParser.rowFormatSerde_return rowFormatSerde() throws RecognitionException {
        HiveParser.rowFormatSerde_return retval = new HiveParser.rowFormatSerde_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token name=null;
        Token KW_ROW639=null;
        Token KW_FORMAT640=null;
        Token KW_SERDE641=null;
        Token KW_WITH642=null;
        Token KW_SERDEPROPERTIES643=null;
        HiveParser.tableProperties_return serdeprops =null;


        ASTNode name_tree=null;
        ASTNode KW_ROW639_tree=null;
        ASTNode KW_FORMAT640_tree=null;
        ASTNode KW_SERDE641_tree=null;
        ASTNode KW_WITH642_tree=null;
        ASTNode KW_SERDEPROPERTIES643_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
        RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         pushMsg("serde format specification", state); 
        try {
            // HiveParser.g:1912:5: ( KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) )
            // HiveParser.g:1912:7: KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
            {
            KW_ROW639=(Token)match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatSerde10421); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROW.add(KW_ROW639);


            KW_FORMAT640=(Token)match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatSerde10423); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FORMAT.add(KW_FORMAT640);


            KW_SERDE641=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_rowFormatSerde10425); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SERDE.add(KW_SERDE641);


            name=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_rowFormatSerde10429); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(name);


            // HiveParser.g:1912:52: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==KW_WITH) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // HiveParser.g:1912:53: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
                    {
                    KW_WITH642=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_rowFormatSerde10432); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH642);


                    KW_SERDEPROPERTIES643=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde10434); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES643);


                    pushFollow(FOLLOW_tableProperties_in_rowFormatSerde10438);
                    serdeprops=tableProperties();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableProperties.add(serdeprops.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: name, serdeprops
            // token labels: name
            // rule labels: serdeprops, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1913:5: -> ^( TOK_SERDENAME $name ( $serdeprops)? )
            {
                // HiveParser.g:1913:8: ^( TOK_SERDENAME $name ( $serdeprops)? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SERDENAME, "TOK_SERDENAME")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextNode());

                // HiveParser.g:1913:31: ( $serdeprops)?
                if ( stream_serdeprops.hasNext() ) {
                    adaptor.addChild(root_1, stream_serdeprops.nextTree());

                }
                stream_serdeprops.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rowFormatSerde"


    public static class rowFormatDelimited_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rowFormatDelimited"
    // HiveParser.g:1916:1: rowFormatDelimited : KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? ) ;
    public final HiveParser.rowFormatDelimited_return rowFormatDelimited() throws RecognitionException {
        HiveParser.rowFormatDelimited_return retval = new HiveParser.rowFormatDelimited_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_ROW644=null;
        Token KW_FORMAT645=null;
        Token KW_DELIMITED646=null;
        HiveParser.tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier647 =null;

        HiveParser.tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier648 =null;

        HiveParser.tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier649 =null;

        HiveParser.tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier650 =null;

        HiveParser.tableRowNullFormat_return tableRowNullFormat651 =null;


        ASTNode KW_ROW644_tree=null;
        ASTNode KW_FORMAT645_tree=null;
        ASTNode KW_DELIMITED646_tree=null;
        RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
        RewriteRuleTokenStream stream_KW_DELIMITED=new RewriteRuleTokenStream(adaptor,"token KW_DELIMITED");
        RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
        RewriteRuleSubtreeStream stream_tableRowNullFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowNullFormat");
        RewriteRuleSubtreeStream stream_tableRowFormatFieldIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatFieldIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatCollItemsIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatCollItemsIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatMapKeysIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatMapKeysIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatLinesIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatLinesIdentifier");
         pushMsg("serde properties specification", state); 
        try {
            // HiveParser.g:1919:5: ( KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? ) )
            // HiveParser.g:1920:7: KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )?
            {
            KW_ROW644=(Token)match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatDelimited10490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROW.add(KW_ROW644);


            KW_FORMAT645=(Token)match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatDelimited10492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FORMAT.add(KW_FORMAT645);


            KW_DELIMITED646=(Token)match(input,KW_DELIMITED,FOLLOW_KW_DELIMITED_in_rowFormatDelimited10494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DELIMITED.add(KW_DELIMITED646);


            // HiveParser.g:1920:37: ( tableRowFormatFieldIdentifier )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==KW_FIELDS) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // HiveParser.g:1920:37: tableRowFormatFieldIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited10496);
                    tableRowFormatFieldIdentifier647=tableRowFormatFieldIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableRowFormatFieldIdentifier.add(tableRowFormatFieldIdentifier647.getTree());

                    }
                    break;

            }


            // HiveParser.g:1920:68: ( tableRowFormatCollItemsIdentifier )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==KW_COLLECTION) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // HiveParser.g:1920:68: tableRowFormatCollItemsIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited10499);
                    tableRowFormatCollItemsIdentifier648=tableRowFormatCollItemsIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableRowFormatCollItemsIdentifier.add(tableRowFormatCollItemsIdentifier648.getTree());

                    }
                    break;

            }


            // HiveParser.g:1920:103: ( tableRowFormatMapKeysIdentifier )?
            int alt194=2;
            alt194 = dfa194.predict(input);
            switch (alt194) {
                case 1 :
                    // HiveParser.g:1920:103: tableRowFormatMapKeysIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited10502);
                    tableRowFormatMapKeysIdentifier649=tableRowFormatMapKeysIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableRowFormatMapKeysIdentifier.add(tableRowFormatMapKeysIdentifier649.getTree());

                    }
                    break;

            }


            // HiveParser.g:1920:136: ( tableRowFormatLinesIdentifier )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==KW_LINES) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // HiveParser.g:1920:136: tableRowFormatLinesIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited10505);
                    tableRowFormatLinesIdentifier650=tableRowFormatLinesIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableRowFormatLinesIdentifier.add(tableRowFormatLinesIdentifier650.getTree());

                    }
                    break;

            }


            // HiveParser.g:1920:167: ( tableRowNullFormat )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==KW_NULL) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // HiveParser.g:1920:167: tableRowNullFormat
                    {
                    pushFollow(FOLLOW_tableRowNullFormat_in_rowFormatDelimited10508);
                    tableRowNullFormat651=tableRowNullFormat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableRowNullFormat.add(tableRowNullFormat651.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableRowFormatFieldIdentifier, tableRowFormatLinesIdentifier, tableRowFormatMapKeysIdentifier, tableRowFormatCollItemsIdentifier, tableRowNullFormat
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1921:5: -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? )
            {
                // HiveParser.g:1921:8: ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SERDEPROPS, "TOK_SERDEPROPS")
                , root_1);

                // HiveParser.g:1921:25: ( tableRowFormatFieldIdentifier )?
                if ( stream_tableRowFormatFieldIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatFieldIdentifier.nextTree());

                }
                stream_tableRowFormatFieldIdentifier.reset();

                // HiveParser.g:1921:56: ( tableRowFormatCollItemsIdentifier )?
                if ( stream_tableRowFormatCollItemsIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatCollItemsIdentifier.nextTree());

                }
                stream_tableRowFormatCollItemsIdentifier.reset();

                // HiveParser.g:1921:91: ( tableRowFormatMapKeysIdentifier )?
                if ( stream_tableRowFormatMapKeysIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatMapKeysIdentifier.nextTree());

                }
                stream_tableRowFormatMapKeysIdentifier.reset();

                // HiveParser.g:1921:124: ( tableRowFormatLinesIdentifier )?
                if ( stream_tableRowFormatLinesIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatLinesIdentifier.nextTree());

                }
                stream_tableRowFormatLinesIdentifier.reset();

                // HiveParser.g:1921:155: ( tableRowNullFormat )?
                if ( stream_tableRowNullFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowNullFormat.nextTree());

                }
                stream_tableRowNullFormat.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rowFormatDelimited"


    public static class tableRowFormat_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowFormat"
    // HiveParser.g:1924:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );
    public final HiveParser.tableRowFormat_return tableRowFormat() throws RecognitionException {
        HiveParser.tableRowFormat_return retval = new HiveParser.tableRowFormat_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.rowFormatDelimited_return rowFormatDelimited652 =null;

        HiveParser.rowFormatSerde_return rowFormatSerde653 =null;


        RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
        RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");
         pushMsg("table row format specification", state); 
        try {
            // HiveParser.g:1927:5: ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) )
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==KW_ROW) ) {
                int LA197_1 = input.LA(2);

                if ( (LA197_1==KW_FORMAT) ) {
                    int LA197_2 = input.LA(3);

                    if ( (LA197_2==KW_DELIMITED) ) {
                        alt197=1;
                    }
                    else if ( (LA197_2==KW_SERDE) ) {
                        alt197=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 197, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 197, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;

            }
            switch (alt197) {
                case 1 :
                    // HiveParser.g:1928:7: rowFormatDelimited
                    {
                    pushFollow(FOLLOW_rowFormatDelimited_in_tableRowFormat10567);
                    rowFormatDelimited652=rowFormatDelimited();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowFormatDelimited.add(rowFormatDelimited652.getTree());

                    // AST REWRITE
                    // elements: rowFormatDelimited
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1929:5: -> ^( TOK_TABLEROWFORMAT rowFormatDelimited )
                    {
                        // HiveParser.g:1929:8: ^( TOK_TABLEROWFORMAT rowFormatDelimited )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_TABLEROWFORMAT, "TOK_TABLEROWFORMAT")
                        , root_1);

                        adaptor.addChild(root_1, stream_rowFormatDelimited.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1930:7: rowFormatSerde
                    {
                    pushFollow(FOLLOW_rowFormatSerde_in_tableRowFormat10587);
                    rowFormatSerde653=rowFormatSerde();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowFormatSerde.add(rowFormatSerde653.getTree());

                    // AST REWRITE
                    // elements: rowFormatSerde
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1931:5: -> ^( TOK_TABLESERIALIZER rowFormatSerde )
                    {
                        // HiveParser.g:1931:8: ^( TOK_TABLESERIALIZER rowFormatSerde )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_TABLESERIALIZER, "TOK_TABLESERIALIZER")
                        , root_1);

                        adaptor.addChild(root_1, stream_rowFormatSerde.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowFormat"


    public static class tablePropertiesPrefixed_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tablePropertiesPrefixed"
    // HiveParser.g:1934:1: tablePropertiesPrefixed : KW_TBLPROPERTIES ! tableProperties ;
    public final HiveParser.tablePropertiesPrefixed_return tablePropertiesPrefixed() throws RecognitionException {
        HiveParser.tablePropertiesPrefixed_return retval = new HiveParser.tablePropertiesPrefixed_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_TBLPROPERTIES654=null;
        HiveParser.tableProperties_return tableProperties655 =null;


        ASTNode KW_TBLPROPERTIES654_tree=null;

         pushMsg("table properties with prefix", state); 
        try {
            // HiveParser.g:1937:5: ( KW_TBLPROPERTIES ! tableProperties )
            // HiveParser.g:1938:9: KW_TBLPROPERTIES ! tableProperties
            {
            root_0 = (ASTNode)adaptor.nil();


            KW_TBLPROPERTIES654=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed10634); if (state.failed) return retval;

            pushFollow(FOLLOW_tableProperties_in_tablePropertiesPrefixed10637);
            tableProperties655=tableProperties();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tableProperties655.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tablePropertiesPrefixed"


    public static class tableProperties_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableProperties"
    // HiveParser.g:1941:1: tableProperties : LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) ;
    public final HiveParser.tableProperties_return tableProperties() throws RecognitionException {
        HiveParser.tableProperties_return retval = new HiveParser.tableProperties_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token LPAREN656=null;
        Token RPAREN658=null;
        HiveParser.tablePropertiesList_return tablePropertiesList657 =null;


        ASTNode LPAREN656_tree=null;
        ASTNode RPAREN658_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_tablePropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesList");
         pushMsg("table properties", state); 
        try {
            // HiveParser.g:1944:5: ( LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) )
            // HiveParser.g:1945:7: LPAREN tablePropertiesList RPAREN
            {
            LPAREN656=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableProperties10670); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN656);


            pushFollow(FOLLOW_tablePropertiesList_in_tableProperties10672);
            tablePropertiesList657=tablePropertiesList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tablePropertiesList.add(tablePropertiesList657.getTree());

            RPAREN658=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableProperties10674); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN658);


            // AST REWRITE
            // elements: tablePropertiesList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1945:41: -> ^( TOK_TABLEPROPERTIES tablePropertiesList )
            {
                // HiveParser.g:1945:44: ^( TOK_TABLEPROPERTIES tablePropertiesList )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABLEPROPERTIES, "TOK_TABLEPROPERTIES")
                , root_1);

                adaptor.addChild(root_1, stream_tablePropertiesList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableProperties"


    public static class tablePropertiesList_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tablePropertiesList"
    // HiveParser.g:1948:1: tablePropertiesList : ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) | keyProperty ( COMMA keyProperty )* -> ^( TOK_TABLEPROPLIST ( keyProperty )+ ) );
    public final HiveParser.tablePropertiesList_return tablePropertiesList() throws RecognitionException {
        HiveParser.tablePropertiesList_return retval = new HiveParser.tablePropertiesList_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA660=null;
        Token COMMA663=null;
        HiveParser.keyValueProperty_return keyValueProperty659 =null;

        HiveParser.keyValueProperty_return keyValueProperty661 =null;

        HiveParser.keyProperty_return keyProperty662 =null;

        HiveParser.keyProperty_return keyProperty664 =null;


        ASTNode COMMA660_tree=null;
        ASTNode COMMA663_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
        RewriteRuleSubtreeStream stream_keyProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyProperty");
         pushMsg("table properties list", state); 
        try {
            // HiveParser.g:1951:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) | keyProperty ( COMMA keyProperty )* -> ^( TOK_TABLEPROPLIST ( keyProperty )+ ) )
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==StringLiteral) ) {
                int LA200_1 = input.LA(2);

                if ( (LA200_1==EQUAL) ) {
                    alt200=1;
                }
                else if ( (LA200_1==COMMA||LA200_1==RPAREN) ) {
                    alt200=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 200, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;

            }
            switch (alt200) {
                case 1 :
                    // HiveParser.g:1952:7: keyValueProperty ( COMMA keyValueProperty )*
                    {
                    pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList10715);
                    keyValueProperty659=keyValueProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty659.getTree());

                    // HiveParser.g:1952:24: ( COMMA keyValueProperty )*
                    loop198:
                    do {
                        int alt198=2;
                        int LA198_0 = input.LA(1);

                        if ( (LA198_0==COMMA) ) {
                            alt198=1;
                        }


                        switch (alt198) {
                    	case 1 :
                    	    // HiveParser.g:1952:25: COMMA keyValueProperty
                    	    {
                    	    COMMA660=(Token)match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList10718); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA660);


                    	    pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList10720);
                    	    keyValueProperty661=keyValueProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty661.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop198;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: keyValueProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1952:50: -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
                    {
                        // HiveParser.g:1952:53: ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST")
                        , root_1);

                        if ( !(stream_keyValueProperty.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_keyValueProperty.hasNext() ) {
                            adaptor.addChild(root_1, stream_keyValueProperty.nextTree());

                        }
                        stream_keyValueProperty.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:1954:7: keyProperty ( COMMA keyProperty )*
                    {
                    pushFollow(FOLLOW_keyProperty_in_tablePropertiesList10745);
                    keyProperty662=keyProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyProperty.add(keyProperty662.getTree());

                    // HiveParser.g:1954:19: ( COMMA keyProperty )*
                    loop199:
                    do {
                        int alt199=2;
                        int LA199_0 = input.LA(1);

                        if ( (LA199_0==COMMA) ) {
                            alt199=1;
                        }


                        switch (alt199) {
                    	case 1 :
                    	    // HiveParser.g:1954:20: COMMA keyProperty
                    	    {
                    	    COMMA663=(Token)match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList10748); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA663);


                    	    pushFollow(FOLLOW_keyProperty_in_tablePropertiesList10750);
                    	    keyProperty664=keyProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_keyProperty.add(keyProperty664.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop199;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: keyProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 1954:40: -> ^( TOK_TABLEPROPLIST ( keyProperty )+ )
                    {
                        // HiveParser.g:1954:43: ^( TOK_TABLEPROPLIST ( keyProperty )+ )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST")
                        , root_1);

                        if ( !(stream_keyProperty.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_keyProperty.hasNext() ) {
                            adaptor.addChild(root_1, stream_keyProperty.nextTree());

                        }
                        stream_keyProperty.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tablePropertiesList"


    public static class keyValueProperty_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyValueProperty"
    // HiveParser.g:1957:1: keyValueProperty : key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) ;
    public final HiveParser.keyValueProperty_return keyValueProperty() throws RecognitionException {
        HiveParser.keyValueProperty_return retval = new HiveParser.keyValueProperty_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token key=null;
        Token value=null;
        Token EQUAL665=null;

        ASTNode key_tree=null;
        ASTNode value_tree=null;
        ASTNode EQUAL665_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");

         pushMsg("specifying key/value property", state); 
        try {
            // HiveParser.g:1960:5: (key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) )
            // HiveParser.g:1961:7: key= StringLiteral EQUAL value= StringLiteral
            {
            key=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty10796); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(key);


            EQUAL665=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_keyValueProperty10798); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL665);


            value=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty10802); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(value);


            // AST REWRITE
            // elements: value, key
            // token labels: value, key
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
            RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1961:51: -> ^( TOK_TABLEPROPERTY $key $value)
            {
                // HiveParser.g:1961:54: ^( TOK_TABLEPROPERTY $key $value)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY")
                , root_1);

                adaptor.addChild(root_1, stream_key.nextNode());

                adaptor.addChild(root_1, stream_value.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyValueProperty"


    public static class keyProperty_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyProperty"
    // HiveParser.g:1964:1: keyProperty : key= StringLiteral -> ^( TOK_TABLEPROPERTY $key TOK_NULL ) ;
    public final HiveParser.keyProperty_return keyProperty() throws RecognitionException {
        HiveParser.keyProperty_return retval = new HiveParser.keyProperty_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token key=null;

        ASTNode key_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");

         pushMsg("specifying key property", state); 
        try {
            // HiveParser.g:1967:5: (key= StringLiteral -> ^( TOK_TABLEPROPERTY $key TOK_NULL ) )
            // HiveParser.g:1968:7: key= StringLiteral
            {
            key=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyProperty10849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(key);


            // AST REWRITE
            // elements: key
            // token labels: key
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1968:25: -> ^( TOK_TABLEPROPERTY $key TOK_NULL )
            {
                // HiveParser.g:1968:28: ^( TOK_TABLEPROPERTY $key TOK_NULL )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY")
                , root_1);

                adaptor.addChild(root_1, stream_key.nextNode());

                adaptor.addChild(root_1, 
                (ASTNode)adaptor.create(TOK_NULL, "TOK_NULL")
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keyProperty"


    public static class tableRowFormatFieldIdentifier_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowFormatFieldIdentifier"
    // HiveParser.g:1971:1: tableRowFormatFieldIdentifier : KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) ;
    public final HiveParser.tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier() throws RecognitionException {
        HiveParser.tableRowFormatFieldIdentifier_return retval = new HiveParser.tableRowFormatFieldIdentifier_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token fldIdnt=null;
        Token fldEscape=null;
        Token KW_FIELDS666=null;
        Token KW_TERMINATED667=null;
        Token KW_BY668=null;
        Token KW_ESCAPED669=null;
        Token KW_BY670=null;

        ASTNode fldIdnt_tree=null;
        ASTNode fldEscape_tree=null;
        ASTNode KW_FIELDS666_tree=null;
        ASTNode KW_TERMINATED667_tree=null;
        ASTNode KW_BY668_tree=null;
        ASTNode KW_ESCAPED669_tree=null;
        ASTNode KW_BY670_tree=null;
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_ESCAPED=new RewriteRuleTokenStream(adaptor,"token KW_ESCAPED");
        RewriteRuleTokenStream stream_KW_FIELDS=new RewriteRuleTokenStream(adaptor,"token KW_FIELDS");

         pushMsg("table row format's field separator", state); 
        try {
            // HiveParser.g:1974:5: ( KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) )
            // HiveParser.g:1975:7: KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
            {
            KW_FIELDS666=(Token)match(input,KW_FIELDS,FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier10893); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FIELDS.add(KW_FIELDS666);


            KW_TERMINATED667=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier10895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED667);


            KW_BY668=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier10897); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY668);


            fldIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier10901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(fldIdnt);


            // HiveParser.g:1975:59: ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==KW_ESCAPED) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // HiveParser.g:1975:60: KW_ESCAPED KW_BY fldEscape= StringLiteral
                    {
                    KW_ESCAPED669=(Token)match(input,KW_ESCAPED,FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier10904); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ESCAPED.add(KW_ESCAPED669);


                    KW_BY670=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier10906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY670);


                    fldEscape=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier10910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(fldEscape);


                    }
                    break;

            }


            // AST REWRITE
            // elements: fldEscape, fldIdnt
            // token labels: fldIdnt, fldEscape
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_fldIdnt=new RewriteRuleTokenStream(adaptor,"token fldIdnt",fldIdnt);
            RewriteRuleTokenStream stream_fldEscape=new RewriteRuleTokenStream(adaptor,"token fldEscape",fldEscape);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1976:5: -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
            {
                // HiveParser.g:1976:8: ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABLEROWFORMATFIELD, "TOK_TABLEROWFORMATFIELD")
                , root_1);

                adaptor.addChild(root_1, stream_fldIdnt.nextNode());

                // HiveParser.g:1976:44: ( $fldEscape)?
                if ( stream_fldEscape.hasNext() ) {
                    adaptor.addChild(root_1, stream_fldEscape.nextNode());

                }
                stream_fldEscape.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowFormatFieldIdentifier"


    public static class tableRowFormatCollItemsIdentifier_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowFormatCollItemsIdentifier"
    // HiveParser.g:1979:1: tableRowFormatCollItemsIdentifier : KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) ;
    public final HiveParser.tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier() throws RecognitionException {
        HiveParser.tableRowFormatCollItemsIdentifier_return retval = new HiveParser.tableRowFormatCollItemsIdentifier_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token collIdnt=null;
        Token KW_COLLECTION671=null;
        Token KW_ITEMS672=null;
        Token KW_TERMINATED673=null;
        Token KW_BY674=null;

        ASTNode collIdnt_tree=null;
        ASTNode KW_COLLECTION671_tree=null;
        ASTNode KW_ITEMS672_tree=null;
        ASTNode KW_TERMINATED673_tree=null;
        ASTNode KW_BY674_tree=null;
        RewriteRuleTokenStream stream_KW_COLLECTION=new RewriteRuleTokenStream(adaptor,"token KW_COLLECTION");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_ITEMS=new RewriteRuleTokenStream(adaptor,"token KW_ITEMS");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");

         pushMsg("table row format's column separator", state); 
        try {
            // HiveParser.g:1982:5: ( KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) )
            // HiveParser.g:1983:7: KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral
            {
            KW_COLLECTION671=(Token)match(input,KW_COLLECTION,FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier10962); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_COLLECTION.add(KW_COLLECTION671);


            KW_ITEMS672=(Token)match(input,KW_ITEMS,FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier10964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ITEMS.add(KW_ITEMS672);


            KW_TERMINATED673=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier10966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED673);


            KW_BY674=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier10968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY674);


            collIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier10972); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(collIdnt);


            // AST REWRITE
            // elements: collIdnt
            // token labels: collIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_collIdnt=new RewriteRuleTokenStream(adaptor,"token collIdnt",collIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1984:5: -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
            {
                // HiveParser.g:1984:8: ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABLEROWFORMATCOLLITEMS, "TOK_TABLEROWFORMATCOLLITEMS")
                , root_1);

                adaptor.addChild(root_1, stream_collIdnt.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowFormatCollItemsIdentifier"


    public static class tableRowFormatMapKeysIdentifier_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowFormatMapKeysIdentifier"
    // HiveParser.g:1987:1: tableRowFormatMapKeysIdentifier : KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) ;
    public final HiveParser.tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier() throws RecognitionException {
        HiveParser.tableRowFormatMapKeysIdentifier_return retval = new HiveParser.tableRowFormatMapKeysIdentifier_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token mapKeysIdnt=null;
        Token KW_MAP675=null;
        Token KW_KEYS676=null;
        Token KW_TERMINATED677=null;
        Token KW_BY678=null;

        ASTNode mapKeysIdnt_tree=null;
        ASTNode KW_MAP675_tree=null;
        ASTNode KW_KEYS676_tree=null;
        ASTNode KW_TERMINATED677_tree=null;
        ASTNode KW_BY678_tree=null;
        RewriteRuleTokenStream stream_KW_KEYS=new RewriteRuleTokenStream(adaptor,"token KW_KEYS");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");

         pushMsg("table row format's map key separator", state); 
        try {
            // HiveParser.g:1990:5: ( KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) )
            // HiveParser.g:1991:7: KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral
            {
            KW_MAP675=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier11018); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MAP.add(KW_MAP675);


            KW_KEYS676=(Token)match(input,KW_KEYS,FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier11020); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_KEYS.add(KW_KEYS676);


            KW_TERMINATED677=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier11022); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED677);


            KW_BY678=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier11024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY678);


            mapKeysIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier11028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(mapKeysIdnt);


            // AST REWRITE
            // elements: mapKeysIdnt
            // token labels: mapKeysIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_mapKeysIdnt=new RewriteRuleTokenStream(adaptor,"token mapKeysIdnt",mapKeysIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 1992:5: -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
            {
                // HiveParser.g:1992:8: ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABLEROWFORMATMAPKEYS, "TOK_TABLEROWFORMATMAPKEYS")
                , root_1);

                adaptor.addChild(root_1, stream_mapKeysIdnt.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowFormatMapKeysIdentifier"


    public static class tableRowFormatLinesIdentifier_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowFormatLinesIdentifier"
    // HiveParser.g:1995:1: tableRowFormatLinesIdentifier : KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) ;
    public final HiveParser.tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier() throws RecognitionException {
        HiveParser.tableRowFormatLinesIdentifier_return retval = new HiveParser.tableRowFormatLinesIdentifier_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token linesIdnt=null;
        Token KW_LINES679=null;
        Token KW_TERMINATED680=null;
        Token KW_BY681=null;

        ASTNode linesIdnt_tree=null;
        ASTNode KW_LINES679_tree=null;
        ASTNode KW_TERMINATED680_tree=null;
        ASTNode KW_BY681_tree=null;
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LINES=new RewriteRuleTokenStream(adaptor,"token KW_LINES");

         pushMsg("table row format's line separator", state); 
        try {
            // HiveParser.g:1998:5: ( KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) )
            // HiveParser.g:1999:7: KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral
            {
            KW_LINES679=(Token)match(input,KW_LINES,FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier11074); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LINES.add(KW_LINES679);


            KW_TERMINATED680=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier11076); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED680);


            KW_BY681=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier11078); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY681);


            linesIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier11082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(linesIdnt);


            // AST REWRITE
            // elements: linesIdnt
            // token labels: linesIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_linesIdnt=new RewriteRuleTokenStream(adaptor,"token linesIdnt",linesIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2000:5: -> ^( TOK_TABLEROWFORMATLINES $linesIdnt)
            {
                // HiveParser.g:2000:8: ^( TOK_TABLEROWFORMATLINES $linesIdnt)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABLEROWFORMATLINES, "TOK_TABLEROWFORMATLINES")
                , root_1);

                adaptor.addChild(root_1, stream_linesIdnt.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowFormatLinesIdentifier"


    public static class tableRowNullFormat_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableRowNullFormat"
    // HiveParser.g:2003:1: tableRowNullFormat : KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATNULL $nullIdnt) ;
    public final HiveParser.tableRowNullFormat_return tableRowNullFormat() throws RecognitionException {
        HiveParser.tableRowNullFormat_return retval = new HiveParser.tableRowNullFormat_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token nullIdnt=null;
        Token KW_NULL682=null;
        Token KW_DEFINED683=null;
        Token KW_AS684=null;

        ASTNode nullIdnt_tree=null;
        ASTNode KW_NULL682_tree=null;
        ASTNode KW_DEFINED683_tree=null;
        ASTNode KW_AS684_tree=null;
        RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_DEFINED=new RewriteRuleTokenStream(adaptor,"token KW_DEFINED");

         pushMsg("table row format's null specifier", state); 
        try {
            // HiveParser.g:2006:5: ( KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATNULL $nullIdnt) )
            // HiveParser.g:2007:7: KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral
            {
            KW_NULL682=(Token)match(input,KW_NULL,FOLLOW_KW_NULL_in_tableRowNullFormat11128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_NULL.add(KW_NULL682);


            KW_DEFINED683=(Token)match(input,KW_DEFINED,FOLLOW_KW_DEFINED_in_tableRowNullFormat11130); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DEFINED.add(KW_DEFINED683);


            KW_AS684=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableRowNullFormat11132); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS684);


            nullIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowNullFormat11136); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(nullIdnt);


            // AST REWRITE
            // elements: nullIdnt
            // token labels: nullIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_nullIdnt=new RewriteRuleTokenStream(adaptor,"token nullIdnt",nullIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2008:5: -> ^( TOK_TABLEROWFORMATNULL $nullIdnt)
            {
                // HiveParser.g:2008:8: ^( TOK_TABLEROWFORMATNULL $nullIdnt)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABLEROWFORMATNULL, "TOK_TABLEROWFORMATNULL")
                , root_1);

                adaptor.addChild(root_1, stream_nullIdnt.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableRowNullFormat"


    public static class tableFileFormat_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableFileFormat"
    // HiveParser.g:2010:1: tableFileFormat : ( ( KW_STORED KW_AS KW_INPUTFORMAT )=> KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? ( KW_STORED KW_AS fileformat= identifier )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ( ^( TOK_FILEFORMAT_GENERIC $fileformat) )? ) | KW_STORED KW_BY genericSpec= identifier ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? ( KW_STORED KW_AS fileformat= identifier )? -> ^( TOK_STORAGEHANDLER $genericSpec ( $serdeprops)? ( ^( TOK_FILEFORMAT_GENERIC $fileformat) )? ) | KW_STORED KW_AS genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
    public final HiveParser.tableFileFormat_return tableFileFormat() throws RecognitionException {
        HiveParser.tableFileFormat_return retval = new HiveParser.tableFileFormat_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token inFmt=null;
        Token outFmt=null;
        Token inDriver=null;
        Token outDriver=null;
        Token storageHandler=null;
        Token KW_STORED685=null;
        Token KW_AS686=null;
        Token KW_INPUTFORMAT687=null;
        Token KW_OUTPUTFORMAT688=null;
        Token KW_INPUTDRIVER689=null;
        Token KW_OUTPUTDRIVER690=null;
        Token KW_STORED691=null;
        Token KW_BY692=null;
        Token KW_WITH693=null;
        Token KW_SERDEPROPERTIES694=null;
        Token KW_STORED695=null;
        Token KW_AS696=null;
        Token KW_STORED697=null;
        Token KW_BY698=null;
        Token KW_WITH699=null;
        Token KW_SERDEPROPERTIES700=null;
        Token KW_STORED701=null;
        Token KW_AS702=null;
        Token KW_STORED703=null;
        Token KW_AS704=null;
        HiveParser.tableProperties_return serdeprops =null;

        HiveParser_IdentifiersParser.identifier_return fileformat =null;

        HiveParser_IdentifiersParser.identifier_return genericSpec =null;


        ASTNode inFmt_tree=null;
        ASTNode outFmt_tree=null;
        ASTNode inDriver_tree=null;
        ASTNode outDriver_tree=null;
        ASTNode storageHandler_tree=null;
        ASTNode KW_STORED685_tree=null;
        ASTNode KW_AS686_tree=null;
        ASTNode KW_INPUTFORMAT687_tree=null;
        ASTNode KW_OUTPUTFORMAT688_tree=null;
        ASTNode KW_INPUTDRIVER689_tree=null;
        ASTNode KW_OUTPUTDRIVER690_tree=null;
        ASTNode KW_STORED691_tree=null;
        ASTNode KW_BY692_tree=null;
        ASTNode KW_WITH693_tree=null;
        ASTNode KW_SERDEPROPERTIES694_tree=null;
        ASTNode KW_STORED695_tree=null;
        ASTNode KW_AS696_tree=null;
        ASTNode KW_STORED697_tree=null;
        ASTNode KW_BY698_tree=null;
        ASTNode KW_WITH699_tree=null;
        ASTNode KW_SERDEPROPERTIES700_tree=null;
        ASTNode KW_STORED701_tree=null;
        ASTNode KW_AS702_tree=null;
        ASTNode KW_STORED703_tree=null;
        ASTNode KW_AS704_tree=null;
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
        RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");
        RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         pushMsg("table file format specification", state); 
        try {
            // HiveParser.g:2013:5: ( ( KW_STORED KW_AS KW_INPUTFORMAT )=> KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? ( KW_STORED KW_AS fileformat= identifier )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ( ^( TOK_FILEFORMAT_GENERIC $fileformat) )? ) | KW_STORED KW_BY genericSpec= identifier ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? ( KW_STORED KW_AS fileformat= identifier )? -> ^( TOK_STORAGEHANDLER $genericSpec ( $serdeprops)? ( ^( TOK_FILEFORMAT_GENERIC $fileformat) )? ) | KW_STORED KW_AS genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
            int alt207=4;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==KW_STORED) ) {
                int LA207_1 = input.LA(2);

                if ( (LA207_1==KW_AS) ) {
                    int LA207_2 = input.LA(3);

                    if ( (LA207_2==KW_INPUTFORMAT) ) {
                        int LA207_4 = input.LA(4);

                        if ( (synpred20_HiveParser()) ) {
                            alt207=1;
                        }
                        else if ( (true) ) {
                            alt207=4;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 207, 4, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA207_2==Identifier||(LA207_2 >= KW_ABORT && LA207_2 <= KW_AFTER)||LA207_2==KW_ALLOC_FRACTION||LA207_2==KW_ANALYZE||LA207_2==KW_ARCHIVE||(LA207_2 >= KW_ASC && LA207_2 <= KW_AT)||(LA207_2 >= KW_AUTOCOMMIT && LA207_2 <= KW_BEFORE)||(LA207_2 >= KW_BRANCH && LA207_2 <= KW_BUCKETS)||(LA207_2 >= KW_CACHE && LA207_2 <= KW_CASCADE)||(LA207_2 >= KW_CBO && LA207_2 <= KW_CHANGE)||LA207_2==KW_CHECK||(LA207_2 >= KW_CLUSTER && LA207_2 <= KW_COLLECTION)||(LA207_2 >= KW_COLUMNS && LA207_2 <= KW_COMMENT)||(LA207_2 >= KW_COMPACT && LA207_2 <= KW_COMPACTIONS)||(LA207_2 >= KW_COMPUTE && LA207_2 <= KW_CONCATENATE)||LA207_2==KW_CONTINUE||LA207_2==KW_COST||LA207_2==KW_CRON||LA207_2==KW_DATA||LA207_2==KW_DATABASES||(LA207_2 >= KW_DATETIME && LA207_2 <= KW_DCPROPERTIES)||LA207_2==KW_DEBUG||(LA207_2 >= KW_DEFAULT && LA207_2 <= KW_DEFINED)||(LA207_2 >= KW_DELIMITED && LA207_2 <= KW_DESC)||(LA207_2 >= KW_DETAIL && LA207_2 <= KW_DISABLE)||(LA207_2 >= KW_DISTRIBUTE && LA207_2 <= KW_DO)||LA207_2==KW_DOW||(LA207_2 >= KW_DUMP && LA207_2 <= KW_ELEM_TYPE)||LA207_2==KW_ENABLE||(LA207_2 >= KW_ENFORCED && LA207_2 <= KW_EVERY)||(LA207_2 >= KW_EXCLUSIVE && LA207_2 <= KW_EXECUTED)||(LA207_2 >= KW_EXPIRE_SNAPSHOTS && LA207_2 <= KW_EXPRESSION)||LA207_2==KW_FAST_FORWARD||(LA207_2 >= KW_FIELDS && LA207_2 <= KW_FIRST)||(LA207_2 >= KW_FORMAT && LA207_2 <= KW_FORMATTED)||LA207_2==KW_FUNCTIONS||(LA207_2 >= KW_HOUR && LA207_2 <= KW_IDXPROPERTIES)||LA207_2==KW_IGNORE||(LA207_2 >= KW_INDEX && LA207_2 <= KW_INDEXES)||(LA207_2 >= KW_INPATH && LA207_2 <= KW_INPUTDRIVER)||(LA207_2 >= KW_ISOLATION && LA207_2 <= KW_JAR)||(LA207_2 >= KW_JOINCOST && LA207_2 <= KW_LAST)||LA207_2==KW_LEVEL||(LA207_2 >= KW_LIMIT && LA207_2 <= KW_LOAD)||(LA207_2 >= KW_LOCATION && LA207_2 <= KW_LONG)||(LA207_2 >= KW_MANAGED && LA207_2 <= KW_MANAGEMENT)||(LA207_2 >= KW_MAPJOIN && LA207_2 <= KW_MATERIALIZED)||LA207_2==KW_METADATA||(LA207_2 >= KW_MINUTE && LA207_2 <= KW_MONTH)||(LA207_2 >= KW_MOVE && LA207_2 <= KW_MSCK)||(LA207_2 >= KW_NORELY && LA207_2 <= KW_NOSCAN)||LA207_2==KW_NOVALIDATE||LA207_2==KW_NULLS||LA207_2==KW_OFFSET||(LA207_2 >= KW_OPERATOR && LA207_2 <= KW_OPTION)||(LA207_2 >= KW_OUTPUTDRIVER && LA207_2 <= KW_OUTPUTFORMAT)||(LA207_2 >= KW_OVERWRITE && LA207_2 <= KW_OWNER)||(LA207_2 >= KW_PARTITIONED && LA207_2 <= KW_PATH)||(LA207_2 >= KW_PLAN && LA207_2 <= KW_POOL)||LA207_2==KW_PRINCIPALS||LA207_2==KW_PURGE||(LA207_2 >= KW_QUARTER && LA207_2 <= KW_QUERY_PARALLELISM)||LA207_2==KW_READ||(LA207_2 >= KW_REBUILD && LA207_2 <= KW_RECORDWRITER)||(LA207_2 >= KW_RELOAD && LA207_2 <= KW_RETENTION)||LA207_2==KW_REWRITE||(LA207_2 >= KW_ROLE && LA207_2 <= KW_ROLES)||(LA207_2 >= KW_SCHEDULED && LA207_2 <= KW_SECOND)||(LA207_2 >= KW_SEMI && LA207_2 <= KW_SERVER)||(LA207_2 >= KW_SETS && LA207_2 <= KW_SKEWED)||(LA207_2 >= KW_SNAPSHOT && LA207_2 <= KW_SNAPSHOTS)||(LA207_2 >= KW_SORT && LA207_2 <= KW_SSL)||(LA207_2 >= KW_STATISTICS && LA207_2 <= KW_SUMMARY)||(LA207_2 >= KW_SYSTEM_TIME && LA207_2 <= KW_SYSTEM_VERSION)||LA207_2==KW_TABLES||(LA207_2 >= KW_TAG && LA207_2 <= KW_TERMINATED)||LA207_2==KW_TINYINT||LA207_2==KW_TOUCH||(LA207_2 >= KW_TRANSACTION && LA207_2 <= KW_TRANSACTIONS)||LA207_2==KW_TRIM||(LA207_2 >= KW_TYPE && LA207_2 <= KW_UNARCHIVE)||LA207_2==KW_UNDO||LA207_2==KW_UNIONTYPE||(LA207_2 >= KW_UNKNOWN && LA207_2 <= KW_UNSIGNED)||(LA207_2 >= KW_URI && LA207_2 <= KW_USE)||(LA207_2 >= KW_UTC && LA207_2 <= KW_VALIDATE)||LA207_2==KW_VALUE_TYPE||(LA207_2 >= KW_VECTORIZATION && LA207_2 <= KW_WEEK)||LA207_2==KW_WHILE||(LA207_2 >= KW_WITHIN && LA207_2 <= KW_ZONE)||LA207_2==KW_BATCH||LA207_2==KW_DAYOFWEEK||LA207_2==KW_HOLD_DDLTIME||LA207_2==KW_NO_DROP||LA207_2==KW_OFFLINE||LA207_2==KW_PROTECTION||LA207_2==KW_READONLY||LA207_2==KW_TIMESTAMPTZ) ) {
                        alt207=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 207, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA207_1==KW_BY) ) {
                    int LA207_3 = input.LA(3);

                    if ( (LA207_3==StringLiteral) ) {
                        alt207=2;
                    }
                    else if ( (LA207_3==Identifier||(LA207_3 >= KW_ABORT && LA207_3 <= KW_AFTER)||LA207_3==KW_ALLOC_FRACTION||LA207_3==KW_ANALYZE||LA207_3==KW_ARCHIVE||(LA207_3 >= KW_ASC && LA207_3 <= KW_AT)||(LA207_3 >= KW_AUTOCOMMIT && LA207_3 <= KW_BEFORE)||(LA207_3 >= KW_BRANCH && LA207_3 <= KW_BUCKETS)||(LA207_3 >= KW_CACHE && LA207_3 <= KW_CASCADE)||(LA207_3 >= KW_CBO && LA207_3 <= KW_CHANGE)||LA207_3==KW_CHECK||(LA207_3 >= KW_CLUSTER && LA207_3 <= KW_COLLECTION)||(LA207_3 >= KW_COLUMNS && LA207_3 <= KW_COMMENT)||(LA207_3 >= KW_COMPACT && LA207_3 <= KW_COMPACTIONS)||(LA207_3 >= KW_COMPUTE && LA207_3 <= KW_CONCATENATE)||LA207_3==KW_CONTINUE||LA207_3==KW_COST||LA207_3==KW_CRON||LA207_3==KW_DATA||LA207_3==KW_DATABASES||(LA207_3 >= KW_DATETIME && LA207_3 <= KW_DCPROPERTIES)||LA207_3==KW_DEBUG||(LA207_3 >= KW_DEFAULT && LA207_3 <= KW_DEFINED)||(LA207_3 >= KW_DELIMITED && LA207_3 <= KW_DESC)||(LA207_3 >= KW_DETAIL && LA207_3 <= KW_DISABLE)||(LA207_3 >= KW_DISTRIBUTE && LA207_3 <= KW_DO)||LA207_3==KW_DOW||(LA207_3 >= KW_DUMP && LA207_3 <= KW_ELEM_TYPE)||LA207_3==KW_ENABLE||(LA207_3 >= KW_ENFORCED && LA207_3 <= KW_EVERY)||(LA207_3 >= KW_EXCLUSIVE && LA207_3 <= KW_EXECUTED)||(LA207_3 >= KW_EXPIRE_SNAPSHOTS && LA207_3 <= KW_EXPRESSION)||LA207_3==KW_FAST_FORWARD||(LA207_3 >= KW_FIELDS && LA207_3 <= KW_FIRST)||(LA207_3 >= KW_FORMAT && LA207_3 <= KW_FORMATTED)||LA207_3==KW_FUNCTIONS||(LA207_3 >= KW_HOUR && LA207_3 <= KW_IDXPROPERTIES)||LA207_3==KW_IGNORE||(LA207_3 >= KW_INDEX && LA207_3 <= KW_INDEXES)||(LA207_3 >= KW_INPATH && LA207_3 <= KW_INPUTFORMAT)||(LA207_3 >= KW_ISOLATION && LA207_3 <= KW_JAR)||(LA207_3 >= KW_JOINCOST && LA207_3 <= KW_LAST)||LA207_3==KW_LEVEL||(LA207_3 >= KW_LIMIT && LA207_3 <= KW_LOAD)||(LA207_3 >= KW_LOCATION && LA207_3 <= KW_LONG)||(LA207_3 >= KW_MANAGED && LA207_3 <= KW_MANAGEMENT)||(LA207_3 >= KW_MAPJOIN && LA207_3 <= KW_MATERIALIZED)||LA207_3==KW_METADATA||(LA207_3 >= KW_MINUTE && LA207_3 <= KW_MONTH)||(LA207_3 >= KW_MOVE && LA207_3 <= KW_MSCK)||(LA207_3 >= KW_NORELY && LA207_3 <= KW_NOSCAN)||LA207_3==KW_NOVALIDATE||LA207_3==KW_NULLS||LA207_3==KW_OFFSET||(LA207_3 >= KW_OPERATOR && LA207_3 <= KW_OPTION)||(LA207_3 >= KW_OUTPUTDRIVER && LA207_3 <= KW_OUTPUTFORMAT)||(LA207_3 >= KW_OVERWRITE && LA207_3 <= KW_OWNER)||(LA207_3 >= KW_PARTITIONED && LA207_3 <= KW_PATH)||(LA207_3 >= KW_PLAN && LA207_3 <= KW_POOL)||LA207_3==KW_PRINCIPALS||LA207_3==KW_PURGE||(LA207_3 >= KW_QUARTER && LA207_3 <= KW_QUERY_PARALLELISM)||LA207_3==KW_READ||(LA207_3 >= KW_REBUILD && LA207_3 <= KW_RECORDWRITER)||(LA207_3 >= KW_RELOAD && LA207_3 <= KW_RETENTION)||LA207_3==KW_REWRITE||(LA207_3 >= KW_ROLE && LA207_3 <= KW_ROLES)||(LA207_3 >= KW_SCHEDULED && LA207_3 <= KW_SECOND)||(LA207_3 >= KW_SEMI && LA207_3 <= KW_SERVER)||(LA207_3 >= KW_SETS && LA207_3 <= KW_SKEWED)||(LA207_3 >= KW_SNAPSHOT && LA207_3 <= KW_SNAPSHOTS)||(LA207_3 >= KW_SORT && LA207_3 <= KW_SSL)||(LA207_3 >= KW_STATISTICS && LA207_3 <= KW_SUMMARY)||(LA207_3 >= KW_SYSTEM_TIME && LA207_3 <= KW_SYSTEM_VERSION)||LA207_3==KW_TABLES||(LA207_3 >= KW_TAG && LA207_3 <= KW_TERMINATED)||LA207_3==KW_TINYINT||LA207_3==KW_TOUCH||(LA207_3 >= KW_TRANSACTION && LA207_3 <= KW_TRANSACTIONS)||LA207_3==KW_TRIM||(LA207_3 >= KW_TYPE && LA207_3 <= KW_UNARCHIVE)||LA207_3==KW_UNDO||LA207_3==KW_UNIONTYPE||(LA207_3 >= KW_UNKNOWN && LA207_3 <= KW_UNSIGNED)||(LA207_3 >= KW_URI && LA207_3 <= KW_USE)||(LA207_3 >= KW_UTC && LA207_3 <= KW_VALIDATE)||LA207_3==KW_VALUE_TYPE||(LA207_3 >= KW_VECTORIZATION && LA207_3 <= KW_WEEK)||LA207_3==KW_WHILE||(LA207_3 >= KW_WITHIN && LA207_3 <= KW_ZONE)||LA207_3==KW_BATCH||LA207_3==KW_DAYOFWEEK||LA207_3==KW_HOLD_DDLTIME||LA207_3==KW_NO_DROP||LA207_3==KW_OFFLINE||LA207_3==KW_PROTECTION||LA207_3==KW_READONLY||LA207_3==KW_TIMESTAMPTZ) ) {
                        alt207=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 207, 3, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 207, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;

            }
            switch (alt207) {
                case 1 :
                    // HiveParser.g:2014:7: ( KW_STORED KW_AS KW_INPUTFORMAT )=> KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    {
                    KW_STORED685=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat11191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED685);


                    KW_AS686=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat11193); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS686);


                    KW_INPUTFORMAT687=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_tableFileFormat11195); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT687);


                    inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat11199); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(inFmt);


                    KW_OUTPUTFORMAT688=(Token)match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat11201); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT688);


                    outFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat11205); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(outFmt);


                    // HiveParser.g:2014:131: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    int alt202=2;
                    int LA202_0 = input.LA(1);

                    if ( (LA202_0==KW_INPUTDRIVER) ) {
                        alt202=1;
                    }
                    switch (alt202) {
                        case 1 :
                            // HiveParser.g:2014:132: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
                            {
                            KW_INPUTDRIVER689=(Token)match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_tableFileFormat11208); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER689);


                            inDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat11212); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_StringLiteral.add(inDriver);


                            KW_OUTPUTDRIVER690=(Token)match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat11214); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER690);


                            outDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat11218); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_StringLiteral.add(outDriver);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: inFmt, outFmt, inDriver, outDriver
                    // token labels: inFmt, inDriver, outDriver, outFmt
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
                    RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
                    RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
                    RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2015:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
                    {
                        // HiveParser.g:2015:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT")
                        , root_1);

                        adaptor.addChild(root_1, stream_inFmt.nextNode());

                        adaptor.addChild(root_1, stream_outFmt.nextNode());

                        // HiveParser.g:2015:48: ( $inDriver)?
                        if ( stream_inDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_inDriver.nextNode());

                        }
                        stream_inDriver.reset();

                        // HiveParser.g:2015:59: ( $outDriver)?
                        if ( stream_outDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_outDriver.nextNode());

                        }
                        stream_outDriver.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2016:9: KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? ( KW_STORED KW_AS fileformat= identifier )?
                    {
                    KW_STORED691=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat11256); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED691);


                    KW_BY692=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableFileFormat11258); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY692);


                    storageHandler=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat11262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(storageHandler);


                    // HiveParser.g:2017:10: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
                    int alt203=2;
                    int LA203_0 = input.LA(1);

                    if ( (LA203_0==KW_WITH) ) {
                        alt203=1;
                    }
                    switch (alt203) {
                        case 1 :
                            // HiveParser.g:2017:11: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
                            {
                            KW_WITH693=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_tableFileFormat11274); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH693);


                            KW_SERDEPROPERTIES694=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat11276); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES694);


                            pushFollow(FOLLOW_tableProperties_in_tableFileFormat11280);
                            serdeprops=tableProperties();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableProperties.add(serdeprops.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2018:10: ( KW_STORED KW_AS fileformat= identifier )?
                    int alt204=2;
                    int LA204_0 = input.LA(1);

                    if ( (LA204_0==KW_STORED) ) {
                        alt204=1;
                    }
                    switch (alt204) {
                        case 1 :
                            // HiveParser.g:2018:11: KW_STORED KW_AS fileformat= identifier
                            {
                            KW_STORED695=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat11294); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED695);


                            KW_AS696=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat11296); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS696);


                            pushFollow(FOLLOW_identifier_in_tableFileFormat11300);
                            fileformat=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier.add(fileformat.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: fileformat, serdeprops, storageHandler
                    // token labels: storageHandler
                    // rule labels: serdeprops, fileformat, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_storageHandler=new RewriteRuleTokenStream(adaptor,"token storageHandler",storageHandler);
                    RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.tree:null);
                    RewriteRuleSubtreeStream stream_fileformat=new RewriteRuleSubtreeStream(adaptor,"rule fileformat",fileformat!=null?fileformat.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2019:7: -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ( ^( TOK_FILEFORMAT_GENERIC $fileformat) )? )
                    {
                        // HiveParser.g:2019:10: ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ( ^( TOK_FILEFORMAT_GENERIC $fileformat) )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_STORAGEHANDLER, "TOK_STORAGEHANDLER")
                        , root_1);

                        adaptor.addChild(root_1, stream_storageHandler.nextNode());

                        // HiveParser.g:2019:48: ( $serdeprops)?
                        if ( stream_serdeprops.hasNext() ) {
                            adaptor.addChild(root_1, stream_serdeprops.nextTree());

                        }
                        stream_serdeprops.reset();

                        // HiveParser.g:2019:60: ( ^( TOK_FILEFORMAT_GENERIC $fileformat) )?
                        if ( stream_fileformat.hasNext() ) {
                            // HiveParser.g:2019:60: ^( TOK_FILEFORMAT_GENERIC $fileformat)
                            {
                            ASTNode root_2 = (ASTNode)adaptor.nil();
                            root_2 = (ASTNode)adaptor.becomeRoot(
                            (ASTNode)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC")
                            , root_2);

                            adaptor.addChild(root_2, stream_fileformat.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_fileformat.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:2020:9: KW_STORED KW_BY genericSpec= identifier ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? ( KW_STORED KW_AS fileformat= identifier )?
                    {
                    KW_STORED697=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat11339); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED697);


                    KW_BY698=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableFileFormat11341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY698);


                    pushFollow(FOLLOW_identifier_in_tableFileFormat11345);
                    genericSpec=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(genericSpec.getTree());

                    // HiveParser.g:2021:10: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
                    int alt205=2;
                    int LA205_0 = input.LA(1);

                    if ( (LA205_0==KW_WITH) ) {
                        alt205=1;
                    }
                    switch (alt205) {
                        case 1 :
                            // HiveParser.g:2021:11: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
                            {
                            KW_WITH699=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_tableFileFormat11357); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH699);


                            KW_SERDEPROPERTIES700=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat11359); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES700);


                            pushFollow(FOLLOW_tableProperties_in_tableFileFormat11363);
                            serdeprops=tableProperties();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableProperties.add(serdeprops.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2022:10: ( KW_STORED KW_AS fileformat= identifier )?
                    int alt206=2;
                    int LA206_0 = input.LA(1);

                    if ( (LA206_0==KW_STORED) ) {
                        alt206=1;
                    }
                    switch (alt206) {
                        case 1 :
                            // HiveParser.g:2022:11: KW_STORED KW_AS fileformat= identifier
                            {
                            KW_STORED701=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat11377); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED701);


                            KW_AS702=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat11379); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS702);


                            pushFollow(FOLLOW_identifier_in_tableFileFormat11383);
                            fileformat=identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_identifier.add(fileformat.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: serdeprops, fileformat, genericSpec
                    // token labels: 
                    // rule labels: serdeprops, fileformat, genericSpec, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.tree:null);
                    RewriteRuleSubtreeStream stream_fileformat=new RewriteRuleSubtreeStream(adaptor,"rule fileformat",fileformat!=null?fileformat.tree:null);
                    RewriteRuleSubtreeStream stream_genericSpec=new RewriteRuleSubtreeStream(adaptor,"rule genericSpec",genericSpec!=null?genericSpec.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2023:7: -> ^( TOK_STORAGEHANDLER $genericSpec ( $serdeprops)? ( ^( TOK_FILEFORMAT_GENERIC $fileformat) )? )
                    {
                        // HiveParser.g:2023:10: ^( TOK_STORAGEHANDLER $genericSpec ( $serdeprops)? ( ^( TOK_FILEFORMAT_GENERIC $fileformat) )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_STORAGEHANDLER, "TOK_STORAGEHANDLER")
                        , root_1);

                        adaptor.addChild(root_1, stream_genericSpec.nextTree());

                        // HiveParser.g:2023:45: ( $serdeprops)?
                        if ( stream_serdeprops.hasNext() ) {
                            adaptor.addChild(root_1, stream_serdeprops.nextTree());

                        }
                        stream_serdeprops.reset();

                        // HiveParser.g:2023:57: ( ^( TOK_FILEFORMAT_GENERIC $fileformat) )?
                        if ( stream_fileformat.hasNext() ) {
                            // HiveParser.g:2023:57: ^( TOK_FILEFORMAT_GENERIC $fileformat)
                            {
                            ASTNode root_2 = (ASTNode)adaptor.nil();
                            root_2 = (ASTNode)adaptor.becomeRoot(
                            (ASTNode)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC")
                            , root_2);

                            adaptor.addChild(root_2, stream_fileformat.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_fileformat.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:2024:9: KW_STORED KW_AS genericSpec= identifier
                    {
                    KW_STORED703=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat11422); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED703);


                    KW_AS704=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat11424); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS704);


                    pushFollow(FOLLOW_identifier_in_tableFileFormat11428);
                    genericSpec=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(genericSpec.getTree());

                    // AST REWRITE
                    // elements: genericSpec
                    // token labels: 
                    // rule labels: genericSpec, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_genericSpec=new RewriteRuleSubtreeStream(adaptor,"rule genericSpec",genericSpec!=null?genericSpec.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2025:7: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                    {
                        // HiveParser.g:2025:10: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC")
                        , root_1);

                        adaptor.addChild(root_1, stream_genericSpec.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableFileFormat"


    public static class tableLocation_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableLocation"
    // HiveParser.g:2028:1: tableLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) ;
    public final HiveParser.tableLocation_return tableLocation() throws RecognitionException {
        HiveParser.tableLocation_return retval = new HiveParser.tableLocation_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token locn=null;
        Token KW_LOCATION705=null;

        ASTNode locn_tree=null;
        ASTNode KW_LOCATION705_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

         pushMsg("table location specification", state); 
        try {
            // HiveParser.g:2031:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) )
            // HiveParser.g:2032:7: KW_LOCATION locn= StringLiteral
            {
            KW_LOCATION705=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_tableLocation11476); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION705);


            locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableLocation11480); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2032:38: -> ^( TOK_TABLELOCATION $locn)
            {
                // HiveParser.g:2032:41: ^( TOK_TABLELOCATION $locn)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABLELOCATION, "TOK_TABLELOCATION")
                , root_1);

                adaptor.addChild(root_1, stream_locn.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableLocation"


    public static class columnNameTypeList_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameTypeList"
    // HiveParser.g:2035:1: columnNameTypeList : columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) ;
    public final HiveParser.columnNameTypeList_return columnNameTypeList() throws RecognitionException {
        HiveParser.columnNameTypeList_return retval = new HiveParser.columnNameTypeList_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA707=null;
        HiveParser.columnNameType_return columnNameType706 =null;

        HiveParser.columnNameType_return columnNameType708 =null;


        ASTNode COMMA707_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameType");
         pushMsg("column name type list", state); 
        try {
            // HiveParser.g:2038:5: ( columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) )
            // HiveParser.g:2038:7: columnNameType ( COMMA columnNameType )*
            {
            pushFollow(FOLLOW_columnNameType_in_columnNameTypeList11516);
            columnNameType706=columnNameType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameType.add(columnNameType706.getTree());

            // HiveParser.g:2038:22: ( COMMA columnNameType )*
            loop208:
            do {
                int alt208=2;
                int LA208_0 = input.LA(1);

                if ( (LA208_0==COMMA) ) {
                    int LA208_21 = input.LA(2);

                    if ( (LA208_21==Identifier||(LA208_21 >= KW_ABORT && LA208_21 <= KW_AFTER)||LA208_21==KW_ALLOC_FRACTION||LA208_21==KW_ANALYZE||LA208_21==KW_ARCHIVE||(LA208_21 >= KW_ASC && LA208_21 <= KW_AT)||(LA208_21 >= KW_AUTOCOMMIT && LA208_21 <= KW_BEFORE)||(LA208_21 >= KW_BRANCH && LA208_21 <= KW_BUCKETS)||(LA208_21 >= KW_CACHE && LA208_21 <= KW_CASCADE)||(LA208_21 >= KW_CBO && LA208_21 <= KW_CHANGE)||LA208_21==KW_CHECK||(LA208_21 >= KW_CLUSTER && LA208_21 <= KW_COLLECTION)||(LA208_21 >= KW_COLUMNS && LA208_21 <= KW_COMMENT)||(LA208_21 >= KW_COMPACT && LA208_21 <= KW_COMPACTIONS)||(LA208_21 >= KW_COMPUTE && LA208_21 <= KW_CONCATENATE)||LA208_21==KW_CONTINUE||LA208_21==KW_COST||LA208_21==KW_CRON||LA208_21==KW_DATA||LA208_21==KW_DATABASES||(LA208_21 >= KW_DATETIME && LA208_21 <= KW_DCPROPERTIES)||LA208_21==KW_DEBUG||(LA208_21 >= KW_DEFAULT && LA208_21 <= KW_DEFINED)||(LA208_21 >= KW_DELIMITED && LA208_21 <= KW_DESC)||(LA208_21 >= KW_DETAIL && LA208_21 <= KW_DISABLE)||(LA208_21 >= KW_DISTRIBUTE && LA208_21 <= KW_DO)||LA208_21==KW_DOW||(LA208_21 >= KW_DUMP && LA208_21 <= KW_ELEM_TYPE)||LA208_21==KW_ENABLE||(LA208_21 >= KW_ENFORCED && LA208_21 <= KW_EVERY)||(LA208_21 >= KW_EXCLUSIVE && LA208_21 <= KW_EXECUTED)||(LA208_21 >= KW_EXPIRE_SNAPSHOTS && LA208_21 <= KW_EXPRESSION)||LA208_21==KW_FAST_FORWARD||(LA208_21 >= KW_FIELDS && LA208_21 <= KW_FIRST)||(LA208_21 >= KW_FORMAT && LA208_21 <= KW_FORMATTED)||LA208_21==KW_FUNCTIONS||(LA208_21 >= KW_HOUR && LA208_21 <= KW_IDXPROPERTIES)||LA208_21==KW_IGNORE||(LA208_21 >= KW_INDEX && LA208_21 <= KW_INDEXES)||(LA208_21 >= KW_INPATH && LA208_21 <= KW_INPUTFORMAT)||(LA208_21 >= KW_ISOLATION && LA208_21 <= KW_JAR)||(LA208_21 >= KW_JOINCOST && LA208_21 <= KW_LAST)||LA208_21==KW_LEVEL||(LA208_21 >= KW_LIMIT && LA208_21 <= KW_LOAD)||(LA208_21 >= KW_LOCATION && LA208_21 <= KW_LONG)||(LA208_21 >= KW_MANAGED && LA208_21 <= KW_MANAGEMENT)||(LA208_21 >= KW_MAPJOIN && LA208_21 <= KW_MATERIALIZED)||LA208_21==KW_METADATA||(LA208_21 >= KW_MINUTE && LA208_21 <= KW_MONTH)||(LA208_21 >= KW_MOVE && LA208_21 <= KW_MSCK)||(LA208_21 >= KW_NORELY && LA208_21 <= KW_NOSCAN)||LA208_21==KW_NOVALIDATE||LA208_21==KW_NULLS||LA208_21==KW_OFFSET||(LA208_21 >= KW_OPERATOR && LA208_21 <= KW_OPTION)||(LA208_21 >= KW_OUTPUTDRIVER && LA208_21 <= KW_OUTPUTFORMAT)||(LA208_21 >= KW_OVERWRITE && LA208_21 <= KW_OWNER)||(LA208_21 >= KW_PARTITIONED && LA208_21 <= KW_PATH)||(LA208_21 >= KW_PLAN && LA208_21 <= KW_POOL)||LA208_21==KW_PRINCIPALS||LA208_21==KW_PURGE||(LA208_21 >= KW_QUARTER && LA208_21 <= KW_QUERY_PARALLELISM)||LA208_21==KW_READ||(LA208_21 >= KW_REBUILD && LA208_21 <= KW_RECORDWRITER)||(LA208_21 >= KW_RELOAD && LA208_21 <= KW_RETENTION)||LA208_21==KW_REWRITE||(LA208_21 >= KW_ROLE && LA208_21 <= KW_ROLES)||(LA208_21 >= KW_SCHEDULED && LA208_21 <= KW_SECOND)||(LA208_21 >= KW_SEMI && LA208_21 <= KW_SERVER)||(LA208_21 >= KW_SETS && LA208_21 <= KW_SKEWED)||(LA208_21 >= KW_SNAPSHOT && LA208_21 <= KW_SNAPSHOTS)||(LA208_21 >= KW_SORT && LA208_21 <= KW_SSL)||(LA208_21 >= KW_STATISTICS && LA208_21 <= KW_SUMMARY)||(LA208_21 >= KW_SYSTEM_TIME && LA208_21 <= KW_SYSTEM_VERSION)||LA208_21==KW_TABLES||(LA208_21 >= KW_TAG && LA208_21 <= KW_TERMINATED)||LA208_21==KW_TINYINT||LA208_21==KW_TOUCH||(LA208_21 >= KW_TRANSACTION && LA208_21 <= KW_TRANSACTIONS)||LA208_21==KW_TRIM||(LA208_21 >= KW_TYPE && LA208_21 <= KW_UNARCHIVE)||LA208_21==KW_UNDO||LA208_21==KW_UNIONTYPE||(LA208_21 >= KW_UNKNOWN && LA208_21 <= KW_UNSIGNED)||(LA208_21 >= KW_URI && LA208_21 <= KW_USE)||(LA208_21 >= KW_UTC && LA208_21 <= KW_VALIDATE)||LA208_21==KW_VALUE_TYPE||(LA208_21 >= KW_VECTORIZATION && LA208_21 <= KW_WEEK)||LA208_21==KW_WHILE||(LA208_21 >= KW_WITHIN && LA208_21 <= KW_ZONE)||LA208_21==KW_BATCH||LA208_21==KW_DAYOFWEEK||LA208_21==KW_HOLD_DDLTIME||LA208_21==KW_NO_DROP||LA208_21==KW_OFFLINE||LA208_21==KW_PROTECTION||LA208_21==KW_READONLY||LA208_21==KW_TIMESTAMPTZ) ) {
                        alt208=1;
                    }


                }


                switch (alt208) {
            	case 1 :
            	    // HiveParser.g:2038:23: COMMA columnNameType
            	    {
            	    COMMA707=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameTypeList11519); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA707);


            	    pushFollow(FOLLOW_columnNameType_in_columnNameTypeList11521);
            	    columnNameType708=columnNameType();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_columnNameType.add(columnNameType708.getTree());

            	    }
            	    break;

            	default :
            	    break loop208;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2038:46: -> ^( TOK_TABCOLLIST ( columnNameType )+ )
            {
                // HiveParser.g:2038:49: ^( TOK_TABCOLLIST ( columnNameType )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST")
                , root_1);

                if ( !(stream_columnNameType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameType.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameType.nextTree());

                }
                stream_columnNameType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameTypeList"


    public static class columnNameTypeOrConstraintList_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameTypeOrConstraintList"
    // HiveParser.g:2041:1: columnNameTypeOrConstraintList : columnNameTypeOrConstraint ( COMMA columnNameTypeOrConstraint )* -> ^( TOK_TABCOLLIST ( columnNameTypeOrConstraint )+ ) ;
    public final HiveParser.columnNameTypeOrConstraintList_return columnNameTypeOrConstraintList() throws RecognitionException {
        HiveParser.columnNameTypeOrConstraintList_return retval = new HiveParser.columnNameTypeOrConstraintList_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA710=null;
        HiveParser.columnNameTypeOrConstraint_return columnNameTypeOrConstraint709 =null;

        HiveParser.columnNameTypeOrConstraint_return columnNameTypeOrConstraint711 =null;


        ASTNode COMMA710_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameTypeOrConstraint=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeOrConstraint");
         pushMsg("column name type and constraints list", state); 
        try {
            // HiveParser.g:2044:5: ( columnNameTypeOrConstraint ( COMMA columnNameTypeOrConstraint )* -> ^( TOK_TABCOLLIST ( columnNameTypeOrConstraint )+ ) )
            // HiveParser.g:2044:7: columnNameTypeOrConstraint ( COMMA columnNameTypeOrConstraint )*
            {
            pushFollow(FOLLOW_columnNameTypeOrConstraint_in_columnNameTypeOrConstraintList11559);
            columnNameTypeOrConstraint709=columnNameTypeOrConstraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameTypeOrConstraint.add(columnNameTypeOrConstraint709.getTree());

            // HiveParser.g:2044:34: ( COMMA columnNameTypeOrConstraint )*
            loop209:
            do {
                int alt209=2;
                int LA209_0 = input.LA(1);

                if ( (LA209_0==COMMA) ) {
                    alt209=1;
                }


                switch (alt209) {
            	case 1 :
            	    // HiveParser.g:2044:35: COMMA columnNameTypeOrConstraint
            	    {
            	    COMMA710=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameTypeOrConstraintList11562); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA710);


            	    pushFollow(FOLLOW_columnNameTypeOrConstraint_in_columnNameTypeOrConstraintList11564);
            	    columnNameTypeOrConstraint711=columnNameTypeOrConstraint();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_columnNameTypeOrConstraint.add(columnNameTypeOrConstraint711.getTree());

            	    }
            	    break;

            	default :
            	    break loop209;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameTypeOrConstraint
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2044:70: -> ^( TOK_TABCOLLIST ( columnNameTypeOrConstraint )+ )
            {
                // HiveParser.g:2044:73: ^( TOK_TABCOLLIST ( columnNameTypeOrConstraint )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST")
                , root_1);

                if ( !(stream_columnNameTypeOrConstraint.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameTypeOrConstraint.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeOrConstraint.nextTree());

                }
                stream_columnNameTypeOrConstraint.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameTypeOrConstraintList"


    public static class columnNameColonTypeList_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameColonTypeList"
    // HiveParser.g:2047:1: columnNameColonTypeList : columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) ;
    public final HiveParser.columnNameColonTypeList_return columnNameColonTypeList() throws RecognitionException {
        HiveParser.columnNameColonTypeList_return retval = new HiveParser.columnNameColonTypeList_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA713=null;
        HiveParser.columnNameColonType_return columnNameColonType712 =null;

        HiveParser.columnNameColonType_return columnNameColonType714 =null;


        ASTNode COMMA713_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameColonType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonType");
         pushMsg("column name type list", state); 
        try {
            // HiveParser.g:2050:5: ( columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) )
            // HiveParser.g:2050:7: columnNameColonType ( COMMA columnNameColonType )*
            {
            pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList11602);
            columnNameColonType712=columnNameColonType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameColonType.add(columnNameColonType712.getTree());

            // HiveParser.g:2050:27: ( COMMA columnNameColonType )*
            loop210:
            do {
                int alt210=2;
                int LA210_0 = input.LA(1);

                if ( (LA210_0==COMMA) ) {
                    alt210=1;
                }


                switch (alt210) {
            	case 1 :
            	    // HiveParser.g:2050:28: COMMA columnNameColonType
            	    {
            	    COMMA713=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameColonTypeList11605); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA713);


            	    pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList11607);
            	    columnNameColonType714=columnNameColonType();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_columnNameColonType.add(columnNameColonType714.getTree());

            	    }
            	    break;

            	default :
            	    break loop210;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameColonType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2050:56: -> ^( TOK_TABCOLLIST ( columnNameColonType )+ )
            {
                // HiveParser.g:2050:59: ^( TOK_TABCOLLIST ( columnNameColonType )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST")
                , root_1);

                if ( !(stream_columnNameColonType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameColonType.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameColonType.nextTree());

                }
                stream_columnNameColonType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameColonTypeList"


    public static class columnNameList_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameList"
    // HiveParser.g:2053:1: columnNameList : columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) ;
    public final HiveParser.columnNameList_return columnNameList() throws RecognitionException {
        HiveParser.columnNameList_return retval = new HiveParser.columnNameList_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA716=null;
        HiveParser.columnName_return columnName715 =null;

        HiveParser.columnName_return columnName717 =null;


        ASTNode COMMA716_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");
         pushMsg("column name list", state); 
        try {
            // HiveParser.g:2056:5: ( columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) )
            // HiveParser.g:2056:7: columnName ( COMMA columnName )*
            {
            pushFollow(FOLLOW_columnName_in_columnNameList11645);
            columnName715=columnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnName.add(columnName715.getTree());

            // HiveParser.g:2056:18: ( COMMA columnName )*
            loop211:
            do {
                int alt211=2;
                int LA211_0 = input.LA(1);

                if ( (LA211_0==COMMA) ) {
                    alt211=1;
                }


                switch (alt211) {
            	case 1 :
            	    // HiveParser.g:2056:19: COMMA columnName
            	    {
            	    COMMA716=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameList11648); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA716);


            	    pushFollow(FOLLOW_columnName_in_columnNameList11650);
            	    columnName717=columnName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_columnName.add(columnName717.getTree());

            	    }
            	    break;

            	default :
            	    break loop211;
                }
            } while (true);


            // AST REWRITE
            // elements: columnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2056:38: -> ^( TOK_TABCOLNAME ( columnName )+ )
            {
                // HiveParser.g:2056:41: ^( TOK_TABCOLNAME ( columnName )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_1);

                if ( !(stream_columnName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnName.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnName.nextTree());

                }
                stream_columnName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameList"


    public static class columnName_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnName"
    // HiveParser.g:2059:1: columnName : identifier ;
    public final HiveParser.columnName_return columnName() throws RecognitionException {
        HiveParser.columnName_return retval = new HiveParser.columnName_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser_IdentifiersParser.identifier_return identifier718 =null;



         pushMsg("column name", state); 
        try {
            // HiveParser.g:2062:5: ( identifier )
            // HiveParser.g:2063:7: identifier
            {
            root_0 = (ASTNode)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_columnName11694);
            identifier718=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier718.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnName"


    public static class extColumnName_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extColumnName"
    // HiveParser.g:2066:1: extColumnName : identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* ;
    public final HiveParser.extColumnName_return extColumnName() throws RecognitionException {
        HiveParser.extColumnName_return retval = new HiveParser.extColumnName_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token DOT720=null;
        Token KW_ELEM_TYPE721=null;
        Token KW_KEY_TYPE722=null;
        Token KW_VALUE_TYPE723=null;
        HiveParser_IdentifiersParser.identifier_return identifier719 =null;

        HiveParser_IdentifiersParser.identifier_return identifier724 =null;


        ASTNode DOT720_tree=null;
        ASTNode KW_ELEM_TYPE721_tree=null;
        ASTNode KW_KEY_TYPE722_tree=null;
        ASTNode KW_VALUE_TYPE723_tree=null;

         pushMsg("column name for complex types", state); 
        try {
            // HiveParser.g:2069:5: ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )
            // HiveParser.g:2070:7: identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
            {
            root_0 = (ASTNode)adaptor.nil();


            pushFollow(FOLLOW_identifier_in_extColumnName11727);
            identifier719=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier719.getTree());

            // HiveParser.g:2070:18: ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
            loop213:
            do {
                int alt213=2;
                int LA213_0 = input.LA(1);

                if ( (LA213_0==DOT) ) {
                    alt213=1;
                }


                switch (alt213) {
            	case 1 :
            	    // HiveParser.g:2070:19: DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
            	    {
            	    DOT720=(Token)match(input,DOT,FOLLOW_DOT_in_extColumnName11730); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT720_tree = 
            	    (ASTNode)adaptor.create(DOT720)
            	    ;
            	    root_0 = (ASTNode)adaptor.becomeRoot(DOT720_tree, root_0);
            	    }

            	    // HiveParser.g:2070:24: ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
            	    int alt212=4;
            	    switch ( input.LA(1) ) {
            	    case KW_ELEM_TYPE:
            	        {
            	        int LA212_1 = input.LA(2);

            	        if ( (synpred21_HiveParser()) ) {
            	            alt212=1;
            	        }
            	        else if ( (true) ) {
            	            alt212=4;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 212, 1, input);

            	            throw nvae;

            	        }
            	        }
            	        break;
            	    case KW_KEY_TYPE:
            	        {
            	        int LA212_2 = input.LA(2);

            	        if ( (synpred22_HiveParser()) ) {
            	            alt212=2;
            	        }
            	        else if ( (true) ) {
            	            alt212=4;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 212, 2, input);

            	            throw nvae;

            	        }
            	        }
            	        break;
            	    case KW_VALUE_TYPE:
            	        {
            	        int LA212_3 = input.LA(2);

            	        if ( (synpred23_HiveParser()) ) {
            	            alt212=3;
            	        }
            	        else if ( (true) ) {
            	            alt212=4;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 212, 3, input);

            	            throw nvae;

            	        }
            	        }
            	        break;
            	    case Identifier:
            	    case KW_ABORT:
            	    case KW_ACTIVATE:
            	    case KW_ACTIVE:
            	    case KW_ADD:
            	    case KW_ADMIN:
            	    case KW_AFTER:
            	    case KW_ALLOC_FRACTION:
            	    case KW_ANALYZE:
            	    case KW_ARCHIVE:
            	    case KW_ASC:
            	    case KW_AST:
            	    case KW_AT:
            	    case KW_AUTOCOMMIT:
            	    case KW_BEFORE:
            	    case KW_BRANCH:
            	    case KW_BUCKET:
            	    case KW_BUCKETS:
            	    case KW_CACHE:
            	    case KW_CASCADE:
            	    case KW_CBO:
            	    case KW_CHANGE:
            	    case KW_CHECK:
            	    case KW_CLUSTER:
            	    case KW_CLUSTERED:
            	    case KW_CLUSTERSTATUS:
            	    case KW_COLLECTION:
            	    case KW_COLUMNS:
            	    case KW_COMMENT:
            	    case KW_COMPACT:
            	    case KW_COMPACTIONS:
            	    case KW_COMPUTE:
            	    case KW_CONCATENATE:
            	    case KW_CONTINUE:
            	    case KW_COST:
            	    case KW_CRON:
            	    case KW_DATA:
            	    case KW_DATABASES:
            	    case KW_DATETIME:
            	    case KW_DAY:
            	    case KW_DBPROPERTIES:
            	    case KW_DCPROPERTIES:
            	    case KW_DEBUG:
            	    case KW_DEFAULT:
            	    case KW_DEFERRED:
            	    case KW_DEFINED:
            	    case KW_DELIMITED:
            	    case KW_DEPENDENCY:
            	    case KW_DESC:
            	    case KW_DETAIL:
            	    case KW_DIRECTORIES:
            	    case KW_DIRECTORY:
            	    case KW_DISABLE:
            	    case KW_DISTRIBUTE:
            	    case KW_DISTRIBUTED:
            	    case KW_DO:
            	    case KW_DOW:
            	    case KW_DUMP:
            	    case KW_ENABLE:
            	    case KW_ENFORCED:
            	    case KW_ESCAPED:
            	    case KW_EVERY:
            	    case KW_EXCLUSIVE:
            	    case KW_EXECUTE:
            	    case KW_EXECUTED:
            	    case KW_EXPIRE_SNAPSHOTS:
            	    case KW_EXPLAIN:
            	    case KW_EXPORT:
            	    case KW_EXPRESSION:
            	    case KW_FAST_FORWARD:
            	    case KW_FIELDS:
            	    case KW_FILE:
            	    case KW_FILEFORMAT:
            	    case KW_FIRST:
            	    case KW_FORMAT:
            	    case KW_FORMATTED:
            	    case KW_FUNCTIONS:
            	    case KW_HOUR:
            	    case KW_IDXPROPERTIES:
            	    case KW_IGNORE:
            	    case KW_INDEX:
            	    case KW_INDEXES:
            	    case KW_INPATH:
            	    case KW_INPUTDRIVER:
            	    case KW_INPUTFORMAT:
            	    case KW_ISOLATION:
            	    case KW_ITEMS:
            	    case KW_JAR:
            	    case KW_JOINCOST:
            	    case KW_KEY:
            	    case KW_KEYS:
            	    case KW_KILL:
            	    case KW_LAST:
            	    case KW_LEVEL:
            	    case KW_LIMIT:
            	    case KW_LINES:
            	    case KW_LOAD:
            	    case KW_LOCATION:
            	    case KW_LOCK:
            	    case KW_LOCKS:
            	    case KW_LOGICAL:
            	    case KW_LONG:
            	    case KW_MANAGED:
            	    case KW_MANAGEDLOCATION:
            	    case KW_MANAGEMENT:
            	    case KW_MAPJOIN:
            	    case KW_MAPPING:
            	    case KW_MATCHED:
            	    case KW_MATERIALIZED:
            	    case KW_METADATA:
            	    case KW_MINUTE:
            	    case KW_MONTH:
            	    case KW_MOVE:
            	    case KW_MSCK:
            	    case KW_NORELY:
            	    case KW_NOSCAN:
            	    case KW_NOVALIDATE:
            	    case KW_NULLS:
            	    case KW_OFFSET:
            	    case KW_OPERATOR:
            	    case KW_OPTIMIZE:
            	    case KW_OPTION:
            	    case KW_OUTPUTDRIVER:
            	    case KW_OUTPUTFORMAT:
            	    case KW_OVERWRITE:
            	    case KW_OWNER:
            	    case KW_PARTITIONED:
            	    case KW_PARTITIONS:
            	    case KW_PATH:
            	    case KW_PLAN:
            	    case KW_PLANS:
            	    case KW_PLUS:
            	    case KW_POOL:
            	    case KW_PRINCIPALS:
            	    case KW_PURGE:
            	    case KW_QUARTER:
            	    case KW_QUERY:
            	    case KW_QUERY_PARALLELISM:
            	    case KW_READ:
            	    case KW_REBUILD:
            	    case KW_RECORDREADER:
            	    case KW_RECORDWRITER:
            	    case KW_RELOAD:
            	    case KW_RELY:
            	    case KW_REMOTE:
            	    case KW_RENAME:
            	    case KW_REOPTIMIZATION:
            	    case KW_REPAIR:
            	    case KW_REPL:
            	    case KW_REPLACE:
            	    case KW_REPLICATION:
            	    case KW_RESOURCE:
            	    case KW_RESPECT:
            	    case KW_RESTRICT:
            	    case KW_RETAIN:
            	    case KW_RETENTION:
            	    case KW_REWRITE:
            	    case KW_ROLE:
            	    case KW_ROLES:
            	    case KW_SCHEDULED:
            	    case KW_SCHEDULING_POLICY:
            	    case KW_SCHEMA:
            	    case KW_SCHEMAS:
            	    case KW_SECOND:
            	    case KW_SEMI:
            	    case KW_SERDE:
            	    case KW_SERDEPROPERTIES:
            	    case KW_SERVER:
            	    case KW_SETS:
            	    case KW_SET_CURRENT_SNAPSHOT:
            	    case KW_SHARED:
            	    case KW_SHOW:
            	    case KW_SHOW_DATABASE:
            	    case KW_SKEWED:
            	    case KW_SNAPSHOT:
            	    case KW_SNAPSHOTS:
            	    case KW_SORT:
            	    case KW_SORTED:
            	    case KW_SPEC:
            	    case KW_SSL:
            	    case KW_STATISTICS:
            	    case KW_STATUS:
            	    case KW_STORED:
            	    case KW_STREAMTABLE:
            	    case KW_STRING:
            	    case KW_STRUCT:
            	    case KW_SUMMARY:
            	    case KW_SYSTEM_TIME:
            	    case KW_SYSTEM_VERSION:
            	    case KW_TABLES:
            	    case KW_TAG:
            	    case KW_TBLPROPERTIES:
            	    case KW_TEMPORARY:
            	    case KW_TERMINATED:
            	    case KW_TINYINT:
            	    case KW_TOUCH:
            	    case KW_TRANSACTION:
            	    case KW_TRANSACTIONAL:
            	    case KW_TRANSACTIONS:
            	    case KW_TRIM:
            	    case KW_TYPE:
            	    case KW_UNARCHIVE:
            	    case KW_UNDO:
            	    case KW_UNIONTYPE:
            	    case KW_UNKNOWN:
            	    case KW_UNLOCK:
            	    case KW_UNMANAGED:
            	    case KW_UNSET:
            	    case KW_UNSIGNED:
            	    case KW_URI:
            	    case KW_URL:
            	    case KW_USE:
            	    case KW_UTC:
            	    case KW_UTCTIMESTAMP:
            	    case KW_VALIDATE:
            	    case KW_VECTORIZATION:
            	    case KW_VIEW:
            	    case KW_VIEWS:
            	    case KW_WAIT:
            	    case KW_WEEK:
            	    case KW_WHILE:
            	    case KW_WITHIN:
            	    case KW_WORK:
            	    case KW_WORKLOAD:
            	    case KW_WRITE:
            	    case KW_YEAR:
            	    case KW_ZONE:
            	    case KW_BATCH:
            	    case KW_DAYOFWEEK:
            	    case KW_HOLD_DDLTIME:
            	    case KW_NO_DROP:
            	    case KW_OFFLINE:
            	    case KW_PROTECTION:
            	    case KW_READONLY:
            	    case KW_TIMESTAMPTZ:
            	        {
            	        alt212=4;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 212, 0, input);

            	        throw nvae;

            	    }

            	    switch (alt212) {
            	        case 1 :
            	            // HiveParser.g:2070:25: ( KW_ELEM_TYPE )=> KW_ELEM_TYPE
            	            {
            	            KW_ELEM_TYPE721=(Token)match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_extColumnName11740); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            KW_ELEM_TYPE721_tree = 
            	            (ASTNode)adaptor.create(KW_ELEM_TYPE721)
            	            ;
            	            adaptor.addChild(root_0, KW_ELEM_TYPE721_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // HiveParser.g:2070:58: ( KW_KEY_TYPE )=> KW_KEY_TYPE
            	            {
            	            KW_KEY_TYPE722=(Token)match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_extColumnName11750); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            KW_KEY_TYPE722_tree = 
            	            (ASTNode)adaptor.create(KW_KEY_TYPE722)
            	            ;
            	            adaptor.addChild(root_0, KW_KEY_TYPE722_tree);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // HiveParser.g:2070:89: ( KW_VALUE_TYPE )=> KW_VALUE_TYPE
            	            {
            	            KW_VALUE_TYPE723=(Token)match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_extColumnName11760); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            KW_VALUE_TYPE723_tree = 
            	            (ASTNode)adaptor.create(KW_VALUE_TYPE723)
            	            ;
            	            adaptor.addChild(root_0, KW_VALUE_TYPE723_tree);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // HiveParser.g:2070:124: identifier
            	            {
            	            pushFollow(FOLLOW_identifier_in_extColumnName11764);
            	            identifier724=identifier();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier724.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop213;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extColumnName"


    public static class columnNameOrderList_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameOrderList"
    // HiveParser.g:2073:1: columnNameOrderList : columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) ;
    public final HiveParser.columnNameOrderList_return columnNameOrderList() throws RecognitionException {
        HiveParser.columnNameOrderList_return retval = new HiveParser.columnNameOrderList_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA726=null;
        HiveParser.columnNameOrder_return columnNameOrder725 =null;

        HiveParser.columnNameOrder_return columnNameOrder727 =null;


        ASTNode COMMA726_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrder");
         pushMsg("column name order list", state); 
        try {
            // HiveParser.g:2076:5: ( columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) )
            // HiveParser.g:2076:7: columnNameOrder ( COMMA columnNameOrder )*
            {
            pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList11794);
            columnNameOrder725=columnNameOrder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameOrder.add(columnNameOrder725.getTree());

            // HiveParser.g:2076:23: ( COMMA columnNameOrder )*
            loop214:
            do {
                int alt214=2;
                int LA214_0 = input.LA(1);

                if ( (LA214_0==COMMA) ) {
                    alt214=1;
                }


                switch (alt214) {
            	case 1 :
            	    // HiveParser.g:2076:24: COMMA columnNameOrder
            	    {
            	    COMMA726=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameOrderList11797); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA726);


            	    pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList11799);
            	    columnNameOrder727=columnNameOrder();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_columnNameOrder.add(columnNameOrder727.getTree());

            	    }
            	    break;

            	default :
            	    break loop214;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameOrder
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2076:48: -> ^( TOK_TABCOLNAME ( columnNameOrder )+ )
            {
                // HiveParser.g:2076:51: ^( TOK_TABCOLNAME ( columnNameOrder )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_1);

                if ( !(stream_columnNameOrder.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameOrder.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameOrder.nextTree());

                }
                stream_columnNameOrder.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameOrderList"


    public static class columnParenthesesList_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnParenthesesList"
    // HiveParser.g:2079:1: columnParenthesesList : LPAREN ! columnNameList RPAREN !;
    public final HiveParser.columnParenthesesList_return columnParenthesesList() throws RecognitionException {
        HiveParser.columnParenthesesList_return retval = new HiveParser.columnParenthesesList_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token LPAREN728=null;
        Token RPAREN730=null;
        HiveParser.columnNameList_return columnNameList729 =null;


        ASTNode LPAREN728_tree=null;
        ASTNode RPAREN730_tree=null;

         pushMsg("column parentheses list", state); 
        try {
            // HiveParser.g:2082:5: ( LPAREN ! columnNameList RPAREN !)
            // HiveParser.g:2082:7: LPAREN ! columnNameList RPAREN !
            {
            root_0 = (ASTNode)adaptor.nil();


            LPAREN728=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_columnParenthesesList11837); if (state.failed) return retval;

            pushFollow(FOLLOW_columnNameList_in_columnParenthesesList11840);
            columnNameList729=columnNameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, columnNameList729.getTree());

            RPAREN730=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_columnParenthesesList11842); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnParenthesesList"


    public static class enableValidateSpecification_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enableValidateSpecification"
    // HiveParser.g:2085:1: enableValidateSpecification : ( enableSpecification ( validateSpecification )? | enforcedSpecification );
    public final HiveParser.enableValidateSpecification_return enableValidateSpecification() throws RecognitionException {
        HiveParser.enableValidateSpecification_return retval = new HiveParser.enableValidateSpecification_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.enableSpecification_return enableSpecification731 =null;

        HiveParser.validateSpecification_return validateSpecification732 =null;

        HiveParser.enforcedSpecification_return enforcedSpecification733 =null;



         pushMsg("enable specification", state); 
        try {
            // HiveParser.g:2088:5: ( enableSpecification ( validateSpecification )? | enforcedSpecification )
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==KW_DISABLE||LA216_0==KW_ENABLE) ) {
                alt216=1;
            }
            else if ( (LA216_0==KW_ENFORCED||LA216_0==KW_NOT) ) {
                alt216=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;

            }
            switch (alt216) {
                case 1 :
                    // HiveParser.g:2088:7: enableSpecification ( validateSpecification )?
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_enableSpecification_in_enableValidateSpecification11870);
                    enableSpecification731=enableSpecification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enableSpecification731.getTree());

                    // HiveParser.g:2088:27: ( validateSpecification )?
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==KW_NOVALIDATE||LA215_0==KW_VALIDATE) ) {
                        alt215=1;
                    }
                    switch (alt215) {
                        case 1 :
                            // HiveParser.g:2088:27: validateSpecification
                            {
                            pushFollow(FOLLOW_validateSpecification_in_enableValidateSpecification11872);
                            validateSpecification732=validateSpecification();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, validateSpecification732.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // HiveParser.g:2089:7: enforcedSpecification
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_enforcedSpecification_in_enableValidateSpecification11881);
                    enforcedSpecification733=enforcedSpecification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enforcedSpecification733.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enableValidateSpecification"


    public static class enableSpecification_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enableSpecification"
    // HiveParser.g:2092:1: enableSpecification : ( KW_ENABLE -> ^( TOK_ENABLE ) | KW_DISABLE -> ^( TOK_DISABLE ) );
    public final HiveParser.enableSpecification_return enableSpecification() throws RecognitionException {
        HiveParser.enableSpecification_return retval = new HiveParser.enableSpecification_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_ENABLE734=null;
        Token KW_DISABLE735=null;

        ASTNode KW_ENABLE734_tree=null;
        ASTNode KW_DISABLE735_tree=null;
        RewriteRuleTokenStream stream_KW_DISABLE=new RewriteRuleTokenStream(adaptor,"token KW_DISABLE");
        RewriteRuleTokenStream stream_KW_ENABLE=new RewriteRuleTokenStream(adaptor,"token KW_ENABLE");

         pushMsg("enable specification", state); 
        try {
            // HiveParser.g:2095:5: ( KW_ENABLE -> ^( TOK_ENABLE ) | KW_DISABLE -> ^( TOK_DISABLE ) )
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==KW_ENABLE) ) {
                alt217=1;
            }
            else if ( (LA217_0==KW_DISABLE) ) {
                alt217=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);

                throw nvae;

            }
            switch (alt217) {
                case 1 :
                    // HiveParser.g:2095:7: KW_ENABLE
                    {
                    KW_ENABLE734=(Token)match(input,KW_ENABLE,FOLLOW_KW_ENABLE_in_enableSpecification11908); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ENABLE.add(KW_ENABLE734);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2095:17: -> ^( TOK_ENABLE )
                    {
                        // HiveParser.g:2095:20: ^( TOK_ENABLE )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_ENABLE, "TOK_ENABLE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2096:7: KW_DISABLE
                    {
                    KW_DISABLE735=(Token)match(input,KW_DISABLE,FOLLOW_KW_DISABLE_in_enableSpecification11922); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DISABLE.add(KW_DISABLE735);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2096:18: -> ^( TOK_DISABLE )
                    {
                        // HiveParser.g:2096:21: ^( TOK_DISABLE )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DISABLE, "TOK_DISABLE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enableSpecification"


    public static class validateSpecification_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "validateSpecification"
    // HiveParser.g:2099:1: validateSpecification : ( KW_VALIDATE -> ^( TOK_VALIDATE ) | KW_NOVALIDATE -> ^( TOK_NOVALIDATE ) );
    public final HiveParser.validateSpecification_return validateSpecification() throws RecognitionException {
        HiveParser.validateSpecification_return retval = new HiveParser.validateSpecification_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_VALIDATE736=null;
        Token KW_NOVALIDATE737=null;

        ASTNode KW_VALIDATE736_tree=null;
        ASTNode KW_NOVALIDATE737_tree=null;
        RewriteRuleTokenStream stream_KW_VALIDATE=new RewriteRuleTokenStream(adaptor,"token KW_VALIDATE");
        RewriteRuleTokenStream stream_KW_NOVALIDATE=new RewriteRuleTokenStream(adaptor,"token KW_NOVALIDATE");

         pushMsg("validate specification", state); 
        try {
            // HiveParser.g:2102:5: ( KW_VALIDATE -> ^( TOK_VALIDATE ) | KW_NOVALIDATE -> ^( TOK_NOVALIDATE ) )
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==KW_VALIDATE) ) {
                alt218=1;
            }
            else if ( (LA218_0==KW_NOVALIDATE) ) {
                alt218=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;

            }
            switch (alt218) {
                case 1 :
                    // HiveParser.g:2102:7: KW_VALIDATE
                    {
                    KW_VALIDATE736=(Token)match(input,KW_VALIDATE,FOLLOW_KW_VALIDATE_in_validateSpecification11955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_VALIDATE.add(KW_VALIDATE736);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2102:19: -> ^( TOK_VALIDATE )
                    {
                        // HiveParser.g:2102:22: ^( TOK_VALIDATE )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_VALIDATE, "TOK_VALIDATE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2103:7: KW_NOVALIDATE
                    {
                    KW_NOVALIDATE737=(Token)match(input,KW_NOVALIDATE,FOLLOW_KW_NOVALIDATE_in_validateSpecification11969); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_NOVALIDATE.add(KW_NOVALIDATE737);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2103:21: -> ^( TOK_NOVALIDATE )
                    {
                        // HiveParser.g:2103:24: ^( TOK_NOVALIDATE )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_NOVALIDATE, "TOK_NOVALIDATE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "validateSpecification"


    public static class enforcedSpecification_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enforcedSpecification"
    // HiveParser.g:2106:1: enforcedSpecification : ( KW_ENFORCED -> ^( TOK_ENABLE ) | KW_NOT KW_ENFORCED -> ^( TOK_DISABLE ) );
    public final HiveParser.enforcedSpecification_return enforcedSpecification() throws RecognitionException {
        HiveParser.enforcedSpecification_return retval = new HiveParser.enforcedSpecification_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_ENFORCED738=null;
        Token KW_NOT739=null;
        Token KW_ENFORCED740=null;

        ASTNode KW_ENFORCED738_tree=null;
        ASTNode KW_NOT739_tree=null;
        ASTNode KW_ENFORCED740_tree=null;
        RewriteRuleTokenStream stream_KW_ENFORCED=new RewriteRuleTokenStream(adaptor,"token KW_ENFORCED");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");

         pushMsg("enforced specification", state); 
        try {
            // HiveParser.g:2109:5: ( KW_ENFORCED -> ^( TOK_ENABLE ) | KW_NOT KW_ENFORCED -> ^( TOK_DISABLE ) )
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==KW_ENFORCED) ) {
                alt219=1;
            }
            else if ( (LA219_0==KW_NOT) ) {
                alt219=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;

            }
            switch (alt219) {
                case 1 :
                    // HiveParser.g:2109:7: KW_ENFORCED
                    {
                    KW_ENFORCED738=(Token)match(input,KW_ENFORCED,FOLLOW_KW_ENFORCED_in_enforcedSpecification12002); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ENFORCED.add(KW_ENFORCED738);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2109:19: -> ^( TOK_ENABLE )
                    {
                        // HiveParser.g:2109:22: ^( TOK_ENABLE )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_ENABLE, "TOK_ENABLE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2110:7: KW_NOT KW_ENFORCED
                    {
                    KW_NOT739=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_enforcedSpecification12016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT739);


                    KW_ENFORCED740=(Token)match(input,KW_ENFORCED,FOLLOW_KW_ENFORCED_in_enforcedSpecification12018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ENFORCED.add(KW_ENFORCED740);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2110:26: -> ^( TOK_DISABLE )
                    {
                        // HiveParser.g:2110:29: ^( TOK_DISABLE )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DISABLE, "TOK_DISABLE")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enforcedSpecification"


    public static class relySpecification_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "relySpecification"
    // HiveParser.g:2113:1: relySpecification : ( KW_RELY -> ^( TOK_RELY ) | KW_NORELY -> ^( TOK_NORELY ) );
    public final HiveParser.relySpecification_return relySpecification() throws RecognitionException {
        HiveParser.relySpecification_return retval = new HiveParser.relySpecification_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_RELY741=null;
        Token KW_NORELY742=null;

        ASTNode KW_RELY741_tree=null;
        ASTNode KW_NORELY742_tree=null;
        RewriteRuleTokenStream stream_KW_NORELY=new RewriteRuleTokenStream(adaptor,"token KW_NORELY");
        RewriteRuleTokenStream stream_KW_RELY=new RewriteRuleTokenStream(adaptor,"token KW_RELY");

         pushMsg("rely specification", state); 
        try {
            // HiveParser.g:2116:5: ( KW_RELY -> ^( TOK_RELY ) | KW_NORELY -> ^( TOK_NORELY ) )
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==KW_RELY) ) {
                alt220=1;
            }
            else if ( (LA220_0==KW_NORELY) ) {
                alt220=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 220, 0, input);

                throw nvae;

            }
            switch (alt220) {
                case 1 :
                    // HiveParser.g:2116:8: KW_RELY
                    {
                    KW_RELY741=(Token)match(input,KW_RELY,FOLLOW_KW_RELY_in_relySpecification12052); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_RELY.add(KW_RELY741);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2116:16: -> ^( TOK_RELY )
                    {
                        // HiveParser.g:2116:19: ^( TOK_RELY )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_RELY, "TOK_RELY")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2117:8: KW_NORELY
                    {
                    KW_NORELY742=(Token)match(input,KW_NORELY,FOLLOW_KW_NORELY_in_relySpecification12067); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_NORELY.add(KW_NORELY742);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2117:18: -> ^( TOK_NORELY )
                    {
                        // HiveParser.g:2117:21: ^( TOK_NORELY )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_NORELY, "TOK_NORELY")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "relySpecification"


    public static class createConstraint_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createConstraint"
    // HiveParser.g:2120:1: createConstraint : ( KW_CONSTRAINT constraintName= identifier )? tableLevelConstraint ( constraintOptsCreate )? -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsCreate )? ) -> ^( ( constraintOptsCreate )? ) ;
    public final HiveParser.createConstraint_return createConstraint() throws RecognitionException {
        HiveParser.createConstraint_return retval = new HiveParser.createConstraint_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_CONSTRAINT743=null;
        HiveParser_IdentifiersParser.identifier_return constraintName =null;

        HiveParser.tableLevelConstraint_return tableLevelConstraint744 =null;

        HiveParser.constraintOptsCreate_return constraintOptsCreate745 =null;


        ASTNode KW_CONSTRAINT743_tree=null;
        RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
        RewriteRuleSubtreeStream stream_constraintOptsCreate=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsCreate");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_tableLevelConstraint=new RewriteRuleSubtreeStream(adaptor,"rule tableLevelConstraint");
         pushMsg("pk or uk or nn constraint", state); 
        try {
            // HiveParser.g:2123:5: ( ( KW_CONSTRAINT constraintName= identifier )? tableLevelConstraint ( constraintOptsCreate )? -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsCreate )? ) -> ^( ( constraintOptsCreate )? ) )
            // HiveParser.g:2123:7: ( KW_CONSTRAINT constraintName= identifier )? tableLevelConstraint ( constraintOptsCreate )?
            {
            // HiveParser.g:2123:7: ( KW_CONSTRAINT constraintName= identifier )?
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==KW_CONSTRAINT) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    // HiveParser.g:2123:8: KW_CONSTRAINT constraintName= identifier
                    {
                    KW_CONSTRAINT743=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_createConstraint12101); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT743);


                    pushFollow(FOLLOW_identifier_in_createConstraint12105);
                    constraintName=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_tableLevelConstraint_in_createConstraint12109);
            tableLevelConstraint744=tableLevelConstraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableLevelConstraint.add(tableLevelConstraint744.getTree());

            // HiveParser.g:2123:71: ( constraintOptsCreate )?
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==KW_DISABLE||LA222_0==KW_ENABLE||LA222_0==KW_ENFORCED||LA222_0==KW_NOT) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    // HiveParser.g:2123:71: constraintOptsCreate
                    {
                    pushFollow(FOLLOW_constraintOptsCreate_in_createConstraint12111);
                    constraintOptsCreate745=constraintOptsCreate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraintOptsCreate.add(constraintOptsCreate745.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: constraintOptsCreate, constraintName, constraintOptsCreate
            // token labels: 
            // rule labels: constraintName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2124:5: -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsCreate )? )
            if ((constraintName!=null?((ASTNode)constraintName.tree):null) != null) {
                // HiveParser.g:2125:13: ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsCreate )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot((tableLevelConstraint744!=null?((ASTNode)tableLevelConstraint744.tree):null), root_1);

                // HiveParser.g:2125:44: ^( TOK_CONSTRAINT_NAME $constraintName)
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME")
                , root_2);

                adaptor.addChild(root_2, stream_constraintName.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:2125:83: ( constraintOptsCreate )?
                if ( stream_constraintOptsCreate.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraintOptsCreate.nextTree());

                }
                stream_constraintOptsCreate.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2126:5: -> ^( ( constraintOptsCreate )? )
            {
                // HiveParser.g:2126:8: ^( ( constraintOptsCreate )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot((tableLevelConstraint744!=null?((ASTNode)tableLevelConstraint744.tree):null), root_1);

                // HiveParser.g:2126:39: ( constraintOptsCreate )?
                if ( stream_constraintOptsCreate.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraintOptsCreate.nextTree());

                }
                stream_constraintOptsCreate.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createConstraint"


    public static class alterConstraintWithName_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterConstraintWithName"
    // HiveParser.g:2129:1: alterConstraintWithName : KW_CONSTRAINT constraintName= identifier tableLevelConstraint ( constraintOptsAlter )? -> ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? ) ;
    public final HiveParser.alterConstraintWithName_return alterConstraintWithName() throws RecognitionException {
        HiveParser.alterConstraintWithName_return retval = new HiveParser.alterConstraintWithName_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_CONSTRAINT746=null;
        HiveParser_IdentifiersParser.identifier_return constraintName =null;

        HiveParser.tableLevelConstraint_return tableLevelConstraint747 =null;

        HiveParser.constraintOptsAlter_return constraintOptsAlter748 =null;


        ASTNode KW_CONSTRAINT746_tree=null;
        RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_tableLevelConstraint=new RewriteRuleSubtreeStream(adaptor,"rule tableLevelConstraint");
        RewriteRuleSubtreeStream stream_constraintOptsAlter=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsAlter");
         pushMsg("pk or uk or nn constraint with name", state); 
        try {
            // HiveParser.g:2132:5: ( KW_CONSTRAINT constraintName= identifier tableLevelConstraint ( constraintOptsAlter )? -> ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? ) )
            // HiveParser.g:2132:7: KW_CONSTRAINT constraintName= identifier tableLevelConstraint ( constraintOptsAlter )?
            {
            KW_CONSTRAINT746=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_alterConstraintWithName12186); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT746);


            pushFollow(FOLLOW_identifier_in_alterConstraintWithName12190);
            constraintName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());

            pushFollow(FOLLOW_tableLevelConstraint_in_alterConstraintWithName12192);
            tableLevelConstraint747=tableLevelConstraint();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableLevelConstraint.add(tableLevelConstraint747.getTree());

            // HiveParser.g:2132:68: ( constraintOptsAlter )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==KW_DISABLE||LA223_0==KW_ENABLE||LA223_0==KW_ENFORCED||LA223_0==KW_NOT) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // HiveParser.g:2132:68: constraintOptsAlter
                    {
                    pushFollow(FOLLOW_constraintOptsAlter_in_alterConstraintWithName12194);
                    constraintOptsAlter748=constraintOptsAlter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraintOptsAlter.add(constraintOptsAlter748.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: constraintOptsAlter, constraintName
            // token labels: 
            // rule labels: constraintName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2133:5: -> ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? )
            {
                // HiveParser.g:2133:7: ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot((tableLevelConstraint747!=null?((ASTNode)tableLevelConstraint747.tree):null), root_1);

                // HiveParser.g:2133:38: ^( TOK_CONSTRAINT_NAME $constraintName)
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME")
                , root_2);

                adaptor.addChild(root_2, stream_constraintName.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:2133:77: ( constraintOptsAlter )?
                if ( stream_constraintOptsAlter.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());

                }
                stream_constraintOptsAlter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterConstraintWithName"


    public static class tableLevelConstraint_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableLevelConstraint"
    // HiveParser.g:2136:1: tableLevelConstraint : ( pkUkConstraint | checkConstraint );
    public final HiveParser.tableLevelConstraint_return tableLevelConstraint() throws RecognitionException {
        HiveParser.tableLevelConstraint_return retval = new HiveParser.tableLevelConstraint_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.pkUkConstraint_return pkUkConstraint749 =null;

        HiveParser.checkConstraint_return checkConstraint750 =null;



        try {
            // HiveParser.g:2137:5: ( pkUkConstraint | checkConstraint )
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==KW_PRIMARY||LA224_0==KW_UNIQUE) ) {
                alt224=1;
            }
            else if ( (LA224_0==KW_CHECK) ) {
                alt224=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;

            }
            switch (alt224) {
                case 1 :
                    // HiveParser.g:2137:7: pkUkConstraint
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_pkUkConstraint_in_tableLevelConstraint12231);
                    pkUkConstraint749=pkUkConstraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pkUkConstraint749.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:2138:7: checkConstraint
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_checkConstraint_in_tableLevelConstraint12239);
                    checkConstraint750=checkConstraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, checkConstraint750.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableLevelConstraint"


    public static class pkUkConstraint_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pkUkConstraint"
    // HiveParser.g:2141:1: pkUkConstraint : tableConstraintType pkCols= columnParenthesesList -> ^( tableConstraintType $pkCols) ;
    public final HiveParser.pkUkConstraint_return pkUkConstraint() throws RecognitionException {
        HiveParser.pkUkConstraint_return retval = new HiveParser.pkUkConstraint_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.columnParenthesesList_return pkCols =null;

        HiveParser.tableConstraintType_return tableConstraintType751 =null;


        RewriteRuleSubtreeStream stream_columnParenthesesList=new RewriteRuleSubtreeStream(adaptor,"rule columnParenthesesList");
        RewriteRuleSubtreeStream stream_tableConstraintType=new RewriteRuleSubtreeStream(adaptor,"rule tableConstraintType");
         pushMsg("pk or uk table level constraint", state); 
        try {
            // HiveParser.g:2144:5: ( tableConstraintType pkCols= columnParenthesesList -> ^( tableConstraintType $pkCols) )
            // HiveParser.g:2144:7: tableConstraintType pkCols= columnParenthesesList
            {
            pushFollow(FOLLOW_tableConstraintType_in_pkUkConstraint12266);
            tableConstraintType751=tableConstraintType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableConstraintType.add(tableConstraintType751.getTree());

            pushFollow(FOLLOW_columnParenthesesList_in_pkUkConstraint12270);
            pkCols=columnParenthesesList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnParenthesesList.add(pkCols.getTree());

            // AST REWRITE
            // elements: tableConstraintType, pkCols
            // token labels: 
            // rule labels: pkCols, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_pkCols=new RewriteRuleSubtreeStream(adaptor,"rule pkCols",pkCols!=null?pkCols.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2145:5: -> ^( tableConstraintType $pkCols)
            {
                // HiveParser.g:2145:8: ^( tableConstraintType $pkCols)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(stream_tableConstraintType.nextNode(), root_1);

                adaptor.addChild(root_1, stream_pkCols.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pkUkConstraint"


    public static class checkConstraint_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "checkConstraint"
    // HiveParser.g:2148:1: checkConstraint : KW_CHECK LPAREN expression RPAREN -> ^( TOK_CHECK_CONSTRAINT expression ) ;
    public final HiveParser.checkConstraint_return checkConstraint() throws RecognitionException {
        HiveParser.checkConstraint_return retval = new HiveParser.checkConstraint_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_CHECK752=null;
        Token LPAREN753=null;
        Token RPAREN755=null;
        HiveParser_IdentifiersParser.expression_return expression754 =null;


        ASTNode KW_CHECK752_tree=null;
        ASTNode LPAREN753_tree=null;
        ASTNode RPAREN755_tree=null;
        RewriteRuleTokenStream stream_KW_CHECK=new RewriteRuleTokenStream(adaptor,"token KW_CHECK");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         pushMsg("CHECK constraint", state); 
        try {
            // HiveParser.g:2151:5: ( KW_CHECK LPAREN expression RPAREN -> ^( TOK_CHECK_CONSTRAINT expression ) )
            // HiveParser.g:2151:7: KW_CHECK LPAREN expression RPAREN
            {
            KW_CHECK752=(Token)match(input,KW_CHECK,FOLLOW_KW_CHECK_in_checkConstraint12310); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CHECK.add(KW_CHECK752);


            LPAREN753=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_checkConstraint12312); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN753);


            pushFollow(FOLLOW_expression_in_checkConstraint12314);
            expression754=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression754.getTree());

            RPAREN755=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_checkConstraint12316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN755);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2152:5: -> ^( TOK_CHECK_CONSTRAINT expression )
            {
                // HiveParser.g:2152:8: ^( TOK_CHECK_CONSTRAINT expression )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CHECK_CONSTRAINT, "TOK_CHECK_CONSTRAINT")
                , root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "checkConstraint"


    public static class createForeignKey_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "createForeignKey"
    // HiveParser.g:2155:1: createForeignKey : ( KW_CONSTRAINT constraintName= identifier )? KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList ( constraintOptsCreate )? -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsCreate )? ) -> ^( TOK_FOREIGN_KEY $fkCols $tabName $parCols ( constraintOptsCreate )? ) ;
    public final HiveParser.createForeignKey_return createForeignKey() throws RecognitionException {
        HiveParser.createForeignKey_return retval = new HiveParser.createForeignKey_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_CONSTRAINT756=null;
        Token KW_FOREIGN757=null;
        Token KW_KEY758=null;
        Token KW_REFERENCES759=null;
        HiveParser_IdentifiersParser.identifier_return constraintName =null;

        HiveParser.columnParenthesesList_return fkCols =null;

        HiveParser_FromClauseParser.tableName_return tabName =null;

        HiveParser.columnParenthesesList_return parCols =null;

        HiveParser.constraintOptsCreate_return constraintOptsCreate760 =null;


        ASTNode KW_CONSTRAINT756_tree=null;
        ASTNode KW_FOREIGN757_tree=null;
        ASTNode KW_KEY758_tree=null;
        ASTNode KW_REFERENCES759_tree=null;
        RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
        RewriteRuleTokenStream stream_KW_REFERENCES=new RewriteRuleTokenStream(adaptor,"token KW_REFERENCES");
        RewriteRuleTokenStream stream_KW_FOREIGN=new RewriteRuleTokenStream(adaptor,"token KW_FOREIGN");
        RewriteRuleTokenStream stream_KW_KEY=new RewriteRuleTokenStream(adaptor,"token KW_KEY");
        RewriteRuleSubtreeStream stream_constraintOptsCreate=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsCreate");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_columnParenthesesList=new RewriteRuleSubtreeStream(adaptor,"rule columnParenthesesList");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("foreign key", state); 
        try {
            // HiveParser.g:2158:5: ( ( KW_CONSTRAINT constraintName= identifier )? KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList ( constraintOptsCreate )? -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsCreate )? ) -> ^( TOK_FOREIGN_KEY $fkCols $tabName $parCols ( constraintOptsCreate )? ) )
            // HiveParser.g:2158:7: ( KW_CONSTRAINT constraintName= identifier )? KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList ( constraintOptsCreate )?
            {
            // HiveParser.g:2158:7: ( KW_CONSTRAINT constraintName= identifier )?
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==KW_CONSTRAINT) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    // HiveParser.g:2158:8: KW_CONSTRAINT constraintName= identifier
                    {
                    KW_CONSTRAINT756=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_createForeignKey12356); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT756);


                    pushFollow(FOLLOW_identifier_in_createForeignKey12360);
                    constraintName=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());

                    }
                    break;

            }


            KW_FOREIGN757=(Token)match(input,KW_FOREIGN,FOLLOW_KW_FOREIGN_in_createForeignKey12364); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FOREIGN.add(KW_FOREIGN757);


            KW_KEY758=(Token)match(input,KW_KEY,FOLLOW_KW_KEY_in_createForeignKey12366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_KEY.add(KW_KEY758);


            pushFollow(FOLLOW_columnParenthesesList_in_createForeignKey12370);
            fkCols=columnParenthesesList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnParenthesesList.add(fkCols.getTree());

            KW_REFERENCES759=(Token)match(input,KW_REFERENCES,FOLLOW_KW_REFERENCES_in_createForeignKey12373); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_REFERENCES.add(KW_REFERENCES759);


            pushFollow(FOLLOW_tableName_in_createForeignKey12377);
            tabName=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());

            pushFollow(FOLLOW_columnParenthesesList_in_createForeignKey12381);
            parCols=columnParenthesesList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnParenthesesList.add(parCols.getTree());

            // HiveParser.g:2158:160: ( constraintOptsCreate )?
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==KW_DISABLE||LA226_0==KW_ENABLE||LA226_0==KW_ENFORCED||LA226_0==KW_NOT) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    // HiveParser.g:2158:160: constraintOptsCreate
                    {
                    pushFollow(FOLLOW_constraintOptsCreate_in_createForeignKey12383);
                    constraintOptsCreate760=constraintOptsCreate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraintOptsCreate.add(constraintOptsCreate760.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: constraintName, constraintOptsCreate, parCols, constraintOptsCreate, fkCols, parCols, tabName, fkCols, tabName
            // token labels: 
            // rule labels: parCols, tabName, fkCols, constraintName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_parCols=new RewriteRuleSubtreeStream(adaptor,"rule parCols",parCols!=null?parCols.tree:null);
            RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.tree:null);
            RewriteRuleSubtreeStream stream_fkCols=new RewriteRuleSubtreeStream(adaptor,"rule fkCols",fkCols!=null?fkCols.tree:null);
            RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2159:5: -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsCreate )? )
            if ((constraintName!=null?((ASTNode)constraintName.tree):null) != null) {
                // HiveParser.g:2160:13: ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsCreate )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY")
                , root_1);

                // HiveParser.g:2160:31: ^( TOK_CONSTRAINT_NAME $constraintName)
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME")
                , root_2);

                adaptor.addChild(root_2, stream_constraintName.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_fkCols.nextTree());

                adaptor.addChild(root_1, stream_tabName.nextTree());

                adaptor.addChild(root_1, stream_parCols.nextTree());

                // HiveParser.g:2160:96: ( constraintOptsCreate )?
                if ( stream_constraintOptsCreate.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraintOptsCreate.nextTree());

                }
                stream_constraintOptsCreate.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2161:5: -> ^( TOK_FOREIGN_KEY $fkCols $tabName $parCols ( constraintOptsCreate )? )
            {
                // HiveParser.g:2161:8: ^( TOK_FOREIGN_KEY $fkCols $tabName $parCols ( constraintOptsCreate )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY")
                , root_1);

                adaptor.addChild(root_1, stream_fkCols.nextTree());

                adaptor.addChild(root_1, stream_tabName.nextTree());

                adaptor.addChild(root_1, stream_parCols.nextTree());

                // HiveParser.g:2161:52: ( constraintOptsCreate )?
                if ( stream_constraintOptsCreate.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraintOptsCreate.nextTree());

                }
                stream_constraintOptsCreate.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "createForeignKey"


    public static class alterForeignKeyWithName_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterForeignKeyWithName"
    // HiveParser.g:2164:1: alterForeignKeyWithName : KW_CONSTRAINT constraintName= identifier KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList ( constraintOptsAlter )? -> ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsAlter )? ) ;
    public final HiveParser.alterForeignKeyWithName_return alterForeignKeyWithName() throws RecognitionException {
        HiveParser.alterForeignKeyWithName_return retval = new HiveParser.alterForeignKeyWithName_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_CONSTRAINT761=null;
        Token KW_FOREIGN762=null;
        Token KW_KEY763=null;
        Token KW_REFERENCES764=null;
        HiveParser_IdentifiersParser.identifier_return constraintName =null;

        HiveParser.columnParenthesesList_return fkCols =null;

        HiveParser_FromClauseParser.tableName_return tabName =null;

        HiveParser.columnParenthesesList_return parCols =null;

        HiveParser.constraintOptsAlter_return constraintOptsAlter765 =null;


        ASTNode KW_CONSTRAINT761_tree=null;
        ASTNode KW_FOREIGN762_tree=null;
        ASTNode KW_KEY763_tree=null;
        ASTNode KW_REFERENCES764_tree=null;
        RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
        RewriteRuleTokenStream stream_KW_REFERENCES=new RewriteRuleTokenStream(adaptor,"token KW_REFERENCES");
        RewriteRuleTokenStream stream_KW_FOREIGN=new RewriteRuleTokenStream(adaptor,"token KW_FOREIGN");
        RewriteRuleTokenStream stream_KW_KEY=new RewriteRuleTokenStream(adaptor,"token KW_KEY");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_constraintOptsAlter=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsAlter");
        RewriteRuleSubtreeStream stream_columnParenthesesList=new RewriteRuleSubtreeStream(adaptor,"rule columnParenthesesList");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("foreign key with key name", state); 
        try {
            // HiveParser.g:2167:5: ( KW_CONSTRAINT constraintName= identifier KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList ( constraintOptsAlter )? -> ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsAlter )? ) )
            // HiveParser.g:2167:7: KW_CONSTRAINT constraintName= identifier KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList ( constraintOptsAlter )?
            {
            KW_CONSTRAINT761=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_alterForeignKeyWithName12476); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT761);


            pushFollow(FOLLOW_identifier_in_alterForeignKeyWithName12480);
            constraintName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());

            KW_FOREIGN762=(Token)match(input,KW_FOREIGN,FOLLOW_KW_FOREIGN_in_alterForeignKeyWithName12482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FOREIGN.add(KW_FOREIGN762);


            KW_KEY763=(Token)match(input,KW_KEY,FOLLOW_KW_KEY_in_alterForeignKeyWithName12484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_KEY.add(KW_KEY763);


            pushFollow(FOLLOW_columnParenthesesList_in_alterForeignKeyWithName12488);
            fkCols=columnParenthesesList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnParenthesesList.add(fkCols.getTree());

            KW_REFERENCES764=(Token)match(input,KW_REFERENCES,FOLLOW_KW_REFERENCES_in_alterForeignKeyWithName12491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_REFERENCES.add(KW_REFERENCES764);


            pushFollow(FOLLOW_tableName_in_alterForeignKeyWithName12495);
            tabName=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());

            pushFollow(FOLLOW_columnParenthesesList_in_alterForeignKeyWithName12499);
            parCols=columnParenthesesList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnParenthesesList.add(parCols.getTree());

            // HiveParser.g:2167:157: ( constraintOptsAlter )?
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==KW_DISABLE||LA227_0==KW_ENABLE||LA227_0==KW_ENFORCED||LA227_0==KW_NOT) ) {
                alt227=1;
            }
            switch (alt227) {
                case 1 :
                    // HiveParser.g:2167:157: constraintOptsAlter
                    {
                    pushFollow(FOLLOW_constraintOptsAlter_in_alterForeignKeyWithName12501);
                    constraintOptsAlter765=constraintOptsAlter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraintOptsAlter.add(constraintOptsAlter765.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: constraintOptsAlter, fkCols, tabName, constraintName, parCols
            // token labels: 
            // rule labels: tabName, parCols, fkCols, constraintName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.tree:null);
            RewriteRuleSubtreeStream stream_parCols=new RewriteRuleSubtreeStream(adaptor,"rule parCols",parCols!=null?parCols.tree:null);
            RewriteRuleSubtreeStream stream_fkCols=new RewriteRuleSubtreeStream(adaptor,"rule fkCols",fkCols!=null?fkCols.tree:null);
            RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2168:5: -> ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsAlter )? )
            {
                // HiveParser.g:2168:8: ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsAlter )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY")
                , root_1);

                // HiveParser.g:2168:26: ^( TOK_CONSTRAINT_NAME $constraintName)
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME")
                , root_2);

                adaptor.addChild(root_2, stream_constraintName.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_fkCols.nextTree());

                adaptor.addChild(root_1, stream_tabName.nextTree());

                adaptor.addChild(root_1, stream_parCols.nextTree());

                // HiveParser.g:2168:91: ( constraintOptsAlter )?
                if ( stream_constraintOptsAlter.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());

                }
                stream_constraintOptsAlter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterForeignKeyWithName"


    public static class skewedValueElement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedValueElement"
    // HiveParser.g:2171:1: skewedValueElement : ( skewedColumnValues | skewedColumnValuePairList );
    public final HiveParser.skewedValueElement_return skewedValueElement() throws RecognitionException {
        HiveParser.skewedValueElement_return retval = new HiveParser.skewedValueElement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.skewedColumnValues_return skewedColumnValues766 =null;

        HiveParser.skewedColumnValuePairList_return skewedColumnValuePairList767 =null;



         pushMsg("skewed value element", state); 
        try {
            // HiveParser.g:2174:5: ( skewedColumnValues | skewedColumnValuePairList )
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==CharSetName||LA228_0==IntegralLiteral||(LA228_0 >= KW_CURRENT_DATE && LA228_0 <= KW_CURRENT_TIMESTAMP)||LA228_0==KW_DATE||LA228_0==KW_FALSE||LA228_0==KW_NULL||(LA228_0 >= KW_TIMESTAMP && LA228_0 <= KW_TIMESTAMPLOCALTZ)||LA228_0==KW_TRUE||(LA228_0 >= Number && LA228_0 <= NumberLiteral)||LA228_0==QUESTION||LA228_0==StringLiteral) ) {
                alt228=1;
            }
            else if ( (LA228_0==LPAREN) ) {
                alt228=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;

            }
            switch (alt228) {
                case 1 :
                    // HiveParser.g:2175:7: skewedColumnValues
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_skewedColumnValues_in_skewedValueElement12564);
                    skewedColumnValues766=skewedColumnValues();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValues766.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:2176:8: skewedColumnValuePairList
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_skewedColumnValuePairList_in_skewedValueElement12573);
                    skewedColumnValuePairList767=skewedColumnValuePairList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValuePairList767.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedValueElement"


    public static class skewedColumnValuePairList_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedColumnValuePairList"
    // HiveParser.g:2179:1: skewedColumnValuePairList : skewedColumnValuePair ( COMMA skewedColumnValuePair )* -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ ) ;
    public final HiveParser.skewedColumnValuePairList_return skewedColumnValuePairList() throws RecognitionException {
        HiveParser.skewedColumnValuePairList_return retval = new HiveParser.skewedColumnValuePairList_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA769=null;
        HiveParser.skewedColumnValuePair_return skewedColumnValuePair768 =null;

        HiveParser.skewedColumnValuePair_return skewedColumnValuePair770 =null;


        ASTNode COMMA769_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_skewedColumnValuePair=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValuePair");
         pushMsg("column value pair list", state); 
        try {
            // HiveParser.g:2182:5: ( skewedColumnValuePair ( COMMA skewedColumnValuePair )* -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ ) )
            // HiveParser.g:2182:7: skewedColumnValuePair ( COMMA skewedColumnValuePair )*
            {
            pushFollow(FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList12600);
            skewedColumnValuePair768=skewedColumnValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_skewedColumnValuePair.add(skewedColumnValuePair768.getTree());

            // HiveParser.g:2182:29: ( COMMA skewedColumnValuePair )*
            loop229:
            do {
                int alt229=2;
                int LA229_0 = input.LA(1);

                if ( (LA229_0==COMMA) ) {
                    alt229=1;
                }


                switch (alt229) {
            	case 1 :
            	    // HiveParser.g:2182:30: COMMA skewedColumnValuePair
            	    {
            	    COMMA769=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedColumnValuePairList12603); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA769);


            	    pushFollow(FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList12605);
            	    skewedColumnValuePair770=skewedColumnValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_skewedColumnValuePair.add(skewedColumnValuePair770.getTree());

            	    }
            	    break;

            	default :
            	    break loop229;
                }
            } while (true);


            // AST REWRITE
            // elements: skewedColumnValuePair
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2182:60: -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ )
            {
                // HiveParser.g:2182:63: ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLVALUE_PAIR, "TOK_TABCOLVALUE_PAIR")
                , root_1);

                if ( !(stream_skewedColumnValuePair.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_skewedColumnValuePair.hasNext() ) {
                    adaptor.addChild(root_1, stream_skewedColumnValuePair.nextTree());

                }
                stream_skewedColumnValuePair.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedColumnValuePairList"


    public static class skewedColumnValuePair_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedColumnValuePair"
    // HiveParser.g:2185:1: skewedColumnValuePair : LPAREN colValues= skewedColumnValues RPAREN -> ^( TOK_TABCOLVALUES $colValues) ;
    public final HiveParser.skewedColumnValuePair_return skewedColumnValuePair() throws RecognitionException {
        HiveParser.skewedColumnValuePair_return retval = new HiveParser.skewedColumnValuePair_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token LPAREN771=null;
        Token RPAREN772=null;
        HiveParser.skewedColumnValues_return colValues =null;


        ASTNode LPAREN771_tree=null;
        ASTNode RPAREN772_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleSubtreeStream stream_skewedColumnValues=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValues");
         pushMsg("column value pair", state); 
        try {
            // HiveParser.g:2188:5: ( LPAREN colValues= skewedColumnValues RPAREN -> ^( TOK_TABCOLVALUES $colValues) )
            // HiveParser.g:2189:7: LPAREN colValues= skewedColumnValues RPAREN
            {
            LPAREN771=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_skewedColumnValuePair12649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN771);


            pushFollow(FOLLOW_skewedColumnValues_in_skewedColumnValuePair12653);
            colValues=skewedColumnValues();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_skewedColumnValues.add(colValues.getTree());

            RPAREN772=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_skewedColumnValuePair12655); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN772);


            // AST REWRITE
            // elements: colValues
            // token labels: 
            // rule labels: colValues, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_colValues=new RewriteRuleSubtreeStream(adaptor,"rule colValues",colValues!=null?colValues.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2190:7: -> ^( TOK_TABCOLVALUES $colValues)
            {
                // HiveParser.g:2190:10: ^( TOK_TABCOLVALUES $colValues)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLVALUES, "TOK_TABCOLVALUES")
                , root_1);

                adaptor.addChild(root_1, stream_colValues.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedColumnValuePair"


    public static class skewedColumnValues_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedColumnValues"
    // HiveParser.g:2193:1: skewedColumnValues : skewedColumnValue ( COMMA skewedColumnValue )* -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ ) ;
    public final HiveParser.skewedColumnValues_return skewedColumnValues() throws RecognitionException {
        HiveParser.skewedColumnValues_return retval = new HiveParser.skewedColumnValues_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA774=null;
        HiveParser.skewedColumnValue_return skewedColumnValue773 =null;

        HiveParser.skewedColumnValue_return skewedColumnValue775 =null;


        ASTNode COMMA774_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_skewedColumnValue=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValue");
         pushMsg("column values", state); 
        try {
            // HiveParser.g:2196:5: ( skewedColumnValue ( COMMA skewedColumnValue )* -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ ) )
            // HiveParser.g:2196:7: skewedColumnValue ( COMMA skewedColumnValue )*
            {
            pushFollow(FOLLOW_skewedColumnValue_in_skewedColumnValues12697);
            skewedColumnValue773=skewedColumnValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_skewedColumnValue.add(skewedColumnValue773.getTree());

            // HiveParser.g:2196:25: ( COMMA skewedColumnValue )*
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);

                if ( (LA230_0==COMMA) ) {
                    alt230=1;
                }


                switch (alt230) {
            	case 1 :
            	    // HiveParser.g:2196:26: COMMA skewedColumnValue
            	    {
            	    COMMA774=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedColumnValues12700); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA774);


            	    pushFollow(FOLLOW_skewedColumnValue_in_skewedColumnValues12702);
            	    skewedColumnValue775=skewedColumnValue();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_skewedColumnValue.add(skewedColumnValue775.getTree());

            	    }
            	    break;

            	default :
            	    break loop230;
                }
            } while (true);


            // AST REWRITE
            // elements: skewedColumnValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2196:52: -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ )
            {
                // HiveParser.g:2196:55: ^( TOK_TABCOLVALUE ( skewedColumnValue )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLVALUE, "TOK_TABCOLVALUE")
                , root_1);

                if ( !(stream_skewedColumnValue.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_skewedColumnValue.hasNext() ) {
                    adaptor.addChild(root_1, stream_skewedColumnValue.nextTree());

                }
                stream_skewedColumnValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedColumnValues"


    public static class skewedColumnValue_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedColumnValue"
    // HiveParser.g:2199:1: skewedColumnValue : constant ;
    public final HiveParser.skewedColumnValue_return skewedColumnValue() throws RecognitionException {
        HiveParser.skewedColumnValue_return retval = new HiveParser.skewedColumnValue_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser_IdentifiersParser.constant_return constant776 =null;



         pushMsg("column value", state); 
        try {
            // HiveParser.g:2202:5: ( constant )
            // HiveParser.g:2203:7: constant
            {
            root_0 = (ASTNode)adaptor.nil();


            pushFollow(FOLLOW_constant_in_skewedColumnValue12746);
            constant776=constant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constant776.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedColumnValue"


    public static class skewedValueLocationElement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skewedValueLocationElement"
    // HiveParser.g:2206:1: skewedValueLocationElement : ( skewedColumnValue | skewedColumnValuePair );
    public final HiveParser.skewedValueLocationElement_return skewedValueLocationElement() throws RecognitionException {
        HiveParser.skewedValueLocationElement_return retval = new HiveParser.skewedValueLocationElement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.skewedColumnValue_return skewedColumnValue777 =null;

        HiveParser.skewedColumnValuePair_return skewedColumnValuePair778 =null;



         pushMsg("skewed value location element", state); 
        try {
            // HiveParser.g:2209:5: ( skewedColumnValue | skewedColumnValuePair )
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==CharSetName||LA231_0==IntegralLiteral||(LA231_0 >= KW_CURRENT_DATE && LA231_0 <= KW_CURRENT_TIMESTAMP)||LA231_0==KW_DATE||LA231_0==KW_FALSE||LA231_0==KW_NULL||(LA231_0 >= KW_TIMESTAMP && LA231_0 <= KW_TIMESTAMPLOCALTZ)||LA231_0==KW_TRUE||(LA231_0 >= Number && LA231_0 <= NumberLiteral)||LA231_0==QUESTION||LA231_0==StringLiteral) ) {
                alt231=1;
            }
            else if ( (LA231_0==LPAREN) ) {
                alt231=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);

                throw nvae;

            }
            switch (alt231) {
                case 1 :
                    // HiveParser.g:2210:7: skewedColumnValue
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_skewedColumnValue_in_skewedValueLocationElement12779);
                    skewedColumnValue777=skewedColumnValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValue777.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:2211:8: skewedColumnValuePair
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_skewedColumnValuePair_in_skewedValueLocationElement12788);
                    skewedColumnValuePair778=skewedColumnValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValuePair778.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skewedValueLocationElement"


    public static class orderSpecification_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "orderSpecification"
    // HiveParser.g:2214:1: orderSpecification : ( KW_ASC | KW_DESC );
    public final HiveParser.orderSpecification_return orderSpecification() throws RecognitionException {
        HiveParser.orderSpecification_return retval = new HiveParser.orderSpecification_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token set779=null;

        ASTNode set779_tree=null;

         pushMsg("order specification", state); 
        try {
            // HiveParser.g:2217:5: ( KW_ASC | KW_DESC )
            // HiveParser.g:
            {
            root_0 = (ASTNode)adaptor.nil();


            set779=(Token)input.LT(1);

            if ( input.LA(1)==KW_ASC||input.LA(1)==KW_DESC ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (ASTNode)adaptor.create(set779)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orderSpecification"


    public static class nullOrdering_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nullOrdering"
    // HiveParser.g:2219:1: nullOrdering : ( KW_NULLS KW_FIRST -> ^( TOK_NULLS_FIRST ) | KW_NULLS KW_LAST -> ^( TOK_NULLS_LAST ) );
    public final HiveParser.nullOrdering_return nullOrdering() throws RecognitionException {
        HiveParser.nullOrdering_return retval = new HiveParser.nullOrdering_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_NULLS780=null;
        Token KW_FIRST781=null;
        Token KW_NULLS782=null;
        Token KW_LAST783=null;

        ASTNode KW_NULLS780_tree=null;
        ASTNode KW_FIRST781_tree=null;
        ASTNode KW_NULLS782_tree=null;
        ASTNode KW_LAST783_tree=null;
        RewriteRuleTokenStream stream_KW_FIRST=new RewriteRuleTokenStream(adaptor,"token KW_FIRST");
        RewriteRuleTokenStream stream_KW_NULLS=new RewriteRuleTokenStream(adaptor,"token KW_NULLS");
        RewriteRuleTokenStream stream_KW_LAST=new RewriteRuleTokenStream(adaptor,"token KW_LAST");

         pushMsg("nulls ordering", state); 
        try {
            // HiveParser.g:2222:5: ( KW_NULLS KW_FIRST -> ^( TOK_NULLS_FIRST ) | KW_NULLS KW_LAST -> ^( TOK_NULLS_LAST ) )
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==KW_NULLS) ) {
                int LA232_1 = input.LA(2);

                if ( (LA232_1==KW_FIRST) ) {
                    alt232=1;
                }
                else if ( (LA232_1==KW_LAST) ) {
                    alt232=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 232, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;

            }
            switch (alt232) {
                case 1 :
                    // HiveParser.g:2222:7: KW_NULLS KW_FIRST
                    {
                    KW_NULLS780=(Token)match(input,KW_NULLS,FOLLOW_KW_NULLS_in_nullOrdering12842); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_NULLS.add(KW_NULLS780);


                    KW_FIRST781=(Token)match(input,KW_FIRST,FOLLOW_KW_FIRST_in_nullOrdering12844); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_FIRST.add(KW_FIRST781);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2222:25: -> ^( TOK_NULLS_FIRST )
                    {
                        // HiveParser.g:2222:28: ^( TOK_NULLS_FIRST )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2223:7: KW_NULLS KW_LAST
                    {
                    KW_NULLS782=(Token)match(input,KW_NULLS,FOLLOW_KW_NULLS_in_nullOrdering12858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_NULLS.add(KW_NULLS782);


                    KW_LAST783=(Token)match(input,KW_LAST,FOLLOW_KW_LAST_in_nullOrdering12860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_LAST.add(KW_LAST783);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2223:24: -> ^( TOK_NULLS_LAST )
                    {
                        // HiveParser.g:2223:27: ^( TOK_NULLS_LAST )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_NULLS_LAST, "TOK_NULLS_LAST")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nullOrdering"


    public static class columnNameOrder_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameOrder"
    // HiveParser.g:2226:1: columnNameOrder : identifier (orderSpec= orderSpecification )? (nullSpec= nullOrdering )? -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) ) -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST identifier ) ) -> {$orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) ) -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec identifier ) ) ;
    public final HiveParser.columnNameOrder_return columnNameOrder() throws RecognitionException {
        HiveParser.columnNameOrder_return retval = new HiveParser.columnNameOrder_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.orderSpecification_return orderSpec =null;

        HiveParser.nullOrdering_return nullSpec =null;

        HiveParser_IdentifiersParser.identifier_return identifier784 =null;


        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_nullOrdering=new RewriteRuleSubtreeStream(adaptor,"rule nullOrdering");
        RewriteRuleSubtreeStream stream_orderSpecification=new RewriteRuleSubtreeStream(adaptor,"rule orderSpecification");
         pushMsg("column name order", state); 
        try {
            // HiveParser.g:2229:5: ( identifier (orderSpec= orderSpecification )? (nullSpec= nullOrdering )? -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) ) -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST identifier ) ) -> {$orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) ) -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec identifier ) ) )
            // HiveParser.g:2229:7: identifier (orderSpec= orderSpecification )? (nullSpec= nullOrdering )?
            {
            pushFollow(FOLLOW_identifier_in_columnNameOrder12893);
            identifier784=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier784.getTree());

            // HiveParser.g:2229:27: (orderSpec= orderSpecification )?
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==KW_ASC||LA233_0==KW_DESC) ) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    // HiveParser.g:2229:27: orderSpec= orderSpecification
                    {
                    pushFollow(FOLLOW_orderSpecification_in_columnNameOrder12897);
                    orderSpec=orderSpecification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderSpecification.add(orderSpec.getTree());

                    }
                    break;

            }


            // HiveParser.g:2229:56: (nullSpec= nullOrdering )?
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==KW_NULLS) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    // HiveParser.g:2229:56: nullSpec= nullOrdering
                    {
                    pushFollow(FOLLOW_nullOrdering_in_columnNameOrder12902);
                    nullSpec=nullOrdering();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nullOrdering.add(nullSpec.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: identifier, identifier, nullSpec, identifier, nullSpec, identifier, identifier, nullSpec, identifier
            // token labels: 
            // rule labels: nullSpec, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_nullSpec=new RewriteRuleSubtreeStream(adaptor,"rule nullSpec",nullSpec!=null?nullSpec.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2230:5: -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) )
            if ((orderSpec!=null?((ASTNode)orderSpec.tree):null) == null && (nullSpec!=null?((ASTNode)nullSpec.tree):null) == null) {
                // HiveParser.g:2231:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC")
                , root_1);

                // HiveParser.g:2231:37: ^( TOK_NULLS_FIRST identifier )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST")
                , root_2);

                adaptor.addChild(root_2, stream_identifier.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2232:5: -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) )
            if ((orderSpec!=null?((ASTNode)orderSpec.tree):null) == null) {
                // HiveParser.g:2233:13: ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC")
                , root_1);

                // HiveParser.g:2233:37: ^( $nullSpec identifier )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);

                adaptor.addChild(root_2, stream_identifier.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2234:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) )
            if ((nullSpec!=null?((ASTNode)nullSpec.tree):null) == null && (orderSpec!=null?((ASTNode)orderSpec.tree):null).getType()==HiveParser.KW_ASC) {
                // HiveParser.g:2235:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC")
                , root_1);

                // HiveParser.g:2235:37: ^( TOK_NULLS_FIRST identifier )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST")
                , root_2);

                adaptor.addChild(root_2, stream_identifier.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2236:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST identifier ) )
            if ((nullSpec!=null?((ASTNode)nullSpec.tree):null) == null && (orderSpec!=null?((ASTNode)orderSpec.tree):null).getType()==HiveParser.KW_DESC) {
                // HiveParser.g:2237:13: ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST identifier ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC")
                , root_1);

                // HiveParser.g:2237:38: ^( TOK_NULLS_LAST identifier )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_NULLS_LAST, "TOK_NULLS_LAST")
                , root_2);

                adaptor.addChild(root_2, stream_identifier.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2238:5: -> {$orderSpec.tree.getType()==HiveParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) )
            if ((orderSpec!=null?((ASTNode)orderSpec.tree):null).getType()==HiveParser.KW_ASC) {
                // HiveParser.g:2239:13: ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC")
                , root_1);

                // HiveParser.g:2239:37: ^( $nullSpec identifier )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);

                adaptor.addChild(root_2, stream_identifier.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2240:5: -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec identifier ) )
            {
                // HiveParser.g:2240:8: ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec identifier ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC")
                , root_1);

                // HiveParser.g:2240:33: ^( $nullSpec identifier )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);

                adaptor.addChild(root_2, stream_identifier.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameOrder"


    public static class columnNameCommentList_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameCommentList"
    // HiveParser.g:2243:1: columnNameCommentList : columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) ;
    public final HiveParser.columnNameCommentList_return columnNameCommentList() throws RecognitionException {
        HiveParser.columnNameCommentList_return retval = new HiveParser.columnNameCommentList_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA786=null;
        HiveParser.columnNameComment_return columnNameComment785 =null;

        HiveParser.columnNameComment_return columnNameComment787 =null;


        ASTNode COMMA786_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameComment=new RewriteRuleSubtreeStream(adaptor,"rule columnNameComment");
         pushMsg("column name comment list", state); 
        try {
            // HiveParser.g:2246:5: ( columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) )
            // HiveParser.g:2246:7: columnNameComment ( COMMA columnNameComment )*
            {
            pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList13099);
            columnNameComment785=columnNameComment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameComment.add(columnNameComment785.getTree());

            // HiveParser.g:2246:25: ( COMMA columnNameComment )*
            loop235:
            do {
                int alt235=2;
                int LA235_0 = input.LA(1);

                if ( (LA235_0==COMMA) ) {
                    alt235=1;
                }


                switch (alt235) {
            	case 1 :
            	    // HiveParser.g:2246:26: COMMA columnNameComment
            	    {
            	    COMMA786=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameCommentList13102); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA786);


            	    pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList13104);
            	    columnNameComment787=columnNameComment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_columnNameComment.add(columnNameComment787.getTree());

            	    }
            	    break;

            	default :
            	    break loop235;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameComment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2246:52: -> ^( TOK_TABCOLNAME ( columnNameComment )+ )
            {
                // HiveParser.g:2246:55: ^( TOK_TABCOLNAME ( columnNameComment )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_1);

                if ( !(stream_columnNameComment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameComment.nextTree());

                }
                stream_columnNameComment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameCommentList"


    public static class columnNameComment_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameComment"
    // HiveParser.g:2249:1: columnNameComment : colName= identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) ;
    public final HiveParser.columnNameComment_return columnNameComment() throws RecognitionException {
        HiveParser.columnNameComment_return retval = new HiveParser.columnNameComment_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token comment=null;
        Token KW_COMMENT788=null;
        HiveParser_IdentifiersParser.identifier_return colName =null;


        ASTNode comment_tree=null;
        ASTNode KW_COMMENT788_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
         pushMsg("column name comment", state); 
        try {
            // HiveParser.g:2252:5: (colName= identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) )
            // HiveParser.g:2252:7: colName= identifier ( KW_COMMENT comment= StringLiteral )?
            {
            pushFollow(FOLLOW_identifier_in_columnNameComment13144);
            colName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());

            // HiveParser.g:2252:26: ( KW_COMMENT comment= StringLiteral )?
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==KW_COMMENT) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    // HiveParser.g:2252:27: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT788=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameComment13147); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT788);


                    comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameComment13151); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: comment, colName
            // token labels: comment
            // rule labels: colName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2253:5: -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
            {
                // HiveParser.g:2253:8: ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextTree());

                adaptor.addChild(root_1, 
                (ASTNode)adaptor.create(TOK_NULL, "TOK_NULL")
                );

                // HiveParser.g:2253:40: ( $comment)?
                if ( stream_comment.hasNext() ) {
                    adaptor.addChild(root_1, stream_comment.nextNode());

                }
                stream_comment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameComment"


    public static class orderSpecificationRewrite_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "orderSpecificationRewrite"
    // HiveParser.g:2256:1: orderSpecificationRewrite : ( KW_ASC -> ^( TOK_TABSORTCOLNAMEASC ) | KW_DESC -> ^( TOK_TABSORTCOLNAMEDESC ) );
    public final HiveParser.orderSpecificationRewrite_return orderSpecificationRewrite() throws RecognitionException {
        HiveParser.orderSpecificationRewrite_return retval = new HiveParser.orderSpecificationRewrite_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_ASC789=null;
        Token KW_DESC790=null;

        ASTNode KW_ASC789_tree=null;
        ASTNode KW_DESC790_tree=null;
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_KW_ASC=new RewriteRuleTokenStream(adaptor,"token KW_ASC");

         pushMsg("order specification", state); 
        try {
            // HiveParser.g:2259:5: ( KW_ASC -> ^( TOK_TABSORTCOLNAMEASC ) | KW_DESC -> ^( TOK_TABSORTCOLNAMEDESC ) )
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==KW_ASC) ) {
                alt237=1;
            }
            else if ( (LA237_0==KW_DESC) ) {
                alt237=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);

                throw nvae;

            }
            switch (alt237) {
                case 1 :
                    // HiveParser.g:2259:7: KW_ASC
                    {
                    KW_ASC789=(Token)match(input,KW_ASC,FOLLOW_KW_ASC_in_orderSpecificationRewrite13199); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ASC.add(KW_ASC789);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2259:14: -> ^( TOK_TABSORTCOLNAMEASC )
                    {
                        // HiveParser.g:2259:17: ^( TOK_TABSORTCOLNAMEASC )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2260:7: KW_DESC
                    {
                    KW_DESC790=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_orderSpecificationRewrite13213); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DESC.add(KW_DESC790);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2260:15: -> ^( TOK_TABSORTCOLNAMEDESC )
                    {
                        // HiveParser.g:2260:18: ^( TOK_TABSORTCOLNAMEDESC )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "orderSpecificationRewrite"


    public static class columnRefOrder_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnRefOrder"
    // HiveParser.g:2263:1: columnRefOrder : expression (orderSpec= orderSpecificationRewrite )? (nullSpec= nullOrdering )? -> {$orderSpec.tree == null && $nullSpec.tree == null && nullsLast()}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_LAST expression ) ) -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) ) -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType() == HiveParser.TOK_TABSORTCOLNAMEASC && nullsLast()}? ^( $orderSpec ^( TOK_NULLS_LAST expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType() == HiveParser.TOK_TABSORTCOLNAMEDESC && nullsLast()}? ^( $orderSpec ^( TOK_NULLS_FIRST expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType() == HiveParser.TOK_TABSORTCOLNAMEASC}? ^( $orderSpec ^( TOK_NULLS_FIRST expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType() == HiveParser.TOK_TABSORTCOLNAMEDESC}? ^( $orderSpec ^( TOK_NULLS_LAST expression ) ) -> ^( $orderSpec ^( $nullSpec expression ) ) ;
    public final HiveParser.columnRefOrder_return columnRefOrder() throws RecognitionException {
        HiveParser.columnRefOrder_return retval = new HiveParser.columnRefOrder_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.orderSpecificationRewrite_return orderSpec =null;

        HiveParser.nullOrdering_return nullSpec =null;

        HiveParser_IdentifiersParser.expression_return expression791 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_orderSpecificationRewrite=new RewriteRuleSubtreeStream(adaptor,"rule orderSpecificationRewrite");
        RewriteRuleSubtreeStream stream_nullOrdering=new RewriteRuleSubtreeStream(adaptor,"rule nullOrdering");
         pushMsg("column order", state); 
        try {
            // HiveParser.g:2266:5: ( expression (orderSpec= orderSpecificationRewrite )? (nullSpec= nullOrdering )? -> {$orderSpec.tree == null && $nullSpec.tree == null && nullsLast()}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_LAST expression ) ) -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) ) -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType() == HiveParser.TOK_TABSORTCOLNAMEASC && nullsLast()}? ^( $orderSpec ^( TOK_NULLS_LAST expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType() == HiveParser.TOK_TABSORTCOLNAMEDESC && nullsLast()}? ^( $orderSpec ^( TOK_NULLS_FIRST expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType() == HiveParser.TOK_TABSORTCOLNAMEASC}? ^( $orderSpec ^( TOK_NULLS_FIRST expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType() == HiveParser.TOK_TABSORTCOLNAMEDESC}? ^( $orderSpec ^( TOK_NULLS_LAST expression ) ) -> ^( $orderSpec ^( $nullSpec expression ) ) )
            // HiveParser.g:2266:7: expression (orderSpec= orderSpecificationRewrite )? (nullSpec= nullOrdering )?
            {
            pushFollow(FOLLOW_expression_in_columnRefOrder13246);
            expression791=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression791.getTree());

            // HiveParser.g:2266:27: (orderSpec= orderSpecificationRewrite )?
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==KW_ASC||LA238_0==KW_DESC) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    // HiveParser.g:2266:27: orderSpec= orderSpecificationRewrite
                    {
                    pushFollow(FOLLOW_orderSpecificationRewrite_in_columnRefOrder13250);
                    orderSpec=orderSpecificationRewrite();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderSpecificationRewrite.add(orderSpec.getTree());

                    }
                    break;

            }


            // HiveParser.g:2266:63: (nullSpec= nullOrdering )?
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==KW_NULLS) ) {
                alt239=1;
            }
            switch (alt239) {
                case 1 :
                    // HiveParser.g:2266:63: nullSpec= nullOrdering
                    {
                    pushFollow(FOLLOW_nullOrdering_in_columnRefOrder13255);
                    nullSpec=nullOrdering();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nullOrdering.add(nullSpec.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: expression, orderSpec, orderSpec, expression, nullSpec, orderSpec, expression, expression, expression, expression, orderSpec, nullSpec, expression, orderSpec, expression
            // token labels: 
            // rule labels: orderSpec, nullSpec, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_orderSpec=new RewriteRuleSubtreeStream(adaptor,"rule orderSpec",orderSpec!=null?orderSpec.tree:null);
            RewriteRuleSubtreeStream stream_nullSpec=new RewriteRuleSubtreeStream(adaptor,"rule nullSpec",nullSpec!=null?nullSpec.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2268:5: -> {$orderSpec.tree == null && $nullSpec.tree == null && nullsLast()}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_LAST expression ) )
            if ((orderSpec!=null?((ASTNode)orderSpec.tree):null) == null && (nullSpec!=null?((ASTNode)nullSpec.tree):null) == null && nullsLast()) {
                // HiveParser.g:2269:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_LAST expression ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC")
                , root_1);

                // HiveParser.g:2269:37: ^( TOK_NULLS_LAST expression )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_NULLS_LAST, "TOK_NULLS_LAST")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2271:5: -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) )
            if ((orderSpec!=null?((ASTNode)orderSpec.tree):null) == null && (nullSpec!=null?((ASTNode)nullSpec.tree):null) == null) {
                // HiveParser.g:2272:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC")
                , root_1);

                // HiveParser.g:2272:37: ^( TOK_NULLS_FIRST expression )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2274:5: -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) )
            if ((orderSpec!=null?((ASTNode)orderSpec.tree):null) == null) {
                // HiveParser.g:2275:13: ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC")
                , root_1);

                // HiveParser.g:2275:37: ^( $nullSpec expression )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2277:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType() == HiveParser.TOK_TABSORTCOLNAMEASC && nullsLast()}? ^( $orderSpec ^( TOK_NULLS_LAST expression ) )
            if ((nullSpec!=null?((ASTNode)nullSpec.tree):null) == null && (orderSpec!=null?((ASTNode)orderSpec.tree):null).getType() == HiveParser.TOK_TABSORTCOLNAMEASC && nullsLast()) {
                // HiveParser.g:2278:13: ^( $orderSpec ^( TOK_NULLS_LAST expression ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(stream_orderSpec.nextNode(), root_1);

                // HiveParser.g:2278:26: ^( TOK_NULLS_LAST expression )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_NULLS_LAST, "TOK_NULLS_LAST")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2280:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType() == HiveParser.TOK_TABSORTCOLNAMEDESC && nullsLast()}? ^( $orderSpec ^( TOK_NULLS_FIRST expression ) )
            if ((nullSpec!=null?((ASTNode)nullSpec.tree):null) == null && (orderSpec!=null?((ASTNode)orderSpec.tree):null).getType() == HiveParser.TOK_TABSORTCOLNAMEDESC && nullsLast()) {
                // HiveParser.g:2281:13: ^( $orderSpec ^( TOK_NULLS_FIRST expression ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(stream_orderSpec.nextNode(), root_1);

                // HiveParser.g:2281:26: ^( TOK_NULLS_FIRST expression )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2283:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType() == HiveParser.TOK_TABSORTCOLNAMEASC}? ^( $orderSpec ^( TOK_NULLS_FIRST expression ) )
            if ((nullSpec!=null?((ASTNode)nullSpec.tree):null) == null && (orderSpec!=null?((ASTNode)orderSpec.tree):null).getType() == HiveParser.TOK_TABSORTCOLNAMEASC) {
                // HiveParser.g:2284:13: ^( $orderSpec ^( TOK_NULLS_FIRST expression ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(stream_orderSpec.nextNode(), root_1);

                // HiveParser.g:2284:26: ^( TOK_NULLS_FIRST expression )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2286:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType() == HiveParser.TOK_TABSORTCOLNAMEDESC}? ^( $orderSpec ^( TOK_NULLS_LAST expression ) )
            if ((nullSpec!=null?((ASTNode)nullSpec.tree):null) == null && (orderSpec!=null?((ASTNode)orderSpec.tree):null).getType() == HiveParser.TOK_TABSORTCOLNAMEDESC) {
                // HiveParser.g:2287:13: ^( $orderSpec ^( TOK_NULLS_LAST expression ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(stream_orderSpec.nextNode(), root_1);

                // HiveParser.g:2287:26: ^( TOK_NULLS_LAST expression )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_NULLS_LAST, "TOK_NULLS_LAST")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2289:5: -> ^( $orderSpec ^( $nullSpec expression ) )
            {
                // HiveParser.g:2289:8: ^( $orderSpec ^( $nullSpec expression ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(stream_orderSpec.nextNode(), root_1);

                // HiveParser.g:2289:21: ^( $nullSpec expression )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnRefOrder"


    public static class columnNameType_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameType"
    // HiveParser.g:2292:1: columnNameType : colName= identifier colType ( KW_COMMENT comment= StringLiteral )? -> {containExcludedCharForCreateTableColumnName($colName.text)}? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
    public final HiveParser.columnNameType_return columnNameType() throws RecognitionException {
        HiveParser.columnNameType_return retval = new HiveParser.columnNameType_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token comment=null;
        Token KW_COMMENT793=null;
        HiveParser_IdentifiersParser.identifier_return colName =null;

        HiveParser.colType_return colType792 =null;


        ASTNode comment_tree=null;
        ASTNode KW_COMMENT793_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         pushMsg("column specification", state); 
        try {
            // HiveParser.g:2295:5: (colName= identifier colType ( KW_COMMENT comment= StringLiteral )? -> {containExcludedCharForCreateTableColumnName($colName.text)}? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
            // HiveParser.g:2295:7: colName= identifier colType ( KW_COMMENT comment= StringLiteral )?
            {
            pushFollow(FOLLOW_identifier_in_columnNameType13558);
            colName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());

            pushFollow(FOLLOW_colType_in_columnNameType13560);
            colType792=colType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_colType.add(colType792.getTree());

            // HiveParser.g:2295:34: ( KW_COMMENT comment= StringLiteral )?
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==KW_COMMENT) ) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    // HiveParser.g:2295:35: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT793=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameType13563); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT793);


                    comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameType13567); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: colType, colType, colName, comment, colName
            // token labels: comment
            // rule labels: colName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2296:5: -> {containExcludedCharForCreateTableColumnName($colName.text)}?
            if (containExcludedCharForCreateTableColumnName((colName!=null?input.toString(colName.start,colName.stop):null))) {
                adaptor.addChild(root_0, throwColumnNameException());

            }

            else // 2297:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
            if (comment == null) {
                // HiveParser.g:2297:28: ^( TOK_TABCOL $colName colType )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextTree());

                adaptor.addChild(root_1, stream_colType.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2298:5: -> ^( TOK_TABCOL $colName colType $comment)
            {
                // HiveParser.g:2298:28: ^( TOK_TABCOL $colName colType $comment)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextTree());

                adaptor.addChild(root_1, stream_colType.nextTree());

                adaptor.addChild(root_1, stream_comment.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameType"


    public static class columnNameTypeOrConstraint_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameTypeOrConstraint"
    // HiveParser.g:2301:1: columnNameTypeOrConstraint : ( ( tableConstraint ) | ( columnNameTypeConstraint ) );
    public final HiveParser.columnNameTypeOrConstraint_return columnNameTypeOrConstraint() throws RecognitionException {
        HiveParser.columnNameTypeOrConstraint_return retval = new HiveParser.columnNameTypeOrConstraint_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.tableConstraint_return tableConstraint794 =null;

        HiveParser.columnNameTypeConstraint_return columnNameTypeConstraint795 =null;



         pushMsg("column name or constraint", state); 
        try {
            // HiveParser.g:2304:5: ( ( tableConstraint ) | ( columnNameTypeConstraint ) )
            int alt241=2;
            switch ( input.LA(1) ) {
            case KW_CONSTRAINT:
            case KW_FOREIGN:
            case KW_PRIMARY:
            case KW_UNIQUE:
                {
                alt241=1;
                }
                break;
            case KW_CHECK:
                {
                int LA241_5 = input.LA(2);

                if ( (LA241_5==LPAREN) ) {
                    alt241=1;
                }
                else if ( (LA241_5==KW_ARRAY||(LA241_5 >= KW_BIGINT && LA241_5 <= KW_BOOLEAN)||LA241_5==KW_CHAR||(LA241_5 >= KW_DATE && LA241_5 <= KW_DATETIME)||LA241_5==KW_DECIMAL||LA241_5==KW_DOUBLE||LA241_5==KW_FLOAT||LA241_5==KW_INT||LA241_5==KW_MAP||LA241_5==KW_REAL||LA241_5==KW_SMALLINT||(LA241_5 >= KW_STRING && LA241_5 <= KW_STRUCT)||(LA241_5 >= KW_TIMESTAMP && LA241_5 <= KW_TINYINT)||LA241_5==KW_UNIONTYPE||LA241_5==KW_VARCHAR) ) {
                    alt241=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 241, 5, input);

                    throw nvae;

                }
                }
                break;
            case Identifier:
            case KW_ABORT:
            case KW_ACTIVATE:
            case KW_ACTIVE:
            case KW_ADD:
            case KW_ADMIN:
            case KW_AFTER:
            case KW_ALLOC_FRACTION:
            case KW_ANALYZE:
            case KW_ARCHIVE:
            case KW_ASC:
            case KW_AST:
            case KW_AT:
            case KW_AUTOCOMMIT:
            case KW_BEFORE:
            case KW_BRANCH:
            case KW_BUCKET:
            case KW_BUCKETS:
            case KW_CACHE:
            case KW_CASCADE:
            case KW_CBO:
            case KW_CHANGE:
            case KW_CLUSTER:
            case KW_CLUSTERED:
            case KW_CLUSTERSTATUS:
            case KW_COLLECTION:
            case KW_COLUMNS:
            case KW_COMMENT:
            case KW_COMPACT:
            case KW_COMPACTIONS:
            case KW_COMPUTE:
            case KW_CONCATENATE:
            case KW_CONTINUE:
            case KW_COST:
            case KW_CRON:
            case KW_DATA:
            case KW_DATABASES:
            case KW_DATETIME:
            case KW_DAY:
            case KW_DBPROPERTIES:
            case KW_DCPROPERTIES:
            case KW_DEBUG:
            case KW_DEFAULT:
            case KW_DEFERRED:
            case KW_DEFINED:
            case KW_DELIMITED:
            case KW_DEPENDENCY:
            case KW_DESC:
            case KW_DETAIL:
            case KW_DIRECTORIES:
            case KW_DIRECTORY:
            case KW_DISABLE:
            case KW_DISTRIBUTE:
            case KW_DISTRIBUTED:
            case KW_DO:
            case KW_DOW:
            case KW_DUMP:
            case KW_ELEM_TYPE:
            case KW_ENABLE:
            case KW_ENFORCED:
            case KW_ESCAPED:
            case KW_EVERY:
            case KW_EXCLUSIVE:
            case KW_EXECUTE:
            case KW_EXECUTED:
            case KW_EXPIRE_SNAPSHOTS:
            case KW_EXPLAIN:
            case KW_EXPORT:
            case KW_EXPRESSION:
            case KW_FAST_FORWARD:
            case KW_FIELDS:
            case KW_FILE:
            case KW_FILEFORMAT:
            case KW_FIRST:
            case KW_FORMAT:
            case KW_FORMATTED:
            case KW_FUNCTIONS:
            case KW_HOUR:
            case KW_IDXPROPERTIES:
            case KW_IGNORE:
            case KW_INDEX:
            case KW_INDEXES:
            case KW_INPATH:
            case KW_INPUTDRIVER:
            case KW_INPUTFORMAT:
            case KW_ISOLATION:
            case KW_ITEMS:
            case KW_JAR:
            case KW_JOINCOST:
            case KW_KEY:
            case KW_KEYS:
            case KW_KEY_TYPE:
            case KW_KILL:
            case KW_LAST:
            case KW_LEVEL:
            case KW_LIMIT:
            case KW_LINES:
            case KW_LOAD:
            case KW_LOCATION:
            case KW_LOCK:
            case KW_LOCKS:
            case KW_LOGICAL:
            case KW_LONG:
            case KW_MANAGED:
            case KW_MANAGEDLOCATION:
            case KW_MANAGEMENT:
            case KW_MAPJOIN:
            case KW_MAPPING:
            case KW_MATCHED:
            case KW_MATERIALIZED:
            case KW_METADATA:
            case KW_MINUTE:
            case KW_MONTH:
            case KW_MOVE:
            case KW_MSCK:
            case KW_NORELY:
            case KW_NOSCAN:
            case KW_NOVALIDATE:
            case KW_NULLS:
            case KW_OFFSET:
            case KW_OPERATOR:
            case KW_OPTIMIZE:
            case KW_OPTION:
            case KW_OUTPUTDRIVER:
            case KW_OUTPUTFORMAT:
            case KW_OVERWRITE:
            case KW_OWNER:
            case KW_PARTITIONED:
            case KW_PARTITIONS:
            case KW_PATH:
            case KW_PLAN:
            case KW_PLANS:
            case KW_PLUS:
            case KW_POOL:
            case KW_PRINCIPALS:
            case KW_PURGE:
            case KW_QUARTER:
            case KW_QUERY:
            case KW_QUERY_PARALLELISM:
            case KW_READ:
            case KW_REBUILD:
            case KW_RECORDREADER:
            case KW_RECORDWRITER:
            case KW_RELOAD:
            case KW_RELY:
            case KW_REMOTE:
            case KW_RENAME:
            case KW_REOPTIMIZATION:
            case KW_REPAIR:
            case KW_REPL:
            case KW_REPLACE:
            case KW_REPLICATION:
            case KW_RESOURCE:
            case KW_RESPECT:
            case KW_RESTRICT:
            case KW_RETAIN:
            case KW_RETENTION:
            case KW_REWRITE:
            case KW_ROLE:
            case KW_ROLES:
            case KW_SCHEDULED:
            case KW_SCHEDULING_POLICY:
            case KW_SCHEMA:
            case KW_SCHEMAS:
            case KW_SECOND:
            case KW_SEMI:
            case KW_SERDE:
            case KW_SERDEPROPERTIES:
            case KW_SERVER:
            case KW_SETS:
            case KW_SET_CURRENT_SNAPSHOT:
            case KW_SHARED:
            case KW_SHOW:
            case KW_SHOW_DATABASE:
            case KW_SKEWED:
            case KW_SNAPSHOT:
            case KW_SNAPSHOTS:
            case KW_SORT:
            case KW_SORTED:
            case KW_SPEC:
            case KW_SSL:
            case KW_STATISTICS:
            case KW_STATUS:
            case KW_STORED:
            case KW_STREAMTABLE:
            case KW_STRING:
            case KW_STRUCT:
            case KW_SUMMARY:
            case KW_SYSTEM_TIME:
            case KW_SYSTEM_VERSION:
            case KW_TABLES:
            case KW_TAG:
            case KW_TBLPROPERTIES:
            case KW_TEMPORARY:
            case KW_TERMINATED:
            case KW_TINYINT:
            case KW_TOUCH:
            case KW_TRANSACTION:
            case KW_TRANSACTIONAL:
            case KW_TRANSACTIONS:
            case KW_TRIM:
            case KW_TYPE:
            case KW_UNARCHIVE:
            case KW_UNDO:
            case KW_UNIONTYPE:
            case KW_UNKNOWN:
            case KW_UNLOCK:
            case KW_UNMANAGED:
            case KW_UNSET:
            case KW_UNSIGNED:
            case KW_URI:
            case KW_URL:
            case KW_USE:
            case KW_UTC:
            case KW_UTCTIMESTAMP:
            case KW_VALIDATE:
            case KW_VALUE_TYPE:
            case KW_VECTORIZATION:
            case KW_VIEW:
            case KW_VIEWS:
            case KW_WAIT:
            case KW_WEEK:
            case KW_WHILE:
            case KW_WITHIN:
            case KW_WORK:
            case KW_WORKLOAD:
            case KW_WRITE:
            case KW_YEAR:
            case KW_ZONE:
            case KW_BATCH:
            case KW_DAYOFWEEK:
            case KW_HOLD_DDLTIME:
            case KW_NO_DROP:
            case KW_OFFLINE:
            case KW_PROTECTION:
            case KW_READONLY:
            case KW_TIMESTAMPTZ:
                {
                alt241=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 241, 0, input);

                throw nvae;

            }

            switch (alt241) {
                case 1 :
                    // HiveParser.g:2304:7: ( tableConstraint )
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    // HiveParser.g:2304:7: ( tableConstraint )
                    // HiveParser.g:2304:9: tableConstraint
                    {
                    pushFollow(FOLLOW_tableConstraint_in_columnNameTypeOrConstraint13663);
                    tableConstraint794=tableConstraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tableConstraint794.getTree());

                    }


                    }
                    break;
                case 2 :
                    // HiveParser.g:2305:7: ( columnNameTypeConstraint )
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    // HiveParser.g:2305:7: ( columnNameTypeConstraint )
                    // HiveParser.g:2305:9: columnNameTypeConstraint
                    {
                    pushFollow(FOLLOW_columnNameTypeConstraint_in_columnNameTypeOrConstraint13675);
                    columnNameTypeConstraint795=columnNameTypeConstraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, columnNameTypeConstraint795.getTree());

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameTypeOrConstraint"


    public static class tableConstraint_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableConstraint"
    // HiveParser.g:2308:1: tableConstraint : ( ( createForeignKey ) | ( createConstraint ) );
    public final HiveParser.tableConstraint_return tableConstraint() throws RecognitionException {
        HiveParser.tableConstraint_return retval = new HiveParser.tableConstraint_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.createForeignKey_return createForeignKey796 =null;

        HiveParser.createConstraint_return createConstraint797 =null;



         pushMsg("table constraint", state); 
        try {
            // HiveParser.g:2311:5: ( ( createForeignKey ) | ( createConstraint ) )
            int alt242=2;
            switch ( input.LA(1) ) {
            case KW_CONSTRAINT:
                {
                int LA242_1 = input.LA(2);

                if ( (LA242_1==Identifier) ) {
                    int LA242_6 = input.LA(3);

                    if ( (LA242_6==KW_FOREIGN) ) {
                        alt242=1;
                    }
                    else if ( (LA242_6==KW_CHECK||LA242_6==KW_PRIMARY||LA242_6==KW_UNIQUE) ) {
                        alt242=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 6, input);

                        throw nvae;

                    }
                }
                else if ( ((LA242_1 >= KW_ABORT && LA242_1 <= KW_AFTER)||LA242_1==KW_ALLOC_FRACTION||LA242_1==KW_ANALYZE||LA242_1==KW_ARCHIVE||(LA242_1 >= KW_ASC && LA242_1 <= KW_AT)||(LA242_1 >= KW_AUTOCOMMIT && LA242_1 <= KW_BEFORE)||(LA242_1 >= KW_BRANCH && LA242_1 <= KW_BUCKETS)||(LA242_1 >= KW_CACHE && LA242_1 <= KW_CASCADE)||(LA242_1 >= KW_CBO && LA242_1 <= KW_CHANGE)||LA242_1==KW_CHECK||(LA242_1 >= KW_CLUSTER && LA242_1 <= KW_COLLECTION)||(LA242_1 >= KW_COLUMNS && LA242_1 <= KW_COMMENT)||(LA242_1 >= KW_COMPACT && LA242_1 <= KW_COMPACTIONS)||(LA242_1 >= KW_COMPUTE && LA242_1 <= KW_CONCATENATE)||LA242_1==KW_CONTINUE||LA242_1==KW_COST||LA242_1==KW_CRON||LA242_1==KW_DATA||LA242_1==KW_DATABASES||(LA242_1 >= KW_DATETIME && LA242_1 <= KW_DCPROPERTIES)||LA242_1==KW_DEBUG||(LA242_1 >= KW_DEFAULT && LA242_1 <= KW_DEFINED)||(LA242_1 >= KW_DELIMITED && LA242_1 <= KW_DESC)||(LA242_1 >= KW_DETAIL && LA242_1 <= KW_DISABLE)||(LA242_1 >= KW_DISTRIBUTE && LA242_1 <= KW_DO)||LA242_1==KW_DOW||(LA242_1 >= KW_DUMP && LA242_1 <= KW_ELEM_TYPE)||LA242_1==KW_ENABLE||(LA242_1 >= KW_ENFORCED && LA242_1 <= KW_EVERY)||(LA242_1 >= KW_EXCLUSIVE && LA242_1 <= KW_EXECUTED)||(LA242_1 >= KW_EXPIRE_SNAPSHOTS && LA242_1 <= KW_EXPRESSION)||LA242_1==KW_FAST_FORWARD||(LA242_1 >= KW_FIELDS && LA242_1 <= KW_FIRST)||(LA242_1 >= KW_FORMAT && LA242_1 <= KW_FORMATTED)||LA242_1==KW_FUNCTIONS||(LA242_1 >= KW_HOUR && LA242_1 <= KW_IDXPROPERTIES)||LA242_1==KW_IGNORE||(LA242_1 >= KW_INDEX && LA242_1 <= KW_INDEXES)||(LA242_1 >= KW_INPATH && LA242_1 <= KW_INPUTFORMAT)||(LA242_1 >= KW_ISOLATION && LA242_1 <= KW_JAR)||(LA242_1 >= KW_JOINCOST && LA242_1 <= KW_LAST)||LA242_1==KW_LEVEL||(LA242_1 >= KW_LIMIT && LA242_1 <= KW_LOAD)||(LA242_1 >= KW_LOCATION && LA242_1 <= KW_LONG)||(LA242_1 >= KW_MANAGED && LA242_1 <= KW_MANAGEMENT)||(LA242_1 >= KW_MAPJOIN && LA242_1 <= KW_MATERIALIZED)||LA242_1==KW_METADATA||(LA242_1 >= KW_MINUTE && LA242_1 <= KW_MONTH)||(LA242_1 >= KW_MOVE && LA242_1 <= KW_MSCK)||(LA242_1 >= KW_NORELY && LA242_1 <= KW_NOSCAN)||LA242_1==KW_NOVALIDATE||LA242_1==KW_NULLS||LA242_1==KW_OFFSET||(LA242_1 >= KW_OPERATOR && LA242_1 <= KW_OPTION)||(LA242_1 >= KW_OUTPUTDRIVER && LA242_1 <= KW_OUTPUTFORMAT)||(LA242_1 >= KW_OVERWRITE && LA242_1 <= KW_OWNER)||(LA242_1 >= KW_PARTITIONED && LA242_1 <= KW_PATH)||(LA242_1 >= KW_PLAN && LA242_1 <= KW_POOL)||LA242_1==KW_PRINCIPALS||LA242_1==KW_PURGE||(LA242_1 >= KW_QUARTER && LA242_1 <= KW_QUERY_PARALLELISM)||LA242_1==KW_READ||(LA242_1 >= KW_REBUILD && LA242_1 <= KW_RECORDWRITER)||(LA242_1 >= KW_RELOAD && LA242_1 <= KW_RETENTION)||LA242_1==KW_REWRITE||(LA242_1 >= KW_ROLE && LA242_1 <= KW_ROLES)||(LA242_1 >= KW_SCHEDULED && LA242_1 <= KW_SECOND)||(LA242_1 >= KW_SEMI && LA242_1 <= KW_SERVER)||(LA242_1 >= KW_SETS && LA242_1 <= KW_SKEWED)||(LA242_1 >= KW_SNAPSHOT && LA242_1 <= KW_SNAPSHOTS)||(LA242_1 >= KW_SORT && LA242_1 <= KW_SSL)||(LA242_1 >= KW_STATISTICS && LA242_1 <= KW_SUMMARY)||(LA242_1 >= KW_SYSTEM_TIME && LA242_1 <= KW_SYSTEM_VERSION)||LA242_1==KW_TABLES||(LA242_1 >= KW_TAG && LA242_1 <= KW_TERMINATED)||LA242_1==KW_TINYINT||LA242_1==KW_TOUCH||(LA242_1 >= KW_TRANSACTION && LA242_1 <= KW_TRANSACTIONS)||LA242_1==KW_TRIM||(LA242_1 >= KW_TYPE && LA242_1 <= KW_UNARCHIVE)||LA242_1==KW_UNDO||LA242_1==KW_UNIONTYPE||(LA242_1 >= KW_UNKNOWN && LA242_1 <= KW_UNSIGNED)||(LA242_1 >= KW_URI && LA242_1 <= KW_USE)||(LA242_1 >= KW_UTC && LA242_1 <= KW_VALIDATE)||LA242_1==KW_VALUE_TYPE||(LA242_1 >= KW_VECTORIZATION && LA242_1 <= KW_WEEK)||LA242_1==KW_WHILE||(LA242_1 >= KW_WITHIN && LA242_1 <= KW_ZONE)||LA242_1==KW_BATCH||LA242_1==KW_DAYOFWEEK||LA242_1==KW_HOLD_DDLTIME||LA242_1==KW_NO_DROP||LA242_1==KW_OFFLINE||LA242_1==KW_PROTECTION||LA242_1==KW_READONLY||LA242_1==KW_TIMESTAMPTZ) ) {
                    int LA242_7 = input.LA(3);

                    if ( (LA242_7==KW_FOREIGN) ) {
                        alt242=1;
                    }
                    else if ( (LA242_7==KW_CHECK||LA242_7==KW_PRIMARY||LA242_7==KW_UNIQUE) ) {
                        alt242=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 7, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 1, input);

                    throw nvae;

                }
                }
                break;
            case KW_FOREIGN:
                {
                alt242=1;
                }
                break;
            case KW_CHECK:
            case KW_PRIMARY:
            case KW_UNIQUE:
                {
                alt242=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;

            }

            switch (alt242) {
                case 1 :
                    // HiveParser.g:2311:7: ( createForeignKey )
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    // HiveParser.g:2311:7: ( createForeignKey )
                    // HiveParser.g:2311:9: createForeignKey
                    {
                    pushFollow(FOLLOW_createForeignKey_in_tableConstraint13706);
                    createForeignKey796=createForeignKey();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createForeignKey796.getTree());

                    }


                    }
                    break;
                case 2 :
                    // HiveParser.g:2312:7: ( createConstraint )
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    // HiveParser.g:2312:7: ( createConstraint )
                    // HiveParser.g:2312:9: createConstraint
                    {
                    pushFollow(FOLLOW_createConstraint_in_tableConstraint13718);
                    createConstraint797=createConstraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createConstraint797.getTree());

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableConstraint"


    public static class columnNameTypeConstraint_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameTypeConstraint"
    // HiveParser.g:2315:1: columnNameTypeConstraint : colName= identifier colType ( columnConstraint[$colName.tree] )? ( KW_COMMENT comment= StringLiteral )? -> {containExcludedCharForCreateTableColumnName($colName.text)}? -> ^( TOK_TABCOL $colName colType ( $comment)? ( columnConstraint )? ) ;
    public final HiveParser.columnNameTypeConstraint_return columnNameTypeConstraint() throws RecognitionException {
        HiveParser.columnNameTypeConstraint_return retval = new HiveParser.columnNameTypeConstraint_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token comment=null;
        Token KW_COMMENT800=null;
        HiveParser_IdentifiersParser.identifier_return colName =null;

        HiveParser.colType_return colType798 =null;

        HiveParser.columnConstraint_return columnConstraint799 =null;


        ASTNode comment_tree=null;
        ASTNode KW_COMMENT800_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_columnConstraint=new RewriteRuleSubtreeStream(adaptor,"rule columnConstraint");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         pushMsg("column specification", state); 
        try {
            // HiveParser.g:2318:5: (colName= identifier colType ( columnConstraint[$colName.tree] )? ( KW_COMMENT comment= StringLiteral )? -> {containExcludedCharForCreateTableColumnName($colName.text)}? -> ^( TOK_TABCOL $colName colType ( $comment)? ( columnConstraint )? ) )
            // HiveParser.g:2318:7: colName= identifier colType ( columnConstraint[$colName.tree] )? ( KW_COMMENT comment= StringLiteral )?
            {
            pushFollow(FOLLOW_identifier_in_columnNameTypeConstraint13749);
            colName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());

            pushFollow(FOLLOW_colType_in_columnNameTypeConstraint13751);
            colType798=colType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_colType.add(colType798.getTree());

            // HiveParser.g:2318:34: ( columnConstraint[$colName.tree] )?
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==KW_CHECK||LA243_0==KW_CONSTRAINT||LA243_0==KW_DEFAULT||LA243_0==KW_NOT||LA243_0==KW_PRIMARY||LA243_0==KW_REFERENCES||LA243_0==KW_UNIQUE) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    // HiveParser.g:2318:34: columnConstraint[$colName.tree]
                    {
                    pushFollow(FOLLOW_columnConstraint_in_columnNameTypeConstraint13753);
                    columnConstraint799=columnConstraint((colName!=null?((ASTNode)colName.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnConstraint.add(columnConstraint799.getTree());

                    }
                    break;

            }


            // HiveParser.g:2318:67: ( KW_COMMENT comment= StringLiteral )?
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==KW_COMMENT) ) {
                alt244=1;
            }
            switch (alt244) {
                case 1 :
                    // HiveParser.g:2318:68: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT800=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameTypeConstraint13758); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT800);


                    comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameTypeConstraint13762); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: colName, colType, comment, columnConstraint
            // token labels: comment
            // rule labels: colName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2319:5: -> {containExcludedCharForCreateTableColumnName($colName.text)}?
            if (containExcludedCharForCreateTableColumnName((colName!=null?input.toString(colName.start,colName.stop):null))) {
                adaptor.addChild(root_0, throwColumnNameException());

            }

            else // 2320:5: -> ^( TOK_TABCOL $colName colType ( $comment)? ( columnConstraint )? )
            {
                // HiveParser.g:2320:8: ^( TOK_TABCOL $colName colType ( $comment)? ( columnConstraint )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextTree());

                adaptor.addChild(root_1, stream_colType.nextTree());

                // HiveParser.g:2320:39: ( $comment)?
                if ( stream_comment.hasNext() ) {
                    adaptor.addChild(root_1, stream_comment.nextNode());

                }
                stream_comment.reset();

                // HiveParser.g:2320:48: ( columnConstraint )?
                if ( stream_columnConstraint.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnConstraint.nextTree());

                }
                stream_columnConstraint.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameTypeConstraint"


    public static class columnConstraint_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnConstraint"
    // HiveParser.g:2323:1: columnConstraint[CommonTree fkColName] : ( ( foreignKeyConstraint[$fkColName] ) | ( colConstraint ) );
    public final HiveParser.columnConstraint_return columnConstraint(CommonTree fkColName) throws RecognitionException {
        HiveParser.columnConstraint_return retval = new HiveParser.columnConstraint_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.foreignKeyConstraint_return foreignKeyConstraint801 =null;

        HiveParser.colConstraint_return colConstraint802 =null;



         pushMsg("column constraint", state); 
        try {
            // HiveParser.g:2326:5: ( ( foreignKeyConstraint[$fkColName] ) | ( colConstraint ) )
            int alt245=2;
            switch ( input.LA(1) ) {
            case KW_CONSTRAINT:
                {
                int LA245_1 = input.LA(2);

                if ( (LA245_1==Identifier) ) {
                    int LA245_8 = input.LA(3);

                    if ( (LA245_8==KW_REFERENCES) ) {
                        alt245=1;
                    }
                    else if ( (LA245_8==KW_CHECK||LA245_8==KW_DEFAULT||LA245_8==KW_NOT||LA245_8==KW_PRIMARY||LA245_8==KW_UNIQUE) ) {
                        alt245=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 245, 8, input);

                        throw nvae;

                    }
                }
                else if ( ((LA245_1 >= KW_ABORT && LA245_1 <= KW_AFTER)||LA245_1==KW_ALLOC_FRACTION||LA245_1==KW_ANALYZE||LA245_1==KW_ARCHIVE||(LA245_1 >= KW_ASC && LA245_1 <= KW_AT)||(LA245_1 >= KW_AUTOCOMMIT && LA245_1 <= KW_BEFORE)||(LA245_1 >= KW_BRANCH && LA245_1 <= KW_BUCKETS)||(LA245_1 >= KW_CACHE && LA245_1 <= KW_CASCADE)||(LA245_1 >= KW_CBO && LA245_1 <= KW_CHANGE)||LA245_1==KW_CHECK||(LA245_1 >= KW_CLUSTER && LA245_1 <= KW_COLLECTION)||(LA245_1 >= KW_COLUMNS && LA245_1 <= KW_COMMENT)||(LA245_1 >= KW_COMPACT && LA245_1 <= KW_COMPACTIONS)||(LA245_1 >= KW_COMPUTE && LA245_1 <= KW_CONCATENATE)||LA245_1==KW_CONTINUE||LA245_1==KW_COST||LA245_1==KW_CRON||LA245_1==KW_DATA||LA245_1==KW_DATABASES||(LA245_1 >= KW_DATETIME && LA245_1 <= KW_DCPROPERTIES)||LA245_1==KW_DEBUG||(LA245_1 >= KW_DEFAULT && LA245_1 <= KW_DEFINED)||(LA245_1 >= KW_DELIMITED && LA245_1 <= KW_DESC)||(LA245_1 >= KW_DETAIL && LA245_1 <= KW_DISABLE)||(LA245_1 >= KW_DISTRIBUTE && LA245_1 <= KW_DO)||LA245_1==KW_DOW||(LA245_1 >= KW_DUMP && LA245_1 <= KW_ELEM_TYPE)||LA245_1==KW_ENABLE||(LA245_1 >= KW_ENFORCED && LA245_1 <= KW_EVERY)||(LA245_1 >= KW_EXCLUSIVE && LA245_1 <= KW_EXECUTED)||(LA245_1 >= KW_EXPIRE_SNAPSHOTS && LA245_1 <= KW_EXPRESSION)||LA245_1==KW_FAST_FORWARD||(LA245_1 >= KW_FIELDS && LA245_1 <= KW_FIRST)||(LA245_1 >= KW_FORMAT && LA245_1 <= KW_FORMATTED)||LA245_1==KW_FUNCTIONS||(LA245_1 >= KW_HOUR && LA245_1 <= KW_IDXPROPERTIES)||LA245_1==KW_IGNORE||(LA245_1 >= KW_INDEX && LA245_1 <= KW_INDEXES)||(LA245_1 >= KW_INPATH && LA245_1 <= KW_INPUTFORMAT)||(LA245_1 >= KW_ISOLATION && LA245_1 <= KW_JAR)||(LA245_1 >= KW_JOINCOST && LA245_1 <= KW_LAST)||LA245_1==KW_LEVEL||(LA245_1 >= KW_LIMIT && LA245_1 <= KW_LOAD)||(LA245_1 >= KW_LOCATION && LA245_1 <= KW_LONG)||(LA245_1 >= KW_MANAGED && LA245_1 <= KW_MANAGEMENT)||(LA245_1 >= KW_MAPJOIN && LA245_1 <= KW_MATERIALIZED)||LA245_1==KW_METADATA||(LA245_1 >= KW_MINUTE && LA245_1 <= KW_MONTH)||(LA245_1 >= KW_MOVE && LA245_1 <= KW_MSCK)||(LA245_1 >= KW_NORELY && LA245_1 <= KW_NOSCAN)||LA245_1==KW_NOVALIDATE||LA245_1==KW_NULLS||LA245_1==KW_OFFSET||(LA245_1 >= KW_OPERATOR && LA245_1 <= KW_OPTION)||(LA245_1 >= KW_OUTPUTDRIVER && LA245_1 <= KW_OUTPUTFORMAT)||(LA245_1 >= KW_OVERWRITE && LA245_1 <= KW_OWNER)||(LA245_1 >= KW_PARTITIONED && LA245_1 <= KW_PATH)||(LA245_1 >= KW_PLAN && LA245_1 <= KW_POOL)||LA245_1==KW_PRINCIPALS||LA245_1==KW_PURGE||(LA245_1 >= KW_QUARTER && LA245_1 <= KW_QUERY_PARALLELISM)||LA245_1==KW_READ||(LA245_1 >= KW_REBUILD && LA245_1 <= KW_RECORDWRITER)||(LA245_1 >= KW_RELOAD && LA245_1 <= KW_RETENTION)||LA245_1==KW_REWRITE||(LA245_1 >= KW_ROLE && LA245_1 <= KW_ROLES)||(LA245_1 >= KW_SCHEDULED && LA245_1 <= KW_SECOND)||(LA245_1 >= KW_SEMI && LA245_1 <= KW_SERVER)||(LA245_1 >= KW_SETS && LA245_1 <= KW_SKEWED)||(LA245_1 >= KW_SNAPSHOT && LA245_1 <= KW_SNAPSHOTS)||(LA245_1 >= KW_SORT && LA245_1 <= KW_SSL)||(LA245_1 >= KW_STATISTICS && LA245_1 <= KW_SUMMARY)||(LA245_1 >= KW_SYSTEM_TIME && LA245_1 <= KW_SYSTEM_VERSION)||LA245_1==KW_TABLES||(LA245_1 >= KW_TAG && LA245_1 <= KW_TERMINATED)||LA245_1==KW_TINYINT||LA245_1==KW_TOUCH||(LA245_1 >= KW_TRANSACTION && LA245_1 <= KW_TRANSACTIONS)||LA245_1==KW_TRIM||(LA245_1 >= KW_TYPE && LA245_1 <= KW_UNARCHIVE)||LA245_1==KW_UNDO||LA245_1==KW_UNIONTYPE||(LA245_1 >= KW_UNKNOWN && LA245_1 <= KW_UNSIGNED)||(LA245_1 >= KW_URI && LA245_1 <= KW_USE)||(LA245_1 >= KW_UTC && LA245_1 <= KW_VALIDATE)||LA245_1==KW_VALUE_TYPE||(LA245_1 >= KW_VECTORIZATION && LA245_1 <= KW_WEEK)||LA245_1==KW_WHILE||(LA245_1 >= KW_WITHIN && LA245_1 <= KW_ZONE)||LA245_1==KW_BATCH||LA245_1==KW_DAYOFWEEK||LA245_1==KW_HOLD_DDLTIME||LA245_1==KW_NO_DROP||LA245_1==KW_OFFLINE||LA245_1==KW_PROTECTION||LA245_1==KW_READONLY||LA245_1==KW_TIMESTAMPTZ) ) {
                    int LA245_9 = input.LA(3);

                    if ( (LA245_9==KW_REFERENCES) ) {
                        alt245=1;
                    }
                    else if ( (LA245_9==KW_CHECK||LA245_9==KW_DEFAULT||LA245_9==KW_NOT||LA245_9==KW_PRIMARY||LA245_9==KW_UNIQUE) ) {
                        alt245=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 245, 9, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 245, 1, input);

                    throw nvae;

                }
                }
                break;
            case KW_REFERENCES:
                {
                alt245=1;
                }
                break;
            case KW_CHECK:
            case KW_DEFAULT:
            case KW_NOT:
            case KW_PRIMARY:
            case KW_UNIQUE:
                {
                alt245=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                throw nvae;

            }

            switch (alt245) {
                case 1 :
                    // HiveParser.g:2326:7: ( foreignKeyConstraint[$fkColName] )
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    // HiveParser.g:2326:7: ( foreignKeyConstraint[$fkColName] )
                    // HiveParser.g:2326:9: foreignKeyConstraint[$fkColName]
                    {
                    pushFollow(FOLLOW_foreignKeyConstraint_in_columnConstraint13826);
                    foreignKeyConstraint801=foreignKeyConstraint(fkColName);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, foreignKeyConstraint801.getTree());

                    }


                    }
                    break;
                case 2 :
                    // HiveParser.g:2327:7: ( colConstraint )
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    // HiveParser.g:2327:7: ( colConstraint )
                    // HiveParser.g:2327:9: colConstraint
                    {
                    pushFollow(FOLLOW_colConstraint_in_columnConstraint13839);
                    colConstraint802=colConstraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colConstraint802.getTree());

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnConstraint"


    public static class foreignKeyConstraint_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "foreignKeyConstraint"
    // HiveParser.g:2330:1: foreignKeyConstraint[CommonTree fkColName] : ( KW_CONSTRAINT constraintName= identifier )? KW_REFERENCES tabName= tableName LPAREN colName= columnName RPAREN ( constraintOptsCreate )? -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsCreate )? ) -> ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsCreate )? ) ;
    public final HiveParser.foreignKeyConstraint_return foreignKeyConstraint(CommonTree fkColName) throws RecognitionException {
        HiveParser.foreignKeyConstraint_return retval = new HiveParser.foreignKeyConstraint_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_CONSTRAINT803=null;
        Token KW_REFERENCES804=null;
        Token LPAREN805=null;
        Token RPAREN806=null;
        HiveParser_IdentifiersParser.identifier_return constraintName =null;

        HiveParser_FromClauseParser.tableName_return tabName =null;

        HiveParser.columnName_return colName =null;

        HiveParser.constraintOptsCreate_return constraintOptsCreate807 =null;


        ASTNode KW_CONSTRAINT803_tree=null;
        ASTNode KW_REFERENCES804_tree=null;
        ASTNode LPAREN805_tree=null;
        ASTNode RPAREN806_tree=null;
        RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_REFERENCES=new RewriteRuleTokenStream(adaptor,"token KW_REFERENCES");
        RewriteRuleSubtreeStream stream_constraintOptsCreate=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsCreate");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");
         pushMsg("column constraint", state); 
        try {
            // HiveParser.g:2333:5: ( ( KW_CONSTRAINT constraintName= identifier )? KW_REFERENCES tabName= tableName LPAREN colName= columnName RPAREN ( constraintOptsCreate )? -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsCreate )? ) -> ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsCreate )? ) )
            // HiveParser.g:2333:7: ( KW_CONSTRAINT constraintName= identifier )? KW_REFERENCES tabName= tableName LPAREN colName= columnName RPAREN ( constraintOptsCreate )?
            {
            // HiveParser.g:2333:7: ( KW_CONSTRAINT constraintName= identifier )?
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==KW_CONSTRAINT) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    // HiveParser.g:2333:8: KW_CONSTRAINT constraintName= identifier
                    {
                    KW_CONSTRAINT803=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_foreignKeyConstraint13870); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT803);


                    pushFollow(FOLLOW_identifier_in_foreignKeyConstraint13874);
                    constraintName=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());

                    }
                    break;

            }


            KW_REFERENCES804=(Token)match(input,KW_REFERENCES,FOLLOW_KW_REFERENCES_in_foreignKeyConstraint13878); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_REFERENCES.add(KW_REFERENCES804);


            pushFollow(FOLLOW_tableName_in_foreignKeyConstraint13882);
            tabName=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());

            LPAREN805=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_foreignKeyConstraint13884); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN805);


            pushFollow(FOLLOW_columnName_in_foreignKeyConstraint13888);
            colName=columnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnName.add(colName.getTree());

            RPAREN806=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_foreignKeyConstraint13890); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN806);


            // HiveParser.g:2333:115: ( constraintOptsCreate )?
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==KW_DISABLE||LA247_0==KW_ENABLE||LA247_0==KW_ENFORCED||LA247_0==KW_NOT) ) {
                alt247=1;
            }
            switch (alt247) {
                case 1 :
                    // HiveParser.g:2333:115: constraintOptsCreate
                    {
                    pushFollow(FOLLOW_constraintOptsCreate_in_foreignKeyConstraint13892);
                    constraintOptsCreate807=constraintOptsCreate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraintOptsCreate.add(constraintOptsCreate807.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: constraintName, colName, tabName, tabName, constraintOptsCreate, constraintOptsCreate, colName
            // token labels: 
            // rule labels: colName, tabName, constraintName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.tree:null);
            RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.tree:null);
            RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2334:5: -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsCreate )? )
            if ((constraintName!=null?((ASTNode)constraintName.tree):null) != null) {
                // HiveParser.g:2335:13: ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsCreate )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY")
                , root_1);

                // HiveParser.g:2335:31: ^( TOK_CONSTRAINT_NAME $constraintName)
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME")
                , root_2);

                adaptor.addChild(root_2, stream_constraintName.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:2335:70: ^( TOK_TABCOLNAME )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_2);

                adaptor.addChild(root_2, fkColName);

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_tabName.nextTree());

                // HiveParser.g:2335:110: ^( TOK_TABCOLNAME $colName)
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_2);

                adaptor.addChild(root_2, stream_colName.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:2335:137: ( constraintOptsCreate )?
                if ( stream_constraintOptsCreate.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraintOptsCreate.nextTree());

                }
                stream_constraintOptsCreate.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2336:5: -> ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsCreate )? )
            {
                // HiveParser.g:2336:8: ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsCreate )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY")
                , root_1);

                // HiveParser.g:2336:26: ^( TOK_TABCOLNAME )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_2);

                adaptor.addChild(root_2, fkColName);

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_tabName.nextTree());

                // HiveParser.g:2336:66: ^( TOK_TABCOLNAME $colName)
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_2);

                adaptor.addChild(root_2, stream_colName.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:2336:93: ( constraintOptsCreate )?
                if ( stream_constraintOptsCreate.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraintOptsCreate.nextTree());

                }
                stream_constraintOptsCreate.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "foreignKeyConstraint"


    public static class colConstraint_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "colConstraint"
    // HiveParser.g:2339:1: colConstraint : ( KW_CONSTRAINT constraintName= identifier )? columnConstraintType ( constraintOptsCreate )? -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsCreate )? ) -> ^( ( constraintOptsCreate )? ) ;
    public final HiveParser.colConstraint_return colConstraint() throws RecognitionException {
        HiveParser.colConstraint_return retval = new HiveParser.colConstraint_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_CONSTRAINT808=null;
        HiveParser_IdentifiersParser.identifier_return constraintName =null;

        HiveParser.columnConstraintType_return columnConstraintType809 =null;

        HiveParser.constraintOptsCreate_return constraintOptsCreate810 =null;


        ASTNode KW_CONSTRAINT808_tree=null;
        RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
        RewriteRuleSubtreeStream stream_constraintOptsCreate=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsCreate");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_columnConstraintType=new RewriteRuleSubtreeStream(adaptor,"rule columnConstraintType");
         pushMsg("column constraint", state); 
        try {
            // HiveParser.g:2342:5: ( ( KW_CONSTRAINT constraintName= identifier )? columnConstraintType ( constraintOptsCreate )? -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsCreate )? ) -> ^( ( constraintOptsCreate )? ) )
            // HiveParser.g:2342:7: ( KW_CONSTRAINT constraintName= identifier )? columnConstraintType ( constraintOptsCreate )?
            {
            // HiveParser.g:2342:7: ( KW_CONSTRAINT constraintName= identifier )?
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==KW_CONSTRAINT) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    // HiveParser.g:2342:8: KW_CONSTRAINT constraintName= identifier
                    {
                    KW_CONSTRAINT808=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_colConstraint14000); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT808);


                    pushFollow(FOLLOW_identifier_in_colConstraint14004);
                    constraintName=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_columnConstraintType_in_colConstraint14008);
            columnConstraintType809=columnConstraintType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnConstraintType.add(columnConstraintType809.getTree());

            // HiveParser.g:2342:71: ( constraintOptsCreate )?
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==KW_DISABLE||LA249_0==KW_ENABLE||LA249_0==KW_ENFORCED||LA249_0==KW_NOT) ) {
                alt249=1;
            }
            switch (alt249) {
                case 1 :
                    // HiveParser.g:2342:71: constraintOptsCreate
                    {
                    pushFollow(FOLLOW_constraintOptsCreate_in_colConstraint14010);
                    constraintOptsCreate810=constraintOptsCreate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraintOptsCreate.add(constraintOptsCreate810.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: constraintName, constraintOptsCreate, constraintOptsCreate
            // token labels: 
            // rule labels: constraintName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2343:5: -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsCreate )? )
            if ((constraintName!=null?((ASTNode)constraintName.tree):null) != null) {
                // HiveParser.g:2344:13: ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsCreate )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot((columnConstraintType809!=null?((ASTNode)columnConstraintType809.tree):null), root_1);

                // HiveParser.g:2344:44: ^( TOK_CONSTRAINT_NAME $constraintName)
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME")
                , root_2);

                adaptor.addChild(root_2, stream_constraintName.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:2344:83: ( constraintOptsCreate )?
                if ( stream_constraintOptsCreate.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraintOptsCreate.nextTree());

                }
                stream_constraintOptsCreate.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2345:5: -> ^( ( constraintOptsCreate )? )
            {
                // HiveParser.g:2345:8: ^( ( constraintOptsCreate )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot((columnConstraintType809!=null?((ASTNode)columnConstraintType809.tree):null), root_1);

                // HiveParser.g:2345:39: ( constraintOptsCreate )?
                if ( stream_constraintOptsCreate.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraintOptsCreate.nextTree());

                }
                stream_constraintOptsCreate.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "colConstraint"


    public static class alterColumnConstraint_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterColumnConstraint"
    // HiveParser.g:2348:1: alterColumnConstraint[CommonTree fkColName] : ( ( alterForeignKeyConstraint[$fkColName] ) | ( alterColConstraint ) );
    public final HiveParser.alterColumnConstraint_return alterColumnConstraint(CommonTree fkColName) throws RecognitionException {
        HiveParser.alterColumnConstraint_return retval = new HiveParser.alterColumnConstraint_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.alterForeignKeyConstraint_return alterForeignKeyConstraint811 =null;

        HiveParser.alterColConstraint_return alterColConstraint812 =null;



         pushMsg("alter column constraint", state); 
        try {
            // HiveParser.g:2351:5: ( ( alterForeignKeyConstraint[$fkColName] ) | ( alterColConstraint ) )
            int alt250=2;
            switch ( input.LA(1) ) {
            case KW_CONSTRAINT:
                {
                int LA250_1 = input.LA(2);

                if ( (LA250_1==Identifier) ) {
                    int LA250_8 = input.LA(3);

                    if ( (LA250_8==KW_REFERENCES) ) {
                        alt250=1;
                    }
                    else if ( (LA250_8==KW_CHECK||LA250_8==KW_DEFAULT||LA250_8==KW_NOT||LA250_8==KW_PRIMARY||LA250_8==KW_UNIQUE) ) {
                        alt250=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 8, input);

                        throw nvae;

                    }
                }
                else if ( ((LA250_1 >= KW_ABORT && LA250_1 <= KW_AFTER)||LA250_1==KW_ALLOC_FRACTION||LA250_1==KW_ANALYZE||LA250_1==KW_ARCHIVE||(LA250_1 >= KW_ASC && LA250_1 <= KW_AT)||(LA250_1 >= KW_AUTOCOMMIT && LA250_1 <= KW_BEFORE)||(LA250_1 >= KW_BRANCH && LA250_1 <= KW_BUCKETS)||(LA250_1 >= KW_CACHE && LA250_1 <= KW_CASCADE)||(LA250_1 >= KW_CBO && LA250_1 <= KW_CHANGE)||LA250_1==KW_CHECK||(LA250_1 >= KW_CLUSTER && LA250_1 <= KW_COLLECTION)||(LA250_1 >= KW_COLUMNS && LA250_1 <= KW_COMMENT)||(LA250_1 >= KW_COMPACT && LA250_1 <= KW_COMPACTIONS)||(LA250_1 >= KW_COMPUTE && LA250_1 <= KW_CONCATENATE)||LA250_1==KW_CONTINUE||LA250_1==KW_COST||LA250_1==KW_CRON||LA250_1==KW_DATA||LA250_1==KW_DATABASES||(LA250_1 >= KW_DATETIME && LA250_1 <= KW_DCPROPERTIES)||LA250_1==KW_DEBUG||(LA250_1 >= KW_DEFAULT && LA250_1 <= KW_DEFINED)||(LA250_1 >= KW_DELIMITED && LA250_1 <= KW_DESC)||(LA250_1 >= KW_DETAIL && LA250_1 <= KW_DISABLE)||(LA250_1 >= KW_DISTRIBUTE && LA250_1 <= KW_DO)||LA250_1==KW_DOW||(LA250_1 >= KW_DUMP && LA250_1 <= KW_ELEM_TYPE)||LA250_1==KW_ENABLE||(LA250_1 >= KW_ENFORCED && LA250_1 <= KW_EVERY)||(LA250_1 >= KW_EXCLUSIVE && LA250_1 <= KW_EXECUTED)||(LA250_1 >= KW_EXPIRE_SNAPSHOTS && LA250_1 <= KW_EXPRESSION)||LA250_1==KW_FAST_FORWARD||(LA250_1 >= KW_FIELDS && LA250_1 <= KW_FIRST)||(LA250_1 >= KW_FORMAT && LA250_1 <= KW_FORMATTED)||LA250_1==KW_FUNCTIONS||(LA250_1 >= KW_HOUR && LA250_1 <= KW_IDXPROPERTIES)||LA250_1==KW_IGNORE||(LA250_1 >= KW_INDEX && LA250_1 <= KW_INDEXES)||(LA250_1 >= KW_INPATH && LA250_1 <= KW_INPUTFORMAT)||(LA250_1 >= KW_ISOLATION && LA250_1 <= KW_JAR)||(LA250_1 >= KW_JOINCOST && LA250_1 <= KW_LAST)||LA250_1==KW_LEVEL||(LA250_1 >= KW_LIMIT && LA250_1 <= KW_LOAD)||(LA250_1 >= KW_LOCATION && LA250_1 <= KW_LONG)||(LA250_1 >= KW_MANAGED && LA250_1 <= KW_MANAGEMENT)||(LA250_1 >= KW_MAPJOIN && LA250_1 <= KW_MATERIALIZED)||LA250_1==KW_METADATA||(LA250_1 >= KW_MINUTE && LA250_1 <= KW_MONTH)||(LA250_1 >= KW_MOVE && LA250_1 <= KW_MSCK)||(LA250_1 >= KW_NORELY && LA250_1 <= KW_NOSCAN)||LA250_1==KW_NOVALIDATE||LA250_1==KW_NULLS||LA250_1==KW_OFFSET||(LA250_1 >= KW_OPERATOR && LA250_1 <= KW_OPTION)||(LA250_1 >= KW_OUTPUTDRIVER && LA250_1 <= KW_OUTPUTFORMAT)||(LA250_1 >= KW_OVERWRITE && LA250_1 <= KW_OWNER)||(LA250_1 >= KW_PARTITIONED && LA250_1 <= KW_PATH)||(LA250_1 >= KW_PLAN && LA250_1 <= KW_POOL)||LA250_1==KW_PRINCIPALS||LA250_1==KW_PURGE||(LA250_1 >= KW_QUARTER && LA250_1 <= KW_QUERY_PARALLELISM)||LA250_1==KW_READ||(LA250_1 >= KW_REBUILD && LA250_1 <= KW_RECORDWRITER)||(LA250_1 >= KW_RELOAD && LA250_1 <= KW_RETENTION)||LA250_1==KW_REWRITE||(LA250_1 >= KW_ROLE && LA250_1 <= KW_ROLES)||(LA250_1 >= KW_SCHEDULED && LA250_1 <= KW_SECOND)||(LA250_1 >= KW_SEMI && LA250_1 <= KW_SERVER)||(LA250_1 >= KW_SETS && LA250_1 <= KW_SKEWED)||(LA250_1 >= KW_SNAPSHOT && LA250_1 <= KW_SNAPSHOTS)||(LA250_1 >= KW_SORT && LA250_1 <= KW_SSL)||(LA250_1 >= KW_STATISTICS && LA250_1 <= KW_SUMMARY)||(LA250_1 >= KW_SYSTEM_TIME && LA250_1 <= KW_SYSTEM_VERSION)||LA250_1==KW_TABLES||(LA250_1 >= KW_TAG && LA250_1 <= KW_TERMINATED)||LA250_1==KW_TINYINT||LA250_1==KW_TOUCH||(LA250_1 >= KW_TRANSACTION && LA250_1 <= KW_TRANSACTIONS)||LA250_1==KW_TRIM||(LA250_1 >= KW_TYPE && LA250_1 <= KW_UNARCHIVE)||LA250_1==KW_UNDO||LA250_1==KW_UNIONTYPE||(LA250_1 >= KW_UNKNOWN && LA250_1 <= KW_UNSIGNED)||(LA250_1 >= KW_URI && LA250_1 <= KW_USE)||(LA250_1 >= KW_UTC && LA250_1 <= KW_VALIDATE)||LA250_1==KW_VALUE_TYPE||(LA250_1 >= KW_VECTORIZATION && LA250_1 <= KW_WEEK)||LA250_1==KW_WHILE||(LA250_1 >= KW_WITHIN && LA250_1 <= KW_ZONE)||LA250_1==KW_BATCH||LA250_1==KW_DAYOFWEEK||LA250_1==KW_HOLD_DDLTIME||LA250_1==KW_NO_DROP||LA250_1==KW_OFFLINE||LA250_1==KW_PROTECTION||LA250_1==KW_READONLY||LA250_1==KW_TIMESTAMPTZ) ) {
                    int LA250_9 = input.LA(3);

                    if ( (LA250_9==KW_REFERENCES) ) {
                        alt250=1;
                    }
                    else if ( (LA250_9==KW_CHECK||LA250_9==KW_DEFAULT||LA250_9==KW_NOT||LA250_9==KW_PRIMARY||LA250_9==KW_UNIQUE) ) {
                        alt250=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 250, 9, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 1, input);

                    throw nvae;

                }
                }
                break;
            case KW_REFERENCES:
                {
                alt250=1;
                }
                break;
            case KW_CHECK:
            case KW_DEFAULT:
            case KW_NOT:
            case KW_PRIMARY:
            case KW_UNIQUE:
                {
                alt250=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 250, 0, input);

                throw nvae;

            }

            switch (alt250) {
                case 1 :
                    // HiveParser.g:2351:7: ( alterForeignKeyConstraint[$fkColName] )
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    // HiveParser.g:2351:7: ( alterForeignKeyConstraint[$fkColName] )
                    // HiveParser.g:2351:9: alterForeignKeyConstraint[$fkColName]
                    {
                    pushFollow(FOLLOW_alterForeignKeyConstraint_in_alterColumnConstraint14088);
                    alterForeignKeyConstraint811=alterForeignKeyConstraint(fkColName);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterForeignKeyConstraint811.getTree());

                    }


                    }
                    break;
                case 2 :
                    // HiveParser.g:2352:7: ( alterColConstraint )
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    // HiveParser.g:2352:7: ( alterColConstraint )
                    // HiveParser.g:2352:9: alterColConstraint
                    {
                    pushFollow(FOLLOW_alterColConstraint_in_alterColumnConstraint14101);
                    alterColConstraint812=alterColConstraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alterColConstraint812.getTree());

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterColumnConstraint"


    public static class alterForeignKeyConstraint_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterForeignKeyConstraint"
    // HiveParser.g:2355:1: alterForeignKeyConstraint[CommonTree fkColName] : ( KW_CONSTRAINT constraintName= identifier )? KW_REFERENCES tabName= tableName LPAREN colName= columnName RPAREN ( constraintOptsAlter )? -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? ) -> ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? ) ;
    public final HiveParser.alterForeignKeyConstraint_return alterForeignKeyConstraint(CommonTree fkColName) throws RecognitionException {
        HiveParser.alterForeignKeyConstraint_return retval = new HiveParser.alterForeignKeyConstraint_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_CONSTRAINT813=null;
        Token KW_REFERENCES814=null;
        Token LPAREN815=null;
        Token RPAREN816=null;
        HiveParser_IdentifiersParser.identifier_return constraintName =null;

        HiveParser_FromClauseParser.tableName_return tabName =null;

        HiveParser.columnName_return colName =null;

        HiveParser.constraintOptsAlter_return constraintOptsAlter817 =null;


        ASTNode KW_CONSTRAINT813_tree=null;
        ASTNode KW_REFERENCES814_tree=null;
        ASTNode LPAREN815_tree=null;
        ASTNode RPAREN816_tree=null;
        RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_REFERENCES=new RewriteRuleTokenStream(adaptor,"token KW_REFERENCES");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_constraintOptsAlter=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsAlter");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");
         pushMsg("alter column constraint", state); 
        try {
            // HiveParser.g:2358:5: ( ( KW_CONSTRAINT constraintName= identifier )? KW_REFERENCES tabName= tableName LPAREN colName= columnName RPAREN ( constraintOptsAlter )? -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? ) -> ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? ) )
            // HiveParser.g:2358:7: ( KW_CONSTRAINT constraintName= identifier )? KW_REFERENCES tabName= tableName LPAREN colName= columnName RPAREN ( constraintOptsAlter )?
            {
            // HiveParser.g:2358:7: ( KW_CONSTRAINT constraintName= identifier )?
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==KW_CONSTRAINT) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    // HiveParser.g:2358:8: KW_CONSTRAINT constraintName= identifier
                    {
                    KW_CONSTRAINT813=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_alterForeignKeyConstraint14132); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT813);


                    pushFollow(FOLLOW_identifier_in_alterForeignKeyConstraint14136);
                    constraintName=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());

                    }
                    break;

            }


            KW_REFERENCES814=(Token)match(input,KW_REFERENCES,FOLLOW_KW_REFERENCES_in_alterForeignKeyConstraint14140); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_REFERENCES.add(KW_REFERENCES814);


            pushFollow(FOLLOW_tableName_in_alterForeignKeyConstraint14144);
            tabName=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());

            LPAREN815=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alterForeignKeyConstraint14146); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN815);


            pushFollow(FOLLOW_columnName_in_alterForeignKeyConstraint14150);
            colName=columnName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnName.add(colName.getTree());

            RPAREN816=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alterForeignKeyConstraint14152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN816);


            // HiveParser.g:2358:115: ( constraintOptsAlter )?
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==KW_DISABLE||LA252_0==KW_ENABLE||LA252_0==KW_ENFORCED||LA252_0==KW_NOT) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    // HiveParser.g:2358:115: constraintOptsAlter
                    {
                    pushFollow(FOLLOW_constraintOptsAlter_in_alterForeignKeyConstraint14154);
                    constraintOptsAlter817=constraintOptsAlter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraintOptsAlter.add(constraintOptsAlter817.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: colName, tabName, tabName, constraintOptsAlter, constraintName, constraintOptsAlter, colName
            // token labels: 
            // rule labels: colName, tabName, constraintName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.tree:null);
            RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.tree:null);
            RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2359:5: -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? )
            if ((constraintName!=null?((ASTNode)constraintName.tree):null) != null) {
                // HiveParser.g:2360:13: ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY")
                , root_1);

                // HiveParser.g:2360:31: ^( TOK_CONSTRAINT_NAME $constraintName)
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME")
                , root_2);

                adaptor.addChild(root_2, stream_constraintName.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:2360:70: ^( TOK_TABCOLNAME )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_2);

                adaptor.addChild(root_2, fkColName);

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_tabName.nextTree());

                // HiveParser.g:2360:110: ^( TOK_TABCOLNAME $colName)
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_2);

                adaptor.addChild(root_2, stream_colName.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:2360:137: ( constraintOptsAlter )?
                if ( stream_constraintOptsAlter.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());

                }
                stream_constraintOptsAlter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2361:5: -> ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? )
            {
                // HiveParser.g:2361:8: ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY")
                , root_1);

                // HiveParser.g:2361:26: ^( TOK_TABCOLNAME )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_2);

                adaptor.addChild(root_2, fkColName);

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_tabName.nextTree());

                // HiveParser.g:2361:66: ^( TOK_TABCOLNAME $colName)
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME")
                , root_2);

                adaptor.addChild(root_2, stream_colName.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:2361:93: ( constraintOptsAlter )?
                if ( stream_constraintOptsAlter.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());

                }
                stream_constraintOptsAlter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterForeignKeyConstraint"


    public static class alterColConstraint_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alterColConstraint"
    // HiveParser.g:2364:1: alterColConstraint : ( KW_CONSTRAINT constraintName= identifier )? columnConstraintType ( constraintOptsAlter )? -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? ) -> ^( ( constraintOptsAlter )? ) ;
    public final HiveParser.alterColConstraint_return alterColConstraint() throws RecognitionException {
        HiveParser.alterColConstraint_return retval = new HiveParser.alterColConstraint_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_CONSTRAINT818=null;
        HiveParser_IdentifiersParser.identifier_return constraintName =null;

        HiveParser.columnConstraintType_return columnConstraintType819 =null;

        HiveParser.constraintOptsAlter_return constraintOptsAlter820 =null;


        ASTNode KW_CONSTRAINT818_tree=null;
        RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_columnConstraintType=new RewriteRuleSubtreeStream(adaptor,"rule columnConstraintType");
        RewriteRuleSubtreeStream stream_constraintOptsAlter=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsAlter");
         pushMsg("alter column constraint", state); 
        try {
            // HiveParser.g:2367:5: ( ( KW_CONSTRAINT constraintName= identifier )? columnConstraintType ( constraintOptsAlter )? -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? ) -> ^( ( constraintOptsAlter )? ) )
            // HiveParser.g:2367:7: ( KW_CONSTRAINT constraintName= identifier )? columnConstraintType ( constraintOptsAlter )?
            {
            // HiveParser.g:2367:7: ( KW_CONSTRAINT constraintName= identifier )?
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==KW_CONSTRAINT) ) {
                alt253=1;
            }
            switch (alt253) {
                case 1 :
                    // HiveParser.g:2367:8: KW_CONSTRAINT constraintName= identifier
                    {
                    KW_CONSTRAINT818=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_alterColConstraint14262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT818);


                    pushFollow(FOLLOW_identifier_in_alterColConstraint14266);
                    constraintName=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_columnConstraintType_in_alterColConstraint14270);
            columnConstraintType819=columnConstraintType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnConstraintType.add(columnConstraintType819.getTree());

            // HiveParser.g:2367:71: ( constraintOptsAlter )?
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==KW_DISABLE||LA254_0==KW_ENABLE||LA254_0==KW_ENFORCED||LA254_0==KW_NOT) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    // HiveParser.g:2367:71: constraintOptsAlter
                    {
                    pushFollow(FOLLOW_constraintOptsAlter_in_alterColConstraint14272);
                    constraintOptsAlter820=constraintOptsAlter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraintOptsAlter.add(constraintOptsAlter820.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: constraintName, constraintOptsAlter, constraintOptsAlter
            // token labels: 
            // rule labels: constraintName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2368:5: -> {$constraintName.tree != null}? ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? )
            if ((constraintName!=null?((ASTNode)constraintName.tree):null) != null) {
                // HiveParser.g:2369:13: ^( ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot((columnConstraintType819!=null?((ASTNode)columnConstraintType819.tree):null), root_1);

                // HiveParser.g:2369:44: ^( TOK_CONSTRAINT_NAME $constraintName)
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME")
                , root_2);

                adaptor.addChild(root_2, stream_constraintName.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:2369:83: ( constraintOptsAlter )?
                if ( stream_constraintOptsAlter.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());

                }
                stream_constraintOptsAlter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2370:5: -> ^( ( constraintOptsAlter )? )
            {
                // HiveParser.g:2370:8: ^( ( constraintOptsAlter )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot((columnConstraintType819!=null?((ASTNode)columnConstraintType819.tree):null), root_1);

                // HiveParser.g:2370:39: ( constraintOptsAlter )?
                if ( stream_constraintOptsAlter.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());

                }
                stream_constraintOptsAlter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alterColConstraint"


    public static class columnConstraintType_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnConstraintType"
    // HiveParser.g:2373:1: columnConstraintType : ( KW_NOT KW_NULL -> TOK_NOT_NULL | KW_DEFAULT defaultVal -> ^( TOK_DEFAULT_VALUE defaultVal ) | checkConstraint | tableConstraintType );
    public final HiveParser.columnConstraintType_return columnConstraintType() throws RecognitionException {
        HiveParser.columnConstraintType_return retval = new HiveParser.columnConstraintType_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_NOT821=null;
        Token KW_NULL822=null;
        Token KW_DEFAULT823=null;
        HiveParser.defaultVal_return defaultVal824 =null;

        HiveParser.checkConstraint_return checkConstraint825 =null;

        HiveParser.tableConstraintType_return tableConstraintType826 =null;


        ASTNode KW_NOT821_tree=null;
        ASTNode KW_NULL822_tree=null;
        ASTNode KW_DEFAULT823_tree=null;
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");
        RewriteRuleTokenStream stream_KW_DEFAULT=new RewriteRuleTokenStream(adaptor,"token KW_DEFAULT");
        RewriteRuleSubtreeStream stream_defaultVal=new RewriteRuleSubtreeStream(adaptor,"rule defaultVal");
        try {
            // HiveParser.g:2374:5: ( KW_NOT KW_NULL -> TOK_NOT_NULL | KW_DEFAULT defaultVal -> ^( TOK_DEFAULT_VALUE defaultVal ) | checkConstraint | tableConstraintType )
            int alt255=4;
            switch ( input.LA(1) ) {
            case KW_NOT:
                {
                alt255=1;
                }
                break;
            case KW_DEFAULT:
                {
                alt255=2;
                }
                break;
            case KW_CHECK:
                {
                alt255=3;
                }
                break;
            case KW_PRIMARY:
            case KW_UNIQUE:
                {
                alt255=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);

                throw nvae;

            }

            switch (alt255) {
                case 1 :
                    // HiveParser.g:2374:7: KW_NOT KW_NULL
                    {
                    KW_NOT821=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_columnConstraintType14337); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT821);


                    KW_NULL822=(Token)match(input,KW_NULL,FOLLOW_KW_NULL_in_columnConstraintType14339); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_NULL.add(KW_NULL822);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2374:28: -> TOK_NOT_NULL
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_NOT_NULL, "TOK_NOT_NULL")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2375:7: KW_DEFAULT defaultVal
                    {
                    KW_DEFAULT823=(Token)match(input,KW_DEFAULT,FOLLOW_KW_DEFAULT_in_columnConstraintType14360); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DEFAULT.add(KW_DEFAULT823);


                    pushFollow(FOLLOW_defaultVal_in_columnConstraintType14362);
                    defaultVal824=defaultVal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_defaultVal.add(defaultVal824.getTree());

                    // AST REWRITE
                    // elements: defaultVal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2375:28: -> ^( TOK_DEFAULT_VALUE defaultVal )
                    {
                        // HiveParser.g:2375:34: ^( TOK_DEFAULT_VALUE defaultVal )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DEFAULT_VALUE, "TOK_DEFAULT_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_defaultVal.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:2376:7: checkConstraint
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_checkConstraint_in_columnConstraintType14380);
                    checkConstraint825=checkConstraint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, checkConstraint825.getTree());

                    }
                    break;
                case 4 :
                    // HiveParser.g:2377:7: tableConstraintType
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_tableConstraintType_in_columnConstraintType14388);
                    tableConstraintType826=tableConstraintType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tableConstraintType826.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnConstraintType"


    public static class defaultVal_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "defaultVal"
    // HiveParser.g:2380:1: defaultVal : ( constant | function | castExpression );
    public final HiveParser.defaultVal_return defaultVal() throws RecognitionException {
        HiveParser.defaultVal_return retval = new HiveParser.defaultVal_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser_IdentifiersParser.constant_return constant827 =null;

        HiveParser_IdentifiersParser.function_return function828 =null;

        HiveParser_IdentifiersParser.castExpression_return castExpression829 =null;



        try {
            // HiveParser.g:2381:5: ( constant | function | castExpression )
            int alt256=3;
            switch ( input.LA(1) ) {
            case CharSetName:
            case IntegralLiteral:
            case KW_FALSE:
            case KW_NULL:
            case KW_TIMESTAMPLOCALTZ:
            case KW_TRUE:
            case Number:
            case NumberLiteral:
            case QUESTION:
            case StringLiteral:
                {
                alt256=1;
                }
                break;
            case KW_DATE:
                {
                int LA256_3 = input.LA(2);

                if ( (LA256_3==StringLiteral) ) {
                    alt256=1;
                }
                else if ( (LA256_3==LPAREN) ) {
                    alt256=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 256, 3, input);

                    throw nvae;

                }
                }
                break;
            case KW_CURRENT_DATE:
                {
                int LA256_4 = input.LA(2);

                if ( (LA256_4==EOF||LA256_4==COMMA||LA256_4==KW_AFTER||LA256_4==KW_CASCADE||LA256_4==KW_COMMENT||LA256_4==KW_DISABLE||LA256_4==KW_ENABLE||LA256_4==KW_ENFORCED||LA256_4==KW_FIRST||LA256_4==KW_NOT||LA256_4==KW_RESTRICT||LA256_4==RPAREN) ) {
                    alt256=1;
                }
                else if ( (LA256_4==LPAREN) ) {
                    alt256=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 256, 4, input);

                    throw nvae;

                }
                }
                break;
            case KW_TIMESTAMP:
                {
                int LA256_5 = input.LA(2);

                if ( (LA256_5==StringLiteral) ) {
                    alt256=1;
                }
                else if ( (LA256_5==LPAREN) ) {
                    alt256=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 256, 5, input);

                    throw nvae;

                }
                }
                break;
            case KW_CURRENT_TIMESTAMP:
                {
                int LA256_6 = input.LA(2);

                if ( (LA256_6==EOF||LA256_6==COMMA||LA256_6==KW_AFTER||LA256_6==KW_CASCADE||LA256_6==KW_COMMENT||LA256_6==KW_DISABLE||LA256_6==KW_ENABLE||LA256_6==KW_ENFORCED||LA256_6==KW_FIRST||LA256_6==KW_NOT||LA256_6==KW_RESTRICT||LA256_6==RPAREN) ) {
                    alt256=1;
                }
                else if ( (LA256_6==LPAREN) ) {
                    alt256=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 256, 6, input);

                    throw nvae;

                }
                }
                break;
            case Identifier:
            case KW_ABORT:
            case KW_ACTIVATE:
            case KW_ACTIVE:
            case KW_ADD:
            case KW_ADMIN:
            case KW_AFTER:
            case KW_ALLOC_FRACTION:
            case KW_ANALYZE:
            case KW_ARCHIVE:
            case KW_ARRAY:
            case KW_ASC:
            case KW_AST:
            case KW_AT:
            case KW_AUTOCOMMIT:
            case KW_BEFORE:
            case KW_BIGINT:
            case KW_BINARY:
            case KW_BOOLEAN:
            case KW_BRANCH:
            case KW_BUCKET:
            case KW_BUCKETS:
            case KW_CACHE:
            case KW_CASCADE:
            case KW_CBO:
            case KW_CHANGE:
            case KW_CHECK:
            case KW_CLUSTER:
            case KW_CLUSTERED:
            case KW_CLUSTERSTATUS:
            case KW_COLLECTION:
            case KW_COLUMNS:
            case KW_COMMENT:
            case KW_COMPACT:
            case KW_COMPACTIONS:
            case KW_COMPUTE:
            case KW_CONCATENATE:
            case KW_CONTINUE:
            case KW_COST:
            case KW_CRON:
            case KW_DATA:
            case KW_DATABASES:
            case KW_DATETIME:
            case KW_DAY:
            case KW_DBPROPERTIES:
            case KW_DCPROPERTIES:
            case KW_DEBUG:
            case KW_DEFAULT:
            case KW_DEFERRED:
            case KW_DEFINED:
            case KW_DELIMITED:
            case KW_DEPENDENCY:
            case KW_DESC:
            case KW_DETAIL:
            case KW_DIRECTORIES:
            case KW_DIRECTORY:
            case KW_DISABLE:
            case KW_DISTRIBUTE:
            case KW_DISTRIBUTED:
            case KW_DO:
            case KW_DOUBLE:
            case KW_DOW:
            case KW_DUMP:
            case KW_ELEM_TYPE:
            case KW_ENABLE:
            case KW_ENFORCED:
            case KW_ESCAPED:
            case KW_EVERY:
            case KW_EXCLUSIVE:
            case KW_EXECUTE:
            case KW_EXECUTED:
            case KW_EXPIRE_SNAPSHOTS:
            case KW_EXPLAIN:
            case KW_EXPORT:
            case KW_EXPRESSION:
            case KW_FAST_FORWARD:
            case KW_FIELDS:
            case KW_FILE:
            case KW_FILEFORMAT:
            case KW_FIRST:
            case KW_FLOAT:
            case KW_FORMAT:
            case KW_FORMATTED:
            case KW_FUNCTIONS:
            case KW_GROUPING:
            case KW_HOUR:
            case KW_IDXPROPERTIES:
            case KW_IF:
            case KW_IGNORE:
            case KW_INDEX:
            case KW_INDEXES:
            case KW_INPATH:
            case KW_INPUTDRIVER:
            case KW_INPUTFORMAT:
            case KW_INT:
            case KW_ISOLATION:
            case KW_ITEMS:
            case KW_JAR:
            case KW_JOINCOST:
            case KW_KEY:
            case KW_KEYS:
            case KW_KEY_TYPE:
            case KW_KILL:
            case KW_LAST:
            case KW_LEVEL:
            case KW_LIMIT:
            case KW_LINES:
            case KW_LOAD:
            case KW_LOCATION:
            case KW_LOCK:
            case KW_LOCKS:
            case KW_LOGICAL:
            case KW_LONG:
            case KW_MANAGED:
            case KW_MANAGEDLOCATION:
            case KW_MANAGEMENT:
            case KW_MAP:
            case KW_MAPJOIN:
            case KW_MAPPING:
            case KW_MATCHED:
            case KW_MATERIALIZED:
            case KW_METADATA:
            case KW_MINUTE:
            case KW_MONTH:
            case KW_MOVE:
            case KW_MSCK:
            case KW_NORELY:
            case KW_NOSCAN:
            case KW_NOVALIDATE:
            case KW_NULLS:
            case KW_OFFSET:
            case KW_OPERATOR:
            case KW_OPTIMIZE:
            case KW_OPTION:
            case KW_OUTPUTDRIVER:
            case KW_OUTPUTFORMAT:
            case KW_OVERWRITE:
            case KW_OWNER:
            case KW_PARTITIONED:
            case KW_PARTITIONS:
            case KW_PATH:
            case KW_PLAN:
            case KW_PLANS:
            case KW_PLUS:
            case KW_POOL:
            case KW_PRINCIPALS:
            case KW_PURGE:
            case KW_QUARTER:
            case KW_QUERY:
            case KW_QUERY_PARALLELISM:
            case KW_READ:
            case KW_REAL:
            case KW_REBUILD:
            case KW_RECORDREADER:
            case KW_RECORDWRITER:
            case KW_RELOAD:
            case KW_RELY:
            case KW_REMOTE:
            case KW_RENAME:
            case KW_REOPTIMIZATION:
            case KW_REPAIR:
            case KW_REPL:
            case KW_REPLACE:
            case KW_REPLICATION:
            case KW_RESOURCE:
            case KW_RESPECT:
            case KW_RESTRICT:
            case KW_RETAIN:
            case KW_RETENTION:
            case KW_REWRITE:
            case KW_ROLE:
            case KW_ROLES:
            case KW_SCHEDULED:
            case KW_SCHEDULING_POLICY:
            case KW_SCHEMA:
            case KW_SCHEMAS:
            case KW_SECOND:
            case KW_SEMI:
            case KW_SERDE:
            case KW_SERDEPROPERTIES:
            case KW_SERVER:
            case KW_SETS:
            case KW_SET_CURRENT_SNAPSHOT:
            case KW_SHARED:
            case KW_SHOW:
            case KW_SHOW_DATABASE:
            case KW_SKEWED:
            case KW_SMALLINT:
            case KW_SNAPSHOT:
            case KW_SNAPSHOTS:
            case KW_SORT:
            case KW_SORTED:
            case KW_SPEC:
            case KW_SSL:
            case KW_STATISTICS:
            case KW_STATUS:
            case KW_STORED:
            case KW_STREAMTABLE:
            case KW_STRING:
            case KW_STRUCT:
            case KW_SUMMARY:
            case KW_SYSTEM_TIME:
            case KW_SYSTEM_VERSION:
            case KW_TABLES:
            case KW_TAG:
            case KW_TBLPROPERTIES:
            case KW_TEMPORARY:
            case KW_TERMINATED:
            case KW_TINYINT:
            case KW_TOUCH:
            case KW_TRANSACTION:
            case KW_TRANSACTIONAL:
            case KW_TRANSACTIONS:
            case KW_TRIM:
            case KW_TYPE:
            case KW_UNARCHIVE:
            case KW_UNDO:
            case KW_UNIONTYPE:
            case KW_UNKNOWN:
            case KW_UNLOCK:
            case KW_UNMANAGED:
            case KW_UNSET:
            case KW_UNSIGNED:
            case KW_URI:
            case KW_URL:
            case KW_USE:
            case KW_UTC:
            case KW_UTCTIMESTAMP:
            case KW_VALIDATE:
            case KW_VALUE_TYPE:
            case KW_VECTORIZATION:
            case KW_VIEW:
            case KW_VIEWS:
            case KW_WAIT:
            case KW_WEEK:
            case KW_WHILE:
            case KW_WITHIN:
            case KW_WORK:
            case KW_WORKLOAD:
            case KW_WRITE:
            case KW_YEAR:
            case KW_ZONE:
            case KW_BATCH:
            case KW_DAYOFWEEK:
            case KW_HOLD_DDLTIME:
            case KW_NO_DROP:
            case KW_OFFLINE:
            case KW_PROTECTION:
            case KW_READONLY:
            case KW_TIMESTAMPTZ:
                {
                alt256=2;
                }
                break;
            case KW_CAST:
                {
                alt256=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 256, 0, input);

                throw nvae;

            }

            switch (alt256) {
                case 1 :
                    // HiveParser.g:2381:7: constant
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_constant_in_defaultVal14405);
                    constant827=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant827.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:2382:7: function
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_function_in_defaultVal14413);
                    function828=function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function828.getTree());

                    }
                    break;
                case 3 :
                    // HiveParser.g:2383:7: castExpression
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_castExpression_in_defaultVal14421);
                    castExpression829=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, castExpression829.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "defaultVal"


    public static class tableConstraintType_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "tableConstraintType"
    // HiveParser.g:2386:1: tableConstraintType : ( KW_PRIMARY KW_KEY -> TOK_PRIMARY_KEY | KW_UNIQUE -> TOK_UNIQUE );
    public final HiveParser.tableConstraintType_return tableConstraintType() throws RecognitionException {
        HiveParser.tableConstraintType_return retval = new HiveParser.tableConstraintType_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_PRIMARY830=null;
        Token KW_KEY831=null;
        Token KW_UNIQUE832=null;

        ASTNode KW_PRIMARY830_tree=null;
        ASTNode KW_KEY831_tree=null;
        ASTNode KW_UNIQUE832_tree=null;
        RewriteRuleTokenStream stream_KW_PRIMARY=new RewriteRuleTokenStream(adaptor,"token KW_PRIMARY");
        RewriteRuleTokenStream stream_KW_UNIQUE=new RewriteRuleTokenStream(adaptor,"token KW_UNIQUE");
        RewriteRuleTokenStream stream_KW_KEY=new RewriteRuleTokenStream(adaptor,"token KW_KEY");

        try {
            // HiveParser.g:2387:5: ( KW_PRIMARY KW_KEY -> TOK_PRIMARY_KEY | KW_UNIQUE -> TOK_UNIQUE )
            int alt257=2;
            int LA257_0 = input.LA(1);

            if ( (LA257_0==KW_PRIMARY) ) {
                alt257=1;
            }
            else if ( (LA257_0==KW_UNIQUE) ) {
                alt257=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);

                throw nvae;

            }
            switch (alt257) {
                case 1 :
                    // HiveParser.g:2387:7: KW_PRIMARY KW_KEY
                    {
                    KW_PRIMARY830=(Token)match(input,KW_PRIMARY,FOLLOW_KW_PRIMARY_in_tableConstraintType14438); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_PRIMARY.add(KW_PRIMARY830);


                    KW_KEY831=(Token)match(input,KW_KEY,FOLLOW_KW_KEY_in_tableConstraintType14440); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_KEY.add(KW_KEY831);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2387:28: -> TOK_PRIMARY_KEY
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_PRIMARY_KEY, "TOK_PRIMARY_KEY")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2388:7: KW_UNIQUE
                    {
                    KW_UNIQUE832=(Token)match(input,KW_UNIQUE,FOLLOW_KW_UNIQUE_in_tableConstraintType14458); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_UNIQUE.add(KW_UNIQUE832);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2388:28: -> TOK_UNIQUE
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_UNIQUE, "TOK_UNIQUE")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tableConstraintType"


    public static class constraintOptsCreate_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constraintOptsCreate"
    // HiveParser.g:2391:1: constraintOptsCreate : enableValidateSpecification ( relySpecification )? ;
    public final HiveParser.constraintOptsCreate_return constraintOptsCreate() throws RecognitionException {
        HiveParser.constraintOptsCreate_return retval = new HiveParser.constraintOptsCreate_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.enableValidateSpecification_return enableValidateSpecification833 =null;

        HiveParser.relySpecification_return relySpecification834 =null;



        try {
            // HiveParser.g:2392:5: ( enableValidateSpecification ( relySpecification )? )
            // HiveParser.g:2392:7: enableValidateSpecification ( relySpecification )?
            {
            root_0 = (ASTNode)adaptor.nil();


            pushFollow(FOLLOW_enableValidateSpecification_in_constraintOptsCreate14493);
            enableValidateSpecification833=enableValidateSpecification();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enableValidateSpecification833.getTree());

            // HiveParser.g:2392:35: ( relySpecification )?
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0==KW_NORELY||LA258_0==KW_RELY) ) {
                alt258=1;
            }
            switch (alt258) {
                case 1 :
                    // HiveParser.g:2392:35: relySpecification
                    {
                    pushFollow(FOLLOW_relySpecification_in_constraintOptsCreate14495);
                    relySpecification834=relySpecification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relySpecification834.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constraintOptsCreate"


    public static class constraintOptsAlter_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constraintOptsAlter"
    // HiveParser.g:2395:1: constraintOptsAlter : enableValidateSpecification ( relySpecification )? ;
    public final HiveParser.constraintOptsAlter_return constraintOptsAlter() throws RecognitionException {
        HiveParser.constraintOptsAlter_return retval = new HiveParser.constraintOptsAlter_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.enableValidateSpecification_return enableValidateSpecification835 =null;

        HiveParser.relySpecification_return relySpecification836 =null;



        try {
            // HiveParser.g:2396:5: ( enableValidateSpecification ( relySpecification )? )
            // HiveParser.g:2396:7: enableValidateSpecification ( relySpecification )?
            {
            root_0 = (ASTNode)adaptor.nil();


            pushFollow(FOLLOW_enableValidateSpecification_in_constraintOptsAlter14513);
            enableValidateSpecification835=enableValidateSpecification();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enableValidateSpecification835.getTree());

            // HiveParser.g:2396:35: ( relySpecification )?
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==KW_NORELY||LA259_0==KW_RELY) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    // HiveParser.g:2396:35: relySpecification
                    {
                    pushFollow(FOLLOW_relySpecification_in_constraintOptsAlter14515);
                    relySpecification836=relySpecification();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relySpecification836.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constraintOptsAlter"


    public static class columnNameColonType_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnNameColonType"
    // HiveParser.g:2399:1: columnNameColonType : colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
    public final HiveParser.columnNameColonType_return columnNameColonType() throws RecognitionException {
        HiveParser.columnNameColonType_return retval = new HiveParser.columnNameColonType_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token comment=null;
        Token COLON837=null;
        Token KW_COMMENT839=null;
        HiveParser_IdentifiersParser.identifier_return colName =null;

        HiveParser.colType_return colType838 =null;


        ASTNode comment_tree=null;
        ASTNode COLON837_tree=null;
        ASTNode KW_COMMENT839_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         pushMsg("column specification", state); 
        try {
            // HiveParser.g:2402:5: (colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
            // HiveParser.g:2402:7: colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )?
            {
            pushFollow(FOLLOW_identifier_in_columnNameColonType14545);
            colName=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());

            COLON837=(Token)match(input,COLON,FOLLOW_COLON_in_columnNameColonType14547); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON837);


            pushFollow(FOLLOW_colType_in_columnNameColonType14549);
            colType838=colType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_colType.add(colType838.getTree());

            // HiveParser.g:2402:40: ( KW_COMMENT comment= StringLiteral )?
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==KW_COMMENT) ) {
                alt260=1;
            }
            switch (alt260) {
                case 1 :
                    // HiveParser.g:2402:41: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT839=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameColonType14552); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT839);


                    comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameColonType14556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: colType, colName, comment, colName, colType
            // token labels: comment
            // rule labels: colName, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2403:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
            if (comment == null) {
                // HiveParser.g:2403:28: ^( TOK_TABCOL $colName colType )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextTree());

                adaptor.addChild(root_1, stream_colType.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2404:5: -> ^( TOK_TABCOL $colName colType $comment)
            {
                // HiveParser.g:2404:28: ^( TOK_TABCOL $colName colType $comment)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL")
                , root_1);

                adaptor.addChild(root_1, stream_colName.nextTree());

                adaptor.addChild(root_1, stream_colType.nextTree());

                adaptor.addChild(root_1, stream_comment.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnNameColonType"


    public static class colType_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "colType"
    // HiveParser.g:2407:1: colType : type ;
    public final HiveParser.colType_return colType() throws RecognitionException {
        HiveParser.colType_return retval = new HiveParser.colType_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.type_return type840 =null;



         pushMsg("column type", state); 
        try {
            // HiveParser.g:2410:5: ( type )
            // HiveParser.g:2410:7: type
            {
            root_0 = (ASTNode)adaptor.nil();


            pushFollow(FOLLOW_type_in_colType14640);
            type840=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type840.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "colType"


    public static class colTypeList_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "colTypeList"
    // HiveParser.g:2413:1: colTypeList : colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) ;
    public final HiveParser.colTypeList_return colTypeList() throws RecognitionException {
        HiveParser.colTypeList_return retval = new HiveParser.colTypeList_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token COMMA842=null;
        HiveParser.colType_return colType841 =null;

        HiveParser.colType_return colType843 =null;


        ASTNode COMMA842_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         pushMsg("column type list", state); 
        try {
            // HiveParser.g:2416:5: ( colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) )
            // HiveParser.g:2416:7: colType ( COMMA colType )*
            {
            pushFollow(FOLLOW_colType_in_colTypeList14667);
            colType841=colType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_colType.add(colType841.getTree());

            // HiveParser.g:2416:15: ( COMMA colType )*
            loop261:
            do {
                int alt261=2;
                int LA261_0 = input.LA(1);

                if ( (LA261_0==COMMA) ) {
                    alt261=1;
                }


                switch (alt261) {
            	case 1 :
            	    // HiveParser.g:2416:16: COMMA colType
            	    {
            	    COMMA842=(Token)match(input,COMMA,FOLLOW_COMMA_in_colTypeList14670); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA842);


            	    pushFollow(FOLLOW_colType_in_colTypeList14672);
            	    colType843=colType();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_colType.add(colType843.getTree());

            	    }
            	    break;

            	default :
            	    break loop261;
                }
            } while (true);


            // AST REWRITE
            // elements: colType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2416:32: -> ^( TOK_COLTYPELIST ( colType )+ )
            {
                // HiveParser.g:2416:35: ^( TOK_COLTYPELIST ( colType )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_COLTYPELIST, "TOK_COLTYPELIST")
                , root_1);

                if ( !(stream_colType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_colType.hasNext() ) {
                    adaptor.addChild(root_1, stream_colType.nextTree());

                }
                stream_colType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "colTypeList"


    public static class type_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type"
    // HiveParser.g:2419:1: type : ( primitiveType | listType | structType | mapType | unionType );
    public final HiveParser.type_return type() throws RecognitionException {
        HiveParser.type_return retval = new HiveParser.type_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.primitiveType_return primitiveType844 =null;

        HiveParser.listType_return listType845 =null;

        HiveParser.structType_return structType846 =null;

        HiveParser.mapType_return mapType847 =null;

        HiveParser.unionType_return unionType848 =null;



        try {
            // HiveParser.g:2420:5: ( primitiveType | listType | structType | mapType | unionType )
            int alt262=5;
            switch ( input.LA(1) ) {
            case KW_BIGINT:
            case KW_BINARY:
            case KW_BOOLEAN:
            case KW_CHAR:
            case KW_DATE:
            case KW_DATETIME:
            case KW_DECIMAL:
            case KW_DOUBLE:
            case KW_FLOAT:
            case KW_INT:
            case KW_REAL:
            case KW_SMALLINT:
            case KW_STRING:
            case KW_TIMESTAMP:
            case KW_TIMESTAMPLOCALTZ:
            case KW_TINYINT:
            case KW_VARCHAR:
                {
                alt262=1;
                }
                break;
            case KW_ARRAY:
                {
                alt262=2;
                }
                break;
            case KW_STRUCT:
                {
                alt262=3;
                }
                break;
            case KW_MAP:
                {
                alt262=4;
                }
                break;
            case KW_UNIONTYPE:
                {
                alt262=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 262, 0, input);

                throw nvae;

            }

            switch (alt262) {
                case 1 :
                    // HiveParser.g:2420:7: primitiveType
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_primitiveType_in_type14700);
                    primitiveType844=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType844.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:2421:7: listType
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_listType_in_type14708);
                    listType845=listType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, listType845.getTree());

                    }
                    break;
                case 3 :
                    // HiveParser.g:2422:7: structType
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_structType_in_type14716);
                    structType846=structType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, structType846.getTree());

                    }
                    break;
                case 4 :
                    // HiveParser.g:2423:7: mapType
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_mapType_in_type14724);
                    mapType847=mapType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mapType847.getTree());

                    }
                    break;
                case 5 :
                    // HiveParser.g:2424:7: unionType
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_unionType_in_type14732);
                    unionType848=unionType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unionType848.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type"


    public static class primitiveType_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "primitiveType"
    // HiveParser.g:2426:1: primitiveType : ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_REAL -> TOK_FLOAT | KW_DOUBLE ( KW_PRECISION )? -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_TIMESTAMPLOCALTZ -> TOK_TIMESTAMPLOCALTZ | KW_TIMESTAMP KW_WITH KW_LOCAL KW_TIME KW_ZONE -> TOK_TIMESTAMPLOCALTZ | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY | KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )? -> ^( TOK_DECIMAL ( $prec)? ( $scale)? ) | KW_VARCHAR LPAREN length= Number RPAREN -> ^( TOK_VARCHAR $length) | KW_CHAR LPAREN length= Number RPAREN -> ^( TOK_CHAR $length) );
    public final HiveParser.primitiveType_return primitiveType() throws RecognitionException {
        HiveParser.primitiveType_return retval = new HiveParser.primitiveType_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token prec=null;
        Token scale=null;
        Token length=null;
        Token KW_TINYINT849=null;
        Token KW_SMALLINT850=null;
        Token KW_INT851=null;
        Token KW_BIGINT852=null;
        Token KW_BOOLEAN853=null;
        Token KW_FLOAT854=null;
        Token KW_REAL855=null;
        Token KW_DOUBLE856=null;
        Token KW_PRECISION857=null;
        Token KW_DATE858=null;
        Token KW_DATETIME859=null;
        Token KW_TIMESTAMP860=null;
        Token KW_TIMESTAMPLOCALTZ861=null;
        Token KW_TIMESTAMP862=null;
        Token KW_WITH863=null;
        Token KW_LOCAL864=null;
        Token KW_TIME865=null;
        Token KW_ZONE866=null;
        Token KW_STRING867=null;
        Token KW_BINARY868=null;
        Token KW_DECIMAL869=null;
        Token LPAREN870=null;
        Token COMMA871=null;
        Token RPAREN872=null;
        Token KW_VARCHAR873=null;
        Token LPAREN874=null;
        Token RPAREN875=null;
        Token KW_CHAR876=null;
        Token LPAREN877=null;
        Token RPAREN878=null;

        ASTNode prec_tree=null;
        ASTNode scale_tree=null;
        ASTNode length_tree=null;
        ASTNode KW_TINYINT849_tree=null;
        ASTNode KW_SMALLINT850_tree=null;
        ASTNode KW_INT851_tree=null;
        ASTNode KW_BIGINT852_tree=null;
        ASTNode KW_BOOLEAN853_tree=null;
        ASTNode KW_FLOAT854_tree=null;
        ASTNode KW_REAL855_tree=null;
        ASTNode KW_DOUBLE856_tree=null;
        ASTNode KW_PRECISION857_tree=null;
        ASTNode KW_DATE858_tree=null;
        ASTNode KW_DATETIME859_tree=null;
        ASTNode KW_TIMESTAMP860_tree=null;
        ASTNode KW_TIMESTAMPLOCALTZ861_tree=null;
        ASTNode KW_TIMESTAMP862_tree=null;
        ASTNode KW_WITH863_tree=null;
        ASTNode KW_LOCAL864_tree=null;
        ASTNode KW_TIME865_tree=null;
        ASTNode KW_ZONE866_tree=null;
        ASTNode KW_STRING867_tree=null;
        ASTNode KW_BINARY868_tree=null;
        ASTNode KW_DECIMAL869_tree=null;
        ASTNode LPAREN870_tree=null;
        ASTNode COMMA871_tree=null;
        ASTNode RPAREN872_tree=null;
        ASTNode KW_VARCHAR873_tree=null;
        ASTNode LPAREN874_tree=null;
        ASTNode RPAREN875_tree=null;
        ASTNode KW_CHAR876_tree=null;
        ASTNode LPAREN877_tree=null;
        ASTNode RPAREN878_tree=null;
        RewriteRuleTokenStream stream_KW_DATETIME=new RewriteRuleTokenStream(adaptor,"token KW_DATETIME");
        RewriteRuleTokenStream stream_KW_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token KW_TIMESTAMP");
        RewriteRuleTokenStream stream_KW_BOOLEAN=new RewriteRuleTokenStream(adaptor,"token KW_BOOLEAN");
        RewriteRuleTokenStream stream_KW_DOUBLE=new RewriteRuleTokenStream(adaptor,"token KW_DOUBLE");
        RewriteRuleTokenStream stream_KW_TIME=new RewriteRuleTokenStream(adaptor,"token KW_TIME");
        RewriteRuleTokenStream stream_KW_CHAR=new RewriteRuleTokenStream(adaptor,"token KW_CHAR");
        RewriteRuleTokenStream stream_KW_INT=new RewriteRuleTokenStream(adaptor,"token KW_INT");
        RewriteRuleTokenStream stream_KW_DECIMAL=new RewriteRuleTokenStream(adaptor,"token KW_DECIMAL");
        RewriteRuleTokenStream stream_KW_ZONE=new RewriteRuleTokenStream(adaptor,"token KW_ZONE");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_TINYINT=new RewriteRuleTokenStream(adaptor,"token KW_TINYINT");
        RewriteRuleTokenStream stream_KW_REAL=new RewriteRuleTokenStream(adaptor,"token KW_REAL");
        RewriteRuleTokenStream stream_KW_PRECISION=new RewriteRuleTokenStream(adaptor,"token KW_PRECISION");
        RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_SMALLINT=new RewriteRuleTokenStream(adaptor,"token KW_SMALLINT");
        RewriteRuleTokenStream stream_KW_DATE=new RewriteRuleTokenStream(adaptor,"token KW_DATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_BIGINT=new RewriteRuleTokenStream(adaptor,"token KW_BIGINT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_STRING=new RewriteRuleTokenStream(adaptor,"token KW_STRING");
        RewriteRuleTokenStream stream_KW_VARCHAR=new RewriteRuleTokenStream(adaptor,"token KW_VARCHAR");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_FLOAT=new RewriteRuleTokenStream(adaptor,"token KW_FLOAT");
        RewriteRuleTokenStream stream_KW_TIMESTAMPLOCALTZ=new RewriteRuleTokenStream(adaptor,"token KW_TIMESTAMPLOCALTZ");
        RewriteRuleTokenStream stream_KW_BINARY=new RewriteRuleTokenStream(adaptor,"token KW_BINARY");

         pushMsg("primitive type specification", state); 
        try {
            // HiveParser.g:2429:5: ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_REAL -> TOK_FLOAT | KW_DOUBLE ( KW_PRECISION )? -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_TIMESTAMPLOCALTZ -> TOK_TIMESTAMPLOCALTZ | KW_TIMESTAMP KW_WITH KW_LOCAL KW_TIME KW_ZONE -> TOK_TIMESTAMPLOCALTZ | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY | KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )? -> ^( TOK_DECIMAL ( $prec)? ( $scale)? ) | KW_VARCHAR LPAREN length= Number RPAREN -> ^( TOK_VARCHAR $length) | KW_CHAR LPAREN length= Number RPAREN -> ^( TOK_CHAR $length) )
            int alt266=18;
            switch ( input.LA(1) ) {
            case KW_TINYINT:
                {
                alt266=1;
                }
                break;
            case KW_SMALLINT:
                {
                alt266=2;
                }
                break;
            case KW_INT:
                {
                alt266=3;
                }
                break;
            case KW_BIGINT:
                {
                alt266=4;
                }
                break;
            case KW_BOOLEAN:
                {
                alt266=5;
                }
                break;
            case KW_FLOAT:
                {
                alt266=6;
                }
                break;
            case KW_REAL:
                {
                alt266=7;
                }
                break;
            case KW_DOUBLE:
                {
                alt266=8;
                }
                break;
            case KW_DATE:
                {
                alt266=9;
                }
                break;
            case KW_DATETIME:
                {
                alt266=10;
                }
                break;
            case KW_TIMESTAMP:
                {
                int LA266_11 = input.LA(2);

                if ( (LA266_11==KW_WITH) ) {
                    alt266=13;
                }
                else if ( (LA266_11==EOF||LA266_11==COMMA||LA266_11==GREATERTHAN||LA266_11==KW_AFTER||LA266_11==KW_CASCADE||LA266_11==KW_CHECK||LA266_11==KW_CLUSTER||LA266_11==KW_COMMENT||LA266_11==KW_CONSTRAINT||LA266_11==KW_DEFAULT||LA266_11==KW_DISTRIBUTE||LA266_11==KW_EXCEPT||LA266_11==KW_FIRST||LA266_11==KW_FORMAT||LA266_11==KW_FROM||LA266_11==KW_GROUP||LA266_11==KW_HAVING||LA266_11==KW_INSERT||LA266_11==KW_INTERSECT||LA266_11==KW_LATERAL||LA266_11==KW_LIMIT||LA266_11==KW_MAP||LA266_11==KW_MINUS||LA266_11==KW_NOT||LA266_11==KW_ORDER||LA266_11==KW_PRIMARY||LA266_11==KW_QUALIFY||LA266_11==KW_RECORDREADER||(LA266_11 >= KW_REDUCE && LA266_11 <= KW_REFERENCES)||LA266_11==KW_RESTRICT||LA266_11==KW_ROW||LA266_11==KW_SELECT||LA266_11==KW_SORT||LA266_11==KW_UNION||LA266_11==KW_UNIQUE||LA266_11==KW_WHERE||LA266_11==KW_WINDOW||LA266_11==RPAREN) ) {
                    alt266=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 11, input);

                    throw nvae;

                }
                }
                break;
            case KW_TIMESTAMPLOCALTZ:
                {
                alt266=12;
                }
                break;
            case KW_STRING:
                {
                alt266=14;
                }
                break;
            case KW_BINARY:
                {
                alt266=15;
                }
                break;
            case KW_DECIMAL:
                {
                alt266=16;
                }
                break;
            case KW_VARCHAR:
                {
                alt266=17;
                }
                break;
            case KW_CHAR:
                {
                alt266=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);

                throw nvae;

            }

            switch (alt266) {
                case 1 :
                    // HiveParser.g:2429:7: KW_TINYINT
                    {
                    KW_TINYINT849=(Token)match(input,KW_TINYINT,FOLLOW_KW_TINYINT_in_primitiveType14754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TINYINT.add(KW_TINYINT849);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2429:24: -> TOK_TINYINT
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_TINYINT, "TOK_TINYINT")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2430:7: KW_SMALLINT
                    {
                    KW_SMALLINT850=(Token)match(input,KW_SMALLINT,FOLLOW_KW_SMALLINT_in_primitiveType14775); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_SMALLINT.add(KW_SMALLINT850);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2430:24: -> TOK_SMALLINT
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_SMALLINT, "TOK_SMALLINT")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:2431:7: KW_INT
                    {
                    KW_INT851=(Token)match(input,KW_INT,FOLLOW_KW_INT_in_primitiveType14795); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INT.add(KW_INT851);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2431:24: -> TOK_INT
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_INT, "TOK_INT")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:2432:7: KW_BIGINT
                    {
                    KW_BIGINT852=(Token)match(input,KW_BIGINT,FOLLOW_KW_BIGINT_in_primitiveType14820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_BIGINT.add(KW_BIGINT852);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2432:24: -> TOK_BIGINT
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_BIGINT, "TOK_BIGINT")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // HiveParser.g:2433:7: KW_BOOLEAN
                    {
                    KW_BOOLEAN853=(Token)match(input,KW_BOOLEAN,FOLLOW_KW_BOOLEAN_in_primitiveType14842); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_BOOLEAN.add(KW_BOOLEAN853);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2433:24: -> TOK_BOOLEAN
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_BOOLEAN, "TOK_BOOLEAN")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // HiveParser.g:2434:7: KW_FLOAT
                    {
                    KW_FLOAT854=(Token)match(input,KW_FLOAT,FOLLOW_KW_FLOAT_in_primitiveType14863); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_FLOAT.add(KW_FLOAT854);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2434:24: -> TOK_FLOAT
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_FLOAT, "TOK_FLOAT")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // HiveParser.g:2435:7: KW_REAL
                    {
                    KW_REAL855=(Token)match(input,KW_REAL,FOLLOW_KW_REAL_in_primitiveType14886); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_REAL.add(KW_REAL855);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2435:23: -> TOK_FLOAT
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_FLOAT, "TOK_FLOAT")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // HiveParser.g:2436:7: KW_DOUBLE ( KW_PRECISION )?
                    {
                    KW_DOUBLE856=(Token)match(input,KW_DOUBLE,FOLLOW_KW_DOUBLE_in_primitiveType14910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DOUBLE.add(KW_DOUBLE856);


                    // HiveParser.g:2436:17: ( KW_PRECISION )?
                    int alt263=2;
                    int LA263_0 = input.LA(1);

                    if ( (LA263_0==KW_PRECISION) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            // HiveParser.g:2436:17: KW_PRECISION
                            {
                            KW_PRECISION857=(Token)match(input,KW_PRECISION,FOLLOW_KW_PRECISION_in_primitiveType14912); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_PRECISION.add(KW_PRECISION857);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2436:37: -> TOK_DOUBLE
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_DOUBLE, "TOK_DOUBLE")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 9 :
                    // HiveParser.g:2437:7: KW_DATE
                    {
                    KW_DATE858=(Token)match(input,KW_DATE,FOLLOW_KW_DATE_in_primitiveType14934); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DATE.add(KW_DATE858);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2437:24: -> TOK_DATE
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_DATE, "TOK_DATE")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 10 :
                    // HiveParser.g:2438:7: KW_DATETIME
                    {
                    KW_DATETIME859=(Token)match(input,KW_DATETIME,FOLLOW_KW_DATETIME_in_primitiveType14958); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DATETIME.add(KW_DATETIME859);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2438:24: -> TOK_DATETIME
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_DATETIME, "TOK_DATETIME")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 11 :
                    // HiveParser.g:2439:7: KW_TIMESTAMP
                    {
                    KW_TIMESTAMP860=(Token)match(input,KW_TIMESTAMP,FOLLOW_KW_TIMESTAMP_in_primitiveType14978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TIMESTAMP.add(KW_TIMESTAMP860);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2439:24: -> TOK_TIMESTAMP
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_TIMESTAMP, "TOK_TIMESTAMP")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 12 :
                    // HiveParser.g:2440:7: KW_TIMESTAMPLOCALTZ
                    {
                    KW_TIMESTAMPLOCALTZ861=(Token)match(input,KW_TIMESTAMPLOCALTZ,FOLLOW_KW_TIMESTAMPLOCALTZ_in_primitiveType14997); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TIMESTAMPLOCALTZ.add(KW_TIMESTAMPLOCALTZ861);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2440:29: -> TOK_TIMESTAMPLOCALTZ
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_TIMESTAMPLOCALTZ, "TOK_TIMESTAMPLOCALTZ")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 13 :
                    // HiveParser.g:2442:7: KW_TIMESTAMP KW_WITH KW_LOCAL KW_TIME KW_ZONE
                    {
                    KW_TIMESTAMP862=(Token)match(input,KW_TIMESTAMP,FOLLOW_KW_TIMESTAMP_in_primitiveType15019); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TIMESTAMP.add(KW_TIMESTAMP862);


                    KW_WITH863=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_primitiveType15021); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH863);


                    KW_LOCAL864=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_primitiveType15023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_LOCAL.add(KW_LOCAL864);


                    KW_TIME865=(Token)match(input,KW_TIME,FOLLOW_KW_TIME_in_primitiveType15025); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TIME.add(KW_TIME865);


                    KW_ZONE866=(Token)match(input,KW_ZONE,FOLLOW_KW_ZONE_in_primitiveType15027); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ZONE.add(KW_ZONE866);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2442:53: -> TOK_TIMESTAMPLOCALTZ
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_TIMESTAMPLOCALTZ, "TOK_TIMESTAMPLOCALTZ")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 14 :
                    // HiveParser.g:2447:7: KW_STRING
                    {
                    KW_STRING867=(Token)match(input,KW_STRING,FOLLOW_KW_STRING_in_primitiveType15059); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_STRING.add(KW_STRING867);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2447:24: -> TOK_STRING
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_STRING, "TOK_STRING")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 15 :
                    // HiveParser.g:2448:7: KW_BINARY
                    {
                    KW_BINARY868=(Token)match(input,KW_BINARY,FOLLOW_KW_BINARY_in_primitiveType15081); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_BINARY.add(KW_BINARY868);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2448:24: -> TOK_BINARY
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_BINARY, "TOK_BINARY")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 16 :
                    // HiveParser.g:2449:7: KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )?
                    {
                    KW_DECIMAL869=(Token)match(input,KW_DECIMAL,FOLLOW_KW_DECIMAL_in_primitiveType15103); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DECIMAL.add(KW_DECIMAL869);


                    // HiveParser.g:2449:18: ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )?
                    int alt265=2;
                    int LA265_0 = input.LA(1);

                    if ( (LA265_0==LPAREN) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            // HiveParser.g:2449:19: LPAREN prec= Number ( COMMA scale= Number )? RPAREN
                            {
                            LPAREN870=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType15106); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN870);


                            prec=(Token)match(input,Number,FOLLOW_Number_in_primitiveType15110); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Number.add(prec);


                            // HiveParser.g:2449:38: ( COMMA scale= Number )?
                            int alt264=2;
                            int LA264_0 = input.LA(1);

                            if ( (LA264_0==COMMA) ) {
                                alt264=1;
                            }
                            switch (alt264) {
                                case 1 :
                                    // HiveParser.g:2449:39: COMMA scale= Number
                                    {
                                    COMMA871=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitiveType15113); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA871);


                                    scale=(Token)match(input,Number,FOLLOW_Number_in_primitiveType15117); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_Number.add(scale);


                                    }
                                    break;

                            }


                            RPAREN872=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType15121); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN872);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: scale, prec
                    // token labels: prec, scale
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_prec=new RewriteRuleTokenStream(adaptor,"token prec",prec);
                    RewriteRuleTokenStream stream_scale=new RewriteRuleTokenStream(adaptor,"token scale",scale);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2449:69: -> ^( TOK_DECIMAL ( $prec)? ( $scale)? )
                    {
                        // HiveParser.g:2449:72: ^( TOK_DECIMAL ( $prec)? ( $scale)? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DECIMAL, "TOK_DECIMAL")
                        , root_1);

                        // HiveParser.g:2449:87: ( $prec)?
                        if ( stream_prec.hasNext() ) {
                            adaptor.addChild(root_1, stream_prec.nextNode());

                        }
                        stream_prec.reset();

                        // HiveParser.g:2449:94: ( $scale)?
                        if ( stream_scale.hasNext() ) {
                            adaptor.addChild(root_1, stream_scale.nextNode());

                        }
                        stream_scale.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 17 :
                    // HiveParser.g:2450:7: KW_VARCHAR LPAREN length= Number RPAREN
                    {
                    KW_VARCHAR873=(Token)match(input,KW_VARCHAR,FOLLOW_KW_VARCHAR_in_primitiveType15145); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_VARCHAR.add(KW_VARCHAR873);


                    LPAREN874=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType15147); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN874);


                    length=(Token)match(input,Number,FOLLOW_Number_in_primitiveType15151); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Number.add(length);


                    RPAREN875=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType15153); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN875);


                    // AST REWRITE
                    // elements: length
                    // token labels: length
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_length=new RewriteRuleTokenStream(adaptor,"token length",length);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2450:51: -> ^( TOK_VARCHAR $length)
                    {
                        // HiveParser.g:2450:57: ^( TOK_VARCHAR $length)
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_VARCHAR, "TOK_VARCHAR")
                        , root_1);

                        adaptor.addChild(root_1, stream_length.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 18 :
                    // HiveParser.g:2451:7: KW_CHAR LPAREN length= Number RPAREN
                    {
                    KW_CHAR876=(Token)match(input,KW_CHAR,FOLLOW_KW_CHAR_in_primitiveType15178); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_CHAR.add(KW_CHAR876);


                    LPAREN877=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType15180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN877);


                    length=(Token)match(input,Number,FOLLOW_Number_in_primitiveType15184); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Number.add(length);


                    RPAREN878=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType15186); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN878);


                    // AST REWRITE
                    // elements: length
                    // token labels: length
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_length=new RewriteRuleTokenStream(adaptor,"token length",length);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2451:48: -> ^( TOK_CHAR $length)
                    {
                        // HiveParser.g:2451:54: ^( TOK_CHAR $length)
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_CHAR, "TOK_CHAR")
                        , root_1);

                        adaptor.addChild(root_1, stream_length.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "primitiveType"


    public static class listType_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "listType"
    // HiveParser.g:2454:1: listType : KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) ;
    public final HiveParser.listType_return listType() throws RecognitionException {
        HiveParser.listType_return retval = new HiveParser.listType_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_ARRAY879=null;
        Token LESSTHAN880=null;
        Token GREATERTHAN882=null;
        HiveParser.type_return type881 =null;


        ASTNode KW_ARRAY879_tree=null;
        ASTNode LESSTHAN880_tree=null;
        ASTNode GREATERTHAN882_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_ARRAY=new RewriteRuleTokenStream(adaptor,"token KW_ARRAY");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
         pushMsg("list type", state); 
        try {
            // HiveParser.g:2457:5: ( KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) )
            // HiveParser.g:2457:7: KW_ARRAY LESSTHAN type GREATERTHAN
            {
            KW_ARRAY879=(Token)match(input,KW_ARRAY,FOLLOW_KW_ARRAY_in_listType15230); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ARRAY.add(KW_ARRAY879);


            LESSTHAN880=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_listType15232); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN880);


            pushFollow(FOLLOW_type_in_listType15234);
            type881=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type881.getTree());

            GREATERTHAN882=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_listType15236); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN882);


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2457:44: -> ^( TOK_LIST type )
            {
                // HiveParser.g:2457:47: ^( TOK_LIST type )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_LIST, "TOK_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "listType"


    public static class structType_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "structType"
    // HiveParser.g:2460:1: structType : KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) ;
    public final HiveParser.structType_return structType() throws RecognitionException {
        HiveParser.structType_return retval = new HiveParser.structType_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_STRUCT883=null;
        Token LESSTHAN884=null;
        Token GREATERTHAN886=null;
        HiveParser.columnNameColonTypeList_return columnNameColonTypeList885 =null;


        ASTNode KW_STRUCT883_tree=null;
        ASTNode LESSTHAN884_tree=null;
        ASTNode GREATERTHAN886_tree=null;
        RewriteRuleTokenStream stream_KW_STRUCT=new RewriteRuleTokenStream(adaptor,"token KW_STRUCT");
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_columnNameColonTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonTypeList");
         pushMsg("struct type", state); 
        try {
            // HiveParser.g:2463:5: ( KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) )
            // HiveParser.g:2463:7: KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN
            {
            KW_STRUCT883=(Token)match(input,KW_STRUCT,FOLLOW_KW_STRUCT_in_structType15273); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_STRUCT.add(KW_STRUCT883);


            LESSTHAN884=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_structType15275); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN884);


            pushFollow(FOLLOW_columnNameColonTypeList_in_structType15277);
            columnNameColonTypeList885=columnNameColonTypeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnNameColonTypeList.add(columnNameColonTypeList885.getTree());

            GREATERTHAN886=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_structType15279); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN886);


            // AST REWRITE
            // elements: columnNameColonTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2463:62: -> ^( TOK_STRUCT columnNameColonTypeList )
            {
                // HiveParser.g:2463:65: ^( TOK_STRUCT columnNameColonTypeList )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_STRUCT, "TOK_STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_columnNameColonTypeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "structType"


    public static class mapType_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mapType"
    // HiveParser.g:2466:1: mapType : KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) ;
    public final HiveParser.mapType_return mapType() throws RecognitionException {
        HiveParser.mapType_return retval = new HiveParser.mapType_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_MAP887=null;
        Token LESSTHAN888=null;
        Token COMMA889=null;
        Token GREATERTHAN890=null;
        HiveParser.primitiveType_return left =null;

        HiveParser.type_return right =null;


        ASTNode KW_MAP887_tree=null;
        ASTNode LESSTHAN888_tree=null;
        ASTNode COMMA889_tree=null;
        ASTNode GREATERTHAN890_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
         pushMsg("map type", state); 
        try {
            // HiveParser.g:2469:5: ( KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) )
            // HiveParser.g:2469:7: KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN
            {
            KW_MAP887=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_mapType15314); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MAP.add(KW_MAP887);


            LESSTHAN888=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_mapType15316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN888);


            pushFollow(FOLLOW_primitiveType_in_mapType15320);
            left=primitiveType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_primitiveType.add(left.getTree());

            COMMA889=(Token)match(input,COMMA,FOLLOW_COMMA_in_mapType15322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA889);


            pushFollow(FOLLOW_type_in_mapType15326);
            right=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(right.getTree());

            GREATERTHAN890=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_mapType15328); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN890);


            // AST REWRITE
            // elements: left, right
            // token labels: 
            // rule labels: left, right, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.tree:null);
            RewriteRuleSubtreeStream stream_right=new RewriteRuleSubtreeStream(adaptor,"rule right",right!=null?right.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2470:5: -> ^( TOK_MAP $left $right)
            {
                // HiveParser.g:2470:8: ^( TOK_MAP $left $right)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_MAP, "TOK_MAP")
                , root_1);

                adaptor.addChild(root_1, stream_left.nextTree());

                adaptor.addChild(root_1, stream_right.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mapType"


    public static class unionType_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unionType"
    // HiveParser.g:2473:1: unionType : KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) ;
    public final HiveParser.unionType_return unionType() throws RecognitionException {
        HiveParser.unionType_return retval = new HiveParser.unionType_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_UNIONTYPE891=null;
        Token LESSTHAN892=null;
        Token GREATERTHAN894=null;
        HiveParser.colTypeList_return colTypeList893 =null;


        ASTNode KW_UNIONTYPE891_tree=null;
        ASTNode LESSTHAN892_tree=null;
        ASTNode GREATERTHAN894_tree=null;
        RewriteRuleTokenStream stream_KW_UNIONTYPE=new RewriteRuleTokenStream(adaptor,"token KW_UNIONTYPE");
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_colTypeList=new RewriteRuleSubtreeStream(adaptor,"rule colTypeList");
         pushMsg("uniontype type", state); 
        try {
            // HiveParser.g:2476:5: ( KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) )
            // HiveParser.g:2476:7: KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN
            {
            KW_UNIONTYPE891=(Token)match(input,KW_UNIONTYPE,FOLLOW_KW_UNIONTYPE_in_unionType15371); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_UNIONTYPE.add(KW_UNIONTYPE891);


            LESSTHAN892=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_unionType15373); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN892);


            pushFollow(FOLLOW_colTypeList_in_unionType15375);
            colTypeList893=colTypeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_colTypeList.add(colTypeList893.getTree());

            GREATERTHAN894=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_unionType15377); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN894);


            // AST REWRITE
            // elements: colTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2476:53: -> ^( TOK_UNIONTYPE colTypeList )
            {
                // HiveParser.g:2476:56: ^( TOK_UNIONTYPE colTypeList )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_UNIONTYPE, "TOK_UNIONTYPE")
                , root_1);

                adaptor.addChild(root_1, stream_colTypeList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unionType"


    public static class setOperator_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "setOperator"
    // HiveParser.g:2479:1: setOperator : ( KW_UNION KW_ALL -> ^( TOK_UNIONALL ) | KW_UNION ( KW_DISTINCT )? -> ^( TOK_UNIONDISTINCT ) | KW_INTERSECT KW_ALL -> ^( TOK_INTERSECTALL ) | KW_INTERSECT ( KW_DISTINCT )? -> ^( TOK_INTERSECTDISTINCT ) | KW_EXCEPT KW_ALL -> ^( TOK_EXCEPTALL ) | KW_EXCEPT ( KW_DISTINCT )? -> ^( TOK_EXCEPTDISTINCT ) | KW_MINUS KW_ALL -> ^( TOK_EXCEPTALL ) | KW_MINUS ( KW_DISTINCT )? -> ^( TOK_EXCEPTDISTINCT ) );
    public final HiveParser.setOperator_return setOperator() throws RecognitionException {
        HiveParser.setOperator_return retval = new HiveParser.setOperator_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_UNION895=null;
        Token KW_ALL896=null;
        Token KW_UNION897=null;
        Token KW_DISTINCT898=null;
        Token KW_INTERSECT899=null;
        Token KW_ALL900=null;
        Token KW_INTERSECT901=null;
        Token KW_DISTINCT902=null;
        Token KW_EXCEPT903=null;
        Token KW_ALL904=null;
        Token KW_EXCEPT905=null;
        Token KW_DISTINCT906=null;
        Token KW_MINUS907=null;
        Token KW_ALL908=null;
        Token KW_MINUS909=null;
        Token KW_DISTINCT910=null;

        ASTNode KW_UNION895_tree=null;
        ASTNode KW_ALL896_tree=null;
        ASTNode KW_UNION897_tree=null;
        ASTNode KW_DISTINCT898_tree=null;
        ASTNode KW_INTERSECT899_tree=null;
        ASTNode KW_ALL900_tree=null;
        ASTNode KW_INTERSECT901_tree=null;
        ASTNode KW_DISTINCT902_tree=null;
        ASTNode KW_EXCEPT903_tree=null;
        ASTNode KW_ALL904_tree=null;
        ASTNode KW_EXCEPT905_tree=null;
        ASTNode KW_DISTINCT906_tree=null;
        ASTNode KW_MINUS907_tree=null;
        ASTNode KW_ALL908_tree=null;
        ASTNode KW_MINUS909_tree=null;
        ASTNode KW_DISTINCT910_tree=null;
        RewriteRuleTokenStream stream_KW_INTERSECT=new RewriteRuleTokenStream(adaptor,"token KW_INTERSECT");
        RewriteRuleTokenStream stream_KW_EXCEPT=new RewriteRuleTokenStream(adaptor,"token KW_EXCEPT");
        RewriteRuleTokenStream stream_KW_UNION=new RewriteRuleTokenStream(adaptor,"token KW_UNION");
        RewriteRuleTokenStream stream_KW_DISTINCT=new RewriteRuleTokenStream(adaptor,"token KW_DISTINCT");
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleTokenStream stream_KW_MINUS=new RewriteRuleTokenStream(adaptor,"token KW_MINUS");

         pushMsg("set operator", state); 
        try {
            // HiveParser.g:2482:5: ( KW_UNION KW_ALL -> ^( TOK_UNIONALL ) | KW_UNION ( KW_DISTINCT )? -> ^( TOK_UNIONDISTINCT ) | KW_INTERSECT KW_ALL -> ^( TOK_INTERSECTALL ) | KW_INTERSECT ( KW_DISTINCT )? -> ^( TOK_INTERSECTDISTINCT ) | KW_EXCEPT KW_ALL -> ^( TOK_EXCEPTALL ) | KW_EXCEPT ( KW_DISTINCT )? -> ^( TOK_EXCEPTDISTINCT ) | KW_MINUS KW_ALL -> ^( TOK_EXCEPTALL ) | KW_MINUS ( KW_DISTINCT )? -> ^( TOK_EXCEPTDISTINCT ) )
            int alt271=8;
            switch ( input.LA(1) ) {
            case KW_UNION:
                {
                int LA271_1 = input.LA(2);

                if ( (LA271_1==KW_ALL) ) {
                    alt271=1;
                }
                else if ( (LA271_1==EOF||LA271_1==KW_DISTINCT||LA271_1==KW_FROM||LA271_1==KW_MAP||LA271_1==KW_REDUCE||LA271_1==KW_SELECT||LA271_1==KW_VALUES||LA271_1==LPAREN) ) {
                    alt271=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 1, input);

                    throw nvae;

                }
                }
                break;
            case KW_INTERSECT:
                {
                int LA271_2 = input.LA(2);

                if ( (LA271_2==KW_ALL) ) {
                    alt271=3;
                }
                else if ( (LA271_2==EOF||LA271_2==KW_DISTINCT||LA271_2==KW_FROM||LA271_2==KW_MAP||LA271_2==KW_REDUCE||LA271_2==KW_SELECT||LA271_2==KW_VALUES||LA271_2==LPAREN) ) {
                    alt271=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 2, input);

                    throw nvae;

                }
                }
                break;
            case KW_EXCEPT:
                {
                int LA271_3 = input.LA(2);

                if ( (LA271_3==KW_ALL) ) {
                    alt271=5;
                }
                else if ( (LA271_3==EOF||LA271_3==KW_DISTINCT||LA271_3==KW_FROM||LA271_3==KW_MAP||LA271_3==KW_REDUCE||LA271_3==KW_SELECT||LA271_3==KW_VALUES||LA271_3==LPAREN) ) {
                    alt271=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 3, input);

                    throw nvae;

                }
                }
                break;
            case KW_MINUS:
                {
                int LA271_4 = input.LA(2);

                if ( (LA271_4==KW_ALL) ) {
                    alt271=7;
                }
                else if ( (LA271_4==EOF||LA271_4==KW_DISTINCT||LA271_4==KW_FROM||LA271_4==KW_MAP||LA271_4==KW_REDUCE||LA271_4==KW_SELECT||LA271_4==KW_VALUES||LA271_4==LPAREN) ) {
                    alt271=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 4, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);

                throw nvae;

            }

            switch (alt271) {
                case 1 :
                    // HiveParser.g:2482:7: KW_UNION KW_ALL
                    {
                    KW_UNION895=(Token)match(input,KW_UNION,FOLLOW_KW_UNION_in_setOperator15412); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_UNION.add(KW_UNION895);


                    KW_ALL896=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setOperator15414); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL896);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2482:23: -> ^( TOK_UNIONALL )
                    {
                        // HiveParser.g:2482:26: ^( TOK_UNIONALL )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2483:7: KW_UNION ( KW_DISTINCT )?
                    {
                    KW_UNION897=(Token)match(input,KW_UNION,FOLLOW_KW_UNION_in_setOperator15428); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_UNION.add(KW_UNION897);


                    // HiveParser.g:2483:16: ( KW_DISTINCT )?
                    int alt267=2;
                    int LA267_0 = input.LA(1);

                    if ( (LA267_0==KW_DISTINCT) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            // HiveParser.g:2483:16: KW_DISTINCT
                            {
                            KW_DISTINCT898=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_setOperator15430); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DISTINCT.add(KW_DISTINCT898);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2483:29: -> ^( TOK_UNIONDISTINCT )
                    {
                        // HiveParser.g:2483:32: ^( TOK_UNIONDISTINCT )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_UNIONDISTINCT, "TOK_UNIONDISTINCT")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // HiveParser.g:2484:7: KW_INTERSECT KW_ALL
                    {
                    KW_INTERSECT899=(Token)match(input,KW_INTERSECT,FOLLOW_KW_INTERSECT_in_setOperator15445); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INTERSECT.add(KW_INTERSECT899);


                    KW_ALL900=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setOperator15447); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL900);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2484:27: -> ^( TOK_INTERSECTALL )
                    {
                        // HiveParser.g:2484:30: ^( TOK_INTERSECTALL )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_INTERSECTALL, "TOK_INTERSECTALL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // HiveParser.g:2485:7: KW_INTERSECT ( KW_DISTINCT )?
                    {
                    KW_INTERSECT901=(Token)match(input,KW_INTERSECT,FOLLOW_KW_INTERSECT_in_setOperator15461); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INTERSECT.add(KW_INTERSECT901);


                    // HiveParser.g:2485:20: ( KW_DISTINCT )?
                    int alt268=2;
                    int LA268_0 = input.LA(1);

                    if ( (LA268_0==KW_DISTINCT) ) {
                        alt268=1;
                    }
                    switch (alt268) {
                        case 1 :
                            // HiveParser.g:2485:20: KW_DISTINCT
                            {
                            KW_DISTINCT902=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_setOperator15463); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DISTINCT.add(KW_DISTINCT902);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2485:33: -> ^( TOK_INTERSECTDISTINCT )
                    {
                        // HiveParser.g:2485:36: ^( TOK_INTERSECTDISTINCT )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_INTERSECTDISTINCT, "TOK_INTERSECTDISTINCT")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // HiveParser.g:2486:7: KW_EXCEPT KW_ALL
                    {
                    KW_EXCEPT903=(Token)match(input,KW_EXCEPT,FOLLOW_KW_EXCEPT_in_setOperator15478); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_EXCEPT.add(KW_EXCEPT903);


                    KW_ALL904=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setOperator15480); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL904);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2486:24: -> ^( TOK_EXCEPTALL )
                    {
                        // HiveParser.g:2486:27: ^( TOK_EXCEPTALL )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_EXCEPTALL, "TOK_EXCEPTALL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // HiveParser.g:2487:7: KW_EXCEPT ( KW_DISTINCT )?
                    {
                    KW_EXCEPT905=(Token)match(input,KW_EXCEPT,FOLLOW_KW_EXCEPT_in_setOperator15494); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_EXCEPT.add(KW_EXCEPT905);


                    // HiveParser.g:2487:17: ( KW_DISTINCT )?
                    int alt269=2;
                    int LA269_0 = input.LA(1);

                    if ( (LA269_0==KW_DISTINCT) ) {
                        alt269=1;
                    }
                    switch (alt269) {
                        case 1 :
                            // HiveParser.g:2487:17: KW_DISTINCT
                            {
                            KW_DISTINCT906=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_setOperator15496); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DISTINCT.add(KW_DISTINCT906);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2487:30: -> ^( TOK_EXCEPTDISTINCT )
                    {
                        // HiveParser.g:2487:33: ^( TOK_EXCEPTDISTINCT )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_EXCEPTDISTINCT, "TOK_EXCEPTDISTINCT")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // HiveParser.g:2488:7: KW_MINUS KW_ALL
                    {
                    KW_MINUS907=(Token)match(input,KW_MINUS,FOLLOW_KW_MINUS_in_setOperator15511); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_MINUS.add(KW_MINUS907);


                    KW_ALL908=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setOperator15513); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL908);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2488:23: -> ^( TOK_EXCEPTALL )
                    {
                        // HiveParser.g:2488:26: ^( TOK_EXCEPTALL )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_EXCEPTALL, "TOK_EXCEPTALL")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // HiveParser.g:2489:7: KW_MINUS ( KW_DISTINCT )?
                    {
                    KW_MINUS909=(Token)match(input,KW_MINUS,FOLLOW_KW_MINUS_in_setOperator15527); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_MINUS.add(KW_MINUS909);


                    // HiveParser.g:2489:16: ( KW_DISTINCT )?
                    int alt270=2;
                    int LA270_0 = input.LA(1);

                    if ( (LA270_0==KW_DISTINCT) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            // HiveParser.g:2489:16: KW_DISTINCT
                            {
                            KW_DISTINCT910=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_setOperator15529); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_DISTINCT.add(KW_DISTINCT910);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2489:29: -> ^( TOK_EXCEPTDISTINCT )
                    {
                        // HiveParser.g:2489:32: ^( TOK_EXCEPTDISTINCT )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_EXCEPTDISTINCT, "TOK_EXCEPTDISTINCT")
                        , root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "setOperator"


    public static class queryStatementExpression_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "queryStatementExpression"
    // HiveParser.g:2492:1: queryStatementExpression : (w= withClause )? queryStatementExpressionBody -> queryStatementExpressionBody ;
    public final HiveParser.queryStatementExpression_return queryStatementExpression() throws RecognitionException {
        HiveParser.queryStatementExpression_return retval = new HiveParser.queryStatementExpression_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.withClause_return w =null;

        HiveParser.queryStatementExpressionBody_return queryStatementExpressionBody911 =null;


        RewriteRuleSubtreeStream stream_withClause=new RewriteRuleSubtreeStream(adaptor,"rule withClause");
        RewriteRuleSubtreeStream stream_queryStatementExpressionBody=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpressionBody");
        try {
            // HiveParser.g:2493:5: ( (w= withClause )? queryStatementExpressionBody -> queryStatementExpressionBody )
            // HiveParser.g:2498:5: (w= withClause )? queryStatementExpressionBody
            {
            // HiveParser.g:2498:5: (w= withClause )?
            int alt272=2;
            int LA272_0 = input.LA(1);

            if ( (LA272_0==KW_WITH) ) {
                alt272=1;
            }
            switch (alt272) {
                case 1 :
                    // HiveParser.g:2498:6: w= withClause
                    {
                    pushFollow(FOLLOW_withClause_in_queryStatementExpression15566);
                    w=withClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_withClause.add(w.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_queryStatementExpressionBody_in_queryStatementExpression15574);
            queryStatementExpressionBody911=queryStatementExpressionBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_queryStatementExpressionBody.add(queryStatementExpressionBody911.getTree());

            if ( state.backtracking==0 ) {
                  if ((w!=null?((ASTNode)w.tree):null) != null) {
                  (queryStatementExpressionBody911!=null?((ASTNode)queryStatementExpressionBody911.tree):null).insertChild(0, (w!=null?((ASTNode)w.tree):null));
                  }
                }

            // AST REWRITE
            // elements: queryStatementExpressionBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2504:5: -> queryStatementExpressionBody
            {
                adaptor.addChild(root_0, stream_queryStatementExpressionBody.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "queryStatementExpression"


    public static class queryStatementExpressionBody_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "queryStatementExpressionBody"
    // HiveParser.g:2507:1: queryStatementExpressionBody : ( fromStatement | regularBody );
    public final HiveParser.queryStatementExpressionBody_return queryStatementExpressionBody() throws RecognitionException {
        HiveParser.queryStatementExpressionBody_return retval = new HiveParser.queryStatementExpressionBody_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.fromStatement_return fromStatement912 =null;

        HiveParser.regularBody_return regularBody913 =null;



        try {
            // HiveParser.g:2508:5: ( fromStatement | regularBody )
            int alt273=2;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==KW_FROM) ) {
                alt273=1;
            }
            else if ( (LA273_0==KW_INSERT||LA273_0==KW_MAP||LA273_0==KW_REDUCE||LA273_0==KW_SELECT||LA273_0==KW_VALUES||LA273_0==LPAREN) ) {
                alt273=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);

                throw nvae;

            }
            switch (alt273) {
                case 1 :
                    // HiveParser.g:2509:5: fromStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_fromStatement_in_queryStatementExpressionBody15606);
                    fromStatement912=fromStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromStatement912.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:2510:7: regularBody
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_regularBody_in_queryStatementExpressionBody15614);
                    regularBody913=regularBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularBody913.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "queryStatementExpressionBody"


    public static class withClause_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "withClause"
    // HiveParser.g:2513:1: withClause : KW_WITH cteStatement ( COMMA cteStatement )* -> ^( TOK_CTE ( cteStatement )+ ) ;
    public final HiveParser.withClause_return withClause() throws RecognitionException {
        HiveParser.withClause_return retval = new HiveParser.withClause_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_WITH914=null;
        Token COMMA916=null;
        HiveParser.cteStatement_return cteStatement915 =null;

        HiveParser.cteStatement_return cteStatement917 =null;


        ASTNode KW_WITH914_tree=null;
        ASTNode COMMA916_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleSubtreeStream stream_cteStatement=new RewriteRuleSubtreeStream(adaptor,"rule cteStatement");
        try {
            // HiveParser.g:2514:3: ( KW_WITH cteStatement ( COMMA cteStatement )* -> ^( TOK_CTE ( cteStatement )+ ) )
            // HiveParser.g:2515:3: KW_WITH cteStatement ( COMMA cteStatement )*
            {
            KW_WITH914=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withClause15631); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH914);


            pushFollow(FOLLOW_cteStatement_in_withClause15633);
            cteStatement915=cteStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cteStatement.add(cteStatement915.getTree());

            // HiveParser.g:2515:24: ( COMMA cteStatement )*
            loop274:
            do {
                int alt274=2;
                int LA274_0 = input.LA(1);

                if ( (LA274_0==COMMA) ) {
                    alt274=1;
                }


                switch (alt274) {
            	case 1 :
            	    // HiveParser.g:2515:25: COMMA cteStatement
            	    {
            	    COMMA916=(Token)match(input,COMMA,FOLLOW_COMMA_in_withClause15636); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA916);


            	    pushFollow(FOLLOW_cteStatement_in_withClause15638);
            	    cteStatement917=cteStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cteStatement.add(cteStatement917.getTree());

            	    }
            	    break;

            	default :
            	    break loop274;
                }
            } while (true);


            // AST REWRITE
            // elements: cteStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2515:46: -> ^( TOK_CTE ( cteStatement )+ )
            {
                // HiveParser.g:2515:49: ^( TOK_CTE ( cteStatement )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_CTE, "TOK_CTE")
                , root_1);

                if ( !(stream_cteStatement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cteStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_cteStatement.nextTree());

                }
                stream_cteStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "withClause"


    public static class cteStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cteStatement"
    // HiveParser.g:2518:1: cteStatement : identifier ( LPAREN colAliases= columnNameList RPAREN )? KW_AS LPAREN queryStatementExpression RPAREN -> ^( TOK_SUBQUERY queryStatementExpression identifier ( $colAliases)? ) ;
    public final HiveParser.cteStatement_return cteStatement() throws RecognitionException {
        HiveParser.cteStatement_return retval = new HiveParser.cteStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token LPAREN919=null;
        Token RPAREN920=null;
        Token KW_AS921=null;
        Token LPAREN922=null;
        Token RPAREN924=null;
        HiveParser.columnNameList_return colAliases =null;

        HiveParser_IdentifiersParser.identifier_return identifier918 =null;

        HiveParser.queryStatementExpression_return queryStatementExpression923 =null;


        ASTNode LPAREN919_tree=null;
        ASTNode RPAREN920_tree=null;
        ASTNode KW_AS921_tree=null;
        ASTNode LPAREN922_tree=null;
        ASTNode RPAREN924_tree=null;
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_queryStatementExpression=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpression");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        try {
            // HiveParser.g:2519:4: ( identifier ( LPAREN colAliases= columnNameList RPAREN )? KW_AS LPAREN queryStatementExpression RPAREN -> ^( TOK_SUBQUERY queryStatementExpression identifier ( $colAliases)? ) )
            // HiveParser.g:2520:4: identifier ( LPAREN colAliases= columnNameList RPAREN )? KW_AS LPAREN queryStatementExpression RPAREN
            {
            pushFollow(FOLLOW_identifier_in_cteStatement15664);
            identifier918=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_identifier.add(identifier918.getTree());

            // HiveParser.g:2520:15: ( LPAREN colAliases= columnNameList RPAREN )?
            int alt275=2;
            int LA275_0 = input.LA(1);

            if ( (LA275_0==LPAREN) ) {
                alt275=1;
            }
            switch (alt275) {
                case 1 :
                    // HiveParser.g:2520:16: LPAREN colAliases= columnNameList RPAREN
                    {
                    LPAREN919=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cteStatement15667); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN919);


                    pushFollow(FOLLOW_columnNameList_in_cteStatement15671);
                    colAliases=columnNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnNameList.add(colAliases.getTree());

                    RPAREN920=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cteStatement15673); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN920);


                    }
                    break;

            }


            KW_AS921=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_cteStatement15677); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS921);


            LPAREN922=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cteStatement15679); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN922);


            pushFollow(FOLLOW_queryStatementExpression_in_cteStatement15681);
            queryStatementExpression923=queryStatementExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_queryStatementExpression.add(queryStatementExpression923.getTree());

            RPAREN924=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cteStatement15683); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN924);


            // AST REWRITE
            // elements: queryStatementExpression, colAliases, identifier
            // token labels: 
            // rule labels: colAliases, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_colAliases=new RewriteRuleSubtreeStream(adaptor,"rule colAliases",colAliases!=null?colAliases.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2521:4: -> ^( TOK_SUBQUERY queryStatementExpression identifier ( $colAliases)? )
            {
                // HiveParser.g:2521:7: ^( TOK_SUBQUERY queryStatementExpression identifier ( $colAliases)? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY")
                , root_1);

                adaptor.addChild(root_1, stream_queryStatementExpression.nextTree());

                adaptor.addChild(root_1, stream_identifier.nextTree());

                // HiveParser.g:2521:59: ( $colAliases)?
                if ( stream_colAliases.hasNext() ) {
                    adaptor.addChild(root_1, stream_colAliases.nextTree());

                }
                stream_colAliases.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cteStatement"


    public static class fromStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fromStatement"
    // HiveParser.g:2524:1: fromStatement : ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )* -> {u != null}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) ->;
    public final HiveParser.fromStatement_return fromStatement() throws RecognitionException {
        HiveParser.fromStatement_return retval = new HiveParser.fromStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.setOperator_return u =null;

        HiveParser.singleFromStatement_return r =null;

        HiveParser.singleFromStatement_return singleFromStatement925 =null;


        RewriteRuleSubtreeStream stream_setOperator=new RewriteRuleSubtreeStream(adaptor,"rule setOperator");
        RewriteRuleSubtreeStream stream_singleFromStatement=new RewriteRuleSubtreeStream(adaptor,"rule singleFromStatement");
        try {
            // HiveParser.g:2525:3: ( ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )* -> {u != null}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) ->)
            // HiveParser.g:2525:3: ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )*
            {
            // HiveParser.g:2525:3: ( singleFromStatement -> singleFromStatement )
            // HiveParser.g:2525:4: singleFromStatement
            {
            pushFollow(FOLLOW_singleFromStatement_in_fromStatement15710);
            singleFromStatement925=singleFromStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_singleFromStatement.add(singleFromStatement925.getTree());

            // AST REWRITE
            // elements: singleFromStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2525:25: -> singleFromStatement
            {
                adaptor.addChild(root_0, stream_singleFromStatement.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // HiveParser.g:2526:2: (u= setOperator r= singleFromStatement -> ^( $u $r) )*
            loop276:
            do {
                int alt276=2;
                int LA276_0 = input.LA(1);

                if ( (LA276_0==KW_EXCEPT||LA276_0==KW_INTERSECT||LA276_0==KW_MINUS||LA276_0==KW_UNION) ) {
                    alt276=1;
                }


                switch (alt276) {
            	case 1 :
            	    // HiveParser.g:2526:3: u= setOperator r= singleFromStatement
            	    {
            	    pushFollow(FOLLOW_setOperator_in_fromStatement15722);
            	    u=setOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_setOperator.add(u.getTree());

            	    pushFollow(FOLLOW_singleFromStatement_in_fromStatement15726);
            	    r=singleFromStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_singleFromStatement.add(r.getTree());

            	    // AST REWRITE
            	    // elements: u, r
            	    // token labels: 
            	    // rule labels: r, u, retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_r=new RewriteRuleSubtreeStream(adaptor,"rule r",r!=null?r.tree:null);
            	    RewriteRuleSubtreeStream stream_u=new RewriteRuleSubtreeStream(adaptor,"rule u",u!=null?u.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (ASTNode)adaptor.nil();
            	    // 2527:4: -> ^( $u $r)
            	    {
            	        // HiveParser.g:2527:7: ^( $u $r)
            	        {
            	        ASTNode root_1 = (ASTNode)adaptor.nil();
            	        root_1 = (ASTNode)adaptor.becomeRoot(stream_u.nextNode(), root_1);

            	        adaptor.addChild(root_1, ((ASTNode)retval.tree));

            	        adaptor.addChild(root_1, stream_r.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    break loop276;
                }
            } while (true);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2529:3: -> {u != null}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
            if (u != null) {
                // HiveParser.g:2529:19: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY")
                , root_1);

                // HiveParser.g:2530:9: ^( TOK_FROM ^( TOK_SUBQUERY ) )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_FROM, "TOK_FROM")
                , root_2);

                // HiveParser.g:2531:11: ^( TOK_SUBQUERY )
                {
                ASTNode root_3 = (ASTNode)adaptor.nil();
                root_3 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY")
                , root_3);

                adaptor.addChild(root_3, ((ASTNode)retval.tree));

                adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:2536:13: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT")
                , root_2);

                // HiveParser.g:2537:12: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                {
                ASTNode root_3 = (ASTNode)adaptor.nil();
                root_3 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
                , root_3);

                // HiveParser.g:2537:30: ^( TOK_DIR TOK_TMP_FILE )
                {
                ASTNode root_4 = (ASTNode)adaptor.nil();
                root_4 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DIR, "TOK_DIR")
                , root_4);

                adaptor.addChild(root_4, 
                (ASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE")
                );

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                // HiveParser.g:2538:12: ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) )
                {
                ASTNode root_3 = (ASTNode)adaptor.nil();
                root_3 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SELECT, "TOK_SELECT")
                , root_3);

                // HiveParser.g:2538:25: ^( TOK_SELEXPR TOK_SETCOLREF )
                {
                ASTNode root_4 = (ASTNode)adaptor.nil();
                root_4 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR")
                , root_4);

                adaptor.addChild(root_4, 
                (ASTNode)adaptor.create(TOK_SETCOLREF, "TOK_SETCOLREF")
                );

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2541:5: ->
            {
                adaptor.addChild(root_0, ((ASTNode)retval.tree));

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fromStatement"


    public static class singleFromStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "singleFromStatement"
    // HiveParser.g:2545:1: singleFromStatement : fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) ;
    public final HiveParser.singleFromStatement_return singleFromStatement() throws RecognitionException {
        HiveParser.singleFromStatement_return retval = new HiveParser.singleFromStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        List list_b=null;
        HiveParser_FromClauseParser.fromClause_return fromClause926 =null;

        RuleReturnScope b = null;
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");
        try {
            // HiveParser.g:2546:5: ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) )
            // HiveParser.g:2547:5: fromClause (b+= body )+
            {
            pushFollow(FOLLOW_fromClause_in_singleFromStatement15936);
            fromClause926=fromClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fromClause.add(fromClause926.getTree());

            // HiveParser.g:2548:5: (b+= body )+
            int cnt277=0;
            loop277:
            do {
                int alt277=2;
                int LA277_0 = input.LA(1);

                if ( (LA277_0==KW_INSERT||LA277_0==KW_MAP||LA277_0==KW_REDUCE||LA277_0==KW_SELECT) ) {
                    alt277=1;
                }


                switch (alt277) {
            	case 1 :
            	    // HiveParser.g:2548:7: b+= body
            	    {
            	    pushFollow(FOLLOW_body_in_singleFromStatement15946);
            	    b=body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_body.add(b.getTree());
            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt277 >= 1 ) break loop277;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(277, input);
                        throw eee;
                }
                cnt277++;
            } while (true);


            // AST REWRITE
            // elements: fromClause, body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2548:18: -> ^( TOK_QUERY fromClause ( body )+ )
            {
                // HiveParser.g:2548:21: ^( TOK_QUERY fromClause ( body )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY")
                , root_1);

                adaptor.addChild(root_1, stream_fromClause.nextTree());

                if ( !(stream_body.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_body.hasNext() ) {
                    adaptor.addChild(root_1, stream_body.nextTree());

                }
                stream_body.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "singleFromStatement"


    public static class regularBody_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "regularBody"
    // HiveParser.g:2557:1: regularBody : (i= insertClause (s= selectStatement ->) | selectStatement );
    public final HiveParser.regularBody_return regularBody() throws RecognitionException {
        HiveParser.regularBody_return retval = new HiveParser.regularBody_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.insertClause_return i =null;

        HiveParser.selectStatement_return s =null;

        HiveParser.selectStatement_return selectStatement927 =null;


        RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
        RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
        try {
            // HiveParser.g:2558:4: (i= insertClause (s= selectStatement ->) | selectStatement )
            int alt278=2;
            int LA278_0 = input.LA(1);

            if ( (LA278_0==KW_INSERT) ) {
                alt278=1;
            }
            else if ( (LA278_0==KW_MAP||LA278_0==KW_REDUCE||LA278_0==KW_SELECT||LA278_0==KW_VALUES||LA278_0==LPAREN) ) {
                alt278=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 278, 0, input);

                throw nvae;

            }
            switch (alt278) {
                case 1 :
                    // HiveParser.g:2559:4: i= insertClause (s= selectStatement ->)
                    {
                    pushFollow(FOLLOW_insertClause_in_regularBody15983);
                    i=insertClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertClause.add(i.getTree());

                    // HiveParser.g:2560:4: (s= selectStatement ->)
                    // HiveParser.g:2561:4: s= selectStatement
                    {
                    pushFollow(FOLLOW_selectStatement_in_regularBody15995);
                    s=selectStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selectStatement.add(s.getTree());

                    if ( state.backtracking==0 ) {(s!=null?((ASTNode)s.tree):null).getFirstChildWithType(TOK_INSERT).replaceChildren(0, 0, (i!=null?((ASTNode)i.tree):null));}

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2562:4: ->
                    {
                        adaptor.addChild(root_0, (s!=null?((ASTNode)s.tree):null));

                    }


                    retval.tree = root_0;
                    }

                    }


                    }
                    break;
                case 2 :
                    // HiveParser.g:2565:4: selectStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_selectStatement_in_regularBody16019);
                    selectStatement927=selectStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectStatement927.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "regularBody"


    public static class atomSelectStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "atomSelectStatement"
    // HiveParser.g:2568:1: atomSelectStatement : (s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (win= window_clause )? (q= qualifyClause )? -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $win)? ( $q)? ) ) | LPAREN ! selectStatement RPAREN !| valuesSource );
    public final HiveParser.atomSelectStatement_return atomSelectStatement() throws RecognitionException {
        HiveParser.atomSelectStatement_return retval = new HiveParser.atomSelectStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token LPAREN928=null;
        Token RPAREN930=null;
        HiveParser_SelectClauseParser.selectClause_return s =null;

        HiveParser_FromClauseParser.fromClause_return f =null;

        HiveParser_FromClauseParser.whereClause_return w =null;

        HiveParser_IdentifiersParser.groupByClause_return g =null;

        HiveParser_IdentifiersParser.havingClause_return h =null;

        HiveParser_SelectClauseParser.window_clause_return win =null;

        HiveParser_IdentifiersParser.qualifyClause_return q =null;

        HiveParser.selectStatement_return selectStatement929 =null;

        HiveParser_FromClauseParser.valuesSource_return valuesSource931 =null;


        ASTNode LPAREN928_tree=null;
        ASTNode RPAREN930_tree=null;
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_qualifyClause=new RewriteRuleSubtreeStream(adaptor,"rule qualifyClause");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_window_clause=new RewriteRuleSubtreeStream(adaptor,"rule window_clause");
        try {
            // HiveParser.g:2569:4: (s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (win= window_clause )? (q= qualifyClause )? -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $win)? ( $q)? ) ) | LPAREN ! selectStatement RPAREN !| valuesSource )
            int alt285=3;
            switch ( input.LA(1) ) {
            case KW_MAP:
            case KW_REDUCE:
            case KW_SELECT:
                {
                alt285=1;
                }
                break;
            case LPAREN:
                {
                alt285=2;
                }
                break;
            case KW_VALUES:
                {
                alt285=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 285, 0, input);

                throw nvae;

            }

            switch (alt285) {
                case 1 :
                    // HiveParser.g:2570:4: s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (win= window_clause )? (q= qualifyClause )?
                    {
                    pushFollow(FOLLOW_selectClause_in_atomSelectStatement16039);
                    s=selectClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selectClause.add(s.getTree());

                    // HiveParser.g:2571:5: (f= fromClause )?
                    int alt279=2;
                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==KW_FROM) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            // HiveParser.g:2571:5: f= fromClause
                            {
                            pushFollow(FOLLOW_fromClause_in_atomSelectStatement16046);
                            f=fromClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fromClause.add(f.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2572:5: (w= whereClause )?
                    int alt280=2;
                    int LA280_0 = input.LA(1);

                    if ( (LA280_0==KW_WHERE) ) {
                        alt280=1;
                    }
                    switch (alt280) {
                        case 1 :
                            // HiveParser.g:2572:5: w= whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_atomSelectStatement16054);
                            w=whereClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2573:5: (g= groupByClause )?
                    int alt281=2;
                    int LA281_0 = input.LA(1);

                    if ( (LA281_0==KW_GROUP) ) {
                        alt281=1;
                    }
                    switch (alt281) {
                        case 1 :
                            // HiveParser.g:2573:5: g= groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_atomSelectStatement16062);
                            g=groupByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_groupByClause.add(g.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2574:5: (h= havingClause )?
                    int alt282=2;
                    int LA282_0 = input.LA(1);

                    if ( (LA282_0==KW_HAVING) ) {
                        alt282=1;
                    }
                    switch (alt282) {
                        case 1 :
                            // HiveParser.g:2574:5: h= havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_atomSelectStatement16070);
                            h=havingClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_havingClause.add(h.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2575:7: (win= window_clause )?
                    int alt283=2;
                    int LA283_0 = input.LA(1);

                    if ( (LA283_0==KW_WINDOW) ) {
                        alt283=1;
                    }
                    switch (alt283) {
                        case 1 :
                            // HiveParser.g:2575:7: win= window_clause
                            {
                            pushFollow(FOLLOW_window_clause_in_atomSelectStatement16078);
                            win=window_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_window_clause.add(win.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2576:5: (q= qualifyClause )?
                    int alt284=2;
                    int LA284_0 = input.LA(1);

                    if ( (LA284_0==KW_QUALIFY) ) {
                        alt284=1;
                    }
                    switch (alt284) {
                        case 1 :
                            // HiveParser.g:2576:5: q= qualifyClause
                            {
                            pushFollow(FOLLOW_qualifyClause_in_atomSelectStatement16086);
                            q=qualifyClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_qualifyClause.add(q.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: f, g, h, win, q, w, s
                    // token labels: 
                    // rule labels: q, s, f, g, w, h, win, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_q=new RewriteRuleSubtreeStream(adaptor,"rule q",q!=null?q.tree:null);
                    RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.tree:null);
                    RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.tree:null);
                    RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.tree:null);
                    RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.tree:null);
                    RewriteRuleSubtreeStream stream_h=new RewriteRuleSubtreeStream(adaptor,"rule h",h!=null?h.tree:null);
                    RewriteRuleSubtreeStream stream_win=new RewriteRuleSubtreeStream(adaptor,"rule win",win!=null?win.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2577:4: -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $win)? ( $q)? ) )
                    {
                        // HiveParser.g:2577:7: ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $win)? ( $q)? ) )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY")
                        , root_1);

                        // HiveParser.g:2577:20: ( $f)?
                        if ( stream_f.hasNext() ) {
                            adaptor.addChild(root_1, stream_f.nextTree());

                        }
                        stream_f.reset();

                        // HiveParser.g:2577:23: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $win)? ( $q)? )
                        {
                        ASTNode root_2 = (ASTNode)adaptor.nil();
                        root_2 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT")
                        , root_2);

                        // HiveParser.g:2577:36: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                        {
                        ASTNode root_3 = (ASTNode)adaptor.nil();
                        root_3 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
                        , root_3);

                        // HiveParser.g:2577:54: ^( TOK_DIR TOK_TMP_FILE )
                        {
                        ASTNode root_4 = (ASTNode)adaptor.nil();
                        root_4 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DIR, "TOK_DIR")
                        , root_4);

                        adaptor.addChild(root_4, 
                        (ASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE")
                        );

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_2, stream_s.nextTree());

                        // HiveParser.g:2578:26: ( $w)?
                        if ( stream_w.hasNext() ) {
                            adaptor.addChild(root_2, stream_w.nextTree());

                        }
                        stream_w.reset();

                        // HiveParser.g:2578:30: ( $g)?
                        if ( stream_g.hasNext() ) {
                            adaptor.addChild(root_2, stream_g.nextTree());

                        }
                        stream_g.reset();

                        // HiveParser.g:2578:34: ( $h)?
                        if ( stream_h.hasNext() ) {
                            adaptor.addChild(root_2, stream_h.nextTree());

                        }
                        stream_h.reset();

                        // HiveParser.g:2578:38: ( $win)?
                        if ( stream_win.hasNext() ) {
                            adaptor.addChild(root_2, stream_win.nextTree());

                        }
                        stream_win.reset();

                        // HiveParser.g:2578:44: ( $q)?
                        if ( stream_q.hasNext() ) {
                            adaptor.addChild(root_2, stream_q.nextTree());

                        }
                        stream_q.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2580:4: LPAREN ! selectStatement RPAREN !
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    LPAREN928=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_atomSelectStatement16168); if (state.failed) return retval;

                    pushFollow(FOLLOW_selectStatement_in_atomSelectStatement16171);
                    selectStatement929=selectStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectStatement929.getTree());

                    RPAREN930=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_atomSelectStatement16173); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // HiveParser.g:2582:4: valuesSource
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_valuesSource_in_atomSelectStatement16184);
                    valuesSource931=valuesSource();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, valuesSource931.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "atomSelectStatement"


    public static class selectStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selectStatement"
    // HiveParser.g:2585:1: selectStatement : a= atomSelectStatement (set= setOpSelectStatement[$atomSelectStatement.tree] )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (l= limitClause )? -> {set == null}? -> {o==null && c==null && d==null && sort==null && l==null}? -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $l)? ) ) ;
    public final HiveParser.selectStatement_return selectStatement() throws RecognitionException {
        HiveParser.selectStatement_return retval = new HiveParser.selectStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.atomSelectStatement_return a =null;

        HiveParser.setOpSelectStatement_return set =null;

        HiveParser_IdentifiersParser.orderByClause_return o =null;

        HiveParser_IdentifiersParser.clusterByClause_return c =null;

        HiveParser_IdentifiersParser.distributeByClause_return d =null;

        HiveParser_IdentifiersParser.sortByClause_return sort =null;

        HiveParser.limitClause_return l =null;


        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_setOpSelectStatement=new RewriteRuleSubtreeStream(adaptor,"rule setOpSelectStatement");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_atomSelectStatement=new RewriteRuleSubtreeStream(adaptor,"rule atomSelectStatement");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        try {
            // HiveParser.g:2586:4: (a= atomSelectStatement (set= setOpSelectStatement[$atomSelectStatement.tree] )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (l= limitClause )? -> {set == null}? -> {o==null && c==null && d==null && sort==null && l==null}? -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $l)? ) ) )
            // HiveParser.g:2587:4: a= atomSelectStatement (set= setOpSelectStatement[$atomSelectStatement.tree] )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (l= limitClause )?
            {
            pushFollow(FOLLOW_atomSelectStatement_in_selectStatement16204);
            a=atomSelectStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_atomSelectStatement.add(a.getTree());

            // HiveParser.g:2588:7: (set= setOpSelectStatement[$atomSelectStatement.tree] )?
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==KW_EXCEPT||LA286_0==KW_INTERSECT||LA286_0==KW_MINUS||LA286_0==KW_UNION) ) {
                alt286=1;
            }
            switch (alt286) {
                case 1 :
                    // HiveParser.g:2588:7: set= setOpSelectStatement[$atomSelectStatement.tree]
                    {
                    pushFollow(FOLLOW_setOpSelectStatement_in_selectStatement16211);
                    set=setOpSelectStatement((a!=null?((ASTNode)a.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_setOpSelectStatement.add(set.getTree());

                    }
                    break;

            }


            // HiveParser.g:2589:5: (o= orderByClause )?
            int alt287=2;
            int LA287_0 = input.LA(1);

            if ( (LA287_0==KW_ORDER) ) {
                alt287=1;
            }
            switch (alt287) {
                case 1 :
                    // HiveParser.g:2589:5: o= orderByClause
                    {
                    pushFollow(FOLLOW_orderByClause_in_selectStatement16220);
                    o=orderByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByClause.add(o.getTree());

                    }
                    break;

            }


            // HiveParser.g:2590:5: (c= clusterByClause )?
            int alt288=2;
            int LA288_0 = input.LA(1);

            if ( (LA288_0==KW_CLUSTER) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    // HiveParser.g:2590:5: c= clusterByClause
                    {
                    pushFollow(FOLLOW_clusterByClause_in_selectStatement16228);
                    c=clusterByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_clusterByClause.add(c.getTree());

                    }
                    break;

            }


            // HiveParser.g:2591:5: (d= distributeByClause )?
            int alt289=2;
            int LA289_0 = input.LA(1);

            if ( (LA289_0==KW_DISTRIBUTE) ) {
                alt289=1;
            }
            switch (alt289) {
                case 1 :
                    // HiveParser.g:2591:5: d= distributeByClause
                    {
                    pushFollow(FOLLOW_distributeByClause_in_selectStatement16236);
                    d=distributeByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_distributeByClause.add(d.getTree());

                    }
                    break;

            }


            // HiveParser.g:2592:8: (sort= sortByClause )?
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==KW_SORT) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    // HiveParser.g:2592:8: sort= sortByClause
                    {
                    pushFollow(FOLLOW_sortByClause_in_selectStatement16244);
                    sort=sortByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sortByClause.add(sort.getTree());

                    }
                    break;

            }


            // HiveParser.g:2593:5: (l= limitClause )?
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==KW_LIMIT) ) {
                alt291=1;
            }
            switch (alt291) {
                case 1 :
                    // HiveParser.g:2593:5: l= limitClause
                    {
                    pushFollow(FOLLOW_limitClause_in_selectStatement16252);
                    l=limitClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_limitClause.add(l.getTree());

                    }
                    break;

            }


            if ( state.backtracking==0 ) {
               if(set == null){
               (a!=null?((ASTNode)a.tree):null).getFirstChildWithType(TOK_INSERT).addChild((o!=null?((ASTNode)o.tree):null));
               (a!=null?((ASTNode)a.tree):null).getFirstChildWithType(TOK_INSERT).addChild((c!=null?((ASTNode)c.tree):null));
               (a!=null?((ASTNode)a.tree):null).getFirstChildWithType(TOK_INSERT).addChild((d!=null?((ASTNode)d.tree):null));
               (a!=null?((ASTNode)a.tree):null).getFirstChildWithType(TOK_INSERT).addChild((sort!=null?((ASTNode)sort.tree):null));
               (a!=null?((ASTNode)a.tree):null).getFirstChildWithType(TOK_INSERT).addChild((l!=null?((ASTNode)l.tree):null));
               }
               }

            // AST REWRITE
            // elements: l, o, d, c, sort
            // token labels: 
            // rule labels: c, d, sort, l, retval, o
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);
            RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.tree:null);
            RewriteRuleSubtreeStream stream_sort=new RewriteRuleSubtreeStream(adaptor,"rule sort",sort!=null?sort.tree:null);
            RewriteRuleSubtreeStream stream_l=new RewriteRuleSubtreeStream(adaptor,"rule l",l!=null?l.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"rule o",o!=null?o.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2603:4: -> {set == null}?
            if (set == null) {
                adaptor.addChild(root_0, (a!=null?((ASTNode)a.tree):null));

            }

            else // 2605:4: -> {o==null && c==null && d==null && sort==null && l==null}?
            if (o==null && c==null && d==null && sort==null && l==null) {
                adaptor.addChild(root_0, (set!=null?((ASTNode)set.tree):null));

            }

            else // 2607:4: -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $l)? ) )
            {
                // HiveParser.g:2607:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $l)? ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY")
                , root_1);

                // HiveParser.g:2608:11: ^( TOK_FROM ^( TOK_SUBQUERY ) )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_FROM, "TOK_FROM")
                , root_2);

                // HiveParser.g:2609:13: ^( TOK_SUBQUERY )
                {
                ASTNode root_3 = (ASTNode)adaptor.nil();
                root_3 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY")
                , root_3);

                adaptor.addChild(root_3, (set!=null?((ASTNode)set.tree):null));

                adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:2614:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $l)? )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT")
                , root_2);

                // HiveParser.g:2615:14: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                {
                ASTNode root_3 = (ASTNode)adaptor.nil();
                root_3 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
                , root_3);

                // HiveParser.g:2615:32: ^( TOK_DIR TOK_TMP_FILE )
                {
                ASTNode root_4 = (ASTNode)adaptor.nil();
                root_4 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DIR, "TOK_DIR")
                , root_4);

                adaptor.addChild(root_4, 
                (ASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE")
                );

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                // HiveParser.g:2616:14: ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) )
                {
                ASTNode root_3 = (ASTNode)adaptor.nil();
                root_3 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SELECT, "TOK_SELECT")
                , root_3);

                // HiveParser.g:2616:27: ^( TOK_SELEXPR TOK_SETCOLREF )
                {
                ASTNode root_4 = (ASTNode)adaptor.nil();
                root_4 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR")
                , root_4);

                adaptor.addChild(root_4, 
                (ASTNode)adaptor.create(TOK_SETCOLREF, "TOK_SETCOLREF")
                );

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                // HiveParser.g:2617:15: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_2, stream_o.nextTree());

                }
                stream_o.reset();

                // HiveParser.g:2617:19: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_2, stream_c.nextTree());

                }
                stream_c.reset();

                // HiveParser.g:2617:23: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_2, stream_d.nextTree());

                }
                stream_d.reset();

                // HiveParser.g:2617:27: ( $sort)?
                if ( stream_sort.hasNext() ) {
                    adaptor.addChild(root_2, stream_sort.nextTree());

                }
                stream_sort.reset();

                // HiveParser.g:2617:34: ( $l)?
                if ( stream_l.hasNext() ) {
                    adaptor.addChild(root_2, stream_l.nextTree());

                }
                stream_l.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selectStatement"


    public static class setOpSelectStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "setOpSelectStatement"
    // HiveParser.g:2622:1: setOpSelectStatement[CommonTree t] : (u= setOperator b= atomSelectStatement -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( $u $b) -> {$setOpSelectStatement.tree == null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> ^( $u $b) )+ -> {$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_UNIONALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_INTERSECTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_INTERSECTALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_EXCEPTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_EXCEPTALL}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) ->;
    public final HiveParser.setOpSelectStatement_return setOpSelectStatement(CommonTree t) throws RecognitionException {
        HiveParser.setOpSelectStatement_return retval = new HiveParser.setOpSelectStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.setOperator_return u =null;

        HiveParser.atomSelectStatement_return b =null;


        RewriteRuleSubtreeStream stream_setOperator=new RewriteRuleSubtreeStream(adaptor,"rule setOperator");
        RewriteRuleSubtreeStream stream_atomSelectStatement=new RewriteRuleSubtreeStream(adaptor,"rule atomSelectStatement");
        try {
            // HiveParser.g:2623:4: ( (u= setOperator b= atomSelectStatement -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( $u $b) -> {$setOpSelectStatement.tree == null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> ^( $u $b) )+ -> {$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_UNIONALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_INTERSECTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_INTERSECTALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_EXCEPTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_EXCEPTALL}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) ->)
            // HiveParser.g:2624:4: (u= setOperator b= atomSelectStatement -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( $u $b) -> {$setOpSelectStatement.tree == null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> ^( $u $b) )+
            {
            // HiveParser.g:2624:4: (u= setOperator b= atomSelectStatement -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( $u $b) -> {$setOpSelectStatement.tree == null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> ^( $u $b) )+
            int cnt292=0;
            loop292:
            do {
                int alt292=2;
                int LA292_0 = input.LA(1);

                if ( (LA292_0==KW_EXCEPT||LA292_0==KW_INTERSECT||LA292_0==KW_MINUS||LA292_0==KW_UNION) ) {
                    alt292=1;
                }


                switch (alt292) {
            	case 1 :
            	    // HiveParser.g:2624:5: u= setOperator b= atomSelectStatement
            	    {
            	    pushFollow(FOLLOW_setOperator_in_setOpSelectStatement16517);
            	    u=setOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_setOperator.add(u.getTree());

            	    pushFollow(FOLLOW_atomSelectStatement_in_setOpSelectStatement16521);
            	    b=atomSelectStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_atomSelectStatement.add(b.getTree());

            	    // AST REWRITE
            	    // elements: b, b, b, b, u, u
            	    // token labels: 
            	    // rule labels: b, u, retval
            	    // token list labels: 
            	    // rule list labels: 
            	    // wildcard labels: 
            	    if ( state.backtracking==0 ) {

            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);
            	    RewriteRuleSubtreeStream stream_u=new RewriteRuleSubtreeStream(adaptor,"rule u",u!=null?u.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	    root_0 = (ASTNode)adaptor.nil();
            	    // 2625:4: -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
            	    if (((ASTNode)retval.tree) != null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT) {
            	        // HiveParser.g:2626:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
            	        {
            	        ASTNode root_1 = (ASTNode)adaptor.nil();
            	        root_1 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY")
            	        , root_1);

            	        // HiveParser.g:2627:11: ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) )
            	        {
            	        ASTNode root_2 = (ASTNode)adaptor.nil();
            	        root_2 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_FROM, "TOK_FROM")
            	        , root_2);

            	        // HiveParser.g:2628:13: ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) )
            	        {
            	        ASTNode root_3 = (ASTNode)adaptor.nil();
            	        root_3 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY")
            	        , root_3);

            	        // HiveParser.g:2629:15: ^( TOK_UNIONALL $b)
            	        {
            	        ASTNode root_4 = (ASTNode)adaptor.nil();
            	        root_4 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL")
            	        , root_4);

            	        adaptor.addChild(root_4, ((ASTNode)retval.tree));

            	        adaptor.addChild(root_4, stream_b.nextTree());

            	        adaptor.addChild(root_3, root_4);
            	        }

            	        adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));

            	        adaptor.addChild(root_2, root_3);
            	        }

            	        adaptor.addChild(root_1, root_2);
            	        }

            	        // HiveParser.g:2633:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) )
            	        {
            	        ASTNode root_2 = (ASTNode)adaptor.nil();
            	        root_2 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT")
            	        , root_2);

            	        // HiveParser.g:2634:14: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
            	        {
            	        ASTNode root_3 = (ASTNode)adaptor.nil();
            	        root_3 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
            	        , root_3);

            	        // HiveParser.g:2634:32: ^( TOK_DIR TOK_TMP_FILE )
            	        {
            	        ASTNode root_4 = (ASTNode)adaptor.nil();
            	        root_4 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_DIR, "TOK_DIR")
            	        , root_4);

            	        adaptor.addChild(root_4, 
            	        (ASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE")
            	        );

            	        adaptor.addChild(root_3, root_4);
            	        }

            	        adaptor.addChild(root_2, root_3);
            	        }

            	        // HiveParser.g:2635:14: ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) )
            	        {
            	        ASTNode root_3 = (ASTNode)adaptor.nil();
            	        root_3 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_SELECTDI, "TOK_SELECTDI")
            	        , root_3);

            	        // HiveParser.g:2635:29: ^( TOK_SELEXPR TOK_SETCOLREF )
            	        {
            	        ASTNode root_4 = (ASTNode)adaptor.nil();
            	        root_4 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR")
            	        , root_4);

            	        adaptor.addChild(root_4, 
            	        (ASTNode)adaptor.create(TOK_SETCOLREF, "TOK_SETCOLREF")
            	        );

            	        adaptor.addChild(root_3, root_4);
            	        }

            	        adaptor.addChild(root_2, root_3);
            	        }

            	        adaptor.addChild(root_1, root_2);
            	        }

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    else // 2638:4: -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()!=HiveParser.TOK_UNIONDISTINCT}? ^( $u $b)
            	    if (((ASTNode)retval.tree) != null && ((CommonTree)u.getTree()).getType()!=HiveParser.TOK_UNIONDISTINCT) {
            	        // HiveParser.g:2639:7: ^( $u $b)
            	        {
            	        ASTNode root_1 = (ASTNode)adaptor.nil();
            	        root_1 = (ASTNode)adaptor.becomeRoot(stream_u.nextNode(), root_1);

            	        adaptor.addChild(root_1, ((ASTNode)retval.tree));

            	        adaptor.addChild(root_1, stream_b.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    else // 2640:4: -> {$setOpSelectStatement.tree == null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
            	    if (((ASTNode)retval.tree) == null && ((CommonTree)u.getTree()).getType()==HiveParser.TOK_UNIONDISTINCT) {
            	        // HiveParser.g:2641:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
            	        {
            	        ASTNode root_1 = (ASTNode)adaptor.nil();
            	        root_1 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY")
            	        , root_1);

            	        // HiveParser.g:2642:11: ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) )
            	        {
            	        ASTNode root_2 = (ASTNode)adaptor.nil();
            	        root_2 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_FROM, "TOK_FROM")
            	        , root_2);

            	        // HiveParser.g:2643:13: ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) )
            	        {
            	        ASTNode root_3 = (ASTNode)adaptor.nil();
            	        root_3 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY")
            	        , root_3);

            	        // HiveParser.g:2644:15: ^( TOK_UNIONALL $b)
            	        {
            	        ASTNode root_4 = (ASTNode)adaptor.nil();
            	        root_4 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL")
            	        , root_4);

            	        adaptor.addChild(root_4, t);

            	        adaptor.addChild(root_4, stream_b.nextTree());

            	        adaptor.addChild(root_3, root_4);
            	        }

            	        adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));

            	        adaptor.addChild(root_2, root_3);
            	        }

            	        adaptor.addChild(root_1, root_2);
            	        }

            	        // HiveParser.g:2648:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) )
            	        {
            	        ASTNode root_2 = (ASTNode)adaptor.nil();
            	        root_2 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT")
            	        , root_2);

            	        // HiveParser.g:2649:13: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
            	        {
            	        ASTNode root_3 = (ASTNode)adaptor.nil();
            	        root_3 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
            	        , root_3);

            	        // HiveParser.g:2649:31: ^( TOK_DIR TOK_TMP_FILE )
            	        {
            	        ASTNode root_4 = (ASTNode)adaptor.nil();
            	        root_4 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_DIR, "TOK_DIR")
            	        , root_4);

            	        adaptor.addChild(root_4, 
            	        (ASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE")
            	        );

            	        adaptor.addChild(root_3, root_4);
            	        }

            	        adaptor.addChild(root_2, root_3);
            	        }

            	        // HiveParser.g:2650:13: ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) )
            	        {
            	        ASTNode root_3 = (ASTNode)adaptor.nil();
            	        root_3 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_SELECTDI, "TOK_SELECTDI")
            	        , root_3);

            	        // HiveParser.g:2650:28: ^( TOK_SELEXPR TOK_SETCOLREF )
            	        {
            	        ASTNode root_4 = (ASTNode)adaptor.nil();
            	        root_4 = (ASTNode)adaptor.becomeRoot(
            	        (ASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR")
            	        , root_4);

            	        adaptor.addChild(root_4, 
            	        (ASTNode)adaptor.create(TOK_SETCOLREF, "TOK_SETCOLREF")
            	        );

            	        adaptor.addChild(root_3, root_4);
            	        }

            	        adaptor.addChild(root_2, root_3);
            	        }

            	        adaptor.addChild(root_1, root_2);
            	        }

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    else // 2653:4: -> ^( $u $b)
            	    {
            	        // HiveParser.g:2653:7: ^( $u $b)
            	        {
            	        ASTNode root_1 = (ASTNode)adaptor.nil();
            	        root_1 = (ASTNode)adaptor.becomeRoot(stream_u.nextNode(), root_1);

            	        adaptor.addChild(root_1, t);

            	        adaptor.addChild(root_1, stream_b.nextTree());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }


            	    retval.tree = root_0;
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt292 >= 1 ) break loop292;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(292, input);
                        throw eee;
                }
                cnt292++;
            } while (true);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2655:4: -> {$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_UNIONALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_INTERSECTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_INTERSECTALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_EXCEPTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveParser.TOK_EXCEPTALL}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
            if (((ASTNode)retval.tree).getChild(0).getType()==HiveParser.TOK_UNIONALL
               ||((ASTNode)retval.tree).getChild(0).getType()==HiveParser.TOK_INTERSECTDISTINCT
               ||((ASTNode)retval.tree).getChild(0).getType()==HiveParser.TOK_INTERSECTALL
               ||((ASTNode)retval.tree).getChild(0).getType()==HiveParser.TOK_EXCEPTDISTINCT
               ||((ASTNode)retval.tree).getChild(0).getType()==HiveParser.TOK_EXCEPTALL) {
                // HiveParser.g:2660:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY")
                , root_1);

                // HiveParser.g:2661:11: ^( TOK_FROM ^( TOK_SUBQUERY ) )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_FROM, "TOK_FROM")
                , root_2);

                // HiveParser.g:2662:13: ^( TOK_SUBQUERY )
                {
                ASTNode root_3 = (ASTNode)adaptor.nil();
                root_3 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY")
                , root_3);

                adaptor.addChild(root_3, ((ASTNode)retval.tree));

                adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:2667:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT")
                , root_2);

                // HiveParser.g:2668:14: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                {
                ASTNode root_3 = (ASTNode)adaptor.nil();
                root_3 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
                , root_3);

                // HiveParser.g:2668:32: ^( TOK_DIR TOK_TMP_FILE )
                {
                ASTNode root_4 = (ASTNode)adaptor.nil();
                root_4 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DIR, "TOK_DIR")
                , root_4);

                adaptor.addChild(root_4, 
                (ASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE")
                );

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                // HiveParser.g:2669:14: ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) )
                {
                ASTNode root_3 = (ASTNode)adaptor.nil();
                root_3 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SELECT, "TOK_SELECT")
                , root_3);

                // HiveParser.g:2669:27: ^( TOK_SELEXPR TOK_SETCOLREF )
                {
                ASTNode root_4 = (ASTNode)adaptor.nil();
                root_4 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR")
                , root_4);

                adaptor.addChild(root_4, 
                (ASTNode)adaptor.create(TOK_SETCOLREF, "TOK_SETCOLREF")
                );

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 2672:4: ->
            {
                adaptor.addChild(root_0, ((ASTNode)retval.tree));

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "setOpSelectStatement"


    public static class selectStatementWithCTE_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selectStatementWithCTE"
    // HiveParser.g:2675:1: selectStatementWithCTE : (w= withClause )? selectStatement -> selectStatement ;
    public final HiveParser.selectStatementWithCTE_return selectStatementWithCTE() throws RecognitionException {
        HiveParser.selectStatementWithCTE_return retval = new HiveParser.selectStatementWithCTE_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.withClause_return w =null;

        HiveParser.selectStatement_return selectStatement932 =null;


        RewriteRuleSubtreeStream stream_withClause=new RewriteRuleSubtreeStream(adaptor,"rule withClause");
        RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
        try {
            // HiveParser.g:2676:5: ( (w= withClause )? selectStatement -> selectStatement )
            // HiveParser.g:2677:5: (w= withClause )? selectStatement
            {
            // HiveParser.g:2677:5: (w= withClause )?
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==KW_WITH) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    // HiveParser.g:2677:6: w= withClause
                    {
                    pushFollow(FOLLOW_withClause_in_selectStatementWithCTE17156);
                    w=withClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_withClause.add(w.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_selectStatement_in_selectStatementWithCTE17164);
            selectStatement932=selectStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectStatement.add(selectStatement932.getTree());

            if ( state.backtracking==0 ) {
                  if ((w!=null?((ASTNode)w.tree):null) != null) {
                  (selectStatement932!=null?((ASTNode)selectStatement932.tree):null).insertChild(0, (w!=null?((ASTNode)w.tree):null));
                  }
                }

            // AST REWRITE
            // elements: selectStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2683:5: -> selectStatement
            {
                adaptor.addChild(root_0, stream_selectStatement.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selectStatementWithCTE"


    public static class body_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "body"
    // HiveParser.g:2686:1: body : ( insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( qualifyClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( qualifyClause )? ( limitClause )? ) | selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( qualifyClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( qualifyClause )? ( limitClause )? ) );
    public final HiveParser.body_return body() throws RecognitionException {
        HiveParser.body_return retval = new HiveParser.body_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.insertClause_return insertClause933 =null;

        HiveParser_SelectClauseParser.selectClause_return selectClause934 =null;

        HiveParser_FromClauseParser.lateralView_return lateralView935 =null;

        HiveParser_FromClauseParser.whereClause_return whereClause936 =null;

        HiveParser_IdentifiersParser.groupByClause_return groupByClause937 =null;

        HiveParser_IdentifiersParser.havingClause_return havingClause938 =null;

        HiveParser_SelectClauseParser.window_clause_return window_clause939 =null;

        HiveParser_IdentifiersParser.qualifyClause_return qualifyClause940 =null;

        HiveParser_IdentifiersParser.orderByClause_return orderByClause941 =null;

        HiveParser_IdentifiersParser.clusterByClause_return clusterByClause942 =null;

        HiveParser_IdentifiersParser.distributeByClause_return distributeByClause943 =null;

        HiveParser_IdentifiersParser.sortByClause_return sortByClause944 =null;

        HiveParser.limitClause_return limitClause945 =null;

        HiveParser_SelectClauseParser.selectClause_return selectClause946 =null;

        HiveParser_FromClauseParser.lateralView_return lateralView947 =null;

        HiveParser_FromClauseParser.whereClause_return whereClause948 =null;

        HiveParser_IdentifiersParser.groupByClause_return groupByClause949 =null;

        HiveParser_IdentifiersParser.havingClause_return havingClause950 =null;

        HiveParser_SelectClauseParser.window_clause_return window_clause951 =null;

        HiveParser_IdentifiersParser.qualifyClause_return qualifyClause952 =null;

        HiveParser_IdentifiersParser.orderByClause_return orderByClause953 =null;

        HiveParser_IdentifiersParser.clusterByClause_return clusterByClause954 =null;

        HiveParser_IdentifiersParser.distributeByClause_return distributeByClause955 =null;

        HiveParser_IdentifiersParser.sortByClause_return sortByClause956 =null;

        HiveParser.limitClause_return limitClause957 =null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
        RewriteRuleSubtreeStream stream_qualifyClause=new RewriteRuleSubtreeStream(adaptor,"rule qualifyClause");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_window_clause=new RewriteRuleSubtreeStream(adaptor,"rule window_clause");
        RewriteRuleSubtreeStream stream_lateralView=new RewriteRuleSubtreeStream(adaptor,"rule lateralView");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        try {
            // HiveParser.g:2687:4: ( insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( qualifyClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( qualifyClause )? ( limitClause )? ) | selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( qualifyClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( qualifyClause )? ( limitClause )? ) )
            int alt316=2;
            int LA316_0 = input.LA(1);

            if ( (LA316_0==KW_INSERT) ) {
                alt316=1;
            }
            else if ( (LA316_0==KW_MAP||LA316_0==KW_REDUCE||LA316_0==KW_SELECT) ) {
                alt316=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 316, 0, input);

                throw nvae;

            }
            switch (alt316) {
                case 1 :
                    // HiveParser.g:2688:4: insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( qualifyClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
                    {
                    pushFollow(FOLLOW_insertClause_in_body17194);
                    insertClause933=insertClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertClause.add(insertClause933.getTree());

                    pushFollow(FOLLOW_selectClause_in_body17199);
                    selectClause934=selectClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selectClause.add(selectClause934.getTree());

                    // HiveParser.g:2690:4: ( lateralView )?
                    int alt294=2;
                    int LA294_0 = input.LA(1);

                    if ( (LA294_0==COMMA||LA294_0==KW_LATERAL) ) {
                        alt294=1;
                    }
                    switch (alt294) {
                        case 1 :
                            // HiveParser.g:2690:4: lateralView
                            {
                            pushFollow(FOLLOW_lateralView_in_body17204);
                            lateralView935=lateralView();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_lateralView.add(lateralView935.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2691:4: ( whereClause )?
                    int alt295=2;
                    int LA295_0 = input.LA(1);

                    if ( (LA295_0==KW_WHERE) ) {
                        alt295=1;
                    }
                    switch (alt295) {
                        case 1 :
                            // HiveParser.g:2691:4: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_body17210);
                            whereClause936=whereClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause936.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2692:4: ( groupByClause )?
                    int alt296=2;
                    int LA296_0 = input.LA(1);

                    if ( (LA296_0==KW_GROUP) ) {
                        alt296=1;
                    }
                    switch (alt296) {
                        case 1 :
                            // HiveParser.g:2692:4: groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_body17216);
                            groupByClause937=groupByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_groupByClause.add(groupByClause937.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2693:4: ( havingClause )?
                    int alt297=2;
                    int LA297_0 = input.LA(1);

                    if ( (LA297_0==KW_HAVING) ) {
                        alt297=1;
                    }
                    switch (alt297) {
                        case 1 :
                            // HiveParser.g:2693:4: havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_body17222);
                            havingClause938=havingClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_havingClause.add(havingClause938.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2694:4: ( window_clause )?
                    int alt298=2;
                    int LA298_0 = input.LA(1);

                    if ( (LA298_0==KW_WINDOW) ) {
                        alt298=1;
                    }
                    switch (alt298) {
                        case 1 :
                            // HiveParser.g:2694:4: window_clause
                            {
                            pushFollow(FOLLOW_window_clause_in_body17228);
                            window_clause939=window_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_window_clause.add(window_clause939.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2695:4: ( qualifyClause )?
                    int alt299=2;
                    int LA299_0 = input.LA(1);

                    if ( (LA299_0==KW_QUALIFY) ) {
                        alt299=1;
                    }
                    switch (alt299) {
                        case 1 :
                            // HiveParser.g:2695:4: qualifyClause
                            {
                            pushFollow(FOLLOW_qualifyClause_in_body17234);
                            qualifyClause940=qualifyClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_qualifyClause.add(qualifyClause940.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2696:4: ( orderByClause )?
                    int alt300=2;
                    int LA300_0 = input.LA(1);

                    if ( (LA300_0==KW_ORDER) ) {
                        alt300=1;
                    }
                    switch (alt300) {
                        case 1 :
                            // HiveParser.g:2696:4: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_body17240);
                            orderByClause941=orderByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_orderByClause.add(orderByClause941.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2697:4: ( clusterByClause )?
                    int alt301=2;
                    int LA301_0 = input.LA(1);

                    if ( (LA301_0==KW_CLUSTER) ) {
                        alt301=1;
                    }
                    switch (alt301) {
                        case 1 :
                            // HiveParser.g:2697:4: clusterByClause
                            {
                            pushFollow(FOLLOW_clusterByClause_in_body17246);
                            clusterByClause942=clusterByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_clusterByClause.add(clusterByClause942.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2698:4: ( distributeByClause )?
                    int alt302=2;
                    int LA302_0 = input.LA(1);

                    if ( (LA302_0==KW_DISTRIBUTE) ) {
                        alt302=1;
                    }
                    switch (alt302) {
                        case 1 :
                            // HiveParser.g:2698:4: distributeByClause
                            {
                            pushFollow(FOLLOW_distributeByClause_in_body17252);
                            distributeByClause943=distributeByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distributeByClause.add(distributeByClause943.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2699:4: ( sortByClause )?
                    int alt303=2;
                    int LA303_0 = input.LA(1);

                    if ( (LA303_0==KW_SORT) ) {
                        alt303=1;
                    }
                    switch (alt303) {
                        case 1 :
                            // HiveParser.g:2699:4: sortByClause
                            {
                            pushFollow(FOLLOW_sortByClause_in_body17258);
                            sortByClause944=sortByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sortByClause.add(sortByClause944.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2700:4: ( limitClause )?
                    int alt304=2;
                    int LA304_0 = input.LA(1);

                    if ( (LA304_0==KW_LIMIT) ) {
                        alt304=1;
                    }
                    switch (alt304) {
                        case 1 :
                            // HiveParser.g:2700:4: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_body17264);
                            limitClause945=limitClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_limitClause.add(limitClause945.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: sortByClause, insertClause, window_clause, havingClause, groupByClause, limitClause, clusterByClause, lateralView, selectClause, qualifyClause, orderByClause, whereClause, distributeByClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2700:17: -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( qualifyClause )? ( limitClause )? )
                    {
                        // HiveParser.g:2700:20: ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( qualifyClause )? ( limitClause )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT")
                        , root_1);

                        adaptor.addChild(root_1, stream_insertClause.nextTree());

                        adaptor.addChild(root_1, stream_selectClause.nextTree());

                        // HiveParser.g:2701:35: ( lateralView )?
                        if ( stream_lateralView.hasNext() ) {
                            adaptor.addChild(root_1, stream_lateralView.nextTree());

                        }
                        stream_lateralView.reset();

                        // HiveParser.g:2701:48: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whereClause.nextTree());

                        }
                        stream_whereClause.reset();

                        // HiveParser.g:2701:61: ( groupByClause )?
                        if ( stream_groupByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_groupByClause.nextTree());

                        }
                        stream_groupByClause.reset();

                        // HiveParser.g:2701:76: ( havingClause )?
                        if ( stream_havingClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_havingClause.nextTree());

                        }
                        stream_havingClause.reset();

                        // HiveParser.g:2701:90: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_orderByClause.nextTree());

                        }
                        stream_orderByClause.reset();

                        // HiveParser.g:2701:105: ( clusterByClause )?
                        if ( stream_clusterByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_clusterByClause.nextTree());

                        }
                        stream_clusterByClause.reset();

                        // HiveParser.g:2702:22: ( distributeByClause )?
                        if ( stream_distributeByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_distributeByClause.nextTree());

                        }
                        stream_distributeByClause.reset();

                        // HiveParser.g:2702:42: ( sortByClause )?
                        if ( stream_sortByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_sortByClause.nextTree());

                        }
                        stream_sortByClause.reset();

                        // HiveParser.g:2702:56: ( window_clause )?
                        if ( stream_window_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_window_clause.nextTree());

                        }
                        stream_window_clause.reset();

                        // HiveParser.g:2702:71: ( qualifyClause )?
                        if ( stream_qualifyClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_qualifyClause.nextTree());

                        }
                        stream_qualifyClause.reset();

                        // HiveParser.g:2702:86: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_limitClause.nextTree());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2704:4: selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( qualifyClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
                    {
                    pushFollow(FOLLOW_selectClause_in_body17360);
                    selectClause946=selectClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selectClause.add(selectClause946.getTree());

                    // HiveParser.g:2705:4: ( lateralView )?
                    int alt305=2;
                    int LA305_0 = input.LA(1);

                    if ( (LA305_0==COMMA||LA305_0==KW_LATERAL) ) {
                        alt305=1;
                    }
                    switch (alt305) {
                        case 1 :
                            // HiveParser.g:2705:4: lateralView
                            {
                            pushFollow(FOLLOW_lateralView_in_body17365);
                            lateralView947=lateralView();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_lateralView.add(lateralView947.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2706:4: ( whereClause )?
                    int alt306=2;
                    int LA306_0 = input.LA(1);

                    if ( (LA306_0==KW_WHERE) ) {
                        alt306=1;
                    }
                    switch (alt306) {
                        case 1 :
                            // HiveParser.g:2706:4: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_body17371);
                            whereClause948=whereClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause948.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2707:4: ( groupByClause )?
                    int alt307=2;
                    int LA307_0 = input.LA(1);

                    if ( (LA307_0==KW_GROUP) ) {
                        alt307=1;
                    }
                    switch (alt307) {
                        case 1 :
                            // HiveParser.g:2707:4: groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_body17377);
                            groupByClause949=groupByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_groupByClause.add(groupByClause949.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2708:4: ( havingClause )?
                    int alt308=2;
                    int LA308_0 = input.LA(1);

                    if ( (LA308_0==KW_HAVING) ) {
                        alt308=1;
                    }
                    switch (alt308) {
                        case 1 :
                            // HiveParser.g:2708:4: havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_body17383);
                            havingClause950=havingClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_havingClause.add(havingClause950.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2709:4: ( window_clause )?
                    int alt309=2;
                    int LA309_0 = input.LA(1);

                    if ( (LA309_0==KW_WINDOW) ) {
                        alt309=1;
                    }
                    switch (alt309) {
                        case 1 :
                            // HiveParser.g:2709:4: window_clause
                            {
                            pushFollow(FOLLOW_window_clause_in_body17389);
                            window_clause951=window_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_window_clause.add(window_clause951.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2710:4: ( qualifyClause )?
                    int alt310=2;
                    int LA310_0 = input.LA(1);

                    if ( (LA310_0==KW_QUALIFY) ) {
                        alt310=1;
                    }
                    switch (alt310) {
                        case 1 :
                            // HiveParser.g:2710:4: qualifyClause
                            {
                            pushFollow(FOLLOW_qualifyClause_in_body17395);
                            qualifyClause952=qualifyClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_qualifyClause.add(qualifyClause952.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2711:4: ( orderByClause )?
                    int alt311=2;
                    int LA311_0 = input.LA(1);

                    if ( (LA311_0==KW_ORDER) ) {
                        alt311=1;
                    }
                    switch (alt311) {
                        case 1 :
                            // HiveParser.g:2711:4: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_body17401);
                            orderByClause953=orderByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_orderByClause.add(orderByClause953.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2712:4: ( clusterByClause )?
                    int alt312=2;
                    int LA312_0 = input.LA(1);

                    if ( (LA312_0==KW_CLUSTER) ) {
                        alt312=1;
                    }
                    switch (alt312) {
                        case 1 :
                            // HiveParser.g:2712:4: clusterByClause
                            {
                            pushFollow(FOLLOW_clusterByClause_in_body17407);
                            clusterByClause954=clusterByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_clusterByClause.add(clusterByClause954.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2713:4: ( distributeByClause )?
                    int alt313=2;
                    int LA313_0 = input.LA(1);

                    if ( (LA313_0==KW_DISTRIBUTE) ) {
                        alt313=1;
                    }
                    switch (alt313) {
                        case 1 :
                            // HiveParser.g:2713:4: distributeByClause
                            {
                            pushFollow(FOLLOW_distributeByClause_in_body17413);
                            distributeByClause955=distributeByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distributeByClause.add(distributeByClause955.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2714:4: ( sortByClause )?
                    int alt314=2;
                    int LA314_0 = input.LA(1);

                    if ( (LA314_0==KW_SORT) ) {
                        alt314=1;
                    }
                    switch (alt314) {
                        case 1 :
                            // HiveParser.g:2714:4: sortByClause
                            {
                            pushFollow(FOLLOW_sortByClause_in_body17419);
                            sortByClause956=sortByClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sortByClause.add(sortByClause956.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2715:4: ( limitClause )?
                    int alt315=2;
                    int LA315_0 = input.LA(1);

                    if ( (LA315_0==KW_LIMIT) ) {
                        alt315=1;
                    }
                    switch (alt315) {
                        case 1 :
                            // HiveParser.g:2715:4: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_body17425);
                            limitClause957=limitClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_limitClause.add(limitClause957.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: distributeByClause, sortByClause, qualifyClause, lateralView, havingClause, limitClause, whereClause, clusterByClause, selectClause, window_clause, orderByClause, groupByClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2715:17: -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( qualifyClause )? ( limitClause )? )
                    {
                        // HiveParser.g:2715:20: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( qualifyClause )? ( limitClause )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT")
                        , root_1);

                        // HiveParser.g:2715:33: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                        {
                        ASTNode root_2 = (ASTNode)adaptor.nil();
                        root_2 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
                        , root_2);

                        // HiveParser.g:2715:51: ^( TOK_DIR TOK_TMP_FILE )
                        {
                        ASTNode root_3 = (ASTNode)adaptor.nil();
                        root_3 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DIR, "TOK_DIR")
                        , root_3);

                        adaptor.addChild(root_3, 
                        (ASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE")
                        );

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, stream_selectClause.nextTree());

                        // HiveParser.g:2716:35: ( lateralView )?
                        if ( stream_lateralView.hasNext() ) {
                            adaptor.addChild(root_1, stream_lateralView.nextTree());

                        }
                        stream_lateralView.reset();

                        // HiveParser.g:2716:48: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whereClause.nextTree());

                        }
                        stream_whereClause.reset();

                        // HiveParser.g:2716:61: ( groupByClause )?
                        if ( stream_groupByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_groupByClause.nextTree());

                        }
                        stream_groupByClause.reset();

                        // HiveParser.g:2716:76: ( havingClause )?
                        if ( stream_havingClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_havingClause.nextTree());

                        }
                        stream_havingClause.reset();

                        // HiveParser.g:2716:90: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_orderByClause.nextTree());

                        }
                        stream_orderByClause.reset();

                        // HiveParser.g:2716:105: ( clusterByClause )?
                        if ( stream_clusterByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_clusterByClause.nextTree());

                        }
                        stream_clusterByClause.reset();

                        // HiveParser.g:2717:22: ( distributeByClause )?
                        if ( stream_distributeByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_distributeByClause.nextTree());

                        }
                        stream_distributeByClause.reset();

                        // HiveParser.g:2717:42: ( sortByClause )?
                        if ( stream_sortByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_sortByClause.nextTree());

                        }
                        stream_sortByClause.reset();

                        // HiveParser.g:2717:56: ( window_clause )?
                        if ( stream_window_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_window_clause.nextTree());

                        }
                        stream_window_clause.reset();

                        // HiveParser.g:2717:71: ( qualifyClause )?
                        if ( stream_qualifyClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_qualifyClause.nextTree());

                        }
                        stream_qualifyClause.reset();

                        // HiveParser.g:2717:86: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_limitClause.nextTree());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body"


    public static class insertClause_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "insertClause"
    // HiveParser.g:2720:1: insertClause : ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO ( KW_TABLE )? tableOrPartition ( LPAREN targetCols= columnNameList RPAREN )? -> ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? ) );
    public final HiveParser.insertClause_return insertClause() throws RecognitionException {
        HiveParser.insertClause_return retval = new HiveParser.insertClause_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_INSERT958=null;
        Token KW_OVERWRITE959=null;
        Token KW_INSERT962=null;
        Token KW_INTO963=null;
        Token KW_TABLE964=null;
        Token LPAREN966=null;
        Token RPAREN967=null;
        HiveParser.columnNameList_return targetCols =null;

        HiveParser.destination_return destination960 =null;

        HiveParser.ifNotExists_return ifNotExists961 =null;

        HiveParser_IdentifiersParser.tableOrPartition_return tableOrPartition965 =null;


        ASTNode KW_INSERT958_tree=null;
        ASTNode KW_OVERWRITE959_tree=null;
        ASTNode KW_INSERT962_tree=null;
        ASTNode KW_INTO963_tree=null;
        ASTNode KW_TABLE964_tree=null;
        ASTNode LPAREN966_tree=null;
        ASTNode RPAREN967_tree=null;
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
        RewriteRuleSubtreeStream stream_destination=new RewriteRuleSubtreeStream(adaptor,"rule destination");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         pushMsg("insert clause", state); 
        try {
            // HiveParser.g:2723:4: ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO ( KW_TABLE )? tableOrPartition ( LPAREN targetCols= columnNameList RPAREN )? -> ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? ) )
            int alt320=2;
            int LA320_0 = input.LA(1);

            if ( (LA320_0==KW_INSERT) ) {
                int LA320_1 = input.LA(2);

                if ( (LA320_1==KW_OVERWRITE) ) {
                    alt320=1;
                }
                else if ( (LA320_1==KW_INTO) ) {
                    alt320=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 320, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 320, 0, input);

                throw nvae;

            }
            switch (alt320) {
                case 1 :
                    // HiveParser.g:2724:6: KW_INSERT KW_OVERWRITE destination ( ifNotExists )?
                    {
                    KW_INSERT958=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause17549); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT958);


                    KW_OVERWRITE959=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_insertClause17551); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_OVERWRITE.add(KW_OVERWRITE959);


                    pushFollow(FOLLOW_destination_in_insertClause17553);
                    destination960=destination();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_destination.add(destination960.getTree());

                    // HiveParser.g:2724:41: ( ifNotExists )?
                    int alt317=2;
                    int LA317_0 = input.LA(1);

                    if ( (LA317_0==KW_IF) ) {
                        alt317=1;
                    }
                    switch (alt317) {
                        case 1 :
                            // HiveParser.g:2724:41: ifNotExists
                            {
                            pushFollow(FOLLOW_ifNotExists_in_insertClause17555);
                            ifNotExists961=ifNotExists();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists961.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: ifNotExists, destination
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2724:54: -> ^( TOK_DESTINATION destination ( ifNotExists )? )
                    {
                        // HiveParser.g:2724:57: ^( TOK_DESTINATION destination ( ifNotExists )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_destination.nextTree());

                        // HiveParser.g:2724:87: ( ifNotExists )?
                        if ( stream_ifNotExists.hasNext() ) {
                            adaptor.addChild(root_1, stream_ifNotExists.nextTree());

                        }
                        stream_ifNotExists.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2725:6: KW_INSERT KW_INTO ( KW_TABLE )? tableOrPartition ( LPAREN targetCols= columnNameList RPAREN )?
                    {
                    KW_INSERT962=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause17574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT962);


                    KW_INTO963=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_insertClause17576); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO963);


                    // HiveParser.g:2725:24: ( KW_TABLE )?
                    int alt318=2;
                    int LA318_0 = input.LA(1);

                    if ( (LA318_0==KW_TABLE) ) {
                        alt318=1;
                    }
                    switch (alt318) {
                        case 1 :
                            // HiveParser.g:2725:24: KW_TABLE
                            {
                            KW_TABLE964=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_insertClause17578); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE964);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_tableOrPartition_in_insertClause17581);
                    tableOrPartition965=tableOrPartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableOrPartition.add(tableOrPartition965.getTree());

                    // HiveParser.g:2725:51: ( LPAREN targetCols= columnNameList RPAREN )?
                    int alt319=2;
                    int LA319_0 = input.LA(1);

                    if ( (LA319_0==LPAREN) ) {
                        int LA319_1 = input.LA(2);

                        if ( (LA319_1==Identifier||(LA319_1 >= KW_ABORT && LA319_1 <= KW_AFTER)||LA319_1==KW_ALLOC_FRACTION||LA319_1==KW_ANALYZE||LA319_1==KW_ARCHIVE||(LA319_1 >= KW_ASC && LA319_1 <= KW_AT)||(LA319_1 >= KW_AUTOCOMMIT && LA319_1 <= KW_BEFORE)||(LA319_1 >= KW_BRANCH && LA319_1 <= KW_BUCKETS)||(LA319_1 >= KW_CACHE && LA319_1 <= KW_CASCADE)||(LA319_1 >= KW_CBO && LA319_1 <= KW_CHANGE)||LA319_1==KW_CHECK||(LA319_1 >= KW_CLUSTER && LA319_1 <= KW_COLLECTION)||(LA319_1 >= KW_COLUMNS && LA319_1 <= KW_COMMENT)||(LA319_1 >= KW_COMPACT && LA319_1 <= KW_COMPACTIONS)||(LA319_1 >= KW_COMPUTE && LA319_1 <= KW_CONCATENATE)||LA319_1==KW_CONTINUE||LA319_1==KW_COST||LA319_1==KW_CRON||LA319_1==KW_DATA||LA319_1==KW_DATABASES||(LA319_1 >= KW_DATETIME && LA319_1 <= KW_DCPROPERTIES)||LA319_1==KW_DEBUG||(LA319_1 >= KW_DEFAULT && LA319_1 <= KW_DEFINED)||(LA319_1 >= KW_DELIMITED && LA319_1 <= KW_DESC)||(LA319_1 >= KW_DETAIL && LA319_1 <= KW_DISABLE)||(LA319_1 >= KW_DISTRIBUTE && LA319_1 <= KW_DO)||LA319_1==KW_DOW||(LA319_1 >= KW_DUMP && LA319_1 <= KW_ELEM_TYPE)||LA319_1==KW_ENABLE||(LA319_1 >= KW_ENFORCED && LA319_1 <= KW_EVERY)||(LA319_1 >= KW_EXCLUSIVE && LA319_1 <= KW_EXECUTED)||(LA319_1 >= KW_EXPIRE_SNAPSHOTS && LA319_1 <= KW_EXPRESSION)||LA319_1==KW_FAST_FORWARD||(LA319_1 >= KW_FIELDS && LA319_1 <= KW_FIRST)||(LA319_1 >= KW_FORMAT && LA319_1 <= KW_FORMATTED)||LA319_1==KW_FUNCTIONS||(LA319_1 >= KW_HOUR && LA319_1 <= KW_IDXPROPERTIES)||LA319_1==KW_IGNORE||(LA319_1 >= KW_INDEX && LA319_1 <= KW_INDEXES)||(LA319_1 >= KW_INPATH && LA319_1 <= KW_INPUTFORMAT)||(LA319_1 >= KW_ISOLATION && LA319_1 <= KW_JAR)||(LA319_1 >= KW_JOINCOST && LA319_1 <= KW_LAST)||LA319_1==KW_LEVEL||(LA319_1 >= KW_LIMIT && LA319_1 <= KW_LOAD)||(LA319_1 >= KW_LOCATION && LA319_1 <= KW_LONG)||(LA319_1 >= KW_MANAGED && LA319_1 <= KW_MANAGEMENT)||(LA319_1 >= KW_MAPJOIN && LA319_1 <= KW_MATERIALIZED)||LA319_1==KW_METADATA||(LA319_1 >= KW_MINUTE && LA319_1 <= KW_MONTH)||(LA319_1 >= KW_MOVE && LA319_1 <= KW_MSCK)||(LA319_1 >= KW_NORELY && LA319_1 <= KW_NOSCAN)||LA319_1==KW_NOVALIDATE||LA319_1==KW_NULLS||LA319_1==KW_OFFSET||(LA319_1 >= KW_OPERATOR && LA319_1 <= KW_OPTION)||(LA319_1 >= KW_OUTPUTDRIVER && LA319_1 <= KW_OUTPUTFORMAT)||(LA319_1 >= KW_OVERWRITE && LA319_1 <= KW_OWNER)||(LA319_1 >= KW_PARTITIONED && LA319_1 <= KW_PATH)||(LA319_1 >= KW_PLAN && LA319_1 <= KW_POOL)||LA319_1==KW_PRINCIPALS||LA319_1==KW_PURGE||(LA319_1 >= KW_QUARTER && LA319_1 <= KW_QUERY_PARALLELISM)||LA319_1==KW_READ||(LA319_1 >= KW_REBUILD && LA319_1 <= KW_RECORDWRITER)||(LA319_1 >= KW_RELOAD && LA319_1 <= KW_RETENTION)||LA319_1==KW_REWRITE||(LA319_1 >= KW_ROLE && LA319_1 <= KW_ROLES)||(LA319_1 >= KW_SCHEDULED && LA319_1 <= KW_SECOND)||(LA319_1 >= KW_SEMI && LA319_1 <= KW_SERVER)||(LA319_1 >= KW_SETS && LA319_1 <= KW_SKEWED)||(LA319_1 >= KW_SNAPSHOT && LA319_1 <= KW_SNAPSHOTS)||(LA319_1 >= KW_SORT && LA319_1 <= KW_SSL)||(LA319_1 >= KW_STATISTICS && LA319_1 <= KW_SUMMARY)||(LA319_1 >= KW_SYSTEM_TIME && LA319_1 <= KW_SYSTEM_VERSION)||LA319_1==KW_TABLES||(LA319_1 >= KW_TAG && LA319_1 <= KW_TERMINATED)||LA319_1==KW_TINYINT||LA319_1==KW_TOUCH||(LA319_1 >= KW_TRANSACTION && LA319_1 <= KW_TRANSACTIONS)||LA319_1==KW_TRIM||(LA319_1 >= KW_TYPE && LA319_1 <= KW_UNARCHIVE)||LA319_1==KW_UNDO||LA319_1==KW_UNIONTYPE||(LA319_1 >= KW_UNKNOWN && LA319_1 <= KW_UNSIGNED)||(LA319_1 >= KW_URI && LA319_1 <= KW_USE)||(LA319_1 >= KW_UTC && LA319_1 <= KW_VALIDATE)||LA319_1==KW_VALUE_TYPE||(LA319_1 >= KW_VECTORIZATION && LA319_1 <= KW_WEEK)||LA319_1==KW_WHILE||(LA319_1 >= KW_WITHIN && LA319_1 <= KW_ZONE)||LA319_1==KW_BATCH||LA319_1==KW_DAYOFWEEK||LA319_1==KW_HOLD_DDLTIME||LA319_1==KW_NO_DROP||LA319_1==KW_OFFLINE||LA319_1==KW_PROTECTION||LA319_1==KW_READONLY||LA319_1==KW_TIMESTAMPTZ) ) {
                            alt319=1;
                        }
                    }
                    switch (alt319) {
                        case 1 :
                            // HiveParser.g:2725:52: LPAREN targetCols= columnNameList RPAREN
                            {
                            LPAREN966=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertClause17584); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN966);


                            pushFollow(FOLLOW_columnNameList_in_insertClause17588);
                            targetCols=columnNameList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnNameList.add(targetCols.getTree());

                            RPAREN967=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertClause17590); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN967);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: tableOrPartition, targetCols
                    // token labels: 
                    // rule labels: targetCols, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_targetCols=new RewriteRuleSubtreeStream(adaptor,"rule targetCols",targetCols!=null?targetCols.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2726:8: -> ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? )
                    {
                        // HiveParser.g:2726:11: ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_INSERT_INTO, "TOK_INSERT_INTO")
                        , root_1);

                        adaptor.addChild(root_1, stream_tableOrPartition.nextTree());

                        // HiveParser.g:2726:47: ( $targetCols)?
                        if ( stream_targetCols.hasNext() ) {
                            adaptor.addChild(root_1, stream_targetCols.nextTree());

                        }
                        stream_targetCols.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "insertClause"


    public static class destination_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "destination"
    // HiveParser.g:2729:1: destination : ( (local= KW_LOCAL )? KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )? -> ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? ) | KW_TABLE tableOrPartition -> tableOrPartition );
    public final HiveParser.destination_return destination() throws RecognitionException {
        HiveParser.destination_return retval = new HiveParser.destination_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token local=null;
        Token KW_DIRECTORY968=null;
        Token StringLiteral969=null;
        Token KW_TABLE972=null;
        HiveParser.tableRowFormat_return tableRowFormat970 =null;

        HiveParser.tableFileFormat_return tableFileFormat971 =null;

        HiveParser_IdentifiersParser.tableOrPartition_return tableOrPartition973 =null;


        ASTNode local_tree=null;
        ASTNode KW_DIRECTORY968_tree=null;
        ASTNode StringLiteral969_tree=null;
        ASTNode KW_TABLE972_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_DIRECTORY=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORY");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
        RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
        RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
         pushMsg("destination specification", state); 
        try {
            // HiveParser.g:2732:4: ( (local= KW_LOCAL )? KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )? -> ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? ) | KW_TABLE tableOrPartition -> tableOrPartition )
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==KW_DIRECTORY||LA324_0==KW_LOCAL) ) {
                alt324=1;
            }
            else if ( (LA324_0==KW_TABLE) ) {
                alt324=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 324, 0, input);

                throw nvae;

            }
            switch (alt324) {
                case 1 :
                    // HiveParser.g:2733:6: (local= KW_LOCAL )? KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )?
                    {
                    // HiveParser.g:2733:6: (local= KW_LOCAL )?
                    int alt321=2;
                    int LA321_0 = input.LA(1);

                    if ( (LA321_0==KW_LOCAL) ) {
                        alt321=1;
                    }
                    switch (alt321) {
                        case 1 :
                            // HiveParser.g:2733:7: local= KW_LOCAL
                            {
                            local=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_destination17646); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_LOCAL.add(local);


                            }
                            break;

                    }


                    KW_DIRECTORY968=(Token)match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination17650); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DIRECTORY.add(KW_DIRECTORY968);


                    StringLiteral969=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_destination17652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral969);


                    // HiveParser.g:2733:53: ( tableRowFormat )?
                    int alt322=2;
                    int LA322_0 = input.LA(1);

                    if ( (LA322_0==KW_ROW) ) {
                        alt322=1;
                    }
                    switch (alt322) {
                        case 1 :
                            // HiveParser.g:2733:53: tableRowFormat
                            {
                            pushFollow(FOLLOW_tableRowFormat_in_destination17654);
                            tableRowFormat970=tableRowFormat();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat970.getTree());

                            }
                            break;

                    }


                    // HiveParser.g:2733:69: ( tableFileFormat )?
                    int alt323=2;
                    int LA323_0 = input.LA(1);

                    if ( (LA323_0==KW_STORED) ) {
                        alt323=1;
                    }
                    switch (alt323) {
                        case 1 :
                            // HiveParser.g:2733:69: tableFileFormat
                            {
                            pushFollow(FOLLOW_tableFileFormat_in_destination17657);
                            tableFileFormat971=tableFileFormat();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat971.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: local, tableRowFormat, tableFileFormat, StringLiteral
                    // token labels: local
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_local=new RewriteRuleTokenStream(adaptor,"token local",local);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2734:8: -> ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? )
                    {
                        // HiveParser.g:2734:11: ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_DIR, "TOK_DIR")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_StringLiteral.nextNode()
                        );

                        // HiveParser.g:2734:36: ( $local)?
                        if ( stream_local.hasNext() ) {
                            adaptor.addChild(root_1, stream_local.nextNode());

                        }
                        stream_local.reset();

                        // HiveParser.g:2734:43: ( tableRowFormat )?
                        if ( stream_tableRowFormat.hasNext() ) {
                            adaptor.addChild(root_1, stream_tableRowFormat.nextTree());

                        }
                        stream_tableRowFormat.reset();

                        // HiveParser.g:2734:59: ( tableFileFormat )?
                        if ( stream_tableFileFormat.hasNext() ) {
                            adaptor.addChild(root_1, stream_tableFileFormat.nextTree());

                        }
                        stream_tableFileFormat.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2735:6: KW_TABLE tableOrPartition
                    {
                    KW_TABLE972=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_destination17690); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE972);


                    pushFollow(FOLLOW_tableOrPartition_in_destination17692);
                    tableOrPartition973=tableOrPartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableOrPartition.add(tableOrPartition973.getTree());

                    // AST REWRITE
                    // elements: tableOrPartition
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2735:32: -> tableOrPartition
                    {
                        adaptor.addChild(root_0, stream_tableOrPartition.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "destination"


    public static class limitClause_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limitClause"
    // HiveParser.g:2738:1: limitClause : ( KW_LIMIT ( (offset= Number COMMA )? num= Number ) -> ^( TOK_LIMIT ( $offset)? $num) | KW_LIMIT num= Number KW_OFFSET offset= Number -> ^( TOK_LIMIT ( $offset)? $num) );
    public final HiveParser.limitClause_return limitClause() throws RecognitionException {
        HiveParser.limitClause_return retval = new HiveParser.limitClause_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token offset=null;
        Token num=null;
        Token KW_LIMIT974=null;
        Token COMMA975=null;
        Token KW_LIMIT976=null;
        Token KW_OFFSET977=null;

        ASTNode offset_tree=null;
        ASTNode num_tree=null;
        ASTNode KW_LIMIT974_tree=null;
        ASTNode COMMA975_tree=null;
        ASTNode KW_LIMIT976_tree=null;
        ASTNode KW_OFFSET977_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_LIMIT=new RewriteRuleTokenStream(adaptor,"token KW_LIMIT");
        RewriteRuleTokenStream stream_KW_OFFSET=new RewriteRuleTokenStream(adaptor,"token KW_OFFSET");

         pushMsg("limit clause", state); 
        try {
            // HiveParser.g:2741:4: ( KW_LIMIT ( (offset= Number COMMA )? num= Number ) -> ^( TOK_LIMIT ( $offset)? $num) | KW_LIMIT num= Number KW_OFFSET offset= Number -> ^( TOK_LIMIT ( $offset)? $num) )
            int alt326=2;
            int LA326_0 = input.LA(1);

            if ( (LA326_0==KW_LIMIT) ) {
                int LA326_1 = input.LA(2);

                if ( (LA326_1==Number) ) {
                    int LA326_2 = input.LA(3);

                    if ( (LA326_2==KW_OFFSET) ) {
                        alt326=2;
                    }
                    else if ( (LA326_2==EOF||LA326_2==COMMA||LA326_2==KW_EXCEPT||LA326_2==KW_INSERT||LA326_2==KW_INTERSECT||LA326_2==KW_MAP||LA326_2==KW_MINUS||LA326_2==KW_REDUCE||LA326_2==KW_SELECT||LA326_2==KW_UNION||LA326_2==RPAREN) ) {
                        alt326=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 326, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 326, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 326, 0, input);

                throw nvae;

            }
            switch (alt326) {
                case 1 :
                    // HiveParser.g:2742:4: KW_LIMIT ( (offset= Number COMMA )? num= Number )
                    {
                    KW_LIMIT974=(Token)match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_limitClause17724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_LIMIT.add(KW_LIMIT974);


                    // HiveParser.g:2742:13: ( (offset= Number COMMA )? num= Number )
                    // HiveParser.g:2742:14: (offset= Number COMMA )? num= Number
                    {
                    // HiveParser.g:2742:14: (offset= Number COMMA )?
                    int alt325=2;
                    int LA325_0 = input.LA(1);

                    if ( (LA325_0==Number) ) {
                        int LA325_1 = input.LA(2);

                        if ( (LA325_1==COMMA) ) {
                            alt325=1;
                        }
                    }
                    switch (alt325) {
                        case 1 :
                            // HiveParser.g:2742:15: offset= Number COMMA
                            {
                            offset=(Token)match(input,Number,FOLLOW_Number_in_limitClause17730); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Number.add(offset);


                            COMMA975=(Token)match(input,COMMA,FOLLOW_COMMA_in_limitClause17732); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA975);


                            }
                            break;

                    }


                    num=(Token)match(input,Number,FOLLOW_Number_in_limitClause17738); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Number.add(num);


                    }


                    // AST REWRITE
                    // elements: num, offset
                    // token labels: offset, num
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_offset=new RewriteRuleTokenStream(adaptor,"token offset",offset);
                    RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2742:49: -> ^( TOK_LIMIT ( $offset)? $num)
                    {
                        // HiveParser.g:2742:52: ^( TOK_LIMIT ( $offset)? $num)
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_LIMIT, "TOK_LIMIT")
                        , root_1);

                        // HiveParser.g:2742:64: ( $offset)?
                        if ( stream_offset.hasNext() ) {
                            adaptor.addChild(root_1, stream_offset.nextNode());

                        }
                        stream_offset.reset();

                        adaptor.addChild(root_1, stream_num.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2743:6: KW_LIMIT num= Number KW_OFFSET offset= Number
                    {
                    KW_LIMIT976=(Token)match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_limitClause17761); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_LIMIT.add(KW_LIMIT976);


                    num=(Token)match(input,Number,FOLLOW_Number_in_limitClause17765); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Number.add(num);


                    KW_OFFSET977=(Token)match(input,KW_OFFSET,FOLLOW_KW_OFFSET_in_limitClause17767); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_OFFSET.add(KW_OFFSET977);


                    offset=(Token)match(input,Number,FOLLOW_Number_in_limitClause17771); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Number.add(offset);


                    // AST REWRITE
                    // elements: offset, num
                    // token labels: offset, num
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_offset=new RewriteRuleTokenStream(adaptor,"token offset",offset);
                    RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2743:50: -> ^( TOK_LIMIT ( $offset)? $num)
                    {
                        // HiveParser.g:2743:53: ^( TOK_LIMIT ( $offset)? $num)
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_LIMIT, "TOK_LIMIT")
                        , root_1);

                        // HiveParser.g:2743:65: ( $offset)?
                        if ( stream_offset.hasNext() ) {
                            adaptor.addChild(root_1, stream_offset.nextNode());

                        }
                        stream_offset.reset();

                        adaptor.addChild(root_1, stream_num.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limitClause"


    public static class deleteStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "deleteStatement"
    // HiveParser.g:2747:1: deleteStatement : KW_DELETE KW_FROM tableName ( whereClause )? -> ^( TOK_DELETE_FROM tableName ( whereClause )? ) ;
    public final HiveParser.deleteStatement_return deleteStatement() throws RecognitionException {
        HiveParser.deleteStatement_return retval = new HiveParser.deleteStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_DELETE978=null;
        Token KW_FROM979=null;
        HiveParser_FromClauseParser.tableName_return tableName980 =null;

        HiveParser_FromClauseParser.whereClause_return whereClause981 =null;


        ASTNode KW_DELETE978_tree=null;
        ASTNode KW_FROM979_tree=null;
        RewriteRuleTokenStream stream_KW_DELETE=new RewriteRuleTokenStream(adaptor,"token KW_DELETE");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("delete statement", state); 
        try {
            // HiveParser.g:2750:4: ( KW_DELETE KW_FROM tableName ( whereClause )? -> ^( TOK_DELETE_FROM tableName ( whereClause )? ) )
            // HiveParser.g:2751:4: KW_DELETE KW_FROM tableName ( whereClause )?
            {
            KW_DELETE978=(Token)match(input,KW_DELETE,FOLLOW_KW_DELETE_in_deleteStatement17815); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_DELETE.add(KW_DELETE978);


            KW_FROM979=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_deleteStatement17817); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM979);


            pushFollow(FOLLOW_tableName_in_deleteStatement17819);
            tableName980=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tableName980.getTree());

            // HiveParser.g:2751:32: ( whereClause )?
            int alt327=2;
            int LA327_0 = input.LA(1);

            if ( (LA327_0==KW_WHERE) ) {
                alt327=1;
            }
            switch (alt327) {
                case 1 :
                    // HiveParser.g:2751:33: whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_deleteStatement17822);
                    whereClause981=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause981.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableName, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2751:47: -> ^( TOK_DELETE_FROM tableName ( whereClause )? )
            {
                // HiveParser.g:2751:50: ^( TOK_DELETE_FROM tableName ( whereClause )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_DELETE_FROM, "TOK_DELETE_FROM")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                // HiveParser.g:2751:78: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "deleteStatement"


    public static class columnAssignmentClause_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columnAssignmentClause"
    // HiveParser.g:2755:1: columnAssignmentClause : (| tableOrColumn EQUAL ^ precedencePlusExpressionOrDefault );
    public final HiveParser.columnAssignmentClause_return columnAssignmentClause() throws RecognitionException {
        HiveParser.columnAssignmentClause_return retval = new HiveParser.columnAssignmentClause_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token EQUAL983=null;
        HiveParser_FromClauseParser.tableOrColumn_return tableOrColumn982 =null;

        HiveParser.precedencePlusExpressionOrDefault_return precedencePlusExpressionOrDefault984 =null;


        ASTNode EQUAL983_tree=null;

        try {
            // HiveParser.g:2756:4: (| tableOrColumn EQUAL ^ precedencePlusExpressionOrDefault )
            int alt328=2;
            int LA328_0 = input.LA(1);

            if ( (LA328_0==EOF||LA328_0==COMMA||(LA328_0 >= KW_WHEN && LA328_0 <= KW_WHERE)) ) {
                alt328=1;
            }
            else if ( (LA328_0==Identifier||(LA328_0 >= KW_ABORT && LA328_0 <= KW_AFTER)||LA328_0==KW_ALLOC_FRACTION||LA328_0==KW_ANALYZE||LA328_0==KW_ARCHIVE||(LA328_0 >= KW_ASC && LA328_0 <= KW_AT)||(LA328_0 >= KW_AUTOCOMMIT && LA328_0 <= KW_BEFORE)||(LA328_0 >= KW_BRANCH && LA328_0 <= KW_BUCKETS)||(LA328_0 >= KW_CACHE && LA328_0 <= KW_CASCADE)||(LA328_0 >= KW_CBO && LA328_0 <= KW_CHANGE)||LA328_0==KW_CHECK||(LA328_0 >= KW_CLUSTER && LA328_0 <= KW_COLLECTION)||(LA328_0 >= KW_COLUMNS && LA328_0 <= KW_COMMENT)||(LA328_0 >= KW_COMPACT && LA328_0 <= KW_COMPACTIONS)||(LA328_0 >= KW_COMPUTE && LA328_0 <= KW_CONCATENATE)||LA328_0==KW_CONTINUE||LA328_0==KW_COST||LA328_0==KW_CRON||LA328_0==KW_DATA||LA328_0==KW_DATABASES||(LA328_0 >= KW_DATETIME && LA328_0 <= KW_DCPROPERTIES)||LA328_0==KW_DEBUG||(LA328_0 >= KW_DEFAULT && LA328_0 <= KW_DEFINED)||(LA328_0 >= KW_DELIMITED && LA328_0 <= KW_DESC)||(LA328_0 >= KW_DETAIL && LA328_0 <= KW_DISABLE)||(LA328_0 >= KW_DISTRIBUTE && LA328_0 <= KW_DO)||LA328_0==KW_DOW||(LA328_0 >= KW_DUMP && LA328_0 <= KW_ELEM_TYPE)||LA328_0==KW_ENABLE||(LA328_0 >= KW_ENFORCED && LA328_0 <= KW_EVERY)||(LA328_0 >= KW_EXCLUSIVE && LA328_0 <= KW_EXECUTED)||(LA328_0 >= KW_EXPIRE_SNAPSHOTS && LA328_0 <= KW_EXPRESSION)||LA328_0==KW_FAST_FORWARD||(LA328_0 >= KW_FIELDS && LA328_0 <= KW_FIRST)||(LA328_0 >= KW_FORMAT && LA328_0 <= KW_FORMATTED)||LA328_0==KW_FUNCTIONS||(LA328_0 >= KW_HOUR && LA328_0 <= KW_IDXPROPERTIES)||LA328_0==KW_IGNORE||(LA328_0 >= KW_INDEX && LA328_0 <= KW_INDEXES)||(LA328_0 >= KW_INPATH && LA328_0 <= KW_INPUTFORMAT)||(LA328_0 >= KW_ISOLATION && LA328_0 <= KW_JAR)||(LA328_0 >= KW_JOINCOST && LA328_0 <= KW_LAST)||LA328_0==KW_LEVEL||(LA328_0 >= KW_LIMIT && LA328_0 <= KW_LOAD)||(LA328_0 >= KW_LOCATION && LA328_0 <= KW_LONG)||(LA328_0 >= KW_MANAGED && LA328_0 <= KW_MANAGEMENT)||(LA328_0 >= KW_MAPJOIN && LA328_0 <= KW_MATERIALIZED)||LA328_0==KW_METADATA||(LA328_0 >= KW_MINUTE && LA328_0 <= KW_MONTH)||(LA328_0 >= KW_MOVE && LA328_0 <= KW_MSCK)||(LA328_0 >= KW_NORELY && LA328_0 <= KW_NOSCAN)||LA328_0==KW_NOVALIDATE||LA328_0==KW_NULLS||LA328_0==KW_OFFSET||(LA328_0 >= KW_OPERATOR && LA328_0 <= KW_OPTION)||(LA328_0 >= KW_OUTPUTDRIVER && LA328_0 <= KW_OUTPUTFORMAT)||(LA328_0 >= KW_OVERWRITE && LA328_0 <= KW_OWNER)||(LA328_0 >= KW_PARTITIONED && LA328_0 <= KW_PATH)||(LA328_0 >= KW_PLAN && LA328_0 <= KW_POOL)||LA328_0==KW_PRINCIPALS||LA328_0==KW_PURGE||(LA328_0 >= KW_QUARTER && LA328_0 <= KW_QUERY_PARALLELISM)||LA328_0==KW_READ||(LA328_0 >= KW_REBUILD && LA328_0 <= KW_RECORDWRITER)||(LA328_0 >= KW_RELOAD && LA328_0 <= KW_RETENTION)||LA328_0==KW_REWRITE||(LA328_0 >= KW_ROLE && LA328_0 <= KW_ROLES)||(LA328_0 >= KW_SCHEDULED && LA328_0 <= KW_SECOND)||(LA328_0 >= KW_SEMI && LA328_0 <= KW_SERVER)||(LA328_0 >= KW_SETS && LA328_0 <= KW_SKEWED)||(LA328_0 >= KW_SNAPSHOT && LA328_0 <= KW_SNAPSHOTS)||(LA328_0 >= KW_SORT && LA328_0 <= KW_SSL)||(LA328_0 >= KW_STATISTICS && LA328_0 <= KW_SUMMARY)||(LA328_0 >= KW_SYSTEM_TIME && LA328_0 <= KW_SYSTEM_VERSION)||LA328_0==KW_TABLES||(LA328_0 >= KW_TAG && LA328_0 <= KW_TERMINATED)||LA328_0==KW_TINYINT||LA328_0==KW_TOUCH||(LA328_0 >= KW_TRANSACTION && LA328_0 <= KW_TRANSACTIONS)||LA328_0==KW_TRIM||(LA328_0 >= KW_TYPE && LA328_0 <= KW_UNARCHIVE)||LA328_0==KW_UNDO||LA328_0==KW_UNIONTYPE||(LA328_0 >= KW_UNKNOWN && LA328_0 <= KW_UNSIGNED)||(LA328_0 >= KW_URI && LA328_0 <= KW_USE)||(LA328_0 >= KW_UTC && LA328_0 <= KW_VALIDATE)||LA328_0==KW_VALUE_TYPE||(LA328_0 >= KW_VECTORIZATION && LA328_0 <= KW_WEEK)||LA328_0==KW_WHILE||(LA328_0 >= KW_WITHIN && LA328_0 <= KW_ZONE)||LA328_0==KW_BATCH||LA328_0==KW_DAYOFWEEK||LA328_0==KW_HOLD_DDLTIME||LA328_0==KW_NO_DROP||LA328_0==KW_OFFLINE||LA328_0==KW_PROTECTION||LA328_0==KW_READONLY||LA328_0==KW_TIMESTAMPTZ) ) {
                alt328=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 328, 0, input);

                throw nvae;

            }
            switch (alt328) {
                case 1 :
                    // HiveParser.g:2757:4: 
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    }
                    break;
                case 2 :
                    // HiveParser.g:2757:6: tableOrColumn EQUAL ^ precedencePlusExpressionOrDefault
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_tableOrColumn_in_columnAssignmentClause17857);
                    tableOrColumn982=tableOrColumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tableOrColumn982.getTree());

                    EQUAL983=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_columnAssignmentClause17859); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUAL983_tree = 
                    (ASTNode)adaptor.create(EQUAL983)
                    ;
                    root_0 = (ASTNode)adaptor.becomeRoot(EQUAL983_tree, root_0);
                    }

                    pushFollow(FOLLOW_precedencePlusExpressionOrDefault_in_columnAssignmentClause17862);
                    precedencePlusExpressionOrDefault984=precedencePlusExpressionOrDefault();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, precedencePlusExpressionOrDefault984.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columnAssignmentClause"


    public static class precedencePlusExpressionOrDefault_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precedencePlusExpressionOrDefault"
    // HiveParser.g:2760:1: precedencePlusExpressionOrDefault : ( ( KW_DEFAULT (~ DOT | EOF ) )=> defaultValue | precedencePlusExpression );
    public final HiveParser.precedencePlusExpressionOrDefault_return precedencePlusExpressionOrDefault() throws RecognitionException {
        HiveParser.precedencePlusExpressionOrDefault_return retval = new HiveParser.precedencePlusExpressionOrDefault_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser_FromClauseParser.defaultValue_return defaultValue985 =null;

        HiveParser_IdentifiersParser.precedencePlusExpression_return precedencePlusExpression986 =null;



        try {
            // HiveParser.g:2761:5: ( ( KW_DEFAULT (~ DOT | EOF ) )=> defaultValue | precedencePlusExpression )
            int alt329=2;
            int LA329_0 = input.LA(1);

            if ( (LA329_0==KW_DEFAULT) ) {
                int LA329_1 = input.LA(2);

                if ( (synpred24_HiveParser()) ) {
                    alt329=1;
                }
                else if ( (true) ) {
                    alt329=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 329, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA329_0==CharSetName||(LA329_0 >= Identifier && LA329_0 <= KW_AFTER)||LA329_0==KW_ALLOC_FRACTION||LA329_0==KW_ANALYZE||(LA329_0 >= KW_ARCHIVE && LA329_0 <= KW_ARRAY)||(LA329_0 >= KW_ASC && LA329_0 <= KW_AT)||(LA329_0 >= KW_AUTOCOMMIT && LA329_0 <= KW_BEFORE)||(LA329_0 >= KW_BIGINT && LA329_0 <= KW_BOOLEAN)||(LA329_0 >= KW_BRANCH && LA329_0 <= KW_BUCKETS)||(LA329_0 >= KW_CACHE && LA329_0 <= KW_CHANGE)||LA329_0==KW_CHECK||(LA329_0 >= KW_CLUSTER && LA329_0 <= KW_COLLECTION)||(LA329_0 >= KW_COLUMNS && LA329_0 <= KW_COMMENT)||(LA329_0 >= KW_COMPACT && LA329_0 <= KW_COMPACTIONS)||(LA329_0 >= KW_COMPUTE && LA329_0 <= KW_CONCATENATE)||LA329_0==KW_CONTINUE||LA329_0==KW_COST||LA329_0==KW_CRON||(LA329_0 >= KW_CURRENT_DATE && LA329_0 <= KW_CURRENT_TIMESTAMP)||LA329_0==KW_DATA||LA329_0==KW_DATABASES||(LA329_0 >= KW_DATE && LA329_0 <= KW_DCPROPERTIES)||LA329_0==KW_DEBUG||(LA329_0 >= KW_DEFERRED && LA329_0 <= KW_DEFINED)||(LA329_0 >= KW_DELIMITED && LA329_0 <= KW_DESC)||(LA329_0 >= KW_DETAIL && LA329_0 <= KW_DISABLE)||(LA329_0 >= KW_DISTRIBUTE && LA329_0 <= KW_DOW)||(LA329_0 >= KW_DUMP && LA329_0 <= KW_ELEM_TYPE)||LA329_0==KW_ENABLE||(LA329_0 >= KW_ENFORCED && LA329_0 <= KW_EVERY)||(LA329_0 >= KW_EXCLUSIVE && LA329_0 <= KW_EXECUTED)||(LA329_0 >= KW_EXPIRE_SNAPSHOTS && LA329_0 <= KW_EXPRESSION)||(LA329_0 >= KW_EXTRACT && LA329_0 <= KW_FAST_FORWARD)||(LA329_0 >= KW_FIELDS && LA329_0 <= KW_FLOOR)||(LA329_0 >= KW_FORMAT && LA329_0 <= KW_FORMATTED)||LA329_0==KW_FUNCTIONS||LA329_0==KW_GROUPING||(LA329_0 >= KW_HOUR && LA329_0 <= KW_IGNORE)||(LA329_0 >= KW_INDEX && LA329_0 <= KW_INDEXES)||(LA329_0 >= KW_INPATH && LA329_0 <= KW_INPUTFORMAT)||LA329_0==KW_INT||LA329_0==KW_INTERVAL||(LA329_0 >= KW_ISOLATION && LA329_0 <= KW_JAR)||(LA329_0 >= KW_JOINCOST && LA329_0 <= KW_LAST)||LA329_0==KW_LEVEL||(LA329_0 >= KW_LIMIT && LA329_0 <= KW_LOAD)||(LA329_0 >= KW_LOCATION && LA329_0 <= KW_LONG)||(LA329_0 >= KW_MANAGED && LA329_0 <= KW_MATERIALIZED)||LA329_0==KW_METADATA||(LA329_0 >= KW_MINUTE && LA329_0 <= KW_MONTH)||(LA329_0 >= KW_MOVE && LA329_0 <= KW_MSCK)||(LA329_0 >= KW_NORELY && LA329_0 <= KW_NOSCAN)||(LA329_0 >= KW_NOVALIDATE && LA329_0 <= KW_NULLS)||LA329_0==KW_OFFSET||(LA329_0 >= KW_OPERATOR && LA329_0 <= KW_OPTION)||(LA329_0 >= KW_OUTPUTDRIVER && LA329_0 <= KW_OUTPUTFORMAT)||(LA329_0 >= KW_OVERWRITE && LA329_0 <= KW_OWNER)||(LA329_0 >= KW_PARTITIONED && LA329_0 <= KW_PATH)||(LA329_0 >= KW_PLAN && LA329_0 <= KW_POOL)||LA329_0==KW_PRINCIPALS||LA329_0==KW_PURGE||(LA329_0 >= KW_QUARTER && LA329_0 <= KW_QUERY_PARALLELISM)||LA329_0==KW_READ||(LA329_0 >= KW_REAL && LA329_0 <= KW_RECORDWRITER)||(LA329_0 >= KW_RELOAD && LA329_0 <= KW_RETENTION)||LA329_0==KW_REWRITE||(LA329_0 >= KW_ROLE && LA329_0 <= KW_ROLES)||(LA329_0 >= KW_SCHEDULED && LA329_0 <= KW_SECOND)||(LA329_0 >= KW_SEMI && LA329_0 <= KW_SERVER)||(LA329_0 >= KW_SETS && LA329_0 <= KW_SNAPSHOTS)||(LA329_0 >= KW_SORT && LA329_0 <= KW_SSL)||(LA329_0 >= KW_STATISTICS && LA329_0 <= KW_SUMMARY)||(LA329_0 >= KW_SYSTEM_TIME && LA329_0 <= KW_SYSTEM_VERSION)||LA329_0==KW_TABLES||(LA329_0 >= KW_TAG && LA329_0 <= KW_TERMINATED)||(LA329_0 >= KW_TIMESTAMP && LA329_0 <= KW_TINYINT)||LA329_0==KW_TOUCH||(LA329_0 >= KW_TRANSACTION && LA329_0 <= KW_TRANSACTIONS)||(LA329_0 >= KW_TRIM && LA329_0 <= KW_TRUE)||(LA329_0 >= KW_TYPE && LA329_0 <= KW_UNARCHIVE)||LA329_0==KW_UNDO||LA329_0==KW_UNIONTYPE||(LA329_0 >= KW_UNKNOWN && LA329_0 <= KW_UNSIGNED)||(LA329_0 >= KW_URI && LA329_0 <= KW_USE)||(LA329_0 >= KW_UTC && LA329_0 <= KW_VALIDATE)||LA329_0==KW_VALUE_TYPE||(LA329_0 >= KW_VECTORIZATION && LA329_0 <= KW_WEEK)||LA329_0==KW_WHILE||(LA329_0 >= KW_WITHIN && LA329_0 <= KW_ZONE)||LA329_0==LPAREN||LA329_0==MINUS||(LA329_0 >= Number && LA329_0 <= PLUS)||LA329_0==QUESTION||(LA329_0 >= StringLiteral && LA329_0 <= TILDE)||LA329_0==KW_BATCH||LA329_0==KW_DAYOFWEEK||LA329_0==KW_HOLD_DDLTIME||LA329_0==KW_NO_DROP||LA329_0==KW_OFFLINE||LA329_0==KW_PROTECTION||LA329_0==KW_READONLY||LA329_0==KW_TIMESTAMPTZ) ) {
                alt329=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 329, 0, input);

                throw nvae;

            }
            switch (alt329) {
                case 1 :
                    // HiveParser.g:2762:5: ( KW_DEFAULT (~ DOT | EOF ) )=> defaultValue
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_defaultValue_in_precedencePlusExpressionOrDefault17895);
                    defaultValue985=defaultValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultValue985.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:2763:7: precedencePlusExpression
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_precedencePlusExpression_in_precedencePlusExpressionOrDefault17903);
                    precedencePlusExpression986=precedencePlusExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, precedencePlusExpression986.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precedencePlusExpressionOrDefault"


    public static class setColumnsClause_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "setColumnsClause"
    // HiveParser.g:2768:1: setColumnsClause : KW_SET columnAssignmentClause ( COMMA columnAssignmentClause )* -> ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* ) ;
    public final HiveParser.setColumnsClause_return setColumnsClause() throws RecognitionException {
        HiveParser.setColumnsClause_return retval = new HiveParser.setColumnsClause_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_SET987=null;
        Token COMMA989=null;
        HiveParser.columnAssignmentClause_return columnAssignmentClause988 =null;

        HiveParser.columnAssignmentClause_return columnAssignmentClause990 =null;


        ASTNode KW_SET987_tree=null;
        ASTNode COMMA989_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_columnAssignmentClause=new RewriteRuleSubtreeStream(adaptor,"rule columnAssignmentClause");
        try {
            // HiveParser.g:2769:4: ( KW_SET columnAssignmentClause ( COMMA columnAssignmentClause )* -> ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* ) )
            // HiveParser.g:2770:4: KW_SET columnAssignmentClause ( COMMA columnAssignmentClause )*
            {
            KW_SET987=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_setColumnsClause17925); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET987);


            pushFollow(FOLLOW_columnAssignmentClause_in_setColumnsClause17927);
            columnAssignmentClause988=columnAssignmentClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnAssignmentClause.add(columnAssignmentClause988.getTree());

            // HiveParser.g:2770:34: ( COMMA columnAssignmentClause )*
            loop330:
            do {
                int alt330=2;
                int LA330_0 = input.LA(1);

                if ( (LA330_0==COMMA) ) {
                    alt330=1;
                }


                switch (alt330) {
            	case 1 :
            	    // HiveParser.g:2770:35: COMMA columnAssignmentClause
            	    {
            	    COMMA989=(Token)match(input,COMMA,FOLLOW_COMMA_in_setColumnsClause17930); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA989);


            	    pushFollow(FOLLOW_columnAssignmentClause_in_setColumnsClause17932);
            	    columnAssignmentClause990=columnAssignmentClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_columnAssignmentClause.add(columnAssignmentClause990.getTree());

            	    }
            	    break;

            	default :
            	    break loop330;
                }
            } while (true);


            // AST REWRITE
            // elements: columnAssignmentClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2770:66: -> ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* )
            {
                // HiveParser.g:2770:69: ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SET_COLUMNS_CLAUSE, "TOK_SET_COLUMNS_CLAUSE")
                , root_1);

                // HiveParser.g:2770:94: ( columnAssignmentClause )*
                while ( stream_columnAssignmentClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnAssignmentClause.nextTree());

                }
                stream_columnAssignmentClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "setColumnsClause"


    public static class updateStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "updateStatement"
    // HiveParser.g:2777:1: updateStatement : KW_UPDATE tableName setColumnsClause ( whereClause )? -> ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? ) ;
    public final HiveParser.updateStatement_return updateStatement() throws RecognitionException {
        HiveParser.updateStatement_return retval = new HiveParser.updateStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_UPDATE991=null;
        HiveParser_FromClauseParser.tableName_return tableName992 =null;

        HiveParser.setColumnsClause_return setColumnsClause993 =null;

        HiveParser_FromClauseParser.whereClause_return whereClause994 =null;


        ASTNode KW_UPDATE991_tree=null;
        RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
        RewriteRuleSubtreeStream stream_setColumnsClause=new RewriteRuleSubtreeStream(adaptor,"rule setColumnsClause");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         pushMsg("update statement", state); 
        try {
            // HiveParser.g:2780:4: ( KW_UPDATE tableName setColumnsClause ( whereClause )? -> ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? ) )
            // HiveParser.g:2781:4: KW_UPDATE tableName setColumnsClause ( whereClause )?
            {
            KW_UPDATE991=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_updateStatement17974); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE991);


            pushFollow(FOLLOW_tableName_in_updateStatement17976);
            tableName992=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tableName992.getTree());

            pushFollow(FOLLOW_setColumnsClause_in_updateStatement17978);
            setColumnsClause993=setColumnsClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_setColumnsClause.add(setColumnsClause993.getTree());

            // HiveParser.g:2781:41: ( whereClause )?
            int alt331=2;
            int LA331_0 = input.LA(1);

            if ( (LA331_0==KW_WHERE) ) {
                alt331=1;
            }
            switch (alt331) {
                case 1 :
                    // HiveParser.g:2781:41: whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_updateStatement17980);
                    whereClause994=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause994.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableName, whereClause, setColumnsClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2781:54: -> ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? )
            {
                // HiveParser.g:2781:57: ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_UPDATE_TABLE, "TOK_UPDATE_TABLE")
                , root_1);

                adaptor.addChild(root_1, stream_tableName.nextTree());

                adaptor.addChild(root_1, stream_setColumnsClause.nextTree());

                // HiveParser.g:2781:103: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "updateStatement"


    public static class sqlTransactionStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sqlTransactionStatement"
    // HiveParser.g:2788:1: sqlTransactionStatement : ( startTransactionStatement | commitStatement | rollbackStatement | setAutoCommitStatement );
    public final HiveParser.sqlTransactionStatement_return sqlTransactionStatement() throws RecognitionException {
        HiveParser.sqlTransactionStatement_return retval = new HiveParser.sqlTransactionStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.startTransactionStatement_return startTransactionStatement995 =null;

        HiveParser.commitStatement_return commitStatement996 =null;

        HiveParser.rollbackStatement_return rollbackStatement997 =null;

        HiveParser.setAutoCommitStatement_return setAutoCommitStatement998 =null;



         pushMsg("transaction statement", state); 
        try {
            // HiveParser.g:2791:3: ( startTransactionStatement | commitStatement | rollbackStatement | setAutoCommitStatement )
            int alt332=4;
            switch ( input.LA(1) ) {
            case KW_START:
                {
                alt332=1;
                }
                break;
            case KW_COMMIT:
                {
                alt332=2;
                }
                break;
            case KW_ROLLBACK:
                {
                alt332=3;
                }
                break;
            case KW_SET:
                {
                alt332=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 332, 0, input);

                throw nvae;

            }

            switch (alt332) {
                case 1 :
                    // HiveParser.g:2792:3: startTransactionStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_startTransactionStatement_in_sqlTransactionStatement18022);
                    startTransactionStatement995=startTransactionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, startTransactionStatement995.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:2793:4: commitStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_commitStatement_in_sqlTransactionStatement18027);
                    commitStatement996=commitStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commitStatement996.getTree());

                    }
                    break;
                case 3 :
                    // HiveParser.g:2794:4: rollbackStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_rollbackStatement_in_sqlTransactionStatement18032);
                    rollbackStatement997=rollbackStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollbackStatement997.getTree());

                    }
                    break;
                case 4 :
                    // HiveParser.g:2795:4: setAutoCommitStatement
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_setAutoCommitStatement_in_sqlTransactionStatement18037);
                    setAutoCommitStatement998=setAutoCommitStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, setAutoCommitStatement998.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sqlTransactionStatement"


    public static class startTransactionStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "startTransactionStatement"
    // HiveParser.g:2798:1: startTransactionStatement : KW_START KW_TRANSACTION ( transactionMode ( COMMA transactionMode )* )? -> ^( TOK_START_TRANSACTION ( transactionMode )* ) ;
    public final HiveParser.startTransactionStatement_return startTransactionStatement() throws RecognitionException {
        HiveParser.startTransactionStatement_return retval = new HiveParser.startTransactionStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_START999=null;
        Token KW_TRANSACTION1000=null;
        Token COMMA1002=null;
        HiveParser.transactionMode_return transactionMode1001 =null;

        HiveParser.transactionMode_return transactionMode1003 =null;


        ASTNode KW_START999_tree=null;
        ASTNode KW_TRANSACTION1000_tree=null;
        ASTNode COMMA1002_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_START=new RewriteRuleTokenStream(adaptor,"token KW_START");
        RewriteRuleTokenStream stream_KW_TRANSACTION=new RewriteRuleTokenStream(adaptor,"token KW_TRANSACTION");
        RewriteRuleSubtreeStream stream_transactionMode=new RewriteRuleSubtreeStream(adaptor,"rule transactionMode");
        try {
            // HiveParser.g:2799:3: ( KW_START KW_TRANSACTION ( transactionMode ( COMMA transactionMode )* )? -> ^( TOK_START_TRANSACTION ( transactionMode )* ) )
            // HiveParser.g:2800:3: KW_START KW_TRANSACTION ( transactionMode ( COMMA transactionMode )* )?
            {
            KW_START999=(Token)match(input,KW_START,FOLLOW_KW_START_in_startTransactionStatement18051); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_START.add(KW_START999);


            KW_TRANSACTION1000=(Token)match(input,KW_TRANSACTION,FOLLOW_KW_TRANSACTION_in_startTransactionStatement18053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TRANSACTION.add(KW_TRANSACTION1000);


            // HiveParser.g:2800:27: ( transactionMode ( COMMA transactionMode )* )?
            int alt334=2;
            int LA334_0 = input.LA(1);

            if ( (LA334_0==KW_ISOLATION||LA334_0==KW_READ) ) {
                alt334=1;
            }
            switch (alt334) {
                case 1 :
                    // HiveParser.g:2800:29: transactionMode ( COMMA transactionMode )*
                    {
                    pushFollow(FOLLOW_transactionMode_in_startTransactionStatement18057);
                    transactionMode1001=transactionMode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_transactionMode.add(transactionMode1001.getTree());

                    // HiveParser.g:2800:46: ( COMMA transactionMode )*
                    loop333:
                    do {
                        int alt333=2;
                        int LA333_0 = input.LA(1);

                        if ( (LA333_0==COMMA) ) {
                            alt333=1;
                        }


                        switch (alt333) {
                    	case 1 :
                    	    // HiveParser.g:2800:48: COMMA transactionMode
                    	    {
                    	    COMMA1002=(Token)match(input,COMMA,FOLLOW_COMMA_in_startTransactionStatement18062); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA1002);


                    	    pushFollow(FOLLOW_transactionMode_in_startTransactionStatement18064);
                    	    transactionMode1003=transactionMode();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_transactionMode.add(transactionMode1003.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop333;
                        }
                    } while (true);


                    }
                    break;

            }


            // AST REWRITE
            // elements: transactionMode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2800:77: -> ^( TOK_START_TRANSACTION ( transactionMode )* )
            {
                // HiveParser.g:2800:80: ^( TOK_START_TRANSACTION ( transactionMode )* )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_START_TRANSACTION, "TOK_START_TRANSACTION")
                , root_1);

                // HiveParser.g:2800:104: ( transactionMode )*
                while ( stream_transactionMode.hasNext() ) {
                    adaptor.addChild(root_1, stream_transactionMode.nextTree());

                }
                stream_transactionMode.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "startTransactionStatement"


    public static class transactionMode_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "transactionMode"
    // HiveParser.g:2803:1: transactionMode : ( isolationLevel | transactionAccessMode -> ^( TOK_TXN_ACCESS_MODE transactionAccessMode ) );
    public final HiveParser.transactionMode_return transactionMode() throws RecognitionException {
        HiveParser.transactionMode_return retval = new HiveParser.transactionMode_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.isolationLevel_return isolationLevel1004 =null;

        HiveParser.transactionAccessMode_return transactionAccessMode1005 =null;


        RewriteRuleSubtreeStream stream_transactionAccessMode=new RewriteRuleSubtreeStream(adaptor,"rule transactionAccessMode");
        try {
            // HiveParser.g:2804:3: ( isolationLevel | transactionAccessMode -> ^( TOK_TXN_ACCESS_MODE transactionAccessMode ) )
            int alt335=2;
            int LA335_0 = input.LA(1);

            if ( (LA335_0==KW_ISOLATION) ) {
                alt335=1;
            }
            else if ( (LA335_0==KW_READ) ) {
                alt335=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 335, 0, input);

                throw nvae;

            }
            switch (alt335) {
                case 1 :
                    // HiveParser.g:2805:3: isolationLevel
                    {
                    root_0 = (ASTNode)adaptor.nil();


                    pushFollow(FOLLOW_isolationLevel_in_transactionMode18095);
                    isolationLevel1004=isolationLevel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, isolationLevel1004.getTree());

                    }
                    break;
                case 2 :
                    // HiveParser.g:2806:5: transactionAccessMode
                    {
                    pushFollow(FOLLOW_transactionAccessMode_in_transactionMode18101);
                    transactionAccessMode1005=transactionAccessMode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_transactionAccessMode.add(transactionAccessMode1005.getTree());

                    // AST REWRITE
                    // elements: transactionAccessMode
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2806:27: -> ^( TOK_TXN_ACCESS_MODE transactionAccessMode )
                    {
                        // HiveParser.g:2806:30: ^( TOK_TXN_ACCESS_MODE transactionAccessMode )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_TXN_ACCESS_MODE, "TOK_TXN_ACCESS_MODE")
                        , root_1);

                        adaptor.addChild(root_1, stream_transactionAccessMode.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "transactionMode"


    public static class transactionAccessMode_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "transactionAccessMode"
    // HiveParser.g:2809:1: transactionAccessMode : ( KW_READ KW_ONLY -> TOK_TXN_READ_ONLY | KW_READ KW_WRITE -> TOK_TXN_READ_WRITE );
    public final HiveParser.transactionAccessMode_return transactionAccessMode() throws RecognitionException {
        HiveParser.transactionAccessMode_return retval = new HiveParser.transactionAccessMode_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_READ1006=null;
        Token KW_ONLY1007=null;
        Token KW_READ1008=null;
        Token KW_WRITE1009=null;

        ASTNode KW_READ1006_tree=null;
        ASTNode KW_ONLY1007_tree=null;
        ASTNode KW_READ1008_tree=null;
        ASTNode KW_WRITE1009_tree=null;
        RewriteRuleTokenStream stream_KW_READ=new RewriteRuleTokenStream(adaptor,"token KW_READ");
        RewriteRuleTokenStream stream_KW_ONLY=new RewriteRuleTokenStream(adaptor,"token KW_ONLY");
        RewriteRuleTokenStream stream_KW_WRITE=new RewriteRuleTokenStream(adaptor,"token KW_WRITE");

        try {
            // HiveParser.g:2810:3: ( KW_READ KW_ONLY -> TOK_TXN_READ_ONLY | KW_READ KW_WRITE -> TOK_TXN_READ_WRITE )
            int alt336=2;
            int LA336_0 = input.LA(1);

            if ( (LA336_0==KW_READ) ) {
                int LA336_1 = input.LA(2);

                if ( (LA336_1==KW_ONLY) ) {
                    alt336=1;
                }
                else if ( (LA336_1==KW_WRITE) ) {
                    alt336=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 336, 0, input);

                throw nvae;

            }
            switch (alt336) {
                case 1 :
                    // HiveParser.g:2811:3: KW_READ KW_ONLY
                    {
                    KW_READ1006=(Token)match(input,KW_READ,FOLLOW_KW_READ_in_transactionAccessMode18124); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_READ.add(KW_READ1006);


                    KW_ONLY1007=(Token)match(input,KW_ONLY,FOLLOW_KW_ONLY_in_transactionAccessMode18126); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_ONLY.add(KW_ONLY1007);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2811:19: -> TOK_TXN_READ_ONLY
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_TXN_READ_ONLY, "TOK_TXN_READ_ONLY")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2812:5: KW_READ KW_WRITE
                    {
                    KW_READ1008=(Token)match(input,KW_READ,FOLLOW_KW_READ_in_transactionAccessMode18136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_READ.add(KW_READ1008);


                    KW_WRITE1009=(Token)match(input,KW_WRITE,FOLLOW_KW_WRITE_in_transactionAccessMode18138); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_WRITE.add(KW_WRITE1009);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2812:22: -> TOK_TXN_READ_WRITE
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_TXN_READ_WRITE, "TOK_TXN_READ_WRITE")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "transactionAccessMode"


    public static class isolationLevel_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "isolationLevel"
    // HiveParser.g:2815:1: isolationLevel : KW_ISOLATION KW_LEVEL levelOfIsolation -> ^( TOK_ISOLATION_LEVEL levelOfIsolation ) ;
    public final HiveParser.isolationLevel_return isolationLevel() throws RecognitionException {
        HiveParser.isolationLevel_return retval = new HiveParser.isolationLevel_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_ISOLATION1010=null;
        Token KW_LEVEL1011=null;
        HiveParser.levelOfIsolation_return levelOfIsolation1012 =null;


        ASTNode KW_ISOLATION1010_tree=null;
        ASTNode KW_LEVEL1011_tree=null;
        RewriteRuleTokenStream stream_KW_LEVEL=new RewriteRuleTokenStream(adaptor,"token KW_LEVEL");
        RewriteRuleTokenStream stream_KW_ISOLATION=new RewriteRuleTokenStream(adaptor,"token KW_ISOLATION");
        RewriteRuleSubtreeStream stream_levelOfIsolation=new RewriteRuleSubtreeStream(adaptor,"rule levelOfIsolation");
        try {
            // HiveParser.g:2816:3: ( KW_ISOLATION KW_LEVEL levelOfIsolation -> ^( TOK_ISOLATION_LEVEL levelOfIsolation ) )
            // HiveParser.g:2817:3: KW_ISOLATION KW_LEVEL levelOfIsolation
            {
            KW_ISOLATION1010=(Token)match(input,KW_ISOLATION,FOLLOW_KW_ISOLATION_in_isolationLevel18157); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ISOLATION.add(KW_ISOLATION1010);


            KW_LEVEL1011=(Token)match(input,KW_LEVEL,FOLLOW_KW_LEVEL_in_isolationLevel18159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_LEVEL.add(KW_LEVEL1011);


            pushFollow(FOLLOW_levelOfIsolation_in_isolationLevel18161);
            levelOfIsolation1012=levelOfIsolation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_levelOfIsolation.add(levelOfIsolation1012.getTree());

            // AST REWRITE
            // elements: levelOfIsolation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2817:42: -> ^( TOK_ISOLATION_LEVEL levelOfIsolation )
            {
                // HiveParser.g:2817:45: ^( TOK_ISOLATION_LEVEL levelOfIsolation )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_ISOLATION_LEVEL, "TOK_ISOLATION_LEVEL")
                , root_1);

                adaptor.addChild(root_1, stream_levelOfIsolation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "isolationLevel"


    public static class levelOfIsolation_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "levelOfIsolation"
    // HiveParser.g:2821:1: levelOfIsolation : KW_SNAPSHOT -> TOK_ISOLATION_SNAPSHOT ;
    public final HiveParser.levelOfIsolation_return levelOfIsolation() throws RecognitionException {
        HiveParser.levelOfIsolation_return retval = new HiveParser.levelOfIsolation_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_SNAPSHOT1013=null;

        ASTNode KW_SNAPSHOT1013_tree=null;
        RewriteRuleTokenStream stream_KW_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token KW_SNAPSHOT");

        try {
            // HiveParser.g:2822:3: ( KW_SNAPSHOT -> TOK_ISOLATION_SNAPSHOT )
            // HiveParser.g:2823:3: KW_SNAPSHOT
            {
            KW_SNAPSHOT1013=(Token)match(input,KW_SNAPSHOT,FOLLOW_KW_SNAPSHOT_in_levelOfIsolation18186); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SNAPSHOT.add(KW_SNAPSHOT1013);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2823:15: -> TOK_ISOLATION_SNAPSHOT
            {
                adaptor.addChild(root_0, 
                (ASTNode)adaptor.create(TOK_ISOLATION_SNAPSHOT, "TOK_ISOLATION_SNAPSHOT")
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "levelOfIsolation"


    public static class commitStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "commitStatement"
    // HiveParser.g:2826:1: commitStatement : KW_COMMIT ( KW_WORK )? -> TOK_COMMIT ;
    public final HiveParser.commitStatement_return commitStatement() throws RecognitionException {
        HiveParser.commitStatement_return retval = new HiveParser.commitStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_COMMIT1014=null;
        Token KW_WORK1015=null;

        ASTNode KW_COMMIT1014_tree=null;
        ASTNode KW_WORK1015_tree=null;
        RewriteRuleTokenStream stream_KW_WORK=new RewriteRuleTokenStream(adaptor,"token KW_WORK");
        RewriteRuleTokenStream stream_KW_COMMIT=new RewriteRuleTokenStream(adaptor,"token KW_COMMIT");

        try {
            // HiveParser.g:2827:3: ( KW_COMMIT ( KW_WORK )? -> TOK_COMMIT )
            // HiveParser.g:2828:3: KW_COMMIT ( KW_WORK )?
            {
            KW_COMMIT1014=(Token)match(input,KW_COMMIT,FOLLOW_KW_COMMIT_in_commitStatement18205); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_COMMIT.add(KW_COMMIT1014);


            // HiveParser.g:2828:13: ( KW_WORK )?
            int alt337=2;
            int LA337_0 = input.LA(1);

            if ( (LA337_0==KW_WORK) ) {
                alt337=1;
            }
            switch (alt337) {
                case 1 :
                    // HiveParser.g:2828:15: KW_WORK
                    {
                    KW_WORK1015=(Token)match(input,KW_WORK,FOLLOW_KW_WORK_in_commitStatement18209); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_WORK.add(KW_WORK1015);


                    }
                    break;

            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2828:26: -> TOK_COMMIT
            {
                adaptor.addChild(root_0, 
                (ASTNode)adaptor.create(TOK_COMMIT, "TOK_COMMIT")
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "commitStatement"


    public static class rollbackStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rollbackStatement"
    // HiveParser.g:2831:1: rollbackStatement : KW_ROLLBACK ( KW_WORK )? -> TOK_ROLLBACK ;
    public final HiveParser.rollbackStatement_return rollbackStatement() throws RecognitionException {
        HiveParser.rollbackStatement_return retval = new HiveParser.rollbackStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_ROLLBACK1016=null;
        Token KW_WORK1017=null;

        ASTNode KW_ROLLBACK1016_tree=null;
        ASTNode KW_WORK1017_tree=null;
        RewriteRuleTokenStream stream_KW_ROLLBACK=new RewriteRuleTokenStream(adaptor,"token KW_ROLLBACK");
        RewriteRuleTokenStream stream_KW_WORK=new RewriteRuleTokenStream(adaptor,"token KW_WORK");

        try {
            // HiveParser.g:2832:3: ( KW_ROLLBACK ( KW_WORK )? -> TOK_ROLLBACK )
            // HiveParser.g:2833:3: KW_ROLLBACK ( KW_WORK )?
            {
            KW_ROLLBACK1016=(Token)match(input,KW_ROLLBACK,FOLLOW_KW_ROLLBACK_in_rollbackStatement18231); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ROLLBACK.add(KW_ROLLBACK1016);


            // HiveParser.g:2833:15: ( KW_WORK )?
            int alt338=2;
            int LA338_0 = input.LA(1);

            if ( (LA338_0==KW_WORK) ) {
                alt338=1;
            }
            switch (alt338) {
                case 1 :
                    // HiveParser.g:2833:17: KW_WORK
                    {
                    KW_WORK1017=(Token)match(input,KW_WORK,FOLLOW_KW_WORK_in_rollbackStatement18235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_WORK.add(KW_WORK1017);


                    }
                    break;

            }


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2833:28: -> TOK_ROLLBACK
            {
                adaptor.addChild(root_0, 
                (ASTNode)adaptor.create(TOK_ROLLBACK, "TOK_ROLLBACK")
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rollbackStatement"


    public static class setAutoCommitStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "setAutoCommitStatement"
    // HiveParser.g:2835:1: setAutoCommitStatement : KW_SET KW_AUTOCOMMIT booleanValueTok -> ^( TOK_SET_AUTOCOMMIT booleanValueTok ) ;
    public final HiveParser.setAutoCommitStatement_return setAutoCommitStatement() throws RecognitionException {
        HiveParser.setAutoCommitStatement_return retval = new HiveParser.setAutoCommitStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_SET1018=null;
        Token KW_AUTOCOMMIT1019=null;
        HiveParser_IdentifiersParser.booleanValueTok_return booleanValueTok1020 =null;


        ASTNode KW_SET1018_tree=null;
        ASTNode KW_AUTOCOMMIT1019_tree=null;
        RewriteRuleTokenStream stream_KW_AUTOCOMMIT=new RewriteRuleTokenStream(adaptor,"token KW_AUTOCOMMIT");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_booleanValueTok=new RewriteRuleSubtreeStream(adaptor,"rule booleanValueTok");
        try {
            // HiveParser.g:2836:3: ( KW_SET KW_AUTOCOMMIT booleanValueTok -> ^( TOK_SET_AUTOCOMMIT booleanValueTok ) )
            // HiveParser.g:2837:3: KW_SET KW_AUTOCOMMIT booleanValueTok
            {
            KW_SET1018=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_setAutoCommitStatement18256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET1018);


            KW_AUTOCOMMIT1019=(Token)match(input,KW_AUTOCOMMIT,FOLLOW_KW_AUTOCOMMIT_in_setAutoCommitStatement18258); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_AUTOCOMMIT.add(KW_AUTOCOMMIT1019);


            pushFollow(FOLLOW_booleanValueTok_in_setAutoCommitStatement18260);
            booleanValueTok1020=booleanValueTok();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_booleanValueTok.add(booleanValueTok1020.getTree());

            // AST REWRITE
            // elements: booleanValueTok
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2837:40: -> ^( TOK_SET_AUTOCOMMIT booleanValueTok )
            {
                // HiveParser.g:2837:43: ^( TOK_SET_AUTOCOMMIT booleanValueTok )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_SET_AUTOCOMMIT, "TOK_SET_AUTOCOMMIT")
                , root_1);

                adaptor.addChild(root_1, stream_booleanValueTok.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "setAutoCommitStatement"


    public static class abortTransactionStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "abortTransactionStatement"
    // HiveParser.g:2843:1: abortTransactionStatement : KW_ABORT KW_TRANSACTIONS ( Number )+ -> ^( TOK_ABORT_TRANSACTIONS ( Number )+ ) ;
    public final HiveParser.abortTransactionStatement_return abortTransactionStatement() throws RecognitionException {
        HiveParser.abortTransactionStatement_return retval = new HiveParser.abortTransactionStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_ABORT1021=null;
        Token KW_TRANSACTIONS1022=null;
        Token Number1023=null;

        ASTNode KW_ABORT1021_tree=null;
        ASTNode KW_TRANSACTIONS1022_tree=null;
        ASTNode Number1023_tree=null;
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_TRANSACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_TRANSACTIONS");
        RewriteRuleTokenStream stream_KW_ABORT=new RewriteRuleTokenStream(adaptor,"token KW_ABORT");

         pushMsg("abort transactions statement", state); 
        try {
            // HiveParser.g:2846:3: ( KW_ABORT KW_TRANSACTIONS ( Number )+ -> ^( TOK_ABORT_TRANSACTIONS ( Number )+ ) )
            // HiveParser.g:2847:3: KW_ABORT KW_TRANSACTIONS ( Number )+
            {
            KW_ABORT1021=(Token)match(input,KW_ABORT,FOLLOW_KW_ABORT_in_abortTransactionStatement18295); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ABORT.add(KW_ABORT1021);


            KW_TRANSACTIONS1022=(Token)match(input,KW_TRANSACTIONS,FOLLOW_KW_TRANSACTIONS_in_abortTransactionStatement18297); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TRANSACTIONS.add(KW_TRANSACTIONS1022);


            // HiveParser.g:2847:28: ( Number )+
            int cnt339=0;
            loop339:
            do {
                int alt339=2;
                int LA339_0 = input.LA(1);

                if ( (LA339_0==Number) ) {
                    alt339=1;
                }


                switch (alt339) {
            	case 1 :
            	    // HiveParser.g:2847:30: Number
            	    {
            	    Number1023=(Token)match(input,Number,FOLLOW_Number_in_abortTransactionStatement18301); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Number.add(Number1023);


            	    }
            	    break;

            	default :
            	    if ( cnt339 >= 1 ) break loop339;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(339, input);
                        throw eee;
                }
                cnt339++;
            } while (true);


            // AST REWRITE
            // elements: Number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2847:40: -> ^( TOK_ABORT_TRANSACTIONS ( Number )+ )
            {
                // HiveParser.g:2847:43: ^( TOK_ABORT_TRANSACTIONS ( Number )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_ABORT_TRANSACTIONS, "TOK_ABORT_TRANSACTIONS")
                , root_1);

                if ( !(stream_Number.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Number.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_Number.nextNode()
                    );

                }
                stream_Number.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "abortTransactionStatement"


    public static class abortCompactionStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "abortCompactionStatement"
    // HiveParser.g:2850:1: abortCompactionStatement : KW_ABORT KW_COMPACTIONS ( Number )+ -> ^( TOK_ABORT_COMPACTIONS ( Number )+ ) ;
    public final HiveParser.abortCompactionStatement_return abortCompactionStatement() throws RecognitionException {
        HiveParser.abortCompactionStatement_return retval = new HiveParser.abortCompactionStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_ABORT1024=null;
        Token KW_COMPACTIONS1025=null;
        Token Number1026=null;

        ASTNode KW_ABORT1024_tree=null;
        ASTNode KW_COMPACTIONS1025_tree=null;
        ASTNode Number1026_tree=null;
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_ABORT=new RewriteRuleTokenStream(adaptor,"token KW_ABORT");
        RewriteRuleTokenStream stream_KW_COMPACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_COMPACTIONS");

         pushMsg("abort compactions statement", state); 
        try {
            // HiveParser.g:2853:3: ( KW_ABORT KW_COMPACTIONS ( Number )+ -> ^( TOK_ABORT_COMPACTIONS ( Number )+ ) )
            // HiveParser.g:2855:8: KW_ABORT KW_COMPACTIONS ( Number )+
            {
            KW_ABORT1024=(Token)match(input,KW_ABORT,FOLLOW_KW_ABORT_in_abortCompactionStatement18348); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ABORT.add(KW_ABORT1024);


            KW_COMPACTIONS1025=(Token)match(input,KW_COMPACTIONS,FOLLOW_KW_COMPACTIONS_in_abortCompactionStatement18350); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_COMPACTIONS.add(KW_COMPACTIONS1025);


            // HiveParser.g:2855:32: ( Number )+
            int cnt340=0;
            loop340:
            do {
                int alt340=2;
                int LA340_0 = input.LA(1);

                if ( (LA340_0==Number) ) {
                    alt340=1;
                }


                switch (alt340) {
            	case 1 :
            	    // HiveParser.g:2855:34: Number
            	    {
            	    Number1026=(Token)match(input,Number,FOLLOW_Number_in_abortCompactionStatement18354); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Number.add(Number1026);


            	    }
            	    break;

            	default :
            	    if ( cnt340 >= 1 ) break loop340;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(340, input);
                        throw eee;
                }
                cnt340++;
            } while (true);


            // AST REWRITE
            // elements: Number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2855:44: -> ^( TOK_ABORT_COMPACTIONS ( Number )+ )
            {
                // HiveParser.g:2855:47: ^( TOK_ABORT_COMPACTIONS ( Number )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_ABORT_COMPACTIONS, "TOK_ABORT_COMPACTIONS")
                , root_1);

                if ( !(stream_Number.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Number.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_Number.nextNode()
                    );

                }
                stream_Number.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "abortCompactionStatement"


    public static class mergeStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mergeStatement"
    // HiveParser.g:2860:1: mergeStatement : KW_MERGE ( QUERY_HINT )? KW_INTO tableName ( ( KW_AS )? identifier )? KW_USING joinSourcePart KW_ON expression whenClauses -> ^( TOK_MERGE ^( TOK_TABREF tableName ( identifier )? ) joinSourcePart expression ( QUERY_HINT )? whenClauses ) ;
    public final HiveParser.mergeStatement_return mergeStatement() throws RecognitionException {
        HiveParser.mergeStatement_return retval = new HiveParser.mergeStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_MERGE1027=null;
        Token QUERY_HINT1028=null;
        Token KW_INTO1029=null;
        Token KW_AS1031=null;
        Token KW_USING1033=null;
        Token KW_ON1035=null;
        HiveParser_FromClauseParser.tableName_return tableName1030 =null;

        HiveParser_IdentifiersParser.identifier_return identifier1032 =null;

        HiveParser_FromClauseParser.joinSourcePart_return joinSourcePart1034 =null;

        HiveParser_IdentifiersParser.expression_return expression1036 =null;

        HiveParser.whenClauses_return whenClauses1037 =null;


        ASTNode KW_MERGE1027_tree=null;
        ASTNode QUERY_HINT1028_tree=null;
        ASTNode KW_INTO1029_tree=null;
        ASTNode KW_AS1031_tree=null;
        ASTNode KW_USING1033_tree=null;
        ASTNode KW_ON1035_tree=null;
        RewriteRuleTokenStream stream_KW_MERGE=new RewriteRuleTokenStream(adaptor,"token KW_MERGE");
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_QUERY_HINT=new RewriteRuleTokenStream(adaptor,"token QUERY_HINT");
        RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClauses=new RewriteRuleSubtreeStream(adaptor,"rule whenClauses");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_joinSourcePart=new RewriteRuleSubtreeStream(adaptor,"rule joinSourcePart");
         pushMsg("MERGE statement", state); 
        try {
            // HiveParser.g:2863:4: ( KW_MERGE ( QUERY_HINT )? KW_INTO tableName ( ( KW_AS )? identifier )? KW_USING joinSourcePart KW_ON expression whenClauses -> ^( TOK_MERGE ^( TOK_TABREF tableName ( identifier )? ) joinSourcePart expression ( QUERY_HINT )? whenClauses ) )
            // HiveParser.g:2864:4: KW_MERGE ( QUERY_HINT )? KW_INTO tableName ( ( KW_AS )? identifier )? KW_USING joinSourcePart KW_ON expression whenClauses
            {
            KW_MERGE1027=(Token)match(input,KW_MERGE,FOLLOW_KW_MERGE_in_mergeStatement18398); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MERGE.add(KW_MERGE1027);


            // HiveParser.g:2864:13: ( QUERY_HINT )?
            int alt341=2;
            int LA341_0 = input.LA(1);

            if ( (LA341_0==QUERY_HINT) ) {
                alt341=1;
            }
            switch (alt341) {
                case 1 :
                    // HiveParser.g:2864:13: QUERY_HINT
                    {
                    QUERY_HINT1028=(Token)match(input,QUERY_HINT,FOLLOW_QUERY_HINT_in_mergeStatement18400); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUERY_HINT.add(QUERY_HINT1028);


                    }
                    break;

            }


            KW_INTO1029=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_mergeStatement18403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO1029);


            pushFollow(FOLLOW_tableName_in_mergeStatement18405);
            tableName1030=tableName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableName.add(tableName1030.getTree());

            // HiveParser.g:2864:43: ( ( KW_AS )? identifier )?
            int alt343=2;
            int LA343_0 = input.LA(1);

            if ( (LA343_0==Identifier||(LA343_0 >= KW_ABORT && LA343_0 <= KW_AFTER)||LA343_0==KW_ALLOC_FRACTION||LA343_0==KW_ANALYZE||LA343_0==KW_ARCHIVE||(LA343_0 >= KW_AS && LA343_0 <= KW_AT)||(LA343_0 >= KW_AUTOCOMMIT && LA343_0 <= KW_BEFORE)||(LA343_0 >= KW_BRANCH && LA343_0 <= KW_BUCKETS)||(LA343_0 >= KW_CACHE && LA343_0 <= KW_CASCADE)||(LA343_0 >= KW_CBO && LA343_0 <= KW_CHANGE)||LA343_0==KW_CHECK||(LA343_0 >= KW_CLUSTER && LA343_0 <= KW_COLLECTION)||(LA343_0 >= KW_COLUMNS && LA343_0 <= KW_COMMENT)||(LA343_0 >= KW_COMPACT && LA343_0 <= KW_COMPACTIONS)||(LA343_0 >= KW_COMPUTE && LA343_0 <= KW_CONCATENATE)||LA343_0==KW_CONTINUE||LA343_0==KW_COST||LA343_0==KW_CRON||LA343_0==KW_DATA||LA343_0==KW_DATABASES||(LA343_0 >= KW_DATETIME && LA343_0 <= KW_DCPROPERTIES)||LA343_0==KW_DEBUG||(LA343_0 >= KW_DEFAULT && LA343_0 <= KW_DEFINED)||(LA343_0 >= KW_DELIMITED && LA343_0 <= KW_DESC)||(LA343_0 >= KW_DETAIL && LA343_0 <= KW_DISABLE)||(LA343_0 >= KW_DISTRIBUTE && LA343_0 <= KW_DO)||LA343_0==KW_DOW||(LA343_0 >= KW_DUMP && LA343_0 <= KW_ELEM_TYPE)||LA343_0==KW_ENABLE||(LA343_0 >= KW_ENFORCED && LA343_0 <= KW_EVERY)||(LA343_0 >= KW_EXCLUSIVE && LA343_0 <= KW_EXECUTED)||(LA343_0 >= KW_EXPIRE_SNAPSHOTS && LA343_0 <= KW_EXPRESSION)||LA343_0==KW_FAST_FORWARD||(LA343_0 >= KW_FIELDS && LA343_0 <= KW_FIRST)||(LA343_0 >= KW_FORMAT && LA343_0 <= KW_FORMATTED)||LA343_0==KW_FUNCTIONS||(LA343_0 >= KW_HOUR && LA343_0 <= KW_IDXPROPERTIES)||LA343_0==KW_IGNORE||(LA343_0 >= KW_INDEX && LA343_0 <= KW_INDEXES)||(LA343_0 >= KW_INPATH && LA343_0 <= KW_INPUTFORMAT)||(LA343_0 >= KW_ISOLATION && LA343_0 <= KW_JAR)||(LA343_0 >= KW_JOINCOST && LA343_0 <= KW_LAST)||LA343_0==KW_LEVEL||(LA343_0 >= KW_LIMIT && LA343_0 <= KW_LOAD)||(LA343_0 >= KW_LOCATION && LA343_0 <= KW_LONG)||(LA343_0 >= KW_MANAGED && LA343_0 <= KW_MANAGEMENT)||(LA343_0 >= KW_MAPJOIN && LA343_0 <= KW_MATERIALIZED)||LA343_0==KW_METADATA||(LA343_0 >= KW_MINUTE && LA343_0 <= KW_MONTH)||(LA343_0 >= KW_MOVE && LA343_0 <= KW_MSCK)||(LA343_0 >= KW_NORELY && LA343_0 <= KW_NOSCAN)||LA343_0==KW_NOVALIDATE||LA343_0==KW_NULLS||LA343_0==KW_OFFSET||(LA343_0 >= KW_OPERATOR && LA343_0 <= KW_OPTION)||(LA343_0 >= KW_OUTPUTDRIVER && LA343_0 <= KW_OUTPUTFORMAT)||(LA343_0 >= KW_OVERWRITE && LA343_0 <= KW_OWNER)||(LA343_0 >= KW_PARTITIONED && LA343_0 <= KW_PATH)||(LA343_0 >= KW_PLAN && LA343_0 <= KW_POOL)||LA343_0==KW_PRINCIPALS||LA343_0==KW_PURGE||(LA343_0 >= KW_QUARTER && LA343_0 <= KW_QUERY_PARALLELISM)||LA343_0==KW_READ||(LA343_0 >= KW_REBUILD && LA343_0 <= KW_RECORDWRITER)||(LA343_0 >= KW_RELOAD && LA343_0 <= KW_RETENTION)||LA343_0==KW_REWRITE||(LA343_0 >= KW_ROLE && LA343_0 <= KW_ROLES)||(LA343_0 >= KW_SCHEDULED && LA343_0 <= KW_SECOND)||(LA343_0 >= KW_SEMI && LA343_0 <= KW_SERVER)||(LA343_0 >= KW_SETS && LA343_0 <= KW_SKEWED)||(LA343_0 >= KW_SNAPSHOT && LA343_0 <= KW_SNAPSHOTS)||(LA343_0 >= KW_SORT && LA343_0 <= KW_SSL)||(LA343_0 >= KW_STATISTICS && LA343_0 <= KW_SUMMARY)||(LA343_0 >= KW_SYSTEM_TIME && LA343_0 <= KW_SYSTEM_VERSION)||LA343_0==KW_TABLES||(LA343_0 >= KW_TAG && LA343_0 <= KW_TERMINATED)||LA343_0==KW_TINYINT||LA343_0==KW_TOUCH||(LA343_0 >= KW_TRANSACTION && LA343_0 <= KW_TRANSACTIONS)||LA343_0==KW_TRIM||(LA343_0 >= KW_TYPE && LA343_0 <= KW_UNARCHIVE)||LA343_0==KW_UNDO||LA343_0==KW_UNIONTYPE||(LA343_0 >= KW_UNKNOWN && LA343_0 <= KW_UNSIGNED)||(LA343_0 >= KW_URI && LA343_0 <= KW_USE)||(LA343_0 >= KW_UTC && LA343_0 <= KW_VALIDATE)||LA343_0==KW_VALUE_TYPE||(LA343_0 >= KW_VECTORIZATION && LA343_0 <= KW_WEEK)||LA343_0==KW_WHILE||(LA343_0 >= KW_WITHIN && LA343_0 <= KW_ZONE)||LA343_0==KW_BATCH||LA343_0==KW_DAYOFWEEK||LA343_0==KW_HOLD_DDLTIME||LA343_0==KW_NO_DROP||LA343_0==KW_OFFLINE||LA343_0==KW_PROTECTION||LA343_0==KW_READONLY||LA343_0==KW_TIMESTAMPTZ) ) {
                alt343=1;
            }
            switch (alt343) {
                case 1 :
                    // HiveParser.g:2864:44: ( KW_AS )? identifier
                    {
                    // HiveParser.g:2864:44: ( KW_AS )?
                    int alt342=2;
                    int LA342_0 = input.LA(1);

                    if ( (LA342_0==KW_AS) ) {
                        alt342=1;
                    }
                    switch (alt342) {
                        case 1 :
                            // HiveParser.g:2864:44: KW_AS
                            {
                            KW_AS1031=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_mergeStatement18408); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS1031);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_identifier_in_mergeStatement18411);
                    identifier1032=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifier.add(identifier1032.getTree());

                    }
                    break;

            }


            KW_USING1033=(Token)match(input,KW_USING,FOLLOW_KW_USING_in_mergeStatement18415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_USING.add(KW_USING1033);


            pushFollow(FOLLOW_joinSourcePart_in_mergeStatement18417);
            joinSourcePart1034=joinSourcePart();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_joinSourcePart.add(joinSourcePart1034.getTree());

            KW_ON1035=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_mergeStatement18419); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON1035);


            pushFollow(FOLLOW_expression_in_mergeStatement18421);
            expression1036=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression1036.getTree());

            pushFollow(FOLLOW_whenClauses_in_mergeStatement18423);
            whenClauses1037=whenClauses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_whenClauses.add(whenClauses1037.getTree());

            // AST REWRITE
            // elements: identifier, whenClauses, joinSourcePart, QUERY_HINT, expression, tableName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2865:6: -> ^( TOK_MERGE ^( TOK_TABREF tableName ( identifier )? ) joinSourcePart expression ( QUERY_HINT )? whenClauses )
            {
                // HiveParser.g:2865:9: ^( TOK_MERGE ^( TOK_TABREF tableName ( identifier )? ) joinSourcePart expression ( QUERY_HINT )? whenClauses )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_MERGE, "TOK_MERGE")
                , root_1);

                // HiveParser.g:2865:21: ^( TOK_TABREF tableName ( identifier )? )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_TABREF, "TOK_TABREF")
                , root_2);

                adaptor.addChild(root_2, stream_tableName.nextTree());

                // HiveParser.g:2865:44: ( identifier )?
                if ( stream_identifier.hasNext() ) {
                    adaptor.addChild(root_2, stream_identifier.nextTree());

                }
                stream_identifier.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_joinSourcePart.nextTree());

                adaptor.addChild(root_1, stream_expression.nextTree());

                // HiveParser.g:2865:83: ( QUERY_HINT )?
                if ( stream_QUERY_HINT.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_QUERY_HINT.nextNode()
                    );

                }
                stream_QUERY_HINT.reset();

                adaptor.addChild(root_1, stream_whenClauses.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mergeStatement"


    public static class whenClauses_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "whenClauses"
    // HiveParser.g:2873:1: whenClauses : ( whenMatchedAndClause | whenMatchedThenClause )* ( whenNotMatchedClause )? ;
    public final HiveParser.whenClauses_return whenClauses() throws RecognitionException {
        HiveParser.whenClauses_return retval = new HiveParser.whenClauses_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        HiveParser.whenMatchedAndClause_return whenMatchedAndClause1038 =null;

        HiveParser.whenMatchedThenClause_return whenMatchedThenClause1039 =null;

        HiveParser.whenNotMatchedClause_return whenNotMatchedClause1040 =null;



        try {
            // HiveParser.g:2874:4: ( ( whenMatchedAndClause | whenMatchedThenClause )* ( whenNotMatchedClause )? )
            // HiveParser.g:2875:4: ( whenMatchedAndClause | whenMatchedThenClause )* ( whenNotMatchedClause )?
            {
            root_0 = (ASTNode)adaptor.nil();


            // HiveParser.g:2875:4: ( whenMatchedAndClause | whenMatchedThenClause )*
            loop344:
            do {
                int alt344=3;
                int LA344_0 = input.LA(1);

                if ( (LA344_0==KW_WHEN) ) {
                    int LA344_1 = input.LA(2);

                    if ( (LA344_1==KW_MATCHED) ) {
                        int LA344_4 = input.LA(3);

                        if ( (LA344_4==KW_AND) ) {
                            alt344=1;
                        }
                        else if ( (LA344_4==KW_THEN) ) {
                            alt344=2;
                        }


                    }


                }


                switch (alt344) {
            	case 1 :
            	    // HiveParser.g:2875:5: whenMatchedAndClause
            	    {
            	    pushFollow(FOLLOW_whenMatchedAndClause_in_whenClauses18472);
            	    whenMatchedAndClause1038=whenMatchedAndClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenMatchedAndClause1038.getTree());

            	    }
            	    break;
            	case 2 :
            	    // HiveParser.g:2875:26: whenMatchedThenClause
            	    {
            	    pushFollow(FOLLOW_whenMatchedThenClause_in_whenClauses18474);
            	    whenMatchedThenClause1039=whenMatchedThenClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenMatchedThenClause1039.getTree());

            	    }
            	    break;

            	default :
            	    break loop344;
                }
            } while (true);


            // HiveParser.g:2875:50: ( whenNotMatchedClause )?
            int alt345=2;
            int LA345_0 = input.LA(1);

            if ( (LA345_0==KW_WHEN) ) {
                alt345=1;
            }
            switch (alt345) {
                case 1 :
                    // HiveParser.g:2875:50: whenNotMatchedClause
                    {
                    pushFollow(FOLLOW_whenNotMatchedClause_in_whenClauses18478);
                    whenNotMatchedClause1040=whenNotMatchedClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenNotMatchedClause1040.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "whenClauses"


    public static class whenNotMatchedClause_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "whenNotMatchedClause"
    // HiveParser.g:2877:1: whenNotMatchedClause : KW_WHEN KW_NOT KW_MATCHED ( KW_AND expression )? KW_THEN KW_INSERT (targetCols= columnParenthesesList )? KW_VALUES valueRowConstructor -> ^( TOK_NOT_MATCHED ^( TOK_INSERT ( $targetCols)? valueRowConstructor ) ( expression )? ) ;
    public final HiveParser.whenNotMatchedClause_return whenNotMatchedClause() throws RecognitionException {
        HiveParser.whenNotMatchedClause_return retval = new HiveParser.whenNotMatchedClause_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_WHEN1041=null;
        Token KW_NOT1042=null;
        Token KW_MATCHED1043=null;
        Token KW_AND1044=null;
        Token KW_THEN1046=null;
        Token KW_INSERT1047=null;
        Token KW_VALUES1048=null;
        HiveParser.columnParenthesesList_return targetCols =null;

        HiveParser_IdentifiersParser.expression_return expression1045 =null;

        HiveParser_FromClauseParser.valueRowConstructor_return valueRowConstructor1049 =null;


        ASTNode KW_WHEN1041_tree=null;
        ASTNode KW_NOT1042_tree=null;
        ASTNode KW_MATCHED1043_tree=null;
        ASTNode KW_AND1044_tree=null;
        ASTNode KW_THEN1046_tree=null;
        ASTNode KW_INSERT1047_tree=null;
        ASTNode KW_VALUES1048_tree=null;
        RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleTokenStream stream_KW_AND=new RewriteRuleTokenStream(adaptor,"token KW_AND");
        RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
        RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
        RewriteRuleTokenStream stream_KW_MATCHED=new RewriteRuleTokenStream(adaptor,"token KW_MATCHED");
        RewriteRuleTokenStream stream_KW_VALUES=new RewriteRuleTokenStream(adaptor,"token KW_VALUES");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_columnParenthesesList=new RewriteRuleSubtreeStream(adaptor,"rule columnParenthesesList");
        RewriteRuleSubtreeStream stream_valueRowConstructor=new RewriteRuleSubtreeStream(adaptor,"rule valueRowConstructor");
         pushMsg("WHEN NOT MATCHED clause", state); 
        try {
            // HiveParser.g:2880:4: ( KW_WHEN KW_NOT KW_MATCHED ( KW_AND expression )? KW_THEN KW_INSERT (targetCols= columnParenthesesList )? KW_VALUES valueRowConstructor -> ^( TOK_NOT_MATCHED ^( TOK_INSERT ( $targetCols)? valueRowConstructor ) ( expression )? ) )
            // HiveParser.g:2881:3: KW_WHEN KW_NOT KW_MATCHED ( KW_AND expression )? KW_THEN KW_INSERT (targetCols= columnParenthesesList )? KW_VALUES valueRowConstructor
            {
            KW_WHEN1041=(Token)match(input,KW_WHEN,FOLLOW_KW_WHEN_in_whenNotMatchedClause18505); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_WHEN.add(KW_WHEN1041);


            KW_NOT1042=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_whenNotMatchedClause18507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT1042);


            KW_MATCHED1043=(Token)match(input,KW_MATCHED,FOLLOW_KW_MATCHED_in_whenNotMatchedClause18509); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MATCHED.add(KW_MATCHED1043);


            // HiveParser.g:2881:29: ( KW_AND expression )?
            int alt346=2;
            int LA346_0 = input.LA(1);

            if ( (LA346_0==KW_AND) ) {
                alt346=1;
            }
            switch (alt346) {
                case 1 :
                    // HiveParser.g:2881:30: KW_AND expression
                    {
                    KW_AND1044=(Token)match(input,KW_AND,FOLLOW_KW_AND_in_whenNotMatchedClause18512); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_AND.add(KW_AND1044);


                    pushFollow(FOLLOW_expression_in_whenNotMatchedClause18514);
                    expression1045=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression1045.getTree());

                    }
                    break;

            }


            KW_THEN1046=(Token)match(input,KW_THEN,FOLLOW_KW_THEN_in_whenNotMatchedClause18518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_THEN.add(KW_THEN1046);


            KW_INSERT1047=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_whenNotMatchedClause18520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT1047);


            // HiveParser.g:2881:68: (targetCols= columnParenthesesList )?
            int alt347=2;
            int LA347_0 = input.LA(1);

            if ( (LA347_0==LPAREN) ) {
                alt347=1;
            }
            switch (alt347) {
                case 1 :
                    // HiveParser.g:2881:69: targetCols= columnParenthesesList
                    {
                    pushFollow(FOLLOW_columnParenthesesList_in_whenNotMatchedClause18525);
                    targetCols=columnParenthesesList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnParenthesesList.add(targetCols.getTree());

                    }
                    break;

            }


            KW_VALUES1048=(Token)match(input,KW_VALUES,FOLLOW_KW_VALUES_in_whenNotMatchedClause18529); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_VALUES.add(KW_VALUES1048);


            pushFollow(FOLLOW_valueRowConstructor_in_whenNotMatchedClause18531);
            valueRowConstructor1049=valueRowConstructor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_valueRowConstructor.add(valueRowConstructor1049.getTree());

            // AST REWRITE
            // elements: targetCols, valueRowConstructor, expression
            // token labels: 
            // rule labels: targetCols, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_targetCols=new RewriteRuleSubtreeStream(adaptor,"rule targetCols",targetCols!=null?targetCols.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2881:134: -> ^( TOK_NOT_MATCHED ^( TOK_INSERT ( $targetCols)? valueRowConstructor ) ( expression )? )
            {
                // HiveParser.g:2882:5: ^( TOK_NOT_MATCHED ^( TOK_INSERT ( $targetCols)? valueRowConstructor ) ( expression )? )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_NOT_MATCHED, "TOK_NOT_MATCHED")
                , root_1);

                // HiveParser.g:2882:23: ^( TOK_INSERT ( $targetCols)? valueRowConstructor )
                {
                ASTNode root_2 = (ASTNode)adaptor.nil();
                root_2 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT")
                , root_2);

                // HiveParser.g:2882:37: ( $targetCols)?
                if ( stream_targetCols.hasNext() ) {
                    adaptor.addChild(root_2, stream_targetCols.nextTree());

                }
                stream_targetCols.reset();

                adaptor.addChild(root_2, stream_valueRowConstructor.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // HiveParser.g:2882:70: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "whenNotMatchedClause"


    public static class whenMatchedAndClause_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "whenMatchedAndClause"
    // HiveParser.g:2884:1: whenMatchedAndClause : KW_WHEN KW_MATCHED KW_AND expression KW_THEN updateOrDelete -> ^( TOK_MATCHED updateOrDelete expression ) ;
    public final HiveParser.whenMatchedAndClause_return whenMatchedAndClause() throws RecognitionException {
        HiveParser.whenMatchedAndClause_return retval = new HiveParser.whenMatchedAndClause_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_WHEN1050=null;
        Token KW_MATCHED1051=null;
        Token KW_AND1052=null;
        Token KW_THEN1054=null;
        HiveParser_IdentifiersParser.expression_return expression1053 =null;

        HiveParser.updateOrDelete_return updateOrDelete1055 =null;


        ASTNode KW_WHEN1050_tree=null;
        ASTNode KW_MATCHED1051_tree=null;
        ASTNode KW_AND1052_tree=null;
        ASTNode KW_THEN1054_tree=null;
        RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
        RewriteRuleTokenStream stream_KW_AND=new RewriteRuleTokenStream(adaptor,"token KW_AND");
        RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
        RewriteRuleTokenStream stream_KW_MATCHED=new RewriteRuleTokenStream(adaptor,"token KW_MATCHED");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_updateOrDelete=new RewriteRuleSubtreeStream(adaptor,"rule updateOrDelete");
         pushMsg("WHEN MATCHED AND clause", state); 
        try {
            // HiveParser.g:2887:3: ( KW_WHEN KW_MATCHED KW_AND expression KW_THEN updateOrDelete -> ^( TOK_MATCHED updateOrDelete expression ) )
            // HiveParser.g:2888:3: KW_WHEN KW_MATCHED KW_AND expression KW_THEN updateOrDelete
            {
            KW_WHEN1050=(Token)match(input,KW_WHEN,FOLLOW_KW_WHEN_in_whenMatchedAndClause18578); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_WHEN.add(KW_WHEN1050);


            KW_MATCHED1051=(Token)match(input,KW_MATCHED,FOLLOW_KW_MATCHED_in_whenMatchedAndClause18580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MATCHED.add(KW_MATCHED1051);


            KW_AND1052=(Token)match(input,KW_AND,FOLLOW_KW_AND_in_whenMatchedAndClause18582); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_AND.add(KW_AND1052);


            pushFollow(FOLLOW_expression_in_whenMatchedAndClause18584);
            expression1053=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression1053.getTree());

            KW_THEN1054=(Token)match(input,KW_THEN,FOLLOW_KW_THEN_in_whenMatchedAndClause18586); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_THEN.add(KW_THEN1054);


            pushFollow(FOLLOW_updateOrDelete_in_whenMatchedAndClause18588);
            updateOrDelete1055=updateOrDelete();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_updateOrDelete.add(updateOrDelete1055.getTree());

            // AST REWRITE
            // elements: updateOrDelete, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2888:63: -> ^( TOK_MATCHED updateOrDelete expression )
            {
                // HiveParser.g:2889:5: ^( TOK_MATCHED updateOrDelete expression )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_MATCHED, "TOK_MATCHED")
                , root_1);

                adaptor.addChild(root_1, stream_updateOrDelete.nextTree());

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "whenMatchedAndClause"


    public static class whenMatchedThenClause_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "whenMatchedThenClause"
    // HiveParser.g:2891:1: whenMatchedThenClause : KW_WHEN KW_MATCHED KW_THEN updateOrDelete -> ^( TOK_MATCHED updateOrDelete ) ;
    public final HiveParser.whenMatchedThenClause_return whenMatchedThenClause() throws RecognitionException {
        HiveParser.whenMatchedThenClause_return retval = new HiveParser.whenMatchedThenClause_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_WHEN1056=null;
        Token KW_MATCHED1057=null;
        Token KW_THEN1058=null;
        HiveParser.updateOrDelete_return updateOrDelete1059 =null;


        ASTNode KW_WHEN1056_tree=null;
        ASTNode KW_MATCHED1057_tree=null;
        ASTNode KW_THEN1058_tree=null;
        RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
        RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
        RewriteRuleTokenStream stream_KW_MATCHED=new RewriteRuleTokenStream(adaptor,"token KW_MATCHED");
        RewriteRuleSubtreeStream stream_updateOrDelete=new RewriteRuleSubtreeStream(adaptor,"rule updateOrDelete");
         pushMsg("WHEN MATCHED THEN clause", state); 
        try {
            // HiveParser.g:2894:3: ( KW_WHEN KW_MATCHED KW_THEN updateOrDelete -> ^( TOK_MATCHED updateOrDelete ) )
            // HiveParser.g:2895:3: KW_WHEN KW_MATCHED KW_THEN updateOrDelete
            {
            KW_WHEN1056=(Token)match(input,KW_WHEN,FOLLOW_KW_WHEN_in_whenMatchedThenClause18626); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_WHEN.add(KW_WHEN1056);


            KW_MATCHED1057=(Token)match(input,KW_MATCHED,FOLLOW_KW_MATCHED_in_whenMatchedThenClause18628); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_MATCHED.add(KW_MATCHED1057);


            KW_THEN1058=(Token)match(input,KW_THEN,FOLLOW_KW_THEN_in_whenMatchedThenClause18630); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_THEN.add(KW_THEN1058);


            pushFollow(FOLLOW_updateOrDelete_in_whenMatchedThenClause18632);
            updateOrDelete1059=updateOrDelete();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_updateOrDelete.add(updateOrDelete1059.getTree());

            // AST REWRITE
            // elements: updateOrDelete
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2895:45: -> ^( TOK_MATCHED updateOrDelete )
            {
                // HiveParser.g:2896:6: ^( TOK_MATCHED updateOrDelete )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_MATCHED, "TOK_MATCHED")
                , root_1);

                adaptor.addChild(root_1, stream_updateOrDelete.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "whenMatchedThenClause"


    public static class updateOrDelete_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "updateOrDelete"
    // HiveParser.g:2898:1: updateOrDelete : ( KW_UPDATE setColumnsClause -> ^( TOK_UPDATE setColumnsClause ) | KW_DELETE -> TOK_DELETE );
    public final HiveParser.updateOrDelete_return updateOrDelete() throws RecognitionException {
        HiveParser.updateOrDelete_return retval = new HiveParser.updateOrDelete_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_UPDATE1060=null;
        Token KW_DELETE1062=null;
        HiveParser.setColumnsClause_return setColumnsClause1061 =null;


        ASTNode KW_UPDATE1060_tree=null;
        ASTNode KW_DELETE1062_tree=null;
        RewriteRuleTokenStream stream_KW_DELETE=new RewriteRuleTokenStream(adaptor,"token KW_DELETE");
        RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
        RewriteRuleSubtreeStream stream_setColumnsClause=new RewriteRuleSubtreeStream(adaptor,"rule setColumnsClause");
        try {
            // HiveParser.g:2899:4: ( KW_UPDATE setColumnsClause -> ^( TOK_UPDATE setColumnsClause ) | KW_DELETE -> TOK_DELETE )
            int alt348=2;
            int LA348_0 = input.LA(1);

            if ( (LA348_0==KW_UPDATE) ) {
                alt348=1;
            }
            else if ( (LA348_0==KW_DELETE) ) {
                alt348=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 0, input);

                throw nvae;

            }
            switch (alt348) {
                case 1 :
                    // HiveParser.g:2900:4: KW_UPDATE setColumnsClause
                    {
                    KW_UPDATE1060=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_updateOrDelete18661); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE1060);


                    pushFollow(FOLLOW_setColumnsClause_in_updateOrDelete18663);
                    setColumnsClause1061=setColumnsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_setColumnsClause.add(setColumnsClause1061.getTree());

                    // AST REWRITE
                    // elements: setColumnsClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2900:31: -> ^( TOK_UPDATE setColumnsClause )
                    {
                        // HiveParser.g:2900:34: ^( TOK_UPDATE setColumnsClause )
                        {
                        ASTNode root_1 = (ASTNode)adaptor.nil();
                        root_1 = (ASTNode)adaptor.becomeRoot(
                        (ASTNode)adaptor.create(TOK_UPDATE, "TOK_UPDATE")
                        , root_1);

                        adaptor.addChild(root_1, stream_setColumnsClause.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // HiveParser.g:2902:4: KW_DELETE
                    {
                    KW_DELETE1062=(Token)match(input,KW_DELETE,FOLLOW_KW_DELETE_in_updateOrDelete18681); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_KW_DELETE.add(KW_DELETE1062);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (ASTNode)adaptor.nil();
                    // 2902:14: -> TOK_DELETE
                    {
                        adaptor.addChild(root_0, 
                        (ASTNode)adaptor.create(TOK_DELETE, "TOK_DELETE")
                        );

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "updateOrDelete"


    public static class killQueryStatement_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "killQueryStatement"
    // HiveParser.g:2908:1: killQueryStatement : KW_KILL KW_QUERY ( StringLiteral )+ -> ^( TOK_KILL_QUERY ( StringLiteral )+ ) ;
    public final HiveParser.killQueryStatement_return killQueryStatement() throws RecognitionException {
        HiveParser.killQueryStatement_return retval = new HiveParser.killQueryStatement_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token KW_KILL1063=null;
        Token KW_QUERY1064=null;
        Token StringLiteral1065=null;

        ASTNode KW_KILL1063_tree=null;
        ASTNode KW_QUERY1064_tree=null;
        ASTNode StringLiteral1065_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_KILL=new RewriteRuleTokenStream(adaptor,"token KW_KILL");
        RewriteRuleTokenStream stream_KW_QUERY=new RewriteRuleTokenStream(adaptor,"token KW_QUERY");

         pushMsg("kill query statement", state); 
        try {
            // HiveParser.g:2911:3: ( KW_KILL KW_QUERY ( StringLiteral )+ -> ^( TOK_KILL_QUERY ( StringLiteral )+ ) )
            // HiveParser.g:2912:3: KW_KILL KW_QUERY ( StringLiteral )+
            {
            KW_KILL1063=(Token)match(input,KW_KILL,FOLLOW_KW_KILL_in_killQueryStatement18713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_KILL.add(KW_KILL1063);


            KW_QUERY1064=(Token)match(input,KW_QUERY,FOLLOW_KW_QUERY_in_killQueryStatement18715); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_QUERY.add(KW_QUERY1064);


            // HiveParser.g:2912:20: ( StringLiteral )+
            int cnt349=0;
            loop349:
            do {
                int alt349=2;
                int LA349_0 = input.LA(1);

                if ( (LA349_0==StringLiteral) ) {
                    alt349=1;
                }


                switch (alt349) {
            	case 1 :
            	    // HiveParser.g:2912:22: StringLiteral
            	    {
            	    StringLiteral1065=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_killQueryStatement18719); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral1065);


            	    }
            	    break;

            	default :
            	    if ( cnt349 >= 1 ) break loop349;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(349, input);
                        throw eee;
                }
                cnt349++;
            } while (true);


            // AST REWRITE
            // elements: StringLiteral
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2912:39: -> ^( TOK_KILL_QUERY ( StringLiteral )+ )
            {
                // HiveParser.g:2912:42: ^( TOK_KILL_QUERY ( StringLiteral )+ )
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_KILL_QUERY, "TOK_KILL_QUERY")
                , root_1);

                if ( !(stream_StringLiteral.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_StringLiteral.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_StringLiteral.nextNode()
                    );

                }
                stream_StringLiteral.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) { popMsg(state); }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "killQueryStatement"


    public static class compactionId_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compactionId"
    // HiveParser.g:2918:1: compactionId : KW_COMPACT_ID EQUAL compactId= Number -> ^( TOK_COMPACT_ID $compactId) ;
    public final HiveParser.compactionId_return compactionId() throws RecognitionException {
        HiveParser.compactionId_return retval = new HiveParser.compactionId_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token compactId=null;
        Token KW_COMPACT_ID1066=null;
        Token EQUAL1067=null;

        ASTNode compactId_tree=null;
        ASTNode KW_COMPACT_ID1066_tree=null;
        ASTNode EQUAL1067_tree=null;
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleTokenStream stream_KW_COMPACT_ID=new RewriteRuleTokenStream(adaptor,"token KW_COMPACT_ID");

        try {
            // HiveParser.g:2919:3: ( KW_COMPACT_ID EQUAL compactId= Number -> ^( TOK_COMPACT_ID $compactId) )
            // HiveParser.g:2919:5: KW_COMPACT_ID EQUAL compactId= Number
            {
            KW_COMPACT_ID1066=(Token)match(input,KW_COMPACT_ID,FOLLOW_KW_COMPACT_ID_in_compactionId18750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_COMPACT_ID.add(KW_COMPACT_ID1066);


            EQUAL1067=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_compactionId18752); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL1067);


            compactId=(Token)match(input,Number,FOLLOW_Number_in_compactionId18756); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Number.add(compactId);


            // AST REWRITE
            // elements: compactId
            // token labels: compactId
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_compactId=new RewriteRuleTokenStream(adaptor,"token compactId",compactId);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2919:42: -> ^( TOK_COMPACT_ID $compactId)
            {
                // HiveParser.g:2919:45: ^( TOK_COMPACT_ID $compactId)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_COMPACT_ID, "TOK_COMPACT_ID")
                , root_1);

                adaptor.addChild(root_1, stream_compactId.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compactionId"


    public static class compactionPool_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compactionPool"
    // HiveParser.g:2921:1: compactionPool : KW_POOL poolName= StringLiteral -> ^( TOK_COMPACT_POOL $poolName) ;
    public final HiveParser.compactionPool_return compactionPool() throws RecognitionException {
        HiveParser.compactionPool_return retval = new HiveParser.compactionPool_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token poolName=null;
        Token KW_POOL1068=null;

        ASTNode poolName_tree=null;
        ASTNode KW_POOL1068_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_POOL=new RewriteRuleTokenStream(adaptor,"token KW_POOL");

        try {
            // HiveParser.g:2922:3: ( KW_POOL poolName= StringLiteral -> ^( TOK_COMPACT_POOL $poolName) )
            // HiveParser.g:2922:5: KW_POOL poolName= StringLiteral
            {
            KW_POOL1068=(Token)match(input,KW_POOL,FOLLOW_KW_POOL_in_compactionPool18777); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_POOL.add(KW_POOL1068);


            poolName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_compactionPool18781); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(poolName);


            // AST REWRITE
            // elements: poolName
            // token labels: poolName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_poolName=new RewriteRuleTokenStream(adaptor,"token poolName",poolName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2922:36: -> ^( TOK_COMPACT_POOL $poolName)
            {
                // HiveParser.g:2922:39: ^( TOK_COMPACT_POOL $poolName)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_COMPACT_POOL, "TOK_COMPACT_POOL")
                , root_1);

                adaptor.addChild(root_1, stream_poolName.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compactionPool"


    public static class compactionType_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compactionType"
    // HiveParser.g:2924:1: compactionType : KW_TYPE compactType= StringLiteral -> ^( TOK_COMPACTION_TYPE $compactType) ;
    public final HiveParser.compactionType_return compactionType() throws RecognitionException {
        HiveParser.compactionType_return retval = new HiveParser.compactionType_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token compactType=null;
        Token KW_TYPE1069=null;

        ASTNode compactType_tree=null;
        ASTNode KW_TYPE1069_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_TYPE=new RewriteRuleTokenStream(adaptor,"token KW_TYPE");

        try {
            // HiveParser.g:2925:3: ( KW_TYPE compactType= StringLiteral -> ^( TOK_COMPACTION_TYPE $compactType) )
            // HiveParser.g:2925:5: KW_TYPE compactType= StringLiteral
            {
            KW_TYPE1069=(Token)match(input,KW_TYPE,FOLLOW_KW_TYPE_in_compactionType18802); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_TYPE.add(KW_TYPE1069);


            compactType=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_compactionType18806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(compactType);


            // AST REWRITE
            // elements: compactType
            // token labels: compactType
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_compactType=new RewriteRuleTokenStream(adaptor,"token compactType",compactType);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2925:39: -> ^( TOK_COMPACTION_TYPE $compactType)
            {
                // HiveParser.g:2925:42: ^( TOK_COMPACTION_TYPE $compactType)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_COMPACTION_TYPE, "TOK_COMPACTION_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_compactType.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compactionType"


    public static class compactionStatus_return extends ParserRuleReturnScope {
        ASTNode tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compactionStatus"
    // HiveParser.g:2927:1: compactionStatus : KW_STATUS status= StringLiteral -> ^( TOK_COMPACTION_STATUS $status) ;
    public final HiveParser.compactionStatus_return compactionStatus() throws RecognitionException {
        HiveParser.compactionStatus_return retval = new HiveParser.compactionStatus_return();
        retval.start = input.LT(1);


        ASTNode root_0 = null;

        Token status=null;
        Token KW_STATUS1070=null;

        ASTNode status_tree=null;
        ASTNode KW_STATUS1070_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_STATUS=new RewriteRuleTokenStream(adaptor,"token KW_STATUS");

        try {
            // HiveParser.g:2928:3: ( KW_STATUS status= StringLiteral -> ^( TOK_COMPACTION_STATUS $status) )
            // HiveParser.g:2928:5: KW_STATUS status= StringLiteral
            {
            KW_STATUS1070=(Token)match(input,KW_STATUS,FOLLOW_KW_STATUS_in_compactionStatus18827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_KW_STATUS.add(KW_STATUS1070);


            status=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_compactionStatus18831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_StringLiteral.add(status);


            // AST REWRITE
            // elements: status
            // token labels: status
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleTokenStream stream_status=new RewriteRuleTokenStream(adaptor,"token status",status);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (ASTNode)adaptor.nil();
            // 2928:36: -> ^( TOK_COMPACTION_STATUS $status)
            {
                // HiveParser.g:2928:39: ^( TOK_COMPACTION_STATUS $status)
                {
                ASTNode root_1 = (ASTNode)adaptor.nil();
                root_1 = (ASTNode)adaptor.becomeRoot(
                (ASTNode)adaptor.create(TOK_COMPACTION_STATUS, "TOK_COMPACTION_STATUS")
                , root_1);

                adaptor.addChild(root_1, stream_status.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (ASTNode)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compactionStatus"

    // $ANTLR start synpred1_HiveParser
    public final void synpred1_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1032:7: ( grantPrivileges )
        // HiveParser.g:1032:8: grantPrivileges
        {
        pushFollow(FOLLOW_grantPrivileges_in_synpred1_HiveParser2597);
        grantPrivileges();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_HiveParser

    // $ANTLR start synpred2_HiveParser
    public final void synpred2_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1033:7: ( revokePrivileges )
        // HiveParser.g:1033:8: revokePrivileges
        {
        pushFollow(FOLLOW_revokePrivileges_in_synpred2_HiveParser2611);
        revokePrivileges();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_HiveParser

    // $ANTLR start synpred3_HiveParser
    public final void synpred3_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1211:4: ( KW_ELEM_TYPE )
        // HiveParser.g:1211:5: KW_ELEM_TYPE
        {
        match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_synpred3_HiveParser3906); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_HiveParser

    // $ANTLR start synpred4_HiveParser
    public final void synpred4_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1213:4: ( KW_KEY_TYPE )
        // HiveParser.g:1213:5: KW_KEY_TYPE
        {
        match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_synpred4_HiveParser3922); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_HiveParser

    // $ANTLR start synpred5_HiveParser
    public final void synpred5_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1215:4: ( KW_VALUE_TYPE )
        // HiveParser.g:1215:5: KW_VALUE_TYPE
        {
        match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_synpred5_HiveParser3938); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_HiveParser

    // $ANTLR start synpred6_HiveParser
    public final void synpred6_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1239:5: ( KW_DATABASE | KW_SCHEMA )
        // HiveParser.g:
        {
        if ( input.LA(1)==KW_DATABASE||input.LA(1)==KW_SCHEMA ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred6_HiveParser

    // $ANTLR start synpred7_HiveParser
    public final void synpred7_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1241:5: ( KW_DATACONNECTOR )
        // HiveParser.g:1241:6: KW_DATACONNECTOR
        {
        match(input,KW_DATACONNECTOR,FOLLOW_KW_DATACONNECTOR_in_synpred7_HiveParser4145); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_HiveParser

    // $ANTLR start synpred8_HiveParser
    public final void synpred8_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1243:5: ( KW_FUNCTION )
        // HiveParser.g:1243:6: KW_FUNCTION
        {
        match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_synpred8_HiveParser4186); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_HiveParser

    // $ANTLR start synpred9_HiveParser
    public final void synpred9_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1245:5: ( KW_FORMATTED | KW_EXTENDED )
        // HiveParser.g:
        {
        if ( input.LA(1)==KW_EXTENDED||input.LA(1)==KW_FORMATTED ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred9_HiveParser

    // $ANTLR start synpred10_HiveParser
    public final void synpred10_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1256:7: ( KW_COMPUTE )
        // HiveParser.g:1256:8: KW_COMPUTE
        {
        match(input,KW_COMPUTE,FOLLOW_KW_COMPUTE_in_synpred10_HiveParser4339); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_HiveParser

    // $ANTLR start synpred11_HiveParser
    public final void synpred11_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1260:7: ( KW_CACHE )
        // HiveParser.g:1260:8: KW_CACHE
        {
        match(input,KW_CACHE,FOLLOW_KW_CACHE_in_synpred11_HiveParser4467); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_HiveParser

    // $ANTLR start synpred12_HiveParser
    public final void synpred12_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1277:9: ( KW_DATABASE | KW_SCHEMA )
        // HiveParser.g:
        {
        if ( input.LA(1)==KW_DATABASE||input.LA(1)==KW_SCHEMA ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred12_HiveParser

    // $ANTLR start synpred13_HiveParser
    public final void synpred13_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1286:7: ( KW_DATABASE | KW_SCHEMA )
        // HiveParser.g:
        {
        if ( input.LA(1)==KW_DATABASE||input.LA(1)==KW_SCHEMA ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred13_HiveParser

    // $ANTLR start synpred14_HiveParser
    public final void synpred14_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1292:7: ( KW_COMPACT_ID )
        // HiveParser.g:1292:8: KW_COMPACT_ID
        {
        match(input,KW_COMPACT_ID,FOLLOW_KW_COMPACT_ID_in_synpred14_HiveParser5166); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_HiveParser

    // $ANTLR start synpred15_HiveParser
    public final void synpred15_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1294:7: ( KW_DATABASE | KW_SCHEMA )
        // HiveParser.g:
        {
        if ( input.LA(1)==KW_DATABASE||input.LA(1)==KW_SCHEMA ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred15_HiveParser

    // $ANTLR start synpred16_HiveParser
    public final void synpred16_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1419:5: ( KW_ALL )
        // HiveParser.g:1419:6: KW_ALL
        {
        match(input,KW_ALL,FOLLOW_KW_ALL_in_synpred16_HiveParser6266); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_HiveParser

    // $ANTLR start synpred17_HiveParser
    public final void synpred17_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1421:5: ( KW_NONE )
        // HiveParser.g:1421:6: KW_NONE
        {
        match(input,KW_NONE,FOLLOW_KW_NONE_in_synpred17_HiveParser6297); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_HiveParser

    // $ANTLR start synpred18_HiveParser
    public final void synpred18_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1445:7: ( KW_ALL )
        // HiveParser.g:1445:8: KW_ALL
        {
        match(input,KW_ALL,FOLLOW_KW_ALL_in_synpred18_HiveParser6471); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_HiveParser

    // $ANTLR start synpred19_HiveParser
    public final void synpred19_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:1883:117: ( storedAsDirs )
        // HiveParser.g:1883:118: storedAsDirs
        {
        pushFollow(FOLLOW_storedAsDirs_in_synpred19_HiveParser10201);
        storedAsDirs();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_HiveParser

    // $ANTLR start synpred20_HiveParser
    public final void synpred20_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:2014:7: ( KW_STORED KW_AS KW_INPUTFORMAT )
        // HiveParser.g:2014:8: KW_STORED KW_AS KW_INPUTFORMAT
        {
        match(input,KW_STORED,FOLLOW_KW_STORED_in_synpred20_HiveParser11182); if (state.failed) return ;

        match(input,KW_AS,FOLLOW_KW_AS_in_synpred20_HiveParser11184); if (state.failed) return ;

        match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_synpred20_HiveParser11186); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_HiveParser

    // $ANTLR start synpred21_HiveParser
    public final void synpred21_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:2070:25: ( KW_ELEM_TYPE )
        // HiveParser.g:2070:26: KW_ELEM_TYPE
        {
        match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_synpred21_HiveParser11735); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_HiveParser

    // $ANTLR start synpred22_HiveParser
    public final void synpred22_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:2070:58: ( KW_KEY_TYPE )
        // HiveParser.g:2070:59: KW_KEY_TYPE
        {
        match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_synpred22_HiveParser11745); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_HiveParser

    // $ANTLR start synpred23_HiveParser
    public final void synpred23_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:2070:89: ( KW_VALUE_TYPE )
        // HiveParser.g:2070:90: KW_VALUE_TYPE
        {
        match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_synpred23_HiveParser11755); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_HiveParser

    // $ANTLR start synpred24_HiveParser
    public final void synpred24_HiveParser_fragment() throws RecognitionException {
        // HiveParser.g:2762:5: ( KW_DEFAULT (~ DOT | EOF ) )
        // HiveParser.g:2762:6: KW_DEFAULT (~ DOT | EOF )
        {
        match(input,KW_DEFAULT,FOLLOW_KW_DEFAULT_in_synpred24_HiveParser17883); if (state.failed) return ;

        if ( input.LA(1)==EOF||(input.LA(1) >= AMPERSAND && input.LA(1) <= DOLLAR)||(input.LA(1) >= Digit && input.LA(1) <= TOK_YEAR) ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred24_HiveParser

    // Delegated rules
    public HiveParser_AlterClauseParser.alterStatementSuffixRenameCol_return alterStatementSuffixRenameCol() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixRenameCol(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixClusterbySortby_return alterStatementSuffixClusterbySortby() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixClusterbySortby(); }

    public HiveParser_FromClauseParser.tableAlias_return tableAlias() throws RecognitionException { return gFromClauseParser.tableAlias(); }

    public HiveParser_FromClauseParser.tableAllColumns_return tableAllColumns() throws RecognitionException { return gFromClauseParser.tableAllColumns(); }

    public HiveParser_IdentifiersParser.booleanValueTok_return booleanValueTok() throws RecognitionException { return gIdentifiersParser.booleanValueTok(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixStatsPart_return alterStatementSuffixStatsPart() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixStatsPart(); }

    public HiveParser_AlterClauseParser.blocking_return blocking() throws RecognitionException { return gAlterClauseParser.blocking(); }

    public HiveParser_SelectClauseParser.selectExpressionList_return selectExpressionList() throws RecognitionException { return gSelectClauseParser.selectExpressionList(); }

    public HiveParser_ResourcePlanParser.comparisionOperator_return comparisionOperator() throws RecognitionException { return gResourcePlanParser.comparisionOperator(); }

    public HiveParser_IdentifiersParser.precedenceAndExpression_return precedenceAndExpression() throws RecognitionException { return gIdentifiersParser.precedenceAndExpression(); }

    public HiveParser_IdentifiersParser.tableOrPartition_return tableOrPartition() throws RecognitionException { return gIdentifiersParser.tableOrPartition(); }

    public HiveParser_IdentifiersParser.precedenceBitwiseOrExpression_return precedenceBitwiseOrExpression() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseOrExpression(); }

    public HiveParser_IdentifiersParser.constant_return constant() throws RecognitionException { return gIdentifiersParser.constant(); }

    public HiveParser_AlterClauseParser.alterDatabaseSuffixSetManagedLocation_return alterDatabaseSuffixSetManagedLocation() throws RecognitionException { return gAlterClauseParser.alterDatabaseSuffixSetManagedLocation(); }

    public HiveParser_IdentifiersParser.precedenceEqualExpression_return precedenceEqualExpression() throws RecognitionException { return gIdentifiersParser.precedenceEqualExpression(); }

    public HiveParser_PrepareStatementParser.executeParamList_return executeParamList() throws RecognitionException { return gPrepareStatementParser.executeParamList(); }

    public HiveParser_ResourcePlanParser.rpAssign_return rpAssign() throws RecognitionException { return gResourcePlanParser.rpAssign(); }

    public HiveParser_IdentifiersParser.precedencePlusExpression_return precedencePlusExpression() throws RecognitionException { return gIdentifiersParser.precedencePlusExpression(); }

    public HiveParser_ResourcePlanParser.dropPoolStatement_return dropPoolStatement() throws RecognitionException { return gResourcePlanParser.dropPoolStatement(); }

    public HiveParser_IdentifiersParser.timestampLiteral_return timestampLiteral() throws RecognitionException { return gIdentifiersParser.timestampLiteral(); }

    public HiveParser_ResourcePlanParser.triggerExpression_return triggerExpression() throws RecognitionException { return gResourcePlanParser.triggerExpression(); }

    public HiveParser_ResourcePlanParser.triggerActionExpression_return triggerActionExpression() throws RecognitionException { return gResourcePlanParser.triggerActionExpression(); }

    public HiveParser_IdentifiersParser.dateLiteral_return dateLiteral() throws RecognitionException { return gIdentifiersParser.dateLiteral(); }

    public HiveParser_IdentifiersParser.precedenceConcatenateExpression_return precedenceConcatenateExpression() throws RecognitionException { return gIdentifiersParser.precedenceConcatenateExpression(); }

    public HiveParser_IdentifiersParser.null_treatment_return null_treatment() throws RecognitionException { return gIdentifiersParser.null_treatment(); }

    public HiveParser_FromClauseParser.valueRowConstructor_return valueRowConstructor() throws RecognitionException { return gFromClauseParser.valueRowConstructor(); }

    public HiveParser_ResourcePlanParser.triggerAndExpression_return triggerAndExpression() throws RecognitionException { return gResourcePlanParser.triggerAndExpression(); }

    public HiveParser_ResourcePlanParser.dropMappingStatement_return dropMappingStatement() throws RecognitionException { return gResourcePlanParser.dropMappingStatement(); }

    public HiveParser_IdentifiersParser.precedenceOrOperator_return precedenceOrOperator() throws RecognitionException { return gIdentifiersParser.precedenceOrOperator(); }

    public HiveParser_AlterClauseParser.alterDataConnectorSuffixSetOwner_return alterDataConnectorSuffixSetOwner() throws RecognitionException { return gAlterClauseParser.alterDataConnectorSuffixSetOwner(); }

    public HiveParser_FromClauseParser.partitioningSpec_return partitioningSpec() throws RecognitionException { return gFromClauseParser.partitioningSpec(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixRenameBranch_return alterStatementSuffixRenameBranch() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixRenameBranch(); }

    public HiveParser_SelectClauseParser.window_frame_boundary_return window_frame_boundary() throws RecognitionException { return gSelectClauseParser.window_frame_boundary(); }

    public HiveParser_CreateDDLParser.dataConnectorUrl_return dataConnectorUrl() throws RecognitionException { return gCreateDDLParser.dataConnectorUrl(); }

    public HiveParser_FromClauseParser.subQuerySource_return subQuerySource() throws RecognitionException { return gFromClauseParser.subQuerySource(); }

    public HiveParser_ResourcePlanParser.dropTriggerStatement_return dropTriggerStatement() throws RecognitionException { return gResourcePlanParser.dropTriggerStatement(); }

    public HiveParser_AlterClauseParser.alterDatabaseSuffixSetOwner_return alterDatabaseSuffixSetOwner() throws RecognitionException { return gAlterClauseParser.alterDatabaseSuffixSetOwner(); }

    public HiveParser_FromClauseParser.viewName_return viewName() throws RecognitionException { return gFromClauseParser.viewName(); }

    public HiveParser_IdentifiersParser.precedenceSimilarExpressionQuantifierPredicate_return precedenceSimilarExpressionQuantifierPredicate(CommonTree t) throws RecognitionException { return gIdentifiersParser.precedenceSimilarExpressionQuantifierPredicate(t); }

    public HiveParser_IdentifiersParser.partitionByClause_return partitionByClause() throws RecognitionException { return gIdentifiersParser.partitionByClause(); }

    public HiveParser_ResourcePlanParser.createPoolStatement_return createPoolStatement() throws RecognitionException { return gResourcePlanParser.createPoolStatement(); }

    public HiveParser_AlterClauseParser.snapshotIdOfRef_return snapshotIdOfRef() throws RecognitionException { return gAlterClauseParser.snapshotIdOfRef(); }

    public HiveParser_IdentifiersParser.sql11ReservedKeywordsUsedAsFunctionName_return sql11ReservedKeywordsUsedAsFunctionName() throws RecognitionException { return gIdentifiersParser.sql11ReservedKeywordsUsedAsFunctionName(); }

    public HiveParser_IdentifiersParser.expressionsInParenthesis_return expressionsInParenthesis(boolean isStruct, boolean forceStruct) throws RecognitionException { return gIdentifiersParser.expressionsInParenthesis(isStruct, forceStruct); }

    public HiveParser_IdentifiersParser.identifier_return identifier() throws RecognitionException { return gIdentifiersParser.identifier(); }

    public HiveParser_ReplClauseParser.replDumpStatement_return replDumpStatement() throws RecognitionException { return gReplClauseParser.replDumpStatement(); }

    public HiveParser_IdentifiersParser.expressionWithAlias_return expressionWithAlias() throws RecognitionException { return gIdentifiersParser.expressionWithAlias(); }

    public HiveParser_IdentifiersParser.booleanValue_return booleanValue() throws RecognitionException { return gIdentifiersParser.booleanValue(); }

    public HiveParser_IdentifiersParser.groupingExpressionSingle_return groupingExpressionSingle() throws RecognitionException { return gIdentifiersParser.groupingExpressionSingle(); }

    public HiveParser_ReplClauseParser.replConfigs_return replConfigs() throws RecognitionException { return gReplClauseParser.replConfigs(); }

    public HiveParser_ResourcePlanParser.triggerActionExpressionStandalone_return triggerActionExpressionStandalone() throws RecognitionException { return gResourcePlanParser.triggerActionExpressionStandalone(); }

    public HiveParser_IdentifiersParser.firstExpressionsWithAlias_return firstExpressionsWithAlias() throws RecognitionException { return gIdentifiersParser.firstExpressionsWithAlias(); }

    public HiveParser_CreateDDLParser.createTableStatement_return createTableStatement() throws RecognitionException { return gCreateDDLParser.createTableStatement(); }

    public HiveParser_ReplClauseParser.replConfigsList_return replConfigsList() throws RecognitionException { return gReplClauseParser.replConfigsList(); }

    public HiveParser_IdentifiersParser.groupingSetExpressionMultiple_return groupingSetExpressionMultiple() throws RecognitionException { return gIdentifiersParser.groupingSetExpressionMultiple(); }

    public HiveParser_FromClauseParser.fromClause_return fromClause() throws RecognitionException { return gFromClauseParser.fromClause(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixUpdateStatsCol_return alterStatementSuffixUpdateStatsCol(boolean partition) throws RecognitionException { return gAlterClauseParser.alterStatementSuffixUpdateStatsCol(partition); }

    public HiveParser_FromClauseParser.joinSource_return joinSource() throws RecognitionException { return gFromClauseParser.joinSource(); }

    public HiveParser_IdentifiersParser.precedenceSimilarExpressionMain_return precedenceSimilarExpressionMain() throws RecognitionException { return gIdentifiersParser.precedenceSimilarExpressionMain(); }

    public HiveParser_IdentifiersParser.precedenceNotExpression_return precedenceNotExpression() throws RecognitionException { return gIdentifiersParser.precedenceNotExpression(); }

    public HiveParser_IdentifiersParser.nonReserved_return nonReserved() throws RecognitionException { return gIdentifiersParser.nonReserved(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixFileFormat_return alterStatementSuffixFileFormat(boolean partition) throws RecognitionException { return gAlterClauseParser.alterStatementSuffixFileFormat(partition); }

    public HiveParser_FromClauseParser.tableName_return tableName() throws RecognitionException { return gFromClauseParser.tableName(); }

    public HiveParser_SelectClauseParser.window_range_expression_return window_range_expression() throws RecognitionException { return gSelectClauseParser.window_range_expression(); }

    public HiveParser_FromClauseParser.uniqueJoinTableSource_return uniqueJoinTableSource() throws RecognitionException { return gFromClauseParser.uniqueJoinTableSource(); }

    public HiveParser_ResourcePlanParser.globalWmStatement_return globalWmStatement() throws RecognitionException { return gResourcePlanParser.globalWmStatement(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixRenamePart_return alterStatementSuffixRenamePart() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixRenamePart(); }

    public HiveParser_IdentifiersParser.precedenceEqualOperator_return precedenceEqualOperator() throws RecognitionException { return gIdentifiersParser.precedenceEqualOperator(); }

    public HiveParser_IdentifiersParser.precedenceAndOperator_return precedenceAndOperator() throws RecognitionException { return gIdentifiersParser.precedenceAndOperator(); }

    public HiveParser_AlterClauseParser.alterDatabaseStatementSuffix_return alterDatabaseStatementSuffix() throws RecognitionException { return gAlterClauseParser.alterDatabaseStatementSuffix(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixSerdeProperties_return alterStatementSuffixSerdeProperties(boolean partition) throws RecognitionException { return gAlterClauseParser.alterStatementSuffixSerdeProperties(partition); }

    public HiveParser_ResourcePlanParser.triggerLiteral_return triggerLiteral() throws RecognitionException { return gResourcePlanParser.triggerLiteral(); }

    public HiveParser_IdentifiersParser.isCondition_return isCondition() throws RecognitionException { return gIdentifiersParser.isCondition(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixUpdateColumns_return alterStatementSuffixUpdateColumns() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixUpdateColumns(); }

    public HiveParser_ResourcePlanParser.poolPath_return poolPath() throws RecognitionException { return gResourcePlanParser.poolPath(); }

    public HiveParser_FromClauseParser.splitSample_return splitSample() throws RecognitionException { return gFromClauseParser.splitSample(); }

    public HiveParser_FromClauseParser.whereClause_return whereClause() throws RecognitionException { return gFromClauseParser.whereClause(); }

    public HiveParser_IdentifiersParser.precedenceSimilarExpressionIn_return precedenceSimilarExpressionIn(CommonTree t) throws RecognitionException { return gIdentifiersParser.precedenceSimilarExpressionIn(t); }

    public HiveParser_IdentifiersParser.atomExpression_return atomExpression() throws RecognitionException { return gIdentifiersParser.atomExpression(); }

    public HiveParser_ResourcePlanParser.replaceResourcePlanStatement_return replaceResourcePlanStatement() throws RecognitionException { return gResourcePlanParser.replaceResourcePlanStatement(); }

    public HiveParser_FromClauseParser.uniqueJoinSource_return uniqueJoinSource() throws RecognitionException { return gFromClauseParser.uniqueJoinSource(); }

    public HiveParser_IdentifiersParser.precedenceSimilarOperator_return precedenceSimilarOperator() throws RecognitionException { return gIdentifiersParser.precedenceSimilarOperator(); }

    public HiveParser_IdentifiersParser.columnRefOrderInParenthesis_return columnRefOrderInParenthesis() throws RecognitionException { return gIdentifiersParser.columnRefOrderInParenthesis(); }

    public HiveParser_IdentifiersParser.whenExpression_return whenExpression() throws RecognitionException { return gIdentifiersParser.whenExpression(); }

    public HiveParser_SelectClauseParser.selectClause_return selectClause() throws RecognitionException { return gSelectClauseParser.selectClause(); }

    public HiveParser_ResourcePlanParser.createMappingStatement_return createMappingStatement() throws RecognitionException { return gResourcePlanParser.createMappingStatement(); }

    public HiveParser_IdentifiersParser.principalIdentifier_return principalIdentifier() throws RecognitionException { return gIdentifiersParser.principalIdentifier(); }

    public HiveParser_IdentifiersParser.timestampLocalTZLiteral_return timestampLocalTZLiteral() throws RecognitionException { return gIdentifiersParser.timestampLocalTZLiteral(); }

    public HiveParser_IdentifiersParser.sysFuncNames_return sysFuncNames() throws RecognitionException { return gIdentifiersParser.sysFuncNames(); }

    public HiveParser_IdentifiersParser.subQueryExpression_return subQueryExpression() throws RecognitionException { return gIdentifiersParser.subQueryExpression(); }

    public HiveParser_IdentifiersParser.timeUnitQualifiers_return timeUnitQualifiers() throws RecognitionException { return gIdentifiersParser.timeUnitQualifiers(); }

    public HiveParser_IdentifiersParser.intervalValue_return intervalValue() throws RecognitionException { return gIdentifiersParser.intervalValue(); }

    public HiveParser_AlterClauseParser.compactPool_return compactPool() throws RecognitionException { return gAlterClauseParser.compactPool(); }

    public HiveParser_IdentifiersParser.precedenceBitwiseOrOperator_return precedenceBitwiseOrOperator() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseOrOperator(); }

    public HiveParser_FromClauseParser.defaultValue_return defaultValue() throws RecognitionException { return gFromClauseParser.defaultValue(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixUnArchive_return alterStatementSuffixUnArchive() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixUnArchive(); }

    public HiveParser_IdentifiersParser.expressionOrDefault_return expressionOrDefault() throws RecognitionException { return gIdentifiersParser.expressionOrDefault(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixBucketNum_return alterStatementSuffixBucketNum(boolean partition) throws RecognitionException { return gAlterClauseParser.alterStatementSuffixBucketNum(partition); }

    public HiveParser_IdentifiersParser.rollupStandard_return rollupStandard() throws RecognitionException { return gIdentifiersParser.rollupStandard(); }

    public HiveParser_ResourcePlanParser.rpUnassignList_return rpUnassignList() throws RecognitionException { return gResourcePlanParser.rpUnassignList(); }

    public HiveParser_SelectClauseParser.selectItem_return selectItem() throws RecognitionException { return gSelectClauseParser.selectItem(); }

    public HiveParser_IdentifiersParser.expression_return expression() throws RecognitionException { return gIdentifiersParser.expression(); }

    public HiveParser_ReplClauseParser.replDbPolicy_return replDbPolicy() throws RecognitionException { return gReplClauseParser.replDbPolicy(); }

    public HiveParser_IdentifiersParser.columnRefOrderNotInParenthesis_return columnRefOrderNotInParenthesis() throws RecognitionException { return gIdentifiersParser.columnRefOrderNotInParenthesis(); }

    public HiveParser_IdentifiersParser.charSetStringLiteral_return charSetStringLiteral() throws RecognitionException { return gIdentifiersParser.charSetStringLiteral(); }

    public HiveParser_ReplClauseParser.replLoadStatement_return replLoadStatement() throws RecognitionException { return gReplClauseParser.replLoadStatement(); }

    public HiveParser_SelectClauseParser.selectTrfmClause_return selectTrfmClause() throws RecognitionException { return gSelectClauseParser.selectTrfmClause(); }

    public HiveParser_ResourcePlanParser.rpAssignList_return rpAssignList() throws RecognitionException { return gResourcePlanParser.rpAssignList(); }

    public HiveParser_SelectClauseParser.window_defn_return window_defn() throws RecognitionException { return gSelectClauseParser.window_defn(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixDropTag_return alterStatementSuffixDropTag() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixDropTag(); }

    public HiveParser_IdentifiersParser.groupingSetExpression_return groupingSetExpression() throws RecognitionException { return gIdentifiersParser.groupingSetExpression(); }

    public HiveParser_CreateDDLParser.dropDataConnectorStatement_return dropDataConnectorStatement() throws RecognitionException { return gCreateDDLParser.dropDataConnectorStatement(); }

    public HiveParser_IdentifiersParser.prepareStmtParam_return prepareStmtParam() throws RecognitionException { return gIdentifiersParser.prepareStmtParam(); }

    public HiveParser_IdentifiersParser.partitionVal_return partitionVal() throws RecognitionException { return gIdentifiersParser.partitionVal(); }

    public HiveParser_SelectClauseParser.window_frame_return window_frame() throws RecognitionException { return gSelectClauseParser.window_frame(); }

    public HiveParser_IdentifiersParser.expressions_return expressions() throws RecognitionException { return gIdentifiersParser.expressions(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixProperties_return alterStatementSuffixProperties() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixProperties(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixSetPartSpec_return alterStatementSuffixSetPartSpec() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixSetPartSpec(); }

    public HiveParser_ResourcePlanParser.createResourcePlanStatement_return createResourcePlanStatement() throws RecognitionException { return gResourcePlanParser.createResourcePlanStatement(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixTouch_return alterStatementSuffixTouch() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixTouch(); }

    public HiveParser_IdentifiersParser.precedenceConcatenateOperator_return precedenceConcatenateOperator() throws RecognitionException { return gIdentifiersParser.precedenceConcatenateOperator(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions(boolean table) throws RecognitionException { return gAlterClauseParser.alterStatementSuffixAddPartitions(table); }

    public HiveParser_IdentifiersParser.precedenceUnaryOperator_return precedenceUnaryOperator() throws RecognitionException { return gIdentifiersParser.precedenceUnaryOperator(); }

    public HiveParser_AlterClauseParser.alterMaterializedViewSuffixRebuild_return alterMaterializedViewSuffixRebuild(CommonTree tableNameTree) throws RecognitionException { return gAlterClauseParser.alterMaterializedViewSuffixRebuild(tableNameTree); }

    public HiveParser_ResourcePlanParser.triggerExpressionStandalone_return triggerExpressionStandalone() throws RecognitionException { return gResourcePlanParser.triggerExpressionStandalone(); }

    public HiveParser_IdentifiersParser.precedenceAmpersandExpression_return precedenceAmpersandExpression() throws RecognitionException { return gIdentifiersParser.precedenceAmpersandExpression(); }

    public HiveParser_AlterClauseParser.alterViewSuffixProperties_return alterViewSuffixProperties() throws RecognitionException { return gAlterClauseParser.alterViewSuffixProperties(); }

    public HiveParser_ResourcePlanParser.rpUnassign_return rpUnassign() throws RecognitionException { return gResourcePlanParser.rpUnassign(); }

    public HiveParser_IdentifiersParser.havingClause_return havingClause() throws RecognitionException { return gIdentifiersParser.havingClause(); }

    public HiveParser_IdentifiersParser.quantifierType_return quantifierType() throws RecognitionException { return gIdentifiersParser.quantifierType(); }

    public HiveParser_AlterClauseParser.skewedLocations_return skewedLocations() throws RecognitionException { return gAlterClauseParser.skewedLocations(); }

    public HiveParser_IdentifiersParser.partitionSelectorVal_return partitionSelectorVal() throws RecognitionException { return gIdentifiersParser.partitionSelectorVal(); }

    public HiveParser_FromClauseParser.fromSource_return fromSource() throws RecognitionException { return gFromClauseParser.fromSource(); }

    public HiveParser_AlterClauseParser.partitionLocation_return partitionLocation() throws RecognitionException { return gAlterClauseParser.partitionLocation(); }

    public HiveParser_IdentifiersParser.trimFunction_return trimFunction() throws RecognitionException { return gIdentifiersParser.trimFunction(); }

    public HiveParser_SelectClauseParser.window_specification_return window_specification(CommonTree nullTreatment) throws RecognitionException { return gSelectClauseParser.window_specification(nullTreatment); }

    public HiveParser_FromClauseParser.tableBucketSample_return tableBucketSample() throws RecognitionException { return gFromClauseParser.tableBucketSample(); }

    public HiveParser_PrepareStatementParser.executeStatement_return executeStatement() throws RecognitionException { return gPrepareStatementParser.executeStatement(); }

    public HiveParser_IdentifiersParser.expressionsNotInParenthesis_return expressionsNotInParenthesis(boolean isStruct, boolean forceStruct) throws RecognitionException { return gIdentifiersParser.expressionsNotInParenthesis(isStruct, forceStruct); }

    public HiveParser_AlterClauseParser.alterDataConnectorSuffixProperties_return alterDataConnectorSuffixProperties() throws RecognitionException { return gAlterClauseParser.alterDataConnectorSuffixProperties(); }

    public HiveParser_SelectClauseParser.selectExpression_return selectExpression() throws RecognitionException { return gSelectClauseParser.selectExpression(); }

    public HiveParser_IdentifiersParser.precedenceSimilarExpression_return precedenceSimilarExpression() throws RecognitionException { return gIdentifiersParser.precedenceSimilarExpression(); }

    public HiveParser_AlterClauseParser.alterStatementPartitionKeyType_return alterStatementPartitionKeyType() throws RecognitionException { return gAlterClauseParser.alterStatementPartitionKeyType(); }

    public HiveParser_IdentifiersParser.rollupOldSyntax_return rollupOldSyntax() throws RecognitionException { return gIdentifiersParser.rollupOldSyntax(); }

    public HiveParser_IdentifiersParser.precedenceNotOperator_return precedenceNotOperator() throws RecognitionException { return gIdentifiersParser.precedenceNotOperator(); }

    public HiveParser_IdentifiersParser.partitionSelectorOperator_return partitionSelectorOperator() throws RecognitionException { return gIdentifiersParser.partitionSelectorOperator(); }

    public HiveParser_AlterClauseParser.alterMaterializedViewSuffixRewrite_return alterMaterializedViewSuffixRewrite(CommonTree tableNameTree) throws RecognitionException { return gAlterClauseParser.alterMaterializedViewSuffixRewrite(tableNameTree); }

    public HiveParser_IdentifiersParser.functionName_return functionName() throws RecognitionException { return gIdentifiersParser.functionName(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixCompact_return alterStatementSuffixCompact() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixCompact(); }

    public HiveParser_ResourcePlanParser.alterTriggerStatement_return alterTriggerStatement() throws RecognitionException { return gResourcePlanParser.alterTriggerStatement(); }

    public HiveParser_AlterClauseParser.alterViewStatementSuffix_return alterViewStatementSuffix() throws RecognitionException { return gAlterClauseParser.alterViewStatementSuffix(); }

    public HiveParser_IdentifiersParser.precedenceStarExpression_return precedenceStarExpression() throws RecognitionException { return gIdentifiersParser.precedenceStarExpression(); }

    public HiveParser_IdentifiersParser.groupByClause_return groupByClause() throws RecognitionException { return gIdentifiersParser.groupByClause(); }

    public HiveParser_CreateDDLParser.likeTableOrFile_return likeTableOrFile() throws RecognitionException { return gCreateDDLParser.likeTableOrFile(); }

    public HiveParser_FromClauseParser.aliasList_return aliasList() throws RecognitionException { return gFromClauseParser.aliasList(); }

    public HiveParser_IdentifiersParser.function_return function() throws RecognitionException { return gIdentifiersParser.function(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixReplaceTag_return alterStatementSuffixReplaceTag() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixReplaceTag(); }

    public HiveParser_SelectClauseParser.trfmClause_return trfmClause() throws RecognitionException { return gSelectClauseParser.trfmClause(); }

    public HiveParser_IdentifiersParser.precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression() throws RecognitionException { return gIdentifiersParser.precedenceUnarySuffixExpression(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixSetOwner_return alterStatementSuffixSetOwner() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixSetOwner(); }

    public HiveParser_IdentifiersParser.precedenceFieldExpression_return precedenceFieldExpression() throws RecognitionException { return gIdentifiersParser.precedenceFieldExpression(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixCreateTag_return alterStatementSuffixCreateTag() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixCreateTag(); }

    public HiveParser_IdentifiersParser.precedencePlusOperator_return precedencePlusOperator() throws RecognitionException { return gIdentifiersParser.precedencePlusOperator(); }

    public HiveParser_FromClauseParser.tableSample_return tableSample() throws RecognitionException { return gFromClauseParser.tableSample(); }

    public HiveParser_ResourcePlanParser.withReplace_return withReplace() throws RecognitionException { return gResourcePlanParser.withReplace(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixConvert_return alterStatementSuffixConvert() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixConvert(); }

    public HiveParser_IdentifiersParser.clusterByClause_return clusterByClause() throws RecognitionException { return gIdentifiersParser.clusterByClause(); }

    public HiveParser_ResourcePlanParser.alterPoolStatement_return alterPoolStatement() throws RecognitionException { return gResourcePlanParser.alterPoolStatement(); }

    public HiveParser_AlterClauseParser.skewedLocationMap_return skewedLocationMap() throws RecognitionException { return gAlterClauseParser.skewedLocationMap(); }

    public HiveParser_IdentifiersParser.qualifyClause_return qualifyClause() throws RecognitionException { return gIdentifiersParser.qualifyClause(); }

    public HiveParser_AlterClauseParser.fileFormat_return fileFormat() throws RecognitionException { return gAlterClauseParser.fileFormat(); }

    public HiveParser_FromClauseParser.searchCondition_return searchCondition() throws RecognitionException { return gFromClauseParser.searchCondition(); }

    public HiveParser_ResourcePlanParser.alterMappingStatement_return alterMappingStatement() throws RecognitionException { return gResourcePlanParser.alterMappingStatement(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixCreateBranch_return alterStatementSuffixCreateBranch() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixCreateBranch(); }

    public HiveParser_FromClauseParser.partitionedTableFunction_return partitionedTableFunction() throws RecognitionException { return gFromClauseParser.partitionedTableFunction(); }

    public HiveParser_IdentifiersParser.precedenceRegexpOperator_return precedenceRegexpOperator() throws RecognitionException { return gIdentifiersParser.precedenceRegexpOperator(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixArchive_return alterStatementSuffixArchive() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixArchive(); }

    public HiveParser_AlterClauseParser.alterDatabaseSuffixProperties_return alterDatabaseSuffixProperties() throws RecognitionException { return gAlterClauseParser.alterDatabaseSuffixProperties(); }

    public HiveParser_IdentifiersParser.precedenceStarOperator_return precedenceStarOperator() throws RecognitionException { return gIdentifiersParser.precedenceStarOperator(); }

    public HiveParser_ReplClauseParser.replStatusStatement_return replStatusStatement() throws RecognitionException { return gReplClauseParser.replStatusStatement(); }

    public HiveParser_FromClauseParser.tableOrColumn_return tableOrColumn() throws RecognitionException { return gFromClauseParser.tableOrColumn(); }

    public HiveParser_IdentifiersParser.sortByClause_return sortByClause() throws RecognitionException { return gIdentifiersParser.sortByClause(); }

    public HiveParser_AlterClauseParser.alterDataConnectorStatementSuffix_return alterDataConnectorStatementSuffix() throws RecognitionException { return gAlterClauseParser.alterDataConnectorStatementSuffix(); }

    public HiveParser_ResourcePlanParser.triggerOrExpression_return triggerOrExpression() throws RecognitionException { return gResourcePlanParser.triggerOrExpression(); }

    public HiveParser_ResourcePlanParser.resourcePlanDdlStatements_return resourcePlanDdlStatements() throws RecognitionException { return gResourcePlanParser.resourcePlanDdlStatements(); }

    public HiveParser_FromClauseParser.expressionList_return expressionList() throws RecognitionException { return gFromClauseParser.expressionList(); }

    public HiveParser_ResourcePlanParser.activate_return activate() throws RecognitionException { return gResourcePlanParser.activate(); }

    public HiveParser_ResourcePlanParser.poolAssignList_return poolAssignList() throws RecognitionException { return gResourcePlanParser.poolAssignList(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixMergeFiles_return alterStatementSuffixMergeFiles(boolean partition) throws RecognitionException { return gAlterClauseParser.alterStatementSuffixMergeFiles(partition); }

    public HiveParser_IdentifiersParser.timeQualifiers_return timeQualifiers() throws RecognitionException { return gIdentifiersParser.timeQualifiers(); }

    public HiveParser_FromClauseParser.lateralView_return lateralView() throws RecognitionException { return gFromClauseParser.lateralView(); }

    public HiveParser_IdentifiersParser.stringLiteralSequence_return stringLiteralSequence() throws RecognitionException { return gIdentifiersParser.stringLiteralSequence(); }

    public HiveParser_IdentifiersParser.groupByEmpty_return groupByEmpty() throws RecognitionException { return gIdentifiersParser.groupByEmpty(); }

    public HiveParser_IdentifiersParser.descFuncNames_return descFuncNames() throws RecognitionException { return gIdentifiersParser.descFuncNames(); }

    public HiveParser_FromClauseParser.virtualTableSource_return virtualTableSource() throws RecognitionException { return gFromClauseParser.virtualTableSource(); }

    public HiveParser_IdentifiersParser.groupby_expression_return groupby_expression() throws RecognitionException { return gIdentifiersParser.groupby_expression(); }

    public HiveParser_FromClauseParser.tableSource_return tableSource() throws RecognitionException { return gFromClauseParser.tableSource(); }

    public HiveParser_IdentifiersParser.precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseXorExpression(); }

    public HiveParser_FromClauseParser.valuesClause_return valuesClause() throws RecognitionException { return gFromClauseParser.valuesClause(); }

    public HiveParser_AlterClauseParser.alterStatementChangeColPosition_return alterStatementChangeColPosition() throws RecognitionException { return gAlterClauseParser.alterStatementChangeColPosition(); }

    public HiveParser_IdentifiersParser.precedenceOrExpression_return precedenceOrExpression() throws RecognitionException { return gIdentifiersParser.precedenceOrExpression(); }

    public HiveParser_PrepareStatementParser.prepareStatement_return prepareStatement() throws RecognitionException { return gPrepareStatementParser.prepareStatement(); }

    public HiveParser_IdentifiersParser.intervalLiteral_return intervalLiteral() throws RecognitionException { return gIdentifiersParser.intervalLiteral(); }

    public HiveParser_IdentifiersParser.intervalExpression_return intervalExpression() throws RecognitionException { return gIdentifiersParser.intervalExpression(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixDropBranch_return alterStatementSuffixDropBranch() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixDropBranch(); }

    public HiveParser_FromClauseParser.joinSourcePart_return joinSourcePart() throws RecognitionException { return gFromClauseParser.joinSourcePart(); }

    public HiveParser_CreateDDLParser.dcProperties_return dcProperties() throws RecognitionException { return gCreateDDLParser.dcProperties(); }

    public HiveParser_FromClauseParser.firstValueRowConstructor_return firstValueRowConstructor() throws RecognitionException { return gFromClauseParser.firstValueRowConstructor(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixExchangePartition_return alterStatementSuffixExchangePartition() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixExchangePartition(); }

    public HiveParser_IdentifiersParser.floorExpression_return floorExpression() throws RecognitionException { return gIdentifiersParser.floorExpression(); }

    public HiveParser_AlterClauseParser.optimizeTableStatementSuffix_return optimizeTableStatementSuffix() throws RecognitionException { return gAlterClauseParser.optimizeTableStatementSuffix(); }

    public HiveParser_IdentifiersParser.caseExpression_return caseExpression() throws RecognitionException { return gIdentifiersParser.caseExpression(); }

    public HiveParser_SelectClauseParser.window_clause_return window_clause() throws RecognitionException { return gSelectClauseParser.window_clause(); }

    public HiveParser_IdentifiersParser.partitionSelectorSpec_return partitionSelectorSpec() throws RecognitionException { return gIdentifiersParser.partitionSelectorSpec(); }

    public HiveParser_AlterClauseParser.tablePartitionPrefix_return tablePartitionPrefix() throws RecognitionException { return gAlterClauseParser.tablePartitionPrefix(); }

    public HiveParser_FromClauseParser.valuesSource_return valuesSource() throws RecognitionException { return gFromClauseParser.valuesSource(); }

    public HiveParser_IdentifiersParser.floorDateQualifiers_return floorDateQualifiers() throws RecognitionException { return gIdentifiersParser.floorDateQualifiers(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixAddCol_return alterStatementSuffixAddCol() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixAddCol(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions(boolean table) throws RecognitionException { return gAlterClauseParser.alterStatementSuffixDropPartitions(table); }

    public HiveParser_AlterClauseParser.alterStatementSuffixLocation_return alterStatementSuffixLocation(boolean partition) throws RecognitionException { return gAlterClauseParser.alterStatementSuffixLocation(partition); }

    public HiveParser_FromClauseParser.valuesTableConstructor_return valuesTableConstructor() throws RecognitionException { return gFromClauseParser.valuesTableConstructor(); }

    public HiveParser_CreateDDLParser.dataConnectorType_return dataConnectorType() throws RecognitionException { return gCreateDDLParser.dataConnectorType(); }

    public HiveParser_IdentifiersParser.intervalQualifiers_return intervalQualifiers() throws RecognitionException { return gIdentifiersParser.intervalQualifiers(); }

    public HiveParser_IdentifiersParser.partitionSpec_return partitionSpec() throws RecognitionException { return gIdentifiersParser.partitionSpec(); }

    public HiveParser_IdentifiersParser.parameterIdx_return parameterIdx() throws RecognitionException { return gIdentifiersParser.parameterIdx(); }

    public HiveParser_ReplClauseParser.replicationClause_return replicationClause() throws RecognitionException { return gReplClauseParser.replicationClause(); }

    public HiveParser_IdentifiersParser.precedenceSimilarExpressionPart_return precedenceSimilarExpressionPart(CommonTree t) throws RecognitionException { return gIdentifiersParser.precedenceSimilarExpressionPart(t); }

    public HiveParser_IdentifiersParser.subQuerySelectorOperator_return subQuerySelectorOperator() throws RecognitionException { return gIdentifiersParser.subQuerySelectorOperator(); }

    public HiveParser_ResourcePlanParser.disable_return disable() throws RecognitionException { return gResourcePlanParser.disable(); }

    public HiveParser_ResourcePlanParser.createTriggerStatement_return createTriggerStatement() throws RecognitionException { return gResourcePlanParser.createTriggerStatement(); }

    public HiveParser_FromClauseParser.uniqueJoinExpr_return uniqueJoinExpr() throws RecognitionException { return gFromClauseParser.uniqueJoinExpr(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixAddConstraint_return alterStatementSuffixAddConstraint() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixAddConstraint(); }

    public HiveParser_IdentifiersParser.expressionPart_return expressionPart(CommonTree firstExprTree, boolean isStruct) throws RecognitionException { return gIdentifiersParser.expressionPart(firstExprTree, isStruct); }

    public HiveParser_IdentifiersParser.precedenceUnaryPrefixExpression_return precedenceUnaryPrefixExpression() throws RecognitionException { return gIdentifiersParser.precedenceUnaryPrefixExpression(); }

    public HiveParser_FromClauseParser.joinToken_return joinToken() throws RecognitionException { return gFromClauseParser.joinToken(); }

    public HiveParser_AlterClauseParser.retentionOfSnapshots_return retentionOfSnapshots() throws RecognitionException { return gAlterClauseParser.retentionOfSnapshots(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixSkewedby_return alterStatementSuffixSkewedby() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixSkewedby(); }

    public HiveParser_IdentifiersParser.precedenceBitwiseXorOperator_return precedenceBitwiseXorOperator() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseXorOperator(); }

    public HiveParser_AlterClauseParser.alterDataConnectorSuffixSetUrl_return alterDataConnectorSuffixSetUrl() throws RecognitionException { return gAlterClauseParser.alterDataConnectorSuffixSetUrl(); }

    public HiveParser_AlterClauseParser.alterTblPartitionStatementSuffix_return alterTblPartitionStatementSuffix(boolean partition) throws RecognitionException { return gAlterClauseParser.alterTblPartitionStatementSuffix(partition); }

    public HiveParser_AlterClauseParser.optimizeTblRewriteDataSuffix_return optimizeTblRewriteDataSuffix() throws RecognitionException { return gAlterClauseParser.optimizeTblRewriteDataSuffix(); }

    public HiveParser_IdentifiersParser.extractExpression_return extractExpression() throws RecognitionException { return gIdentifiersParser.extractExpression(); }

    public HiveParser_ResourcePlanParser.alterResourcePlanStatement_return alterResourcePlanStatement() throws RecognitionException { return gResourcePlanParser.alterResourcePlanStatement(); }

    public HiveParser_AlterClauseParser.alterTblPartitionStatementSuffixSkewedLocation_return alterTblPartitionStatementSuffixSkewedLocation() throws RecognitionException { return gAlterClauseParser.alterTblPartitionStatementSuffixSkewedLocation(); }

    public HiveParser_SelectClauseParser.window_frame_start_boundary_return window_frame_start_boundary() throws RecognitionException { return gSelectClauseParser.window_frame_start_boundary(); }

    public HiveParser_IdentifiersParser.havingCondition_return havingCondition() throws RecognitionException { return gIdentifiersParser.havingCondition(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixUpdateStats_return alterStatementSuffixUpdateStats(boolean partition) throws RecognitionException { return gAlterClauseParser.alterStatementSuffixUpdateStats(partition); }

    public HiveParser_SelectClauseParser.selectList_return selectList() throws RecognitionException { return gSelectClauseParser.selectList(); }

    public HiveParser_AlterClauseParser.alterMaterializedViewStatementSuffix_return alterMaterializedViewStatementSuffix(CommonTree tableNameTree) throws RecognitionException { return gAlterClauseParser.alterMaterializedViewStatementSuffix(tableNameTree); }

    public HiveParser_AlterClauseParser.alterStatementSuffixCreateOrReplaceTag_return alterStatementSuffixCreateOrReplaceTag() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixCreateOrReplaceTag(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixExecute_return alterStatementSuffixExecute() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixExecute(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixReplaceBranch_return alterStatementSuffixReplaceBranch() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixReplaceBranch(); }

    public HiveParser_ReplClauseParser.replTableLevelPolicy_return replTableLevelPolicy() throws RecognitionException { return gReplClauseParser.replTableLevelPolicy(); }

    public HiveParser_IdentifiersParser.orderByClause_return orderByClause() throws RecognitionException { return gIdentifiersParser.orderByClause(); }

    public HiveParser_FromClauseParser.uniqueJoinToken_return uniqueJoinToken() throws RecognitionException { return gFromClauseParser.uniqueJoinToken(); }

    public HiveParser_ResourcePlanParser.poolAssign_return poolAssign() throws RecognitionException { return gResourcePlanParser.poolAssign(); }

    public HiveParser_FromClauseParser.partitionTableFunctionSource_return partitionTableFunctionSource() throws RecognitionException { return gFromClauseParser.partitionTableFunctionSource(); }

    public HiveParser_IdentifiersParser.precedenceDistinctOperator_return precedenceDistinctOperator() throws RecognitionException { return gIdentifiersParser.precedenceDistinctOperator(); }

    public HiveParser_IdentifiersParser.precedenceAmpersandOperator_return precedenceAmpersandOperator() throws RecognitionException { return gIdentifiersParser.precedenceAmpersandOperator(); }

    public HiveParser_IdentifiersParser.distributeByClause_return distributeByClause() throws RecognitionException { return gIdentifiersParser.distributeByClause(); }

    public HiveParser_FromClauseParser.asOfClause_return asOfClause() throws RecognitionException { return gFromClauseParser.asOfClause(); }

    public HiveParser_ResourcePlanParser.unmanaged_return unmanaged() throws RecognitionException { return gResourcePlanParser.unmanaged(); }

    public HiveParser_ResourcePlanParser.dropResourcePlanStatement_return dropResourcePlanStatement() throws RecognitionException { return gResourcePlanParser.dropResourcePlanStatement(); }

    public HiveParser_ResourcePlanParser.triggerAtomExpression_return triggerAtomExpression() throws RecognitionException { return gResourcePlanParser.triggerAtomExpression(); }

    public HiveParser_CreateDDLParser.createDataConnectorStatement_return createDataConnectorStatement() throws RecognitionException { return gCreateDDLParser.createDataConnectorStatement(); }

    public HiveParser_IdentifiersParser.precedenceSimilarExpressionPartNot_return precedenceSimilarExpressionPartNot(CommonTree t) throws RecognitionException { return gIdentifiersParser.precedenceSimilarExpressionPartNot(t); }

    public HiveParser_AlterClauseParser.alterStatementSuffixAddPartitionsElement_return alterStatementSuffixAddPartitionsElement() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixAddPartitionsElement(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixDropConstraint_return alterStatementSuffixDropConstraint() throws RecognitionException { return gAlterClauseParser.alterStatementSuffixDropConstraint(); }

    public HiveParser_ResourcePlanParser.enable_return enable() throws RecognitionException { return gResourcePlanParser.enable(); }

    public HiveParser_AlterClauseParser.alterTableStatementSuffix_return alterTableStatementSuffix() throws RecognitionException { return gAlterClauseParser.alterTableStatementSuffix(); }

    public HiveParser_FromClauseParser.atomjoinSource_return atomjoinSource() throws RecognitionException { return gFromClauseParser.atomjoinSource(); }

    public HiveParser_AlterClauseParser.alterStatementSuffixRename_return alterStatementSuffixRename(boolean table) throws RecognitionException { return gAlterClauseParser.alterStatementSuffixRename(table); }

    public HiveParser_AlterClauseParser.skewedLocationsList_return skewedLocationsList() throws RecognitionException { return gAlterClauseParser.skewedLocationsList(); }

    public HiveParser_IdentifiersParser.castExpression_return castExpression() throws RecognitionException { return gIdentifiersParser.castExpression(); }

    public HiveParser_AlterClauseParser.alterDatabaseSuffixSetLocation_return alterDatabaseSuffixSetLocation() throws RecognitionException { return gAlterClauseParser.alterDatabaseSuffixSetLocation(); }

    public HiveParser_IdentifiersParser.precedenceSimilarExpressionAtom_return precedenceSimilarExpressionAtom(CommonTree t) throws RecognitionException { return gIdentifiersParser.precedenceSimilarExpressionAtom(t); }

    public HiveParser_AlterClauseParser.refRetain_return refRetain() throws RecognitionException { return gAlterClauseParser.refRetain(); }

    public HiveParser_AlterClauseParser.alterStatement_return alterStatement() throws RecognitionException { return gAlterClauseParser.alterStatement(); }

    public HiveParser_SelectClauseParser.window_value_expression_return window_value_expression() throws RecognitionException { return gSelectClauseParser.window_value_expression(); }

    public HiveParser_IdentifiersParser.functionIdentifier_return functionIdentifier() throws RecognitionException { return gIdentifiersParser.functionIdentifier(); }

    public HiveParser_CreateDDLParser.dataConnectorComment_return dataConnectorComment() throws RecognitionException { return gCreateDDLParser.dataConnectorComment(); }

    public final boolean synpred18_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_HiveParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_HiveParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA194 dfa194 = new DFA194(this);
    static final String DFA2_eotS =
        "\156\uffff";
    static final String DFA2_eofS =
        "\156\uffff";
    static final String DFA2_minS =
        "\1\32\27\uffff\1\32\125\uffff";
    static final String DFA2_maxS =
        "\1\u019e\27\uffff\1\u019e\125\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\2\51\uffff\1\1\102\uffff";
    static final String DFA2_specialS =
        "\156\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\1\7\uffff\1\1\1\30\7\uffff\1\53\1\uffff\1\53\17\uffff\1\53"+
            "\13\uffff\1\1\12\uffff\1\1\21\uffff\2\53\4\uffff\1\1\1\uffff"+
            "\1\53\2\1\3\uffff\1\1\6\uffff\1\1\3\uffff\1\1\7\uffff\1\1\4"+
            "\uffff\1\1\1\uffff\1\53\20\uffff\1\53\1\1\3\uffff\1\1\7\uffff"+
            "\1\1\7\uffff\1\1\15\uffff\1\1\11\uffff\1\1\2\uffff\1\1\2\53"+
            "\5\uffff\1\1\4\uffff\1\1\6\uffff\1\1\15\uffff\1\1\27\uffff\1"+
            "\1\20\uffff\1\1\2\uffff\1\1\3\uffff\1\53\1\uffff\2\1\6\uffff"+
            "\1\1\5\uffff\1\1\10\uffff\1\1\4\uffff\1\1\3\uffff\1\1\12\uffff"+
            "\1\1\41\uffff\1\1\11\uffff\1\1\3\uffff\1\1\2\uffff\1\1\5\uffff"+
            "\1\1\2\uffff\1\53\10\uffff\1\1\12\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\53\7\uffff\2\53\7\uffff\1\53\1\uffff\1\53\17\uffff\1\53"+
            "\13\uffff\1\53\12\uffff\1\53\21\uffff\2\53\4\uffff\1\53\1\uffff"+
            "\3\53\3\uffff\1\53\6\uffff\1\53\3\uffff\1\53\7\uffff\1\53\4"+
            "\uffff\1\53\1\uffff\1\53\20\uffff\2\53\3\uffff\1\53\7\uffff"+
            "\1\53\7\uffff\1\53\15\uffff\1\53\11\uffff\1\53\2\uffff\3\53"+
            "\5\uffff\1\53\4\uffff\1\53\6\uffff\1\53\15\uffff\1\53\27\uffff"+
            "\1\53\20\uffff\1\53\2\uffff\1\53\3\uffff\1\53\1\uffff\2\53\6"+
            "\uffff\1\53\5\uffff\1\53\10\uffff\1\53\4\uffff\1\53\3\uffff"+
            "\1\53\12\uffff\1\53\12\uffff\1\1\26\uffff\1\53\11\uffff\1\53"+
            "\3\uffff\1\53\2\uffff\1\53\5\uffff\1\53\2\uffff\1\53\10\uffff"+
            "\1\53\12\uffff\1\53",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()* loopback of 910:6: ( explainOption )*";
        }
    }
    static final String DFA5_eotS =
        "\74\uffff";
    static final String DFA5_eofS =
        "\74\uffff";
    static final String DFA5_minS =
        "\1\32\73\uffff";
    static final String DFA5_maxS =
        "\1\u019e\73\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\1\1\2\71\uffff";
    static final String DFA5_specialS =
        "\74\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\2\7\uffff\2\2\7\uffff\1\2\1\uffff\1\2\17\uffff\1\2\13\uffff"+
            "\1\2\12\uffff\1\2\21\uffff\2\2\4\uffff\1\2\1\uffff\4\2\2\uffff"+
            "\1\2\6\uffff\1\2\3\uffff\1\2\7\uffff\1\2\4\uffff\3\2\20\uffff"+
            "\2\2\3\uffff\1\2\7\uffff\1\2\7\uffff\1\2\15\uffff\1\2\11\uffff"+
            "\1\2\2\uffff\3\2\5\uffff\1\2\4\uffff\1\2\6\uffff\1\2\13\uffff"+
            "\1\1\2\2\27\uffff\1\2\20\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1"+
            "\uffff\2\2\6\uffff\1\2\5\uffff\1\2\10\uffff\1\2\4\uffff\1\2"+
            "\3\uffff\1\2\12\uffff\1\2\6\uffff\1\2\32\uffff\1\2\11\uffff"+
            "\1\2\3\uffff\1\2\2\uffff\1\2\5\uffff\1\2\2\uffff\1\2\10\uffff"+
            "\1\2\12\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "929:25: ( vectorizationOnly )?";
        }
    }
    static final String DFA17_eotS =
        "\u009c\uffff";
    static final String DFA17_eofS =
        "\u009c\uffff";
    static final String DFA17_minS =
        "\1\32\1\46\1\uffff\1\46\1\uffff\1\46\3\uffff\1\107\3\uffff\2\135"+
        "\2\30\1\uffff\1\113\10\uffff\1\u008f\24\uffff\1\u00a2\73\uffff\1"+
        "\11\1\uffff\1\11\13\uffff\1\11\1\uffff\1\11\20\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0"+
        "\1\uffff\1\0";
    static final String DFA17_maxS =
        "\1\u0181\1\u018b\1\uffff\1\u018b\1\uffff\1\u018b\3\uffff\1\u018c"+
        "\3\uffff\2\u0159\2\u02f1\1\uffff\1\u016b\10\uffff\1\u016a\24\uffff"+
        "\1\u00d3\73\uffff\1\u019e\1\uffff\1\u019e\13\uffff\1\u019e\1\uffff"+
        "\1\u019e\20\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0";
    static final String DFA17_acceptS =
        "\2\uffff\1\2\1\uffff\1\6\1\uffff\1\7\1\10\2\uffff\1\12\1\25\1\27"+
        "\4\uffff\1\46\1\uffff\1\52\1\53\2\uffff\1\1\1\4\1\14\1\15\1\uffff"+
        "\1\34\3\uffff\1\54\5\uffff\1\13\1\uffff\1\22\3\uffff\1\5\1\17\1"+
        "\20\1\21\1\uffff\1\35\3\uffff\1\3\1\uffff\1\24\3\uffff\1\55\4\uffff"+
        "\1\16\10\uffff\1\11\13\uffff\1\40\1\41\1\42\1\43\1\47\7\uffff\1"+
        "\30\1\32\1\uffff\1\31\1\33\1\uffff\5\36\1\uffff\1\36\1\uffff\2\36"+
        "\1\44\2\uffff\6\37\1\uffff\1\37\1\uffff\2\37\1\45\3\uffff\1\50\1"+
        "\51\1\23\4\uffff\1\26\1\uffff\1\36\1\uffff\1\36\1\uffff\1\36\1\uffff"+
        "\1\36\1\uffff\1\37\1\uffff\1\37\1\uffff\1\37\1\uffff\1\37\1\uffff";
    static final String DFA17_specialS =
        "\17\uffff\1\0\1\1\133\uffff\1\2\1\uffff\1\3\13\uffff\1\4\1\uffff"+
        "\1\5\20\uffff\1\6\1\uffff\1\7\1\uffff\1\10\1\uffff\1\11\1\uffff"+
        "\1\12\1\uffff\1\13\1\uffff\1\14\1\uffff\1\15}>";
    static final String[] DFA17_transitionS = {
            "\1\22\7\uffff\1\5\1\14\60\uffff\1\1\32\uffff\2\7\3\uffff\1\24"+
            "\6\uffff\1\3\3\uffff\1\24\44\uffff\1\17\35\uffff\1\23\14\uffff"+
            "\1\15\23\uffff\1\12\15\uffff\1\6\53\uffff\1\13\6\uffff\1\24"+
            "\6\uffff\1\20\23\uffff\1\21\3\uffff\1\11\54\uffff\1\4\11\uffff"+
            "\1\16\6\uffff\1\2",
            "\1\24\66\uffff\1\27\1\uffff\1\40\57\uffff\1\30\22\uffff\1\50"+
            "\2\uffff\1\24\56\uffff\1\30\6\uffff\1\31\27\uffff\1\46\22\uffff"+
            "\1\24\30\uffff\1\27\6\uffff\1\24\10\uffff\1\34\5\uffff\1\32"+
            "\1\uffff\1\27\41\uffff\1\30\4\uffff\1\33\13\uffff\1\30\2\uffff"+
            "\1\24\24\uffff\1\24\10\uffff\1\46",
            "",
            "\1\24\66\uffff\1\65\1\uffff\1\73\102\uffff\1\67\2\uffff\1\24"+
            "\65\uffff\1\57\52\uffff\1\24\37\uffff\1\24\10\uffff\1\61\5\uffff"+
            "\1\55\1\uffff\1\65\41\uffff\1\54\4\uffff\1\60\16\uffff\1\24"+
            "\24\uffff\1\24\10\uffff\1\56",
            "",
            "\1\24\66\uffff\1\6\1\uffff\1\6\105\uffff\1\24\65\uffff\1\6"+
            "\52\uffff\1\24\37\uffff\1\24\16\uffff\1\100\1\uffff\1\6\41\uffff"+
            "\1\6\23\uffff\1\24\24\uffff\1\24\10\uffff\1\6",
            "",
            "",
            "",
            "\1\111\3\uffff\1\111\3\uffff\1\111\4\uffff\1\111\3\uffff\1"+
            "\131\5\uffff\1\111\1\uffff\1\111\55\uffff\1\111\24\uffff\1\111"+
            "\1\125\53\uffff\1\111\12\uffff\1\111\43\uffff\1\111\14\uffff"+
            "\1\127\31\uffff\1\111\10\uffff\1\126\1\130\7\uffff\1\111\22"+
            "\uffff\1\111\15\uffff\2\111\2\uffff\1\111\15\uffff\1\111\40"+
            "\uffff\1\111",
            "",
            "",
            "",
            "\1\142\u00d9\uffff\1\142\41\uffff\1\141",
            "\1\145\u00d9\uffff\1\145\41\uffff\1\144",
            "\1\161\1\uffff\6\161\1\147\1\161\1\150\1\161\3\uffff\1\161"+
            "\2\uffff\3\161\1\uffff\2\161\5\uffff\3\161\1\uffff\2\161\2\uffff"+
            "\2\161\1\uffff\1\161\1\uffff\4\161\1\uffff\2\161\1\uffff\2\161"+
            "\1\uffff\2\161\2\uffff\1\161\1\uffff\1\161\1\152\1\161\6\uffff"+
            "\1\161\1\uffff\1\161\3\uffff\4\161\1\uffff\1\161\1\uffff\3\161"+
            "\1\160\3\161\1\uffff\4\161\1\uffff\3\161\1\uffff\1\161\1\153"+
            "\2\161\1\uffff\1\161\1\uffff\3\161\2\uffff\3\161\1\uffff\4\161"+
            "\4\uffff\1\161\1\uffff\4\161\6\uffff\2\161\3\uffff\1\161\4\uffff"+
            "\2\161\1\uffff\1\161\2\uffff\2\161\1\uffff\3\161\1\157\5\uffff"+
            "\3\161\1\uffff\6\161\4\uffff\1\161\1\uffff\3\161\1\uffff\1\161"+
            "\1\154\3\161\1\uffff\3\161\1\uffff\4\161\1\uffff\1\161\1\uffff"+
            "\2\161\1\uffff\2\161\1\uffff\2\161\1\uffff\1\161\1\uffff\1\161"+
            "\1\uffff\1\161\3\uffff\3\161\5\uffff\2\161\1\uffff\2\161\1\uffff"+
            "\3\161\2\uffff\4\161\5\uffff\1\161\1\uffff\1\161\1\uffff\3\161"+
            "\1\uffff\1\161\2\uffff\3\161\3\uffff\16\161\1\uffff\1\161\2"+
            "\uffff\2\161\4\uffff\5\161\1\155\4\161\1\uffff\4\161\1\156\1"+
            "\161\1\uffff\2\161\1\uffff\4\161\1\uffff\7\161\1\uffff\2\161"+
            "\1\uffff\1\161\1\uffff\4\161\5\uffff\1\161\1\uffff\1\161\1\uffff"+
            "\3\161\2\uffff\1\161\2\uffff\2\161\1\uffff\1\161\1\uffff\1\161"+
            "\2\uffff\5\161\1\151\3\161\2\uffff\3\161\1\uffff\1\161\1\uffff"+
            "\5\161\2\uffff\1\161\2\uffff\6\161\77\uffff\1\161\57\uffff\1"+
            "\161\72\uffff\1\161\67\uffff\1\161\3\uffff\1\161\35\uffff\1"+
            "\161\7\uffff\1\161\112\uffff\1\161",
            "\1\177\1\uffff\6\177\1\165\1\177\1\166\1\177\3\uffff\1\177"+
            "\2\uffff\3\177\1\uffff\2\177\5\uffff\3\177\1\uffff\2\177\2\uffff"+
            "\2\177\1\uffff\1\177\1\uffff\4\177\1\uffff\2\177\1\uffff\2\177"+
            "\1\uffff\2\177\2\uffff\1\177\1\uffff\1\177\1\170\1\177\6\uffff"+
            "\1\177\1\uffff\1\177\3\uffff\4\177\1\uffff\1\177\1\uffff\3\177"+
            "\1\176\3\177\1\uffff\4\177\1\uffff\3\177\1\uffff\1\177\1\171"+
            "\2\177\1\uffff\1\177\1\uffff\3\177\2\uffff\3\177\1\uffff\4\177"+
            "\4\uffff\1\177\1\uffff\4\177\6\uffff\2\177\3\uffff\1\177\1\164"+
            "\3\uffff\2\177\1\uffff\1\177\2\uffff\2\177\1\uffff\3\177\1\175"+
            "\5\uffff\3\177\1\uffff\6\177\4\uffff\1\177\1\uffff\3\177\1\uffff"+
            "\1\177\1\172\3\177\1\uffff\3\177\1\uffff\4\177\1\uffff\1\177"+
            "\1\uffff\2\177\1\uffff\2\177\1\uffff\2\177\1\uffff\1\177\1\uffff"+
            "\1\177\1\uffff\1\177\3\uffff\3\177\5\uffff\2\177\1\uffff\2\177"+
            "\1\uffff\3\177\2\uffff\4\177\5\uffff\1\177\1\uffff\1\177\1\uffff"+
            "\3\177\1\uffff\1\177\2\uffff\3\177\3\uffff\16\177\1\uffff\1"+
            "\177\2\uffff\2\177\4\uffff\5\177\1\173\4\177\1\uffff\4\177\1"+
            "\174\1\177\1\uffff\2\177\1\uffff\4\177\1\uffff\7\177\1\uffff"+
            "\2\177\1\uffff\1\177\1\uffff\4\177\5\uffff\1\177\1\uffff\1\177"+
            "\1\uffff\3\177\2\uffff\1\177\2\uffff\2\177\1\uffff\1\177\1\uffff"+
            "\1\177\2\uffff\5\177\1\167\3\177\2\uffff\3\177\1\uffff\1\177"+
            "\1\uffff\5\177\2\uffff\1\177\2\uffff\6\177\77\uffff\1\177\57"+
            "\uffff\1\177\72\uffff\1\177\67\uffff\1\177\3\uffff\1\177\35"+
            "\uffff\1\177\7\uffff\1\177\112\uffff\1\177",
            "",
            "\1\u0084\u011f\uffff\1\u0083",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\30\22\uffff\1\50\60\uffff\1\u0085\u0085\uffff\1\30\20\uffff"+
            "\1\30",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\67\60\uffff\1\u008a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u008d\u00e4\uffff\1\u008e\167\uffff\1\u008f\67\uffff\1\u008c",
            "",
            "\1\u0091\u00e4\uffff\1\u0092\167\uffff\1\u0093\67\uffff\1\u0090",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0095\u0096\uffff\1\u0097\115\uffff\1\u0096\u00af\uffff"+
            "\1\u0094",
            "",
            "\1\u0099\u0096\uffff\1\u009b\115\uffff\1\u009a\u00af\uffff"+
            "\1\u0098",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff"
    };

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "1000:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | createMaterializedViewStatement | createScheduledQueryStatement | alterScheduledQueryStatement | dropScheduledQueryStatement | dropViewStatement | dropMaterializedViewStatement | createFunctionStatement | createMacroStatement | dropFunctionStatement | reloadFunctionsStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | ( grantPrivileges )=> grantPrivileges | ( revokePrivileges )=> revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole | abortTransactionStatement | abortCompactionStatement | killQueryStatement | resourcePlanDdlStatements | createDataConnectorStatement | dropDataConnectorStatement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA17_15 = input.LA(1);

                         
                        int index17_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA17_15==KW_ALL) && (synpred1_HiveParser())) {s = 103;}

                        else if ( (LA17_15==KW_ALTER) && (synpred1_HiveParser())) {s = 104;}

                        else if ( (LA17_15==KW_UPDATE) && (synpred1_HiveParser())) {s = 105;}

                        else if ( (LA17_15==KW_CREATE) && (synpred1_HiveParser())) {s = 106;}

                        else if ( (LA17_15==KW_DROP) && (synpred1_HiveParser())) {s = 107;}

                        else if ( (LA17_15==KW_LOCK) ) {s = 108;}

                        else if ( (LA17_15==KW_SELECT) && (synpred1_HiveParser())) {s = 109;}

                        else if ( (LA17_15==KW_SHOW_DATABASE) ) {s = 110;}

                        else if ( (LA17_15==KW_INSERT) && (synpred1_HiveParser())) {s = 111;}

                        else if ( (LA17_15==KW_DELETE) && (synpred1_HiveParser())) {s = 112;}

                        else if ( (LA17_15==Identifier||(LA17_15 >= KW_ABORT && LA17_15 <= KW_AFTER)||LA17_15==KW_ALLOC_FRACTION||LA17_15==KW_ANALYZE||LA17_15==KW_ARCHIVE||(LA17_15 >= KW_ASC && LA17_15 <= KW_AT)||(LA17_15 >= KW_AUTOCOMMIT && LA17_15 <= KW_BEFORE)||(LA17_15 >= KW_BRANCH && LA17_15 <= KW_BUCKETS)||(LA17_15 >= KW_CACHE && LA17_15 <= KW_CASCADE)||(LA17_15 >= KW_CBO && LA17_15 <= KW_CHANGE)||LA17_15==KW_CHECK||(LA17_15 >= KW_CLUSTER && LA17_15 <= KW_COLLECTION)||(LA17_15 >= KW_COLUMNS && LA17_15 <= KW_COMMENT)||(LA17_15 >= KW_COMPACT && LA17_15 <= KW_COMPACTIONS)||(LA17_15 >= KW_COMPUTE && LA17_15 <= KW_CONCATENATE)||LA17_15==KW_CONTINUE||LA17_15==KW_COST||LA17_15==KW_CRON||LA17_15==KW_DATA||LA17_15==KW_DATABASES||(LA17_15 >= KW_DATETIME && LA17_15 <= KW_DCPROPERTIES)||LA17_15==KW_DEBUG||(LA17_15 >= KW_DEFAULT && LA17_15 <= KW_DEFINED)||(LA17_15 >= KW_DELIMITED && LA17_15 <= KW_DESC)||(LA17_15 >= KW_DETAIL && LA17_15 <= KW_DISABLE)||(LA17_15 >= KW_DISTRIBUTE && LA17_15 <= KW_DO)||LA17_15==KW_DOW||(LA17_15 >= KW_DUMP && LA17_15 <= KW_ELEM_TYPE)||LA17_15==KW_ENABLE||(LA17_15 >= KW_ENFORCED && LA17_15 <= KW_EVERY)||(LA17_15 >= KW_EXCLUSIVE && LA17_15 <= KW_EXECUTED)||(LA17_15 >= KW_EXPIRE_SNAPSHOTS && LA17_15 <= KW_EXPRESSION)||LA17_15==KW_FAST_FORWARD||(LA17_15 >= KW_FIELDS && LA17_15 <= KW_FIRST)||(LA17_15 >= KW_FORMAT && LA17_15 <= KW_FORMATTED)||LA17_15==KW_FUNCTIONS||(LA17_15 >= KW_HOUR && LA17_15 <= KW_IDXPROPERTIES)||LA17_15==KW_IGNORE||(LA17_15 >= KW_INDEX && LA17_15 <= KW_INDEXES)||(LA17_15 >= KW_INPATH && LA17_15 <= KW_INPUTFORMAT)||(LA17_15 >= KW_ISOLATION && LA17_15 <= KW_JAR)||(LA17_15 >= KW_JOINCOST && LA17_15 <= KW_LAST)||LA17_15==KW_LEVEL||(LA17_15 >= KW_LIMIT && LA17_15 <= KW_LOAD)||LA17_15==KW_LOCATION||(LA17_15 >= KW_LOCKS && LA17_15 <= KW_LONG)||(LA17_15 >= KW_MANAGED && LA17_15 <= KW_MANAGEMENT)||(LA17_15 >= KW_MAPJOIN && LA17_15 <= KW_MATERIALIZED)||LA17_15==KW_METADATA||(LA17_15 >= KW_MINUTE && LA17_15 <= KW_MONTH)||(LA17_15 >= KW_MOVE && LA17_15 <= KW_MSCK)||(LA17_15 >= KW_NORELY && LA17_15 <= KW_NOSCAN)||LA17_15==KW_NOVALIDATE||LA17_15==KW_NULLS||LA17_15==KW_OFFSET||(LA17_15 >= KW_OPERATOR && LA17_15 <= KW_OPTION)||(LA17_15 >= KW_OUTPUTDRIVER && LA17_15 <= KW_OUTPUTFORMAT)||(LA17_15 >= KW_OVERWRITE && LA17_15 <= KW_OWNER)||(LA17_15 >= KW_PARTITIONED && LA17_15 <= KW_PATH)||(LA17_15 >= KW_PLAN && LA17_15 <= KW_POOL)||LA17_15==KW_PRINCIPALS||LA17_15==KW_PURGE||(LA17_15 >= KW_QUARTER && LA17_15 <= KW_QUERY_PARALLELISM)||LA17_15==KW_READ||(LA17_15 >= KW_REBUILD && LA17_15 <= KW_RECORDWRITER)||(LA17_15 >= KW_RELOAD && LA17_15 <= KW_RETENTION)||LA17_15==KW_REWRITE||(LA17_15 >= KW_ROLE && LA17_15 <= KW_ROLES)||(LA17_15 >= KW_SCHEDULED && LA17_15 <= KW_SECOND)||(LA17_15 >= KW_SEMI && LA17_15 <= KW_SERVER)||(LA17_15 >= KW_SETS && LA17_15 <= KW_SHOW)||LA17_15==KW_SKEWED||(LA17_15 >= KW_SNAPSHOT && LA17_15 <= KW_SNAPSHOTS)||(LA17_15 >= KW_SORT && LA17_15 <= KW_SSL)||(LA17_15 >= KW_STATISTICS && LA17_15 <= KW_SUMMARY)||(LA17_15 >= KW_SYSTEM_TIME && LA17_15 <= KW_SYSTEM_VERSION)||LA17_15==KW_TABLES||(LA17_15 >= KW_TAG && LA17_15 <= KW_TERMINATED)||LA17_15==KW_TINYINT||LA17_15==KW_TOUCH||(LA17_15 >= KW_TRANSACTION && LA17_15 <= KW_TRANSACTIONS)||LA17_15==KW_TRIM||(LA17_15 >= KW_TYPE && LA17_15 <= KW_UNARCHIVE)||LA17_15==KW_UNDO||LA17_15==KW_UNIONTYPE||(LA17_15 >= KW_UNKNOWN && LA17_15 <= KW_UNSIGNED)||(LA17_15 >= KW_URI && LA17_15 <= KW_USE)||(LA17_15 >= KW_UTC && LA17_15 <= KW_VALIDATE)||LA17_15==KW_VALUE_TYPE||(LA17_15 >= KW_VECTORIZATION && LA17_15 <= KW_WEEK)||LA17_15==KW_WHILE||(LA17_15 >= KW_WITHIN && LA17_15 <= KW_ZONE)||LA17_15==KW_BATCH||LA17_15==KW_DAYOFWEEK||LA17_15==KW_HOLD_DDLTIME||LA17_15==KW_NO_DROP||LA17_15==KW_OFFLINE||LA17_15==KW_PROTECTION||LA17_15==KW_READONLY||LA17_15==KW_TIMESTAMPTZ) ) {s = 113;}

                         
                        input.seek(index17_15);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA17_16 = input.LA(1);

                         
                        int index17_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA17_16==KW_GRANT) && (synpred2_HiveParser())) {s = 116;}

                        else if ( (LA17_16==KW_ALL) && (synpred2_HiveParser())) {s = 117;}

                        else if ( (LA17_16==KW_ALTER) && (synpred2_HiveParser())) {s = 118;}

                        else if ( (LA17_16==KW_UPDATE) && (synpred2_HiveParser())) {s = 119;}

                        else if ( (LA17_16==KW_CREATE) && (synpred2_HiveParser())) {s = 120;}

                        else if ( (LA17_16==KW_DROP) && (synpred2_HiveParser())) {s = 121;}

                        else if ( (LA17_16==KW_LOCK) ) {s = 122;}

                        else if ( (LA17_16==KW_SELECT) && (synpred2_HiveParser())) {s = 123;}

                        else if ( (LA17_16==KW_SHOW_DATABASE) ) {s = 124;}

                        else if ( (LA17_16==KW_INSERT) && (synpred2_HiveParser())) {s = 125;}

                        else if ( (LA17_16==KW_DELETE) && (synpred2_HiveParser())) {s = 126;}

                        else if ( (LA17_16==Identifier||(LA17_16 >= KW_ABORT && LA17_16 <= KW_AFTER)||LA17_16==KW_ALLOC_FRACTION||LA17_16==KW_ANALYZE||LA17_16==KW_ARCHIVE||(LA17_16 >= KW_ASC && LA17_16 <= KW_AT)||(LA17_16 >= KW_AUTOCOMMIT && LA17_16 <= KW_BEFORE)||(LA17_16 >= KW_BRANCH && LA17_16 <= KW_BUCKETS)||(LA17_16 >= KW_CACHE && LA17_16 <= KW_CASCADE)||(LA17_16 >= KW_CBO && LA17_16 <= KW_CHANGE)||LA17_16==KW_CHECK||(LA17_16 >= KW_CLUSTER && LA17_16 <= KW_COLLECTION)||(LA17_16 >= KW_COLUMNS && LA17_16 <= KW_COMMENT)||(LA17_16 >= KW_COMPACT && LA17_16 <= KW_COMPACTIONS)||(LA17_16 >= KW_COMPUTE && LA17_16 <= KW_CONCATENATE)||LA17_16==KW_CONTINUE||LA17_16==KW_COST||LA17_16==KW_CRON||LA17_16==KW_DATA||LA17_16==KW_DATABASES||(LA17_16 >= KW_DATETIME && LA17_16 <= KW_DCPROPERTIES)||LA17_16==KW_DEBUG||(LA17_16 >= KW_DEFAULT && LA17_16 <= KW_DEFINED)||(LA17_16 >= KW_DELIMITED && LA17_16 <= KW_DESC)||(LA17_16 >= KW_DETAIL && LA17_16 <= KW_DISABLE)||(LA17_16 >= KW_DISTRIBUTE && LA17_16 <= KW_DO)||LA17_16==KW_DOW||(LA17_16 >= KW_DUMP && LA17_16 <= KW_ELEM_TYPE)||LA17_16==KW_ENABLE||(LA17_16 >= KW_ENFORCED && LA17_16 <= KW_EVERY)||(LA17_16 >= KW_EXCLUSIVE && LA17_16 <= KW_EXECUTED)||(LA17_16 >= KW_EXPIRE_SNAPSHOTS && LA17_16 <= KW_EXPRESSION)||LA17_16==KW_FAST_FORWARD||(LA17_16 >= KW_FIELDS && LA17_16 <= KW_FIRST)||(LA17_16 >= KW_FORMAT && LA17_16 <= KW_FORMATTED)||LA17_16==KW_FUNCTIONS||(LA17_16 >= KW_HOUR && LA17_16 <= KW_IDXPROPERTIES)||LA17_16==KW_IGNORE||(LA17_16 >= KW_INDEX && LA17_16 <= KW_INDEXES)||(LA17_16 >= KW_INPATH && LA17_16 <= KW_INPUTFORMAT)||(LA17_16 >= KW_ISOLATION && LA17_16 <= KW_JAR)||(LA17_16 >= KW_JOINCOST && LA17_16 <= KW_LAST)||LA17_16==KW_LEVEL||(LA17_16 >= KW_LIMIT && LA17_16 <= KW_LOAD)||LA17_16==KW_LOCATION||(LA17_16 >= KW_LOCKS && LA17_16 <= KW_LONG)||(LA17_16 >= KW_MANAGED && LA17_16 <= KW_MANAGEMENT)||(LA17_16 >= KW_MAPJOIN && LA17_16 <= KW_MATERIALIZED)||LA17_16==KW_METADATA||(LA17_16 >= KW_MINUTE && LA17_16 <= KW_MONTH)||(LA17_16 >= KW_MOVE && LA17_16 <= KW_MSCK)||(LA17_16 >= KW_NORELY && LA17_16 <= KW_NOSCAN)||LA17_16==KW_NOVALIDATE||LA17_16==KW_NULLS||LA17_16==KW_OFFSET||(LA17_16 >= KW_OPERATOR && LA17_16 <= KW_OPTION)||(LA17_16 >= KW_OUTPUTDRIVER && LA17_16 <= KW_OUTPUTFORMAT)||(LA17_16 >= KW_OVERWRITE && LA17_16 <= KW_OWNER)||(LA17_16 >= KW_PARTITIONED && LA17_16 <= KW_PATH)||(LA17_16 >= KW_PLAN && LA17_16 <= KW_POOL)||LA17_16==KW_PRINCIPALS||LA17_16==KW_PURGE||(LA17_16 >= KW_QUARTER && LA17_16 <= KW_QUERY_PARALLELISM)||LA17_16==KW_READ||(LA17_16 >= KW_REBUILD && LA17_16 <= KW_RECORDWRITER)||(LA17_16 >= KW_RELOAD && LA17_16 <= KW_RETENTION)||LA17_16==KW_REWRITE||(LA17_16 >= KW_ROLE && LA17_16 <= KW_ROLES)||(LA17_16 >= KW_SCHEDULED && LA17_16 <= KW_SECOND)||(LA17_16 >= KW_SEMI && LA17_16 <= KW_SERVER)||(LA17_16 >= KW_SETS && LA17_16 <= KW_SHOW)||LA17_16==KW_SKEWED||(LA17_16 >= KW_SNAPSHOT && LA17_16 <= KW_SNAPSHOTS)||(LA17_16 >= KW_SORT && LA17_16 <= KW_SSL)||(LA17_16 >= KW_STATISTICS && LA17_16 <= KW_SUMMARY)||(LA17_16 >= KW_SYSTEM_TIME && LA17_16 <= KW_SYSTEM_VERSION)||LA17_16==KW_TABLES||(LA17_16 >= KW_TAG && LA17_16 <= KW_TERMINATED)||LA17_16==KW_TINYINT||LA17_16==KW_TOUCH||(LA17_16 >= KW_TRANSACTION && LA17_16 <= KW_TRANSACTIONS)||LA17_16==KW_TRIM||(LA17_16 >= KW_TYPE && LA17_16 <= KW_UNARCHIVE)||LA17_16==KW_UNDO||LA17_16==KW_UNIONTYPE||(LA17_16 >= KW_UNKNOWN && LA17_16 <= KW_UNSIGNED)||(LA17_16 >= KW_URI && LA17_16 <= KW_USE)||(LA17_16 >= KW_UTC && LA17_16 <= KW_VALIDATE)||LA17_16==KW_VALUE_TYPE||(LA17_16 >= KW_VECTORIZATION && LA17_16 <= KW_WEEK)||LA17_16==KW_WHILE||(LA17_16 >= KW_WITHIN && LA17_16 <= KW_ZONE)||LA17_16==KW_BATCH||LA17_16==KW_DAYOFWEEK||LA17_16==KW_HOLD_DDLTIME||LA17_16==KW_NO_DROP||LA17_16==KW_OFFLINE||LA17_16==KW_PROTECTION||LA17_16==KW_READONLY||LA17_16==KW_TIMESTAMPTZ) ) {s = 127;}

                         
                        input.seek(index17_16);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA17_108 = input.LA(1);

                         
                        int index17_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA17_108==LPAREN) && (synpred1_HiveParser())) {s = 140;}

                        else if ( (LA17_108==COMMA) ) {s = 141;}

                        else if ( (LA17_108==KW_ON) && (synpred1_HiveParser())) {s = 142;}

                        else if ( (LA17_108==KW_TO) ) {s = 143;}

                         
                        input.seek(index17_108);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA17_110 = input.LA(1);

                         
                        int index17_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA17_110==LPAREN) && (synpred1_HiveParser())) {s = 144;}

                        else if ( (LA17_110==COMMA) ) {s = 145;}

                        else if ( (LA17_110==KW_ON) && (synpred1_HiveParser())) {s = 146;}

                        else if ( (LA17_110==KW_TO) ) {s = 147;}

                         
                        input.seek(index17_110);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA17_122 = input.LA(1);

                         
                        int index17_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA17_122==LPAREN) && (synpred2_HiveParser())) {s = 148;}

                        else if ( (LA17_122==COMMA) ) {s = 149;}

                        else if ( (LA17_122==KW_ON) && (synpred2_HiveParser())) {s = 150;}

                        else if ( (LA17_122==KW_FROM) ) {s = 151;}

                         
                        input.seek(index17_122);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA17_124 = input.LA(1);

                         
                        int index17_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA17_124==LPAREN) && (synpred2_HiveParser())) {s = 152;}

                        else if ( (LA17_124==COMMA) ) {s = 153;}

                        else if ( (LA17_124==KW_ON) && (synpred2_HiveParser())) {s = 154;}

                        else if ( (LA17_124==KW_FROM) ) {s = 155;}

                         
                        input.seek(index17_124);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA17_141 = input.LA(1);

                         
                        int index17_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 146;}

                        else if ( (true) ) {s = 113;}

                         
                        input.seek(index17_141);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA17_143 = input.LA(1);

                         
                        int index17_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 146;}

                        else if ( (true) ) {s = 113;}

                         
                        input.seek(index17_143);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA17_145 = input.LA(1);

                         
                        int index17_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 146;}

                        else if ( (true) ) {s = 113;}

                         
                        input.seek(index17_145);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA17_147 = input.LA(1);

                         
                        int index17_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_HiveParser()) ) {s = 146;}

                        else if ( (true) ) {s = 113;}

                         
                        input.seek(index17_147);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA17_149 = input.LA(1);

                         
                        int index17_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 154;}

                        else if ( (true) ) {s = 127;}

                         
                        input.seek(index17_149);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA17_151 = input.LA(1);

                         
                        int index17_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 154;}

                        else if ( (true) ) {s = 127;}

                         
                        input.seek(index17_151);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA17_153 = input.LA(1);

                         
                        int index17_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 154;}

                        else if ( (true) ) {s = 127;}

                         
                        input.seek(index17_153);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA17_155 = input.LA(1);

                         
                        int index17_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_HiveParser()) ) {s = 154;}

                        else if ( (true) ) {s = 127;}

                         
                        input.seek(index17_155);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA102_eotS =
        "\112\uffff";
    static final String DFA102_eofS =
        "\1\4\2\uffff\1\4\106\uffff";
    static final String DFA102_minS =
        "\1\30\2\uffff\1\20\10\uffff\2\0\2\uffff\3\0\1\uffff\1\0\65\uffff";
    static final String DFA102_maxS =
        "\1\u02f1\2\uffff\1\u02f1\10\uffff\2\0\2\uffff\3\0\1\uffff\1\0\65"+
        "\uffff";
    static final String DFA102_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\3\105\uffff";
    static final String DFA102_specialS =
        "\1\0\13\uffff\1\1\1\2\2\uffff\1\3\1\4\1\5\1\uffff\1\6\65\uffff}>";
    static final String[] DFA102_transitionS = {
            "\1\4\1\uffff\6\4\1\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\3\4\1\uffff\2\4\5\uffff\3\4\1\uffff\2\4\2\uffff\2\4\1\uffff"+
            "\1\4\1\uffff\4\4\1\uffff\2\4\1\uffff\2\4\1\1\2\4\2\uffff\1\4"+
            "\1\uffff\1\4\1\uffff\1\4\6\uffff\1\4\1\2\1\4\3\uffff\4\4\1\uffff"+
            "\1\4\1\uffff\3\4\1\uffff\3\4\1\uffff\4\4\1\uffff\3\4\1\uffff"+
            "\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\3\4\2\uffff\3\4\1\uffff"+
            "\4\4\4\uffff\1\4\1\uffff\4\4\6\uffff\2\4\3\uffff\1\4\4\uffff"+
            "\2\4\1\uffff\1\4\2\uffff\2\4\1\uffff\3\4\6\uffff\3\4\1\uffff"+
            "\6\4\4\uffff\1\4\1\uffff\3\4\1\uffff\5\4\1\uffff\3\4\1\uffff"+
            "\4\4\1\uffff\1\4\1\uffff\2\4\1\uffff\2\4\1\uffff\2\4\1\uffff"+
            "\1\4\1\uffff\1\4\1\uffff\1\4\3\uffff\3\4\1\uffff\1\4\3\uffff"+
            "\2\4\1\uffff\2\4\1\uffff\3\4\2\uffff\4\4\5\uffff\1\4\1\uffff"+
            "\1\4\1\uffff\3\4\1\uffff\1\4\2\uffff\3\4\3\uffff\16\4\1\uffff"+
            "\1\4\2\uffff\2\4\4\uffff\2\4\1\3\2\4\1\uffff\4\4\1\uffff\6\4"+
            "\1\uffff\2\4\1\uffff\4\4\1\uffff\7\4\1\uffff\2\4\1\uffff\1\4"+
            "\1\uffff\4\4\5\uffff\1\4\1\uffff\1\4\1\uffff\3\4\2\uffff\1\4"+
            "\2\uffff\2\4\1\uffff\1\4\1\uffff\1\4\2\uffff\5\4\1\uffff\3\4"+
            "\2\uffff\3\4\1\uffff\1\4\1\uffff\5\4\2\uffff\1\4\2\uffff\6\4"+
            "\77\uffff\1\4\57\uffff\1\4\72\uffff\1\4\67\uffff\1\4\3\uffff"+
            "\1\4\35\uffff\1\4\7\uffff\1\4\112\uffff\1\4",
            "",
            "",
            "\1\4\7\uffff\1\14\1\uffff\6\24\1\uffff\1\24\1\uffff\1\24\3"+
            "\uffff\1\24\2\uffff\3\24\1\uffff\2\24\5\uffff\3\24\1\uffff\2"+
            "\24\2\uffff\2\24\1\uffff\1\24\1\uffff\4\24\1\uffff\2\24\1\uffff"+
            "\2\24\1\uffff\2\24\2\uffff\1\24\1\uffff\1\24\1\uffff\1\24\6"+
            "\uffff\1\24\1\uffff\1\24\3\uffff\4\24\1\uffff\1\24\1\uffff\3"+
            "\24\1\uffff\3\24\1\uffff\4\24\1\uffff\3\24\1\uffff\1\24\1\uffff"+
            "\2\24\1\uffff\1\24\1\uffff\3\24\2\uffff\3\24\1\uffff\4\24\4"+
            "\uffff\1\24\1\uffff\4\24\6\uffff\2\24\3\uffff\1\24\4\uffff\2"+
            "\24\1\uffff\1\24\2\uffff\2\24\1\uffff\3\24\6\uffff\3\24\1\uffff"+
            "\6\24\4\uffff\1\24\1\uffff\1\22\2\24\1\uffff\5\24\1\uffff\3"+
            "\24\1\uffff\4\24\1\uffff\1\24\1\uffff\2\24\1\uffff\2\24\1\uffff"+
            "\2\24\1\uffff\1\24\1\uffff\1\24\1\uffff\1\24\3\uffff\3\24\1"+
            "\uffff\1\4\3\uffff\2\24\1\uffff\2\24\1\4\3\24\2\uffff\3\24\1"+
            "\15\5\uffff\1\24\1\uffff\1\24\1\uffff\3\24\1\uffff\1\24\2\uffff"+
            "\3\24\3\uffff\16\24\1\uffff\1\24\2\uffff\2\24\4\uffff\5\24\1"+
            "\uffff\4\24\1\uffff\6\24\1\uffff\2\24\1\uffff\4\24\1\uffff\1"+
            "\24\1\21\5\24\1\uffff\2\24\1\uffff\1\24\1\uffff\4\24\5\uffff"+
            "\1\24\1\uffff\1\24\1\uffff\3\24\2\uffff\1\24\2\uffff\1\20\1"+
            "\24\1\uffff\1\24\1\uffff\1\24\2\uffff\5\24\1\uffff\3\24\2\uffff"+
            "\3\24\1\uffff\1\24\1\uffff\5\24\2\uffff\1\24\2\uffff\6\24\77"+
            "\uffff\1\24\57\uffff\1\24\72\uffff\1\24\67\uffff\1\24\3\uffff"+
            "\1\24\35\uffff\1\24\7\uffff\1\24\112\uffff\1\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA102_eot = DFA.unpackEncodedString(DFA102_eotS);
    static final short[] DFA102_eof = DFA.unpackEncodedString(DFA102_eofS);
    static final char[] DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_minS);
    static final char[] DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_maxS);
    static final short[] DFA102_accept = DFA.unpackEncodedString(DFA102_acceptS);
    static final short[] DFA102_special = DFA.unpackEncodedString(DFA102_specialS);
    static final short[][] DFA102_transition;

    static {
        int numStates = DFA102_transitionS.length;
        DFA102_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA102_transition[i] = DFA.unpackEncodedString(DFA102_transitionS[i]);
        }
    }

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;
        }
        public String getDescription() {
            return "1291:7: ( ( KW_COMPACT_ID )=> compactionId -> ^( TOK_SHOW_COMPACTIONS compactionId ) | ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= identifier ) ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? -> ^( TOK_SHOW_COMPACTIONS $dbName ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? ) | (parttype= partTypeExpr )? ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? -> ^( TOK_SHOW_COMPACTIONS ( $parttype)? ( compactionPool )? ( compactionType )? ( compactionStatus )? ( orderByClause )? ( limitClause )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA102_0 = input.LA(1);

                         
                        int index102_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_0==KW_COMPACT_ID) && (synpred14_HiveParser())) {s = 1;}

                        else if ( (LA102_0==KW_DATABASE) && (synpred15_HiveParser())) {s = 2;}

                        else if ( (LA102_0==KW_SCHEMA) ) {s = 3;}

                        else if ( (LA102_0==EOF||LA102_0==Identifier||(LA102_0 >= KW_ABORT && LA102_0 <= KW_AFTER)||LA102_0==KW_ALLOC_FRACTION||LA102_0==KW_ANALYZE||LA102_0==KW_ARCHIVE||(LA102_0 >= KW_ASC && LA102_0 <= KW_AT)||(LA102_0 >= KW_AUTOCOMMIT && LA102_0 <= KW_BEFORE)||(LA102_0 >= KW_BRANCH && LA102_0 <= KW_BUCKETS)||(LA102_0 >= KW_CACHE && LA102_0 <= KW_CASCADE)||(LA102_0 >= KW_CBO && LA102_0 <= KW_CHANGE)||LA102_0==KW_CHECK||(LA102_0 >= KW_CLUSTER && LA102_0 <= KW_COLLECTION)||(LA102_0 >= KW_COLUMNS && LA102_0 <= KW_COMMENT)||(LA102_0 >= KW_COMPACT && LA102_0 <= KW_COMPACTIONS)||(LA102_0 >= KW_COMPUTE && LA102_0 <= KW_CONCATENATE)||LA102_0==KW_CONTINUE||LA102_0==KW_COST||LA102_0==KW_CRON||LA102_0==KW_DATA||LA102_0==KW_DATABASES||(LA102_0 >= KW_DATETIME && LA102_0 <= KW_DCPROPERTIES)||LA102_0==KW_DEBUG||(LA102_0 >= KW_DEFAULT && LA102_0 <= KW_DEFINED)||(LA102_0 >= KW_DELIMITED && LA102_0 <= KW_DESC)||(LA102_0 >= KW_DETAIL && LA102_0 <= KW_DISABLE)||(LA102_0 >= KW_DISTRIBUTE && LA102_0 <= KW_DO)||LA102_0==KW_DOW||(LA102_0 >= KW_DUMP && LA102_0 <= KW_ELEM_TYPE)||LA102_0==KW_ENABLE||(LA102_0 >= KW_ENFORCED && LA102_0 <= KW_EVERY)||(LA102_0 >= KW_EXCLUSIVE && LA102_0 <= KW_EXECUTED)||(LA102_0 >= KW_EXPIRE_SNAPSHOTS && LA102_0 <= KW_EXPRESSION)||LA102_0==KW_FAST_FORWARD||(LA102_0 >= KW_FIELDS && LA102_0 <= KW_FIRST)||(LA102_0 >= KW_FORMAT && LA102_0 <= KW_FORMATTED)||LA102_0==KW_FUNCTIONS||(LA102_0 >= KW_HOUR && LA102_0 <= KW_IDXPROPERTIES)||LA102_0==KW_IGNORE||(LA102_0 >= KW_INDEX && LA102_0 <= KW_INDEXES)||(LA102_0 >= KW_INPATH && LA102_0 <= KW_INPUTFORMAT)||(LA102_0 >= KW_ISOLATION && LA102_0 <= KW_JAR)||(LA102_0 >= KW_JOINCOST && LA102_0 <= KW_LAST)||LA102_0==KW_LEVEL||(LA102_0 >= KW_LIMIT && LA102_0 <= KW_LOAD)||(LA102_0 >= KW_LOCATION && LA102_0 <= KW_LONG)||(LA102_0 >= KW_MANAGED && LA102_0 <= KW_MANAGEMENT)||(LA102_0 >= KW_MAPJOIN && LA102_0 <= KW_MATERIALIZED)||LA102_0==KW_METADATA||(LA102_0 >= KW_MINUTE && LA102_0 <= KW_MONTH)||(LA102_0 >= KW_MOVE && LA102_0 <= KW_MSCK)||(LA102_0 >= KW_NORELY && LA102_0 <= KW_NOSCAN)||LA102_0==KW_NOVALIDATE||LA102_0==KW_NULLS||LA102_0==KW_OFFSET||(LA102_0 >= KW_OPERATOR && LA102_0 <= KW_OPTION)||LA102_0==KW_ORDER||(LA102_0 >= KW_OUTPUTDRIVER && LA102_0 <= KW_OUTPUTFORMAT)||(LA102_0 >= KW_OVERWRITE && LA102_0 <= KW_OWNER)||(LA102_0 >= KW_PARTITIONED && LA102_0 <= KW_PATH)||(LA102_0 >= KW_PLAN && LA102_0 <= KW_POOL)||LA102_0==KW_PRINCIPALS||LA102_0==KW_PURGE||(LA102_0 >= KW_QUARTER && LA102_0 <= KW_QUERY_PARALLELISM)||LA102_0==KW_READ||(LA102_0 >= KW_REBUILD && LA102_0 <= KW_RECORDWRITER)||(LA102_0 >= KW_RELOAD && LA102_0 <= KW_RETENTION)||LA102_0==KW_REWRITE||(LA102_0 >= KW_ROLE && LA102_0 <= KW_ROLES)||(LA102_0 >= KW_SCHEDULED && LA102_0 <= KW_SCHEDULING_POLICY)||(LA102_0 >= KW_SCHEMAS && LA102_0 <= KW_SECOND)||(LA102_0 >= KW_SEMI && LA102_0 <= KW_SERVER)||(LA102_0 >= KW_SETS && LA102_0 <= KW_SKEWED)||(LA102_0 >= KW_SNAPSHOT && LA102_0 <= KW_SNAPSHOTS)||(LA102_0 >= KW_SORT && LA102_0 <= KW_SSL)||(LA102_0 >= KW_STATISTICS && LA102_0 <= KW_SUMMARY)||(LA102_0 >= KW_SYSTEM_TIME && LA102_0 <= KW_SYSTEM_VERSION)||LA102_0==KW_TABLES||(LA102_0 >= KW_TAG && LA102_0 <= KW_TERMINATED)||LA102_0==KW_TINYINT||LA102_0==KW_TOUCH||(LA102_0 >= KW_TRANSACTION && LA102_0 <= KW_TRANSACTIONS)||LA102_0==KW_TRIM||(LA102_0 >= KW_TYPE && LA102_0 <= KW_UNARCHIVE)||LA102_0==KW_UNDO||LA102_0==KW_UNIONTYPE||(LA102_0 >= KW_UNKNOWN && LA102_0 <= KW_UNSIGNED)||(LA102_0 >= KW_URI && LA102_0 <= KW_USE)||(LA102_0 >= KW_UTC && LA102_0 <= KW_VALIDATE)||LA102_0==KW_VALUE_TYPE||(LA102_0 >= KW_VECTORIZATION && LA102_0 <= KW_WEEK)||LA102_0==KW_WHILE||(LA102_0 >= KW_WITHIN && LA102_0 <= KW_ZONE)||LA102_0==KW_BATCH||LA102_0==KW_DAYOFWEEK||LA102_0==KW_HOLD_DDLTIME||LA102_0==KW_NO_DROP||LA102_0==KW_OFFLINE||LA102_0==KW_PROTECTION||LA102_0==KW_READONLY||LA102_0==KW_TIMESTAMPTZ) ) {s = 4;}

                         
                        input.seek(index102_0);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA102_12 = input.LA(1);

                         
                        int index102_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_HiveParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index102_12);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA102_13 = input.LA(1);

                         
                        int index102_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_HiveParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index102_13);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA102_16 = input.LA(1);

                         
                        int index102_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_HiveParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index102_16);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA102_17 = input.LA(1);

                         
                        int index102_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_HiveParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index102_17);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA102_18 = input.LA(1);

                         
                        int index102_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_HiveParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index102_18);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA102_20 = input.LA(1);

                         
                        int index102_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_HiveParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index102_20);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 102, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA194_eotS =
        "\137\uffff";
    static final String DFA194_eofS =
        "\1\2\136\uffff";
    static final String DFA194_minS =
        "\1\11\1\14\42\uffff\1\4\72\uffff";
    static final String DFA194_maxS =
        "\1\u01ab\1\u02f1\42\uffff\1\u01af\72\uffff";
    static final String DFA194_acceptS =
        "\2\uffff\1\2\76\uffff\1\1\35\uffff";
    static final String DFA194_specialS =
        "\137\uffff}>";
    static final String[] DFA194_transitionS = {
            "\1\2\37\uffff\1\2\30\uffff\1\2\63\uffff\1\2\15\uffff\1\2\33"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\1\2"+
            "\1\uffff\1\2\15\uffff\1\2\5\uffff\2\2\2\uffff\1\2\10\uffff\1"+
            "\1\6\uffff\1\2\12\uffff\1\2\12\uffff\1\2\32\uffff\1\2\10\uffff"+
            "\3\2\37\uffff\1\2\17\uffff\1\2\6\uffff\1\2\13\uffff\1\2\27\uffff"+
            "\1\2\15\uffff\1\2\3\uffff\1\2\10\uffff\1\2\1\uffff\1\2\13\uffff"+
            "\1\2\14\uffff\1\2",
            "\1\2\13\uffff\10\2\1\uffff\1\2\1\uffff\1\2\3\uffff\2\2\1\uffff"+
            "\3\2\1\uffff\2\2\1\uffff\3\2\1\uffff\3\2\1\uffff\6\2\1\uffff"+
            "\1\2\1\uffff\4\2\1\uffff\2\2\1\uffff\2\2\1\uffff\2\2\2\uffff"+
            "\1\2\1\uffff\1\2\1\uffff\1\2\3\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\5\2\1\uffff\1\2\1\uffff\3\2\1\uffff\3\2\1\uffff"+
            "\4\2\1\uffff\5\2\1\uffff\2\2\1\uffff\1\2\1\uffff\3\2\2\uffff"+
            "\10\2\2\uffff\3\2\1\uffff\6\2\4\uffff\2\2\3\uffff\1\2\2\uffff"+
            "\1\2\1\uffff\4\2\2\uffff\2\2\1\uffff\3\2\1\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\3\2\1\uffff\2\2\1\44\3\2\4\uffff\1\2\1\uffff\3"+
            "\2\1\uffff\5\2\1\uffff\10\2\1\uffff\1\2\1\uffff\2\2\1\uffff"+
            "\2\2\1\uffff\6\2\1\uffff\1\2\3\uffff\3\2\5\uffff\2\2\1\uffff"+
            "\2\2\1\uffff\3\2\2\uffff\4\2\5\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\3\2\1\uffff\1\2\1\uffff\4\2\3\uffff\16\2\1\uffff\1\2\2\uffff"+
            "\2\2\4\uffff\5\2\1\uffff\4\2\1\uffff\11\2\1\uffff\4\2\1\uffff"+
            "\7\2\1\uffff\2\2\1\uffff\1\2\1\uffff\4\2\3\uffff\3\2\1\uffff"+
            "\1\2\1\uffff\3\2\2\uffff\2\2\1\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\5\2\1\uffff\3\2\2\uffff\3\2\1\uffff\1\2\1\uffff"+
            "\5\2\2\uffff\1\2\2\uffff\6\2\4\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\3\2\1\uffff\1\2\6\uffff\3\2\47\uffff\1\2\57\uffff\1\2\72\uffff"+
            "\1\2\67\uffff\1\2\3\uffff\1\2\35\uffff\1\2\7\uffff\1\2\112\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\3\2\2\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\2\2\1\uffff"+
            "\2\2\15\uffff\1\2\13\uffff\1\2\174\uffff\1\2\13\uffff\1\2\17"+
            "\uffff\1\2\35\uffff\1\2\13\uffff\1\2\45\uffff\1\2\2\uffff\1"+
            "\2\21\uffff\1\2\4\uffff\1\2\53\uffff\1\101\43\uffff\1\2\27\uffff"+
            "\2\2\1\uffff\2\2\1\uffff\3\2\2\uffff\1\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA194_eot = DFA.unpackEncodedString(DFA194_eotS);
    static final short[] DFA194_eof = DFA.unpackEncodedString(DFA194_eofS);
    static final char[] DFA194_min = DFA.unpackEncodedStringToUnsignedChars(DFA194_minS);
    static final char[] DFA194_max = DFA.unpackEncodedStringToUnsignedChars(DFA194_maxS);
    static final short[] DFA194_accept = DFA.unpackEncodedString(DFA194_acceptS);
    static final short[] DFA194_special = DFA.unpackEncodedString(DFA194_specialS);
    static final short[][] DFA194_transition;

    static {
        int numStates = DFA194_transitionS.length;
        DFA194_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA194_transition[i] = DFA.unpackEncodedString(DFA194_transitionS[i]);
        }
    }

    class DFA194 extends DFA {

        public DFA194(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 194;
            this.eot = DFA194_eot;
            this.eof = DFA194_eof;
            this.min = DFA194_min;
            this.max = DFA194_max;
            this.accept = DFA194_accept;
            this.special = DFA194_special;
            this.transition = DFA194_transition;
        }
        public String getDescription() {
            return "1920:103: ( tableRowFormatMapKeysIdentifier )?";
        }
    }
 

    public static final BitSet FOLLOW_explainStatement_in_statement1566 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_statement1568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_execStatement_in_statement1573 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_statement1575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXPLAIN_in_explainStatement1596 = new BitSet(new long[]{0x2000280C04000000L,0x8811D0C000100200L,0x0010101180005080L,0x0002000810839004L,0x8402181A24000200L,0x4401000000004008L,0x0000000040080482L});
    public static final BitSet FOLLOW_explainOption_in_explainStatement1605 = new BitSet(new long[]{0x2000280C04000000L,0x8811D0C000100200L,0x0010101180005080L,0x0002000810839004L,0x8402081A24000200L,0x4401000000004008L,0x0000000040080482L});
    public static final BitSet FOLLOW_execStatement_in_explainStatement1608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REWRITE_in_explainStatement1639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000100000000L,0x0000000000800000L,0x0400000004000000L,0x0000000000000000L,0x0000000040080080L});
    public static final BitSet FOLLOW_queryStatementExpression_in_explainStatement1641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_explainOption1681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FORMATTED_in_explainOption1689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DEPENDENCY_in_explainOption1697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CBO_in_explainOption1705 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_LOGICAL_in_explainOption1722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_AUTHORIZATION_in_explainOption1730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ANALYZE_in_explainOption1738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REOPTIMIZATION_in_explainOption1746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCKS_in_explainOption1754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_AST_in_explainOption1762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_VECTORIZATION_in_explainOption1771 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000002000L,0x0001800000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_vectorizationOnly_in_explainOption1773 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000002000L,0x0001000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_vectorizatonDetail_in_explainOption1776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DEBUG_in_explainOption1786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DDL_in_explainOption1794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ONLY_in_vectorizationOnly1821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SUMMARY_in_vectorizatonDetail1858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_OPERATOR_in_vectorizatonDetail1876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXPRESSION_in_vectorizatonDetail1894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DETAIL_in_vectorizatonDetail1912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_queryStatementExpression_in_execStatement1949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loadStatement_in_execStatement1957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exportStatement_in_execStatement1965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importStatement_in_execStatement1973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_replDumpStatement_in_execStatement1981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_replLoadStatement_in_execStatement1989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_replStatusStatement_in_execStatement1997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ddlStatement_in_execStatement2005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_deleteStatement_in_execStatement2013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_updateStatement_in_execStatement2021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqlTransactionStatement_in_execStatement2029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeStatement_in_execStatement2037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepareStatement_in_execStatement2045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_executeStatement_in_execStatement2053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOAD_in_loadStatement2080 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_DATA_in_loadStatement2082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_KW_LOCAL_in_loadStatement2087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_INPATH_in_loadStatement2091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_loadStatement2096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_OVERWRITE_in_loadStatement2102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_INTO_in_loadStatement2106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_loadStatement2108 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_loadStatement2113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_inputFileFormat_in_loadStatement2116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXPORT_in_exportStatement2171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_exportStatement2179 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_exportStatement2184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_TO_in_exportStatement2193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_exportStatement2198 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_replicationClause_in_exportStatement2207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IMPORT_in_importStatement2257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100008000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_EXTERNAL_in_importStatement2272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_importStatement2276 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_importStatement2281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_KW_FROM_in_importStatement2295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_importStatement2300 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_tableLocation_in_importStatement2312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createDatabaseStatement_in_ddlStatement2364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchDatabaseStatement_in_ddlStatement2372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropDatabaseStatement_in_ddlStatement2380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createTableStatement_in_ddlStatement2388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropTableStatement_in_ddlStatement2396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_truncateTableStatement_in_ddlStatement2404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatement_in_ddlStatement2412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_descStatement_in_ddlStatement2420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showStatement_in_ddlStatement2428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metastoreCheck_in_ddlStatement2436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createViewStatement_in_ddlStatement2444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createMaterializedViewStatement_in_ddlStatement2452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createScheduledQueryStatement_in_ddlStatement2460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterScheduledQueryStatement_in_ddlStatement2468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropScheduledQueryStatement_in_ddlStatement2476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropViewStatement_in_ddlStatement2484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropMaterializedViewStatement_in_ddlStatement2492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createFunctionStatement_in_ddlStatement2500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createMacroStatement_in_ddlStatement2508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropFunctionStatement_in_ddlStatement2516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reloadFunctionsStatement_in_ddlStatement2524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropMacroStatement_in_ddlStatement2532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_analyzeStatement_in_ddlStatement2540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lockStatement_in_ddlStatement2548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unlockStatement_in_ddlStatement2556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lockDatabase_in_ddlStatement2564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unlockDatabase_in_ddlStatement2572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createRoleStatement_in_ddlStatement2580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropRoleStatement_in_ddlStatement2588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grantPrivileges_in_ddlStatement2602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_revokePrivileges_in_ddlStatement2616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showGrants_in_ddlStatement2624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showRoleGrants_in_ddlStatement2632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showRolePrincipals_in_ddlStatement2640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showRoles_in_ddlStatement2648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grantRole_in_ddlStatement2656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_revokeRole_in_ddlStatement2664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_setRole_in_ddlStatement2672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showCurrentRole_in_ddlStatement2680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abortTransactionStatement_in_ddlStatement2688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abortCompactionStatement_in_ddlStatement2696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_killQueryStatement_in_ddlStatement2704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_resourcePlanDdlStatements_in_ddlStatement2712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createDataConnectorStatement_in_ddlStatement2720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropDataConnectorStatement_in_ddlStatement2728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IF_in_ifExists2755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_EXISTS_in_ifExists2757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RESTRICT_in_restrictOrCascade2794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CASCADE_in_restrictOrCascade2812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IF_in_ifNotExists2849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_KW_NOT_in_ifNotExists2851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_EXISTS_in_ifNotExists2853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FORCE_in_force2890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ENABLE_in_rewriteEnabled2927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_REWRITE_in_rewriteEnabled2929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DISABLE_in_rewriteDisabled2966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_REWRITE_in_rewriteDisabled2968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_storedAsDirs3005 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_KW_AS_in_storedAsDirs3007 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_DIRECTORIES_in_storedAsDirs3009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_OR_in_orReplace3046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_REPLACE_in_orReplace3048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createDatabaseStatement3085 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_createDatabaseStatement3088 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECF08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_createDatabaseStatement3090 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECF08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_ifNotExists_in_createDatabaseStatement3101 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_createDatabaseStatement3114 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L,0x0000000000000000L,0x0000000000204000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_databaseComment_in_createDatabaseStatement3124 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000204000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_dbLocation_in_createDatabaseStatement3135 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_dbManagedLocation_in_createDatabaseStatement3146 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_WITH_in_createDatabaseStatement3158 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement3160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_dbProperties_in_createDatabaseStatement3164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createDatabaseStatement3204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_KW_REMOTE_in_createDatabaseStatement3206 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_createDatabaseStatement3209 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECF08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_createDatabaseStatement3211 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECF08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_ifNotExists_in_createDatabaseStatement3222 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_createDatabaseStatement3235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_databaseComment_in_createDatabaseStatement3245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_dbConnectorName_in_createDatabaseStatement3256 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_WITH_in_createDatabaseStatement3267 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement3269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_dbProperties_in_createDatabaseStatement3273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCATION_in_dbLocation3333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_dbLocation3337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MANAGEDLOCATION_in_dbManagedLocation3379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_dbManagedLocation3383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_dbProperties3425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_dbPropertiesList_in_dbProperties3427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_dbProperties3429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList3470 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_dbPropertiesList3473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList3475 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_KW_USING_in_dbConnectorName3519 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_dbConnectorName3523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_USE_in_switchDatabaseStatement3559 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_switchDatabaseStatement3561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropDatabaseStatement3600 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_dropDatabaseStatement3603 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECF08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_dropDatabaseStatement3605 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECF08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_ifExists_in_dropDatabaseStatement3608 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_dropDatabaseStatement3611 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_restrictOrCascade_in_dropDatabaseStatement3613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_databaseComment3659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_databaseComment3663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TRUNCATE_in_truncateTableStatement3703 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F7BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_truncateTableStatement3705 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tablePartitionPrefix_in_truncateTableStatement3708 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_COLUMNS_in_truncateTableStatement3711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_truncateTableStatement3713 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameList_in_truncateTableStatement3715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_truncateTableStatement3717 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_force_in_truncateTableStatement3721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropTableStatement3762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_dropTableStatement3764 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECF08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_ifExists_in_dropTableStatement3766 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_dropTableStatement3769 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_KW_PURGE_in_dropTableStatement3771 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_replicationClause_in_dropTableStatement3774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INPUTFORMAT_in_inputFileFormat3823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_inputFileFormat3827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_KW_SERDE_in_inputFileFormat3829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_inputFileFormat3833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_tabTypeExpr3877 = new BitSet(new long[]{0x66E0DC8AFD010002L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_DOT_in_tabTypeExpr3880 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_tabTypeExpr3883 = new BitSet(new long[]{0x66E0DC8AFD000002L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_tabTypeExpr3891 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_DOT_in_tabTypeExpr3894 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_ELEM_TYPE_in_tabTypeExpr3911 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_KW_KEY_TYPE_in_tabTypeExpr3927 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_KW_VALUE_TYPE_in_tabTypeExpr3943 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_identifier_in_tabTypeExpr3950 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_tabTypeExpr_in_partTypeExpr3990 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_partTypeExpr3992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableName_in_tabPartColTypeExpr4032 = new BitSet(new long[]{0x66E0DC8AFD000002L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xFB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_tabPartColTypeExpr4034 = new BitSet(new long[]{0x66E0DC8AFD000002L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_extColumnName_in_tabPartColTypeExpr4037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement4084 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBCF02A6DBDL,0xDC0ECB0CC0F47DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_DESC_in_descStatement4086 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBCF02A6DBDL,0xDC0ECB0CC0F47DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_descStatement4108 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F47DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_descStatement4110 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F47DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement4113 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_descStatement4119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATACONNECTOR_in_descStatement4151 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F47DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement4154 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_descStatement4160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_descStatement4191 = new BitSet(new long[]{0x6EEFDD9AFD6C6070L,0xB7DEEEBC502A6DBDL,0xDC2EEF08C3F47DCEL,0xDB0F15EDAFF7DF0FL,0x7BE1D7FFF3D75079L,0xBE564EA0F5BFBDFFL,0x0003804E1BF2FD73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement4193 = new BitSet(new long[]{0x6EEFDD9AFD6C6070L,0xB7DEEEBC502A6DBDL,0xDC2EEF08C3F43DCEL,0xDB0F15EDAFF7DF0FL,0x7BE1D7FFF3D75079L,0xBE564EA0F5BFBDFFL,0x0003804E1BF2FD73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_descFuncNames_in_descStatement4199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FORMATTED_in_descStatement4236 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement4240 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tabPartColTypeExpr_in_descStatement4245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tabPartColTypeExpr_in_descStatement4272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ANALYZE_in_analyzeStatement4314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_analyzeStatement4316 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_analyzeStatement4321 = new BitSet(new long[]{0x0200000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_KW_COMPUTE_in_analyzeStatement4344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_STATISTICS_in_analyzeStatement4346 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_NOSCAN_in_analyzeStatement4352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FOR_in_analyzeStatement4412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_COLUMNS_in_analyzeStatement4414 = new BitSet(new long[]{0x66E0DC8AFD000002L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameList_in_analyzeStatement4419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CACHE_in_analyzeStatement4472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_KW_METADATA_in_analyzeStatement4474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement4518 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_DATABASES_in_showStatement4521 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_SCHEMAS_in_showStatement4523 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement4527 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0001000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement4529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement4548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement4553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_TABLES_in_showStatement4557 = new BitSet(new long[]{0x66E0DC8AFD000002L,0xB5DEEEBC502A6DBDL,0xDC0EEB09C0F43DCEL,0xDB07156DAF77DF0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0001000003F37D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement4561 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement4563 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_showStatement4568 = new BitSet(new long[]{0x66E0DC8AFD000002L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DF0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0001000003F37D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_showTablesFilterExpr_in_showStatement4575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement4611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_VIEWS_in_showStatement4613 = new BitSet(new long[]{0x66E0DC8AFD000002L,0xB5DEEEBC502A6DBDL,0xDC0EEB09C0F43DCEL,0xDB07156DAF77DF0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0001000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement4617 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement4619 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_showStatement4624 = new BitSet(new long[]{0x66E0DC8AFD000002L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DF0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0001000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement4629 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0001000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement4631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement4633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement4661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_MATERIALIZED_in_showStatement4663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_VIEWS_in_showStatement4665 = new BitSet(new long[]{0x66E0DC8AFD000002L,0xB5DEEEBC502A6DBDL,0xDC0EEB09C0F43DCEL,0xDB07156DAF77DF0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0001000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement4669 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement4671 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_showStatement4676 = new BitSet(new long[]{0x66E0DC8AFD000002L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DF0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0001000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement4681 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0001000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement4683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement4685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement4713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_KW_SORTED_in_showStatement4715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_COLUMNS_in_showStatement4718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200100000000L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement4721 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement4723 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_showStatement4726 = new BitSet(new long[]{0x66E0DC8AFD000002L,0xB5DEEEBC502A6DBDL,0xDC0EEB09C0F43DCEL,0xDB07156DAF77DF0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0001000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement4730 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement4732 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_showStatement4737 = new BitSet(new long[]{0x66E0DC8AFD000002L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DF0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0001000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement4742 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0001000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement4744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement4746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement4782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_FUNCTIONS_in_showStatement4784 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement4787 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0001000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_showFunctionIdentifier_in_showStatement4789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement4812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_PARTITIONS_in_showStatement4814 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_showStatement4818 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2010000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_partitionSpec_in_showStatement4820 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0010000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_whereClause_in_showStatement4823 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0010000000000400L});
    public static final BitSet FOLLOW_orderByClause_in_showStatement4826 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_limitClause_in_showStatement4829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement4859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_CREATE_in_showStatement4861 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_showStatement4882 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_showStatement4884 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_showStatement4889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TABLE_in_showStatement4918 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_showStatement4922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement4947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_showStatement4949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement4951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200100000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement4955 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement4957 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_showStatement4962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement4966 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0001000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement4968 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_showStatement4970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement4998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_showStatement5000 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_showStatement5002 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_showStatement5005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_showStatement5009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_showStatement5011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_LOCKS_in_showStatement5035 = new BitSet(new long[]{0x66E0DC8AFD000002L,0xB5DEEEBC702A6DBDL,0xDC0ECB08C0F47DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_showStatement5060 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_showStatement5062 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_showStatement5068 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement5074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_partTypeExpr_in_showStatement5108 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement5115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_KW_COMPACTIONS_in_showStatement5149 = new BitSet(new long[]{0x66E0DC8AFD000002L,0xB5DEEEBC702A7DBDL,0xDC0ECB08C0F43DCEL,0xDB17156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_compactionId_in_showStatement5171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATABASE_in_showStatement5204 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_showStatement5206 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_showStatement5212 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0010000000000400L,0x0000000000000040L,0x0002000000010000L});
    public static final BitSet FOLLOW_compactionPool_in_showStatement5215 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0010000000000400L,0x0000000000000000L,0x0002000000010000L});
    public static final BitSet FOLLOW_compactionType_in_showStatement5218 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0010000000000400L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_compactionStatus_in_showStatement5221 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0010000000000400L});
    public static final BitSet FOLLOW_orderByClause_in_showStatement5224 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_limitClause_in_showStatement5227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_partTypeExpr_in_showStatement5271 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0010000000000400L,0x0000000000000040L,0x0002000000010000L});
    public static final BitSet FOLLOW_compactionPool_in_showStatement5275 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0010000000000400L,0x0000000000000000L,0x0002000000010000L});
    public static final BitSet FOLLOW_compactionType_in_showStatement5278 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0010000000000400L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_compactionStatus_in_showStatement5281 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0010000000000400L});
    public static final BitSet FOLLOW_orderByClause_in_showStatement5284 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_limitClause_in_showStatement5287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_KW_TRANSACTIONS_in_showStatement5331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_CONF_in_showStatement5347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_showStatement5349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_RESOURCE_in_showStatement5367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_KW_PLAN_in_showStatement5386 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_showStatement5390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PLANS_in_showStatement5413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5436 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_KW_DATACONNECTORS_in_showStatement5439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WHERE_in_showTablesFilterExpr5473 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_showTablesFilterExpr5475 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_EQUAL_in_showTablesFilterExpr5477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_showTablesFilterExpr5479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LIKE_in_showTablesFilterExpr5501 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0001000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showTablesFilterExpr5503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showTablesFilterExpr5505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCK_in_lockStatement5540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_lockStatement5542 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_lockStatement5544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x2000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_partitionSpec_in_lockStatement5546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_lockMode_in_lockStatement5549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCK_in_lockDatabase5589 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_lockDatabase5592 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_lockDatabase5594 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_lockDatabase5600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_lockMode_in_lockDatabase5603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNLOCK_in_unlockStatement5672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_unlockStatement5674 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_unlockStatement5676 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_unlockStatement5678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNLOCK_in_unlockDatabase5718 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_unlockDatabase5721 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_unlockDatabase5723 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_unlockDatabase5729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createRoleStatement5766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_KW_ROLE_in_createRoleStatement5768 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_createRoleStatement5772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropRoleStatement5812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_KW_ROLE_in_dropRoleStatement5814 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_dropRoleStatement5818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_grantPrivileges5858 = new BitSet(new long[]{0x0000000500000000L,0x0800100000100000L,0x0010000000000000L,0x0000000000008000L,0x0400000000000000L,0x4000000000000010L});
    public static final BitSet FOLLOW_privilegeList_in_grantPrivileges5862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_privilegeObject_in_grantPrivileges5870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_TO_in_grantPrivileges5879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_principalSpecification_in_grantPrivileges5881 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_withGrantOption_in_grantPrivileges5889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REVOKE_in_revokePrivileges5938 = new BitSet(new long[]{0x0000000500000000L,0x0800100000100000L,0x0010001000000000L,0x0000000000008000L,0x0400000000000000L,0x4000000000000010L});
    public static final BitSet FOLLOW_grantOptionFor_in_revokePrivileges5940 = new BitSet(new long[]{0x0000000500000000L,0x0800100000100000L,0x0010000000000000L,0x0000000000008000L,0x0400000000000000L,0x4000000000000010L});
    public static final BitSet FOLLOW_privilegeList_in_revokePrivileges5943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_privilegeObject_in_revokePrivileges5945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_KW_FROM_in_revokePrivileges5948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_principalSpecification_in_revokePrivileges5950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_grantRole5997 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_ROLE_in_grantRole5999 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_grantRole6002 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COMMA_in_grantRole6005 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_grantRole6007 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_TO_in_grantRole6011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_principalSpecification_in_grantRole6013 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_withAdminOption_in_grantRole6015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REVOKE_in_revokeRole6061 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_adminOptionFor_in_revokeRole6063 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_ROLE_in_revokeRole6066 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_revokeRole6069 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_revokeRole6072 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_revokeRole6074 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_KW_FROM_in_revokeRole6078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_principalSpecification_in_revokeRole6080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showRoleGrants6125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_KW_ROLE_in_showRoleGrants6127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_GRANT_in_showRoleGrants6129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_principalName_in_showRoleGrants6131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showRoles6171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_ROLES_in_showRoles6173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showCurrentRole6210 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_KW_CURRENT_in_showCurrentRole6212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_ROLES_in_showCurrentRole6214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_setRole6251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_KW_ROLE_in_setRole6253 = new BitSet(new long[]{0x66E0DC8BFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07157DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_ALL_in_setRole6274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NONE_in_setRole6305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_setRole6327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showGrants6368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_GRANT_in_showGrants6370 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000400000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_principalName_in_showGrants6372 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_KW_ON_in_showGrants6376 = new BitSet(new long[]{0x66E0DC8BFD000000L,0xB5DEEEBC702A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F7BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_privilegeIncludeColObject_in_showGrants6378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showRolePrincipals6423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_PRINCIPALS_in_showRolePrincipals6425 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_showRolePrincipals6429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALL_in_privilegeIncludeColObject6476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_privObjectCols_in_privilegeIncludeColObject6490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ON_in_privilegeObject6525 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC702A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F7BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_privObject_in_privilegeObject6527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATABASE_in_privObject6554 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_privObject6556 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_privObject6559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TABLE_in_privObject6575 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_privObject6578 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_privObject6580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_URI_in_privObject6600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_privObject6605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SERVER_in_privObject6624 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_privObject6626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATABASE_in_privObjectCols6652 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_privObjectCols6654 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_privObjectCols6657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TABLE_in_privObjectCols6673 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_privObjectCols6676 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_privObjectCols6679 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameList_in_privObjectCols6683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_privObjectCols6685 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_privObjectCols6689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_URI_in_privObjectCols6713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_privObjectCols6718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SERVER_in_privObjectCols6737 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_privObjectCols6739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_privlegeDef_in_privilegeList6774 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_privilegeList6777 = new BitSet(new long[]{0x0000000500000000L,0x0800100000100000L,0x0010000000000000L,0x0000000000008000L,0x0400000000000000L,0x4000000000000010L});
    public static final BitSet FOLLOW_privlegeDef_in_privilegeList6779 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_privilegeType_in_privlegeDef6821 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_privlegeDef6824 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameList_in_privlegeDef6828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_privlegeDef6830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALL_in_privilegeType6875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALTER_in_privilegeType6889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UPDATE_in_privilegeType6903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_privilegeType6917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_privilegeType6931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCK_in_privilegeType6945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SELECT_in_privilegeType6959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_DATABASE_in_privilegeType6973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INSERT_in_privilegeType6987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DELETE_in_privilegeType7001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_principalName_in_principalSpecification7034 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_principalSpecification7037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_principalName_in_principalSpecification7039 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_KW_USER_in_principalName7077 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000020003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_principalIdentifier_in_principalName7079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GROUP_in_principalName7095 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000020003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_principalIdentifier_in_principalName7097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ROLE_in_principalName7113 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_principalName7115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WITH_in_withGrantOption7150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_GRANT_in_withGrantOption7152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_OPTION_in_withGrantOption7154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_grantOptionFor7191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_OPTION_in_grantOptionFor7193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_FOR_in_grantOptionFor7195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ADMIN_in_adminOptionFor7228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_OPTION_in_adminOptionFor7230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_FOR_in_adminOptionFor7232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WITH_in_withAdminOption7265 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_KW_ADMIN_in_withAdminOption7267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_OPTION_in_withAdminOption7269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MSCK_in_metastoreCheck7306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_REPAIR_in_metastoreCheck7311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_metastoreCheck7322 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_metastoreCheck7324 = new BitSet(new long[]{0x0000000020000002L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_ADD_in_metastoreCheck7338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_DROP_in_metastoreCheck7340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_SYNC_in_metastoreCheck7342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_PARTITIONS_in_metastoreCheck7348 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_partitionSelectorSpec_in_metastoreCheck7352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_resource_in_resourceList7410 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_resourceList7413 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x1000000000200000L});
    public static final BitSet FOLLOW_resource_in_resourceList7415 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_resourceType_in_resource7453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_resource7457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_JAR_in_resourceType7494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FILE_in_resourceType7508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ARCHIVE_in_resourceType7522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createFunctionStatement7553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_createFunctionStatement7558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_createFunctionStatement7562 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_functionIdentifier_in_createFunctionStatement7564 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_KW_AS_in_createFunctionStatement7566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_createFunctionStatement7568 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_KW_USING_in_createFunctionStatement7577 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x1000000000200000L});
    public static final BitSet FOLLOW_resourceList_in_createFunctionStatement7581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropFunctionStatement7667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_dropFunctionStatement7672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_dropFunctionStatement7676 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECF08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_ifExists_in_dropFunctionStatement7678 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_functionIdentifier_in_dropFunctionStatement7681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RELOAD_in_reloadFunctionsStatement7759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_KW_FUNCTIONS_in_reloadFunctionsStatement7762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_reloadFunctionsStatement7764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createMacroStatement7793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_createMacroStatement7795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_MACRO_in_createMacroStatement7797 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_createMacroStatement7799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_createMacroStatement7807 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000080003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_createMacroStatement7809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createMacroStatement7812 = new BitSet(new long[]{0x7EEEDD8AFF001000L,0xB7DEEEBE562A6DBDL,0xDCAECF48C3F73FCEL,0xDB0717EDAFF7DD0FL,0x7BE197FFE3D75079L,0xBE56CEB8F5BFBDFFL,0x0003017243F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_expression_in_createMacroStatement7814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropMacroStatement7858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_dropMacroStatement7860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_MACRO_in_dropMacroStatement7862 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_ifExists_in_dropMacroStatement7864 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_Identifier_in_dropMacroStatement7867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createViewStatement7909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_orReplace_in_createViewStatement7912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_KW_VIEW_in_createViewStatement7916 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECF08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_ifNotExists_in_createViewStatement7919 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_createViewStatement7925 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000100L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_createViewStatement7936 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameCommentList_in_createViewStatement7938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createViewStatement7940 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000100L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_tableComment_in_createViewStatement7944 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_viewPartition_in_createViewStatement7947 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createViewStatement7958 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_KW_AS_in_createViewStatement7969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0400000004000000L,0x0000000000000000L,0x0000000040080080L});
    public static final BitSet FOLLOW_selectStatementWithCTE_in_createViewStatement7979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITIONED_in_viewPartition8102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_KW_ON_in_viewPartition8104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewPartition8106 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameList_in_viewPartition8108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewPartition8110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITIONED_in_viewPartition8130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_KW_ON_in_viewPartition8132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_SPEC_in_viewPartition8134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewPartition8136 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE574EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_partitionTransformSpec_in_viewPartition8143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewPartition8146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_viewClusterSpec_in_viewOrganization8186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_viewComplexSpec_in_viewOrganization8194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CLUSTERED_in_viewClusterSpec8221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_KW_ON_in_viewClusterSpec8223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewClusterSpec8225 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameList_in_viewClusterSpec8227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewClusterSpec8229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_viewDistSpec_in_viewComplexSpec8268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_viewSortSpec_in_viewComplexSpec8270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DISTRIBUTED_in_viewDistSpec8297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_KW_ON_in_viewDistSpec8299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewDistSpec8301 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameList_in_viewDistSpec8305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewDistSpec8307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SORTED_in_viewSortSpec8347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_KW_ON_in_viewSortSpec8349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewSortSpec8351 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameList_in_viewSortSpec8355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewSortSpec8357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropViewStatement8397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_KW_VIEW_in_dropViewStatement8399 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECF08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_ifExists_in_dropViewStatement8401 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_viewName_in_dropViewStatement8404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createMaterializedViewStatement8442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_MATERIALIZED_in_createMaterializedViewStatement8444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_KW_VIEW_in_createMaterializedViewStatement8446 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECF08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_ifNotExists_in_createMaterializedViewStatement8449 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_createMaterializedViewStatement8455 = new BitSet(new long[]{0x0000020000000000L,0x0090000000000108L,0x0000000000000000L,0x4000000000004000L,0x0008000000000000L,0x0000000020020000L});
    public static final BitSet FOLLOW_rewriteDisabled_in_createMaterializedViewStatement8465 = new BitSet(new long[]{0x0000020000000000L,0x0080000000000108L,0x0000000000000000L,0x4000000000004000L,0x0008000000000000L,0x0000000020020000L});
    public static final BitSet FOLLOW_tableComment_in_createMaterializedViewStatement8468 = new BitSet(new long[]{0x0000020000000000L,0x0080000000000008L,0x0000000000000000L,0x4000000000004000L,0x0008000000000000L,0x0000000020020000L});
    public static final BitSet FOLLOW_viewPartition_in_createMaterializedViewStatement8471 = new BitSet(new long[]{0x0000020000000000L,0x0080000000000008L,0x0000000000000000L,0x0000000000004000L,0x0008000000000000L,0x0000000020020000L});
    public static final BitSet FOLLOW_viewOrganization_in_createMaterializedViewStatement8474 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0008000000000000L,0x0000000020020000L});
    public static final BitSet FOLLOW_tableRowFormat_in_createMaterializedViewStatement8485 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000020020000L});
    public static final BitSet FOLLOW_tableFileFormat_in_createMaterializedViewStatement8488 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_tableLocation_in_createMaterializedViewStatement8491 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createMaterializedViewStatement8502 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_KW_AS_in_createMaterializedViewStatement8505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0400000004000000L,0x0000000000000000L,0x0000000040080080L});
    public static final BitSet FOLLOW_selectStatementWithCTE_in_createMaterializedViewStatement8507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropMaterializedViewStatement8675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_MATERIALIZED_in_dropMaterializedViewStatement8677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_KW_VIEW_in_dropMaterializedViewStatement8679 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECF08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_ifExists_in_dropMaterializedViewStatement8681 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_viewName_in_dropMaterializedViewStatement8684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createScheduledQueryStatement8722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_SCHEDULED_in_createScheduledQueryStatement8724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_QUERY_in_createScheduledQueryStatement8726 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_createScheduledQueryStatement8730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000000008L});
    public static final BitSet FOLLOW_scheduleSpec_in_createScheduledQueryStatement8740 = new BitSet(new long[]{0x0000020000000000L,0x8010080000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_executedAsSpec_in_createScheduledQueryStatement8750 = new BitSet(new long[]{0x0000020000000000L,0x8010080000000000L});
    public static final BitSet FOLLOW_enableSpecification_in_createScheduledQueryStatement8761 = new BitSet(new long[]{0x0000020000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_definedAsSpec_in_createScheduledQueryStatement8772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropScheduledQueryStatement8891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_SCHEDULED_in_dropScheduledQueryStatement8893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_QUERY_in_dropScheduledQueryStatement8895 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_dropScheduledQueryStatement8899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALTER_in_alterScheduledQueryStatement8961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_SCHEDULED_in_alterScheduledQueryStatement8963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_QUERY_in_alterScheduledQueryStatement8965 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_alterScheduledQueryStatement8969 = new BitSet(new long[]{0x0000020000000000L,0x8010080000200000L,0x0000000000000188L});
    public static final BitSet FOLLOW_alterScheduledQueryChange_in_alterScheduledQueryStatement8985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_scheduleSpec_in_alterScheduledQueryChange9061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_executedAsSpec_in_alterScheduledQueryChange9069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enableSpecification_in_alterScheduledQueryChange9077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definedAsSpec_in_alterScheduledQueryChange9085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXECUTE_in_alterScheduledQueryChange9093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CRON_in_scheduleSpec9130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_scheduleSpec9134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EVERY_in_scheduleSpec9155 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L,0x0000010000000000L,0x0000000180000000L,0x0200000000000000L,0x0000000000000000L,0x0000001001000000L});
    public static final BitSet FOLLOW_Number_in_scheduleSpec9159 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L,0x0000010000000000L,0x0000000180000000L,0x0200000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_intervalQualifiers_in_scheduleSpec9164 = new BitSet(new long[]{0x0000100000000002L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_AT_in_scheduleSpec9176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_OFFSET_in_scheduleSpec9178 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_scheduleSpec9180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_scheduleSpec9185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXECUTED_in_executedAsSpec9243 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_KW_AS_in_executedAsSpec9245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_executedAsSpec9249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DEFINED_in_definedAsSpec9293 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_KW_AS_in_definedAsSpec9296 = new BitSet(new long[]{0x0000000C04000000L,0x8811900000100200L,0x0010101100001880L,0x0002000810809004L,0x8402081824000200L,0x4401000000004008L,0x0000000040080082L});
    public static final BitSet FOLLOW_statement_in_definedAsSpec9298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionIdentifier_in_showFunctionIdentifier9337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_showFunctionIdentifier9345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_showStmtIdentifier9372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_showStmtIdentifier9380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_tableComment9413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableComment9417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITIONED_in_createTablePartitionSpec9454 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_createTablePartitionSpec9456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_createTablePartitionSpec9458 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_createTablePartitionColumnTypeSpec_in_createTablePartitionSpec9465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_createTablePartitionColumnSpec_in_createTablePartitionSpec9473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createTablePartitionSpec9476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITIONED_in_createTablePartitionSpec9504 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_createTablePartitionSpec9506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_SPEC_in_createTablePartitionSpec9508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_createTablePartitionSpec9510 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE574EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_partitionTransformSpec_in_createTablePartitionSpec9517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createTablePartitionSpec9520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameTypeConstraint_in_createTablePartitionColumnTypeSpec9560 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_createTablePartitionColumnTypeSpec9563 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameTypeConstraint_in_createTablePartitionColumnTypeSpec9565 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_columnName_in_createTablePartitionColumnSpec9607 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_createTablePartitionColumnSpec9610 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnName_in_createTablePartitionColumnSpec9612 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_columnNameTransformConstraint_in_partitionTransformSpec9654 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_partitionTransformSpec9657 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE574EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameTransformConstraint_in_partitionTransformSpec9659 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_partitionTransformType_in_columnNameTransformConstraint9697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnName_in_partitionTransformType9736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_YEAR_in_partitionTransformType9767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_partitionTransformType9769 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnName_in_partitionTransformType9771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_partitionTransformType9773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MONTH_in_partitionTransformType9804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_partitionTransformType9806 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnName_in_partitionTransformType9808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_partitionTransformType9810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DAY_in_partitionTransformType9841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_partitionTransformType9843 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnName_in_partitionTransformType9845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_partitionTransformType9847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_HOUR_in_partitionTransformType9878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_partitionTransformType9880 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnName_in_partitionTransformType9882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_partitionTransformType9884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TRUNCATE_in_partitionTransformType9915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_partitionTransformType9917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Number_in_partitionTransformType9923 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_partitionTransformType9925 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnName_in_partitionTransformType9927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_partitionTransformType9929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BUCKET_in_partitionTransformType9963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_partitionTransformType9965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Number_in_partitionTransformType9971 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_partitionTransformType9973 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnName_in_partitionTransformType9975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_partitionTransformType9977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CLUSTERED_in_tableBuckets10036 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableBuckets10038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableBuckets10040 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameList_in_tableBuckets10044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableBuckets10046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_KW_SORTED_in_tableBuckets10049 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableBuckets10051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableBuckets10053 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameOrderList_in_tableBuckets10057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableBuckets10059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_INTO_in_tableBuckets10063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Number_in_tableBuckets10067 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_KW_BUCKETS_in_tableBuckets10069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CLUSTERED_in_tableImplBuckets10122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_INTO_in_tableImplBuckets10124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Number_in_tableImplBuckets10128 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_KW_BUCKETS_in_tableImplBuckets10130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SKEWED_in_tableSkewed10175 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableSkewed10177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableSkewed10179 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameList_in_tableSkewed10183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableSkewed10185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_KW_ON_in_tableSkewed10187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableSkewed10189 = new BitSet(new long[]{0x0000000002001000L,0x0000000206000000L,0x0000000000020000L,0x0000020000000000L,0x0000000000000000L,0x0000801800000000L,0x0001013040000000L});
    public static final BitSet FOLLOW_skewedValueElement_in_tableSkewed10194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableSkewed10197 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_storedAsDirs_in_tableSkewed10206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatSerde_in_rowFormat10254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatDelimited_in_rowFormat10270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RECORDREADER_in_recordReader10319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_recordReader10321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RECORDWRITER_in_recordWriter10370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_recordWriter10372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ROW_in_rowFormatSerde10421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatSerde10423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_KW_SERDE_in_rowFormatSerde10425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_rowFormatSerde10429 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_WITH_in_rowFormatSerde10432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde10434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_tableProperties_in_rowFormatSerde10438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ROW_in_rowFormatDelimited10490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatDelimited10492 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_KW_DELIMITED_in_rowFormatDelimited10494 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L,0x0000000000100000L,0x0000020000800800L});
    public static final BitSet FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited10496 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L,0x0000000000000000L,0x0000020000800800L});
    public static final BitSet FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited10499 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000020000800800L});
    public static final BitSet FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited10502 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000020000000800L});
    public static final BitSet FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited10505 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_tableRowNullFormat_in_rowFormatDelimited10508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatDelimited_in_tableRowFormat10567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatSerde_in_tableRowFormat10587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed10634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_tableProperties_in_tablePropertiesPrefixed10637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_tableProperties10670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_tablePropertiesList_in_tableProperties10672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableProperties10674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList10715 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_tablePropertiesList10718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList10720 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_keyProperty_in_tablePropertiesList10745 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_tablePropertiesList10748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_keyProperty_in_tablePropertiesList10750 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty10796 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_EQUAL_in_keyValueProperty10798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty10802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_keyProperty10849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier10893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier10895 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier10897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier10901 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier10904 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier10906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier10910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier10962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier10964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier10966 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier10968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier10972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier11018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier11020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier11022 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier11024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier11028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier11074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier11076 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier11078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier11082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NULL_in_tableRowNullFormat11128 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_KW_DEFINED_in_tableRowNullFormat11130 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableRowNullFormat11132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowNullFormat11136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat11191 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat11193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_INPUTFORMAT_in_tableFileFormat11195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat11199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat11201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat11205 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_INPUTDRIVER_in_tableFileFormat11208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat11212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat11214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat11218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat11256 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableFileFormat11258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat11262 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_WITH_in_tableFileFormat11274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat11276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_tableProperties_in_tableFileFormat11280 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat11294 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat11296 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_tableFileFormat11300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat11339 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableFileFormat11341 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_tableFileFormat11345 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_WITH_in_tableFileFormat11357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat11359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_tableProperties_in_tableFileFormat11363 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat11377 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat11379 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_tableFileFormat11383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat11422 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat11424 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_tableFileFormat11428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCATION_in_tableLocation11476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableLocation11480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList11516 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_columnNameTypeList11519 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList11521 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_columnNameTypeOrConstraint_in_columnNameTypeOrConstraintList11559 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_columnNameTypeOrConstraintList11562 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502B6DBDL,0xDC0ECB08E0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975879L,0xBED64EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameTypeOrConstraint_in_columnNameTypeOrConstraintList11564 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList11602 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_columnNameColonTypeList11605 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList11607 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_columnName_in_columnNameList11645 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_columnNameList11648 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnName_in_columnNameList11650 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_identifier_in_columnName11694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_extColumnName11727 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_DOT_in_extColumnName11730 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_ELEM_TYPE_in_extColumnName11740 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_KW_KEY_TYPE_in_extColumnName11750 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_KW_VALUE_TYPE_in_extColumnName11760 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_identifier_in_extColumnName11764 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList11794 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_columnNameOrderList11797 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList11799 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_LPAREN_in_columnParenthesesList11837 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameList_in_columnParenthesesList11840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_columnParenthesesList11842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enableSpecification_in_enableValidateSpecification11870 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_validateSpecification_in_enableValidateSpecification11872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enforcedSpecification_in_enableValidateSpecification11881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ENABLE_in_enableSpecification11908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DISABLE_in_enableSpecification11922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_VALIDATE_in_validateSpecification11955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NOVALIDATE_in_validateSpecification11969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ENFORCED_in_enforcedSpecification12002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NOT_in_enforcedSpecification12016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ENFORCED_in_enforcedSpecification12018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RELY_in_relySpecification12052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NORELY_in_relySpecification12067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CONSTRAINT_in_createConstraint12101 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_createConstraint12105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0080000000000000L});
    public static final BitSet FOLLOW_tableLevelConstraint_in_createConstraint12109 = new BitSet(new long[]{0x0000000000000002L,0x8010000000000000L,0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_constraintOptsCreate_in_createConstraint12111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CONSTRAINT_in_alterConstraintWithName12186 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_alterConstraintWithName12190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0080000000000000L});
    public static final BitSet FOLLOW_tableLevelConstraint_in_alterConstraintWithName12192 = new BitSet(new long[]{0x0000000000000002L,0x8010000000000000L,0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_constraintOptsAlter_in_alterConstraintWithName12194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pkUkConstraint_in_tableLevelConstraint12231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_checkConstraint_in_tableLevelConstraint12239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableConstraintType_in_pkUkConstraint12266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_columnParenthesesList_in_pkUkConstraint12270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CHECK_in_checkConstraint12310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_checkConstraint12312 = new BitSet(new long[]{0x7EEEDD8AFF001000L,0xB7DEEEBE562A6DBDL,0xDCAECF48C3F73FCEL,0xDB0717EDAFF7DD0FL,0x7BE197FFE3D75079L,0xBE56CEB8F5BFBDFFL,0x0003017243F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_expression_in_checkConstraint12314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_checkConstraint12316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CONSTRAINT_in_createForeignKey12356 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_createForeignKey12360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_KW_FOREIGN_in_createForeignKey12364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_KEY_in_createForeignKey12366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_columnParenthesesList_in_createForeignKey12370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_REFERENCES_in_createForeignKey12373 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_createForeignKey12377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_columnParenthesesList_in_createForeignKey12381 = new BitSet(new long[]{0x0000000000000002L,0x8010000000000000L,0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_constraintOptsCreate_in_createForeignKey12383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CONSTRAINT_in_alterForeignKeyWithName12476 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_alterForeignKeyWithName12480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_KW_FOREIGN_in_alterForeignKeyWithName12482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_KEY_in_alterForeignKeyWithName12484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_columnParenthesesList_in_alterForeignKeyWithName12488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_REFERENCES_in_alterForeignKeyWithName12491 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_alterForeignKeyWithName12495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_columnParenthesesList_in_alterForeignKeyWithName12499 = new BitSet(new long[]{0x0000000000000002L,0x8010000000000000L,0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_constraintOptsAlter_in_alterForeignKeyWithName12501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValues_in_skewedValueElement12564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValuePairList_in_skewedValueElement12573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList12600 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_skewedColumnValuePairList12603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList12605 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_LPAREN_in_skewedColumnValuePair12649 = new BitSet(new long[]{0x0000000002001000L,0x0000000206000000L,0x0000000000020000L,0x0000020000000000L,0x0000000000000000L,0x0000801800000000L,0x0001013000000000L});
    public static final BitSet FOLLOW_skewedColumnValues_in_skewedColumnValuePair12653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_skewedColumnValuePair12655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValue_in_skewedColumnValues12697 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_skewedColumnValues12700 = new BitSet(new long[]{0x0000000002001000L,0x0000000206000000L,0x0000000000020000L,0x0000020000000000L,0x0000000000000000L,0x0000801800000000L,0x0001013000000000L});
    public static final BitSet FOLLOW_skewedColumnValue_in_skewedColumnValues12702 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_constant_in_skewedColumnValue12746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValue_in_skewedValueLocationElement12779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedValueLocationElement12788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NULLS_in_nullOrdering12842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_KW_FIRST_in_nullOrdering12844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NULLS_in_nullOrdering12858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_KW_LAST_in_nullOrdering12860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_columnNameOrder12893 = new BitSet(new long[]{0x0000040000000002L,0x0000800000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_orderSpecification_in_columnNameOrder12897 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_nullOrdering_in_columnNameOrder12902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList13099 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_columnNameCommentList13102 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList13104 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_identifier_in_columnNameComment13144 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameComment13147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameComment13151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ASC_in_orderSpecificationRewrite13199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESC_in_orderSpecificationRewrite13213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_columnRefOrder13246 = new BitSet(new long[]{0x0000040000000002L,0x0000800000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_orderSpecificationRewrite_in_columnRefOrder13250 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_nullOrdering_in_columnRefOrder13255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_columnNameType13558 = new BitSet(new long[]{0x800E010000000000L,0x0200010600000000L,0x0020000001000000L,0x0000000000800000L,0x0000000000400000L,0x0040003800180040L,0x0000000000000200L});
    public static final BitSet FOLLOW_colType_in_columnNameType13560 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameType13563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameType13567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableConstraint_in_columnNameTypeOrConstraint13663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameTypeConstraint_in_columnNameTypeOrConstraint13675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createForeignKey_in_tableConstraint13706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createConstraint_in_tableConstraint13718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_columnNameTypeConstraint13749 = new BitSet(new long[]{0x800E010000000000L,0x0200010600000000L,0x0020000001000000L,0x0000000000800000L,0x0000000000400000L,0x0040003800180040L,0x0000000000000200L});
    public static final BitSet FOLLOW_colType_in_columnNameTypeConstraint13751 = new BitSet(new long[]{0x0000000000000002L,0x0000020000010101L,0x0000000000000000L,0x0000008000000000L,0x0000000008000800L,0x0080000000000000L});
    public static final BitSet FOLLOW_columnConstraint_in_columnNameTypeConstraint13753 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameTypeConstraint13758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameTypeConstraint13762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_foreignKeyConstraint_in_columnConstraint13826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colConstraint_in_columnConstraint13839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CONSTRAINT_in_foreignKeyConstraint13870 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_foreignKeyConstraint13874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_REFERENCES_in_foreignKeyConstraint13878 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_foreignKeyConstraint13882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_foreignKeyConstraint13884 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnName_in_foreignKeyConstraint13888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_foreignKeyConstraint13890 = new BitSet(new long[]{0x0000000000000002L,0x8010000000000000L,0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_constraintOptsCreate_in_foreignKeyConstraint13892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CONSTRAINT_in_colConstraint14000 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_colConstraint14004 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000001L,0x0000000000000000L,0x0000008000000000L,0x0000000000000800L,0x0080000000000000L});
    public static final BitSet FOLLOW_columnConstraintType_in_colConstraint14008 = new BitSet(new long[]{0x0000000000000002L,0x8010000000000000L,0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_constraintOptsCreate_in_colConstraint14010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterForeignKeyConstraint_in_alterColumnConstraint14088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterColConstraint_in_alterColumnConstraint14101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CONSTRAINT_in_alterForeignKeyConstraint14132 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_alterForeignKeyConstraint14136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_REFERENCES_in_alterForeignKeyConstraint14140 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_alterForeignKeyConstraint14144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_alterForeignKeyConstraint14146 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnName_in_alterForeignKeyConstraint14150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_alterForeignKeyConstraint14152 = new BitSet(new long[]{0x0000000000000002L,0x8010000000000000L,0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_constraintOptsAlter_in_alterForeignKeyConstraint14154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CONSTRAINT_in_alterColConstraint14262 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_alterColConstraint14266 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000001L,0x0000000000000000L,0x0000008000000000L,0x0000000000000800L,0x0080000000000000L});
    public static final BitSet FOLLOW_columnConstraintType_in_alterColConstraint14270 = new BitSet(new long[]{0x0000000000000002L,0x8010000000000000L,0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_constraintOptsAlter_in_alterColConstraint14272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NOT_in_columnConstraintType14337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_KW_NULL_in_columnConstraintType14339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DEFAULT_in_columnConstraintType14360 = new BitSet(new long[]{0x76EEDD8AFF001000L,0xB7DEEEBE562A6DBDL,0xDC2ECF48C1F63DCEL,0xDB07176DAFF7DD0FL,0x7BE197FFE3D75079L,0xBE56CEB8F5BFBDFFL,0x0001013003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_defaultVal_in_columnConstraintType14362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_checkConstraint_in_columnConstraintType14380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableConstraintType_in_columnConstraintType14388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_defaultVal14405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_in_defaultVal14413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_defaultVal14421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PRIMARY_in_tableConstraintType14438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_KEY_in_tableConstraintType14440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNIQUE_in_tableConstraintType14458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enableValidateSpecification_in_constraintOptsCreate14493 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_relySpecification_in_constraintOptsCreate14495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enableValidateSpecification_in_constraintOptsAlter14513 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_relySpecification_in_constraintOptsAlter14515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_columnNameColonType14545 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_in_columnNameColonType14547 = new BitSet(new long[]{0x800E010000000000L,0x0200010600000000L,0x0020000001000000L,0x0000000000800000L,0x0000000000400000L,0x0040003800180040L,0x0000000000000200L});
    public static final BitSet FOLLOW_colType_in_columnNameColonType14549 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameColonType14552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameColonType14556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_colType14640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colType_in_colTypeList14667 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_colTypeList14670 = new BitSet(new long[]{0x800E010000000000L,0x0200010600000000L,0x0020000001000000L,0x0000000000800000L,0x0000000000400000L,0x0040003800180040L,0x0000000000000200L});
    public static final BitSet FOLLOW_colType_in_colTypeList14672 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_primitiveType_in_type14700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_listType_in_type14708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_structType_in_type14716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mapType_in_type14724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unionType_in_type14732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TINYINT_in_primitiveType14754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SMALLINT_in_primitiveType14775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INT_in_primitiveType14795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BIGINT_in_primitiveType14820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BOOLEAN_in_primitiveType14842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FLOAT_in_primitiveType14863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REAL_in_primitiveType14886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DOUBLE_in_primitiveType14910 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_KW_PRECISION_in_primitiveType14912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATE_in_primitiveType14934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATETIME_in_primitiveType14958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TIMESTAMP_in_primitiveType14978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TIMESTAMPLOCALTZ_in_primitiveType14997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TIMESTAMP_in_primitiveType15019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_WITH_in_primitiveType15021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_KW_LOCAL_in_primitiveType15023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_KW_TIME_in_primitiveType15025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_ZONE_in_primitiveType15027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STRING_in_primitiveType15059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BINARY_in_primitiveType15081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DECIMAL_in_primitiveType15103 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_primitiveType15106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Number_in_primitiveType15110 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_primitiveType15113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Number_in_primitiveType15117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_primitiveType15121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_VARCHAR_in_primitiveType15145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_primitiveType15147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Number_in_primitiveType15151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_primitiveType15153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CHAR_in_primitiveType15178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_primitiveType15180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Number_in_primitiveType15184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_primitiveType15186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ARRAY_in_listType15230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_listType15232 = new BitSet(new long[]{0x800E010000000000L,0x0200010600000000L,0x0020000001000000L,0x0000000000800000L,0x0000000000400000L,0x0040003800180040L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_in_listType15234 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_listType15236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STRUCT_in_structType15273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_structType15275 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameColonTypeList_in_structType15277 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_structType15279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAP_in_mapType15314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_mapType15316 = new BitSet(new long[]{0x800E000000000000L,0x0200010600000000L,0x0020000001000000L,0x0000000000000000L,0x0000000000400000L,0x0000003800080040L,0x0000000000000200L});
    public static final BitSet FOLLOW_primitiveType_in_mapType15320 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_mapType15322 = new BitSet(new long[]{0x800E010000000000L,0x0200010600000000L,0x0020000001000000L,0x0000000000800000L,0x0000000000400000L,0x0040003800180040L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_in_mapType15326 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_mapType15328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNIONTYPE_in_unionType15371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_unionType15373 = new BitSet(new long[]{0x800E010000000000L,0x0200010600000000L,0x0020000001000000L,0x0000000000800000L,0x0000000000400000L,0x0040003800180040L,0x0000000000000200L});
    public static final BitSet FOLLOW_colTypeList_in_unionType15375 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_unionType15377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNION_in_setOperator15412 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_KW_ALL_in_setOperator15414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNION_in_setOperator15428 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_DISTINCT_in_setOperator15430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INTERSECT_in_setOperator15445 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_KW_ALL_in_setOperator15447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INTERSECT_in_setOperator15461 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_DISTINCT_in_setOperator15463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXCEPT_in_setOperator15478 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_KW_ALL_in_setOperator15480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXCEPT_in_setOperator15494 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_DISTINCT_in_setOperator15496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MINUS_in_setOperator15511 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_KW_ALL_in_setOperator15513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MINUS_in_setOperator15527 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_DISTINCT_in_setOperator15529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_withClause_in_queryStatementExpression15566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000100000000L,0x0000000000800000L,0x0400000004000000L,0x0000000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_queryStatementExpressionBody_in_queryStatementExpression15574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fromStatement_in_queryStatementExpressionBody15606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_regularBody_in_queryStatementExpressionBody15614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WITH_in_withClause15631 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_cteStatement_in_withClause15633 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_withClause15636 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_cteStatement_in_withClause15638 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_identifier_in_cteStatement15664 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_cteStatement15667 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameList_in_cteStatement15671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_cteStatement15673 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_KW_AS_in_cteStatement15677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_cteStatement15679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000100000000L,0x0000000000800000L,0x0400000004000000L,0x0000000000000000L,0x0000000040080080L});
    public static final BitSet FOLLOW_queryStatementExpression_in_cteStatement15681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_cteStatement15683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_singleFromStatement_in_fromStatement15710 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000010L,0x0000000040000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_setOperator_in_fromStatement15722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_singleFromStatement_in_fromStatement15726 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000010L,0x0000000040000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_fromClause_in_singleFromStatement15936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000000800000L,0x0400000004000000L});
    public static final BitSet FOLLOW_body_in_singleFromStatement15946 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0010000000000000L,0x0000000000800000L,0x0400000004000000L});
    public static final BitSet FOLLOW_insertClause_in_regularBody15983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0400000004000000L,0x0000000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_selectStatement_in_regularBody15995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectStatement_in_regularBody16019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_atomSelectStatement16039 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000A100000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000050000L});
    public static final BitSet FOLLOW_fromClause_in_atomSelectStatement16046 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000A000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000050000L});
    public static final BitSet FOLLOW_whereClause_in_atomSelectStatement16054 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000A000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_groupByClause_in_atomSelectStatement16062 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_havingClause_in_atomSelectStatement16070 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_window_clause_in_atomSelectStatement16078 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_qualifyClause_in_atomSelectStatement16086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_atomSelectStatement16168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0400000004000000L,0x0000000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_selectStatement_in_atomSelectStatement16171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_atomSelectStatement16173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_valuesSource_in_atomSelectStatement16184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomSelectStatement_in_selectStatement16204 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x0040000000000010L,0x0010000040000400L,0x0000000000000000L,0x0020000000000400L});
    public static final BitSet FOLLOW_setOpSelectStatement_in_selectStatement16211 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x0000000000000000L,0x0010000000000400L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_orderByClause_in_selectStatement16220 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_clusterByClause_in_selectStatement16228 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_distributeByClause_in_selectStatement16236 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_sortByClause_in_selectStatement16244 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_limitClause_in_selectStatement16252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_setOperator_in_setOpSelectStatement16517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0400000004000000L,0x0000000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_atomSelectStatement_in_setOpSelectStatement16521 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0040000000000010L,0x0000000040000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_withClause_in_selectStatementWithCTE17156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0400000004000000L,0x0000000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_selectStatement_in_selectStatementWithCTE17164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertClause_in_body17194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0400000004000000L});
    public static final BitSet FOLLOW_selectClause_in_body17199 = new BitSet(new long[]{0x0000000000000202L,0x0040000000000004L,0x000000A000000000L,0x0010000000000410L,0x0000000000008000L,0x0000000000000400L,0x0000000000050000L});
    public static final BitSet FOLLOW_lateralView_in_body17204 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x000000A000000000L,0x0010000000000400L,0x0000000000008000L,0x0000000000000400L,0x0000000000050000L});
    public static final BitSet FOLLOW_whereClause_in_body17210 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x000000A000000000L,0x0010000000000400L,0x0000000000008000L,0x0000000000000400L,0x0000000000040000L});
    public static final BitSet FOLLOW_groupByClause_in_body17216 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x0000008000000000L,0x0010000000000400L,0x0000000000008000L,0x0000000000000400L,0x0000000000040000L});
    public static final BitSet FOLLOW_havingClause_in_body17222 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x0000000000000000L,0x0010000000000400L,0x0000000000008000L,0x0000000000000400L,0x0000000000040000L});
    public static final BitSet FOLLOW_window_clause_in_body17228 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x0000000000000000L,0x0010000000000400L,0x0000000000008000L,0x0000000000000400L});
    public static final BitSet FOLLOW_qualifyClause_in_body17234 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x0000000000000000L,0x0010000000000400L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_orderByClause_in_body17240 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_clusterByClause_in_body17246 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_distributeByClause_in_body17252 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_sortByClause_in_body17258 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_limitClause_in_body17264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_body17360 = new BitSet(new long[]{0x0000000000000202L,0x0040000000000004L,0x000000A000000000L,0x0010000000000410L,0x0000000000008000L,0x0000000000000400L,0x0000000000050000L});
    public static final BitSet FOLLOW_lateralView_in_body17365 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x000000A000000000L,0x0010000000000400L,0x0000000000008000L,0x0000000000000400L,0x0000000000050000L});
    public static final BitSet FOLLOW_whereClause_in_body17371 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x000000A000000000L,0x0010000000000400L,0x0000000000008000L,0x0000000000000400L,0x0000000000040000L});
    public static final BitSet FOLLOW_groupByClause_in_body17377 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x0000008000000000L,0x0010000000000400L,0x0000000000008000L,0x0000000000000400L,0x0000000000040000L});
    public static final BitSet FOLLOW_havingClause_in_body17383 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x0000000000000000L,0x0010000000000400L,0x0000000000008000L,0x0000000000000400L,0x0000000000040000L});
    public static final BitSet FOLLOW_window_clause_in_body17389 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x0000000000000000L,0x0010000000000400L,0x0000000000008000L,0x0000000000000400L});
    public static final BitSet FOLLOW_qualifyClause_in_body17395 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x0000000000000000L,0x0010000000000400L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_orderByClause_in_body17401 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000004L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_clusterByClause_in_body17407 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_distributeByClause_in_body17413 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_sortByClause_in_body17419 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_limitClause_in_body17425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INSERT_in_insertClause17549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_OVERWRITE_in_insertClause17551 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_destination_in_insertClause17553 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_ifNotExists_in_insertClause17555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INSERT_in_insertClause17574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_INTO_in_insertClause17576 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F7BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_TABLE_in_insertClause17578 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_insertClause17581 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LPAREN_in_insertClause17584 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnNameList_in_insertClause17588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertClause17590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCAL_in_destination17646 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_DIRECTORY_in_destination17650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_destination17652 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_tableRowFormat_in_destination17654 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_tableFileFormat_in_destination17657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TABLE_in_destination17690 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_destination17692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LIMIT_in_limitClause17724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Number_in_limitClause17730 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_limitClause17732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Number_in_limitClause17738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LIMIT_in_limitClause17761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Number_in_limitClause17765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_OFFSET_in_limitClause17767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Number_in_limitClause17771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DELETE_in_deleteStatement17815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_KW_FROM_in_deleteStatement17817 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_deleteStatement17819 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_whereClause_in_deleteStatement17822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableOrColumn_in_columnAssignmentClause17857 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_EQUAL_in_columnAssignmentClause17859 = new BitSet(new long[]{0x7EEEDD8AFF001000L,0xB7DEEEBE562A6DBDL,0xDCAECF48C3F73DCEL,0xDB07176DAFF7DD0FL,0x7BE197FFE3D75079L,0xBE56CEB8F5BFBDFFL,0x0003017243F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_precedencePlusExpressionOrDefault_in_columnAssignmentClause17862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defaultValue_in_precedencePlusExpressionOrDefault17895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedencePlusExpression_in_precedencePlusExpressionOrDefault17903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_setColumnsClause17925 = new BitSet(new long[]{0x66E0DC8AFD000200L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnAssignmentClause_in_setColumnsClause17927 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_setColumnsClause17930 = new BitSet(new long[]{0x66E0DC8AFD000200L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_columnAssignmentClause_in_setColumnsClause17932 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_KW_UPDATE_in_updateStatement17974 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_updateStatement17976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_setColumnsClause_in_updateStatement17978 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_whereClause_in_updateStatement17980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_startTransactionStatement_in_sqlTransactionStatement18022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commitStatement_in_sqlTransactionStatement18027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollbackStatement_in_sqlTransactionStatement18032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_setAutoCommitStatement_in_sqlTransactionStatement18037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_START_in_startTransactionStatement18051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_KW_TRANSACTION_in_startTransactionStatement18053 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_transactionMode_in_startTransactionStatement18057 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_COMMA_in_startTransactionStatement18062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_transactionMode_in_startTransactionStatement18064 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_isolationLevel_in_transactionMode18095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_transactionAccessMode_in_transactionMode18101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_READ_in_transactionAccessMode18124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_KW_ONLY_in_transactionAccessMode18126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_READ_in_transactionAccessMode18136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_KW_WRITE_in_transactionAccessMode18138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ISOLATION_in_isolationLevel18157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_KW_LEVEL_in_isolationLevel18159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_levelOfIsolation_in_isolationLevel18161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SNAPSHOT_in_levelOfIsolation18186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMIT_in_commitStatement18205 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_KW_WORK_in_commitStatement18209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ROLLBACK_in_rollbackStatement18231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_KW_WORK_in_rollbackStatement18235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_setAutoCommitStatement18256 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_KW_AUTOCOMMIT_in_setAutoCommitStatement18258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_booleanValueTok_in_setAutoCommitStatement18260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ABORT_in_abortTransactionStatement18295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_KW_TRANSACTIONS_in_abortTransactionStatement18297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Number_in_abortTransactionStatement18301 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_ABORT_in_abortCompactionStatement18348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_KW_COMPACTIONS_in_abortCompactionStatement18350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Number_in_abortCompactionStatement18354 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_MERGE_in_mergeStatement18398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUERY_HINT_in_mergeStatement18400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_INTO_in_mergeStatement18403 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_tableName_in_mergeStatement18405 = new BitSet(new long[]{0x66E0DE8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D7BL,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_AS_in_mergeStatement18408 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F5BFBDBFL,0x0000000003F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_identifier_in_mergeStatement18411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_KW_USING_in_mergeStatement18415 = new BitSet(new long[]{0x66E0DC8AFD000000L,0xB5DEEEBC502A6DBDL,0xDC0ECB08C0F43DCEL,0xDB07156DAF77DD0FL,0x7BE197FFE3975079L,0xBE564EA0F7BFBDBFL,0x0000000043F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_joinSourcePart_in_mergeStatement18417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_KW_ON_in_mergeStatement18419 = new BitSet(new long[]{0x7EEEDD8AFF001000L,0xB7DEEEBE562A6DBDL,0xDCAECF48C3F73FCEL,0xDB0717EDAFF7DD0FL,0x7BE197FFE3D75079L,0xBE56CEB8F5BFBDFFL,0x0003017243F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_expression_in_mergeStatement18421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_whenClauses_in_mergeStatement18423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whenMatchedAndClause_in_whenClauses18472 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_whenMatchedThenClause_in_whenClauses18474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_whenNotMatchedClause_in_whenClauses18478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WHEN_in_whenNotMatchedClause18505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_KW_NOT_in_whenNotMatchedClause18507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_MATCHED_in_whenNotMatchedClause18509 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_KW_AND_in_whenNotMatchedClause18512 = new BitSet(new long[]{0x7EEEDD8AFF001000L,0xB7DEEEBE562A6DBDL,0xDCAECF48C3F73FCEL,0xDB0717EDAFF7DD0FL,0x7BE197FFE3D75079L,0xBE56CEB8F5BFBDFFL,0x0003017243F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_expression_in_whenNotMatchedClause18514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_KW_THEN_in_whenNotMatchedClause18518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_INSERT_in_whenNotMatchedClause18520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000080L});
    public static final BitSet FOLLOW_columnParenthesesList_in_whenNotMatchedClause18525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_VALUES_in_whenNotMatchedClause18529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_valueRowConstructor_in_whenNotMatchedClause18531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WHEN_in_whenMatchedAndClause18578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_MATCHED_in_whenMatchedAndClause18580 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_KW_AND_in_whenMatchedAndClause18582 = new BitSet(new long[]{0x7EEEDD8AFF001000L,0xB7DEEEBE562A6DBDL,0xDCAECF48C3F73FCEL,0xDB0717EDAFF7DD0FL,0x7BE197FFE3D75079L,0xBE56CEB8F5BFBDFFL,0x0003017243F27D73L,0x0000000002000000L,0x0000000000000200L,0x1000000000000010L,0x0000004040000001L,0x0002000000000000L});
    public static final BitSet FOLLOW_expression_in_whenMatchedAndClause18584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_KW_THEN_in_whenMatchedAndClause18586 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_updateOrDelete_in_whenMatchedAndClause18588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WHEN_in_whenMatchedThenClause18626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_MATCHED_in_whenMatchedThenClause18628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_KW_THEN_in_whenMatchedThenClause18630 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_updateOrDelete_in_whenMatchedThenClause18632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UPDATE_in_updateOrDelete18661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_setColumnsClause_in_updateOrDelete18663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DELETE_in_updateOrDelete18681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_KILL_in_killQueryStatement18713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_QUERY_in_killQueryStatement18715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_killQueryStatement18719 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_COMPACT_ID_in_compactionId18750 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_EQUAL_in_compactionId18752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Number_in_compactionId18756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_POOL_in_compactionPool18777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_compactionPool18781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TYPE_in_compactionType18802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_compactionType18806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STATUS_in_compactionStatus18827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_compactionStatus18831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grantPrivileges_in_synpred1_HiveParser2597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_revokePrivileges_in_synpred2_HiveParser2611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ELEM_TYPE_in_synpred3_HiveParser3906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_KEY_TYPE_in_synpred4_HiveParser3922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_VALUE_TYPE_in_synpred5_HiveParser3938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATACONNECTOR_in_synpred7_HiveParser4145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_synpred8_HiveParser4186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMPUTE_in_synpred10_HiveParser4339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CACHE_in_synpred11_HiveParser4467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMPACT_ID_in_synpred14_HiveParser5166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALL_in_synpred16_HiveParser6266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NONE_in_synpred17_HiveParser6297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALL_in_synpred18_HiveParser6471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_storedAsDirs_in_synpred19_HiveParser10201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_synpred20_HiveParser11182 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_KW_AS_in_synpred20_HiveParser11184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_INPUTFORMAT_in_synpred20_HiveParser11186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ELEM_TYPE_in_synpred21_HiveParser11735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_KEY_TYPE_in_synpred22_HiveParser11745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_VALUE_TYPE_in_synpred23_HiveParser11755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DEFAULT_in_synpred24_HiveParser17883 = new BitSet(new long[]{0xFFFFFFFFFFFEFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000003FFFFFFFL});
    public static final BitSet FOLLOW_set_in_synpred24_HiveParser17885 = new BitSet(new long[]{0x0000000000000002L});

}